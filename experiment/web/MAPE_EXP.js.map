{"version":3,"sources":["/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/memory","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/string","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/new","source/web/../MapElitesGP_Config.h","../../alex_empirical/source/web/Widget.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/sstream","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/istream","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/ios","../../alex_empirical/source/web/../Evolve/../data/../base/assert.h","../../alex_empirical/source/web/Font.h","../../alex_empirical/source/tools/string_utils.h","../../alex_empirical/source/web/Style.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/streambuf","../../alex_empirical/source/web/Div.h","../../alex_empirical/source/web/Selector.h","../../alex_empirical/source/web/JSWrap.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/functional","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/vector","../../alex_empirical/source/base/vector.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/tuple","source/web/MAPE_EXP-web.cc","../../alex_empirical/source/Evolve/World.h","../../alex_empirical/source/hardware/../tools/math.h","../../alex_empirical/source/web/Canvas.h","../../alex_empirical/source/hardware/AvidaGP.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/__hash_table","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/ostream","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/__locale","../../alex_empirical/source/web/emfunctions.h","../../alex_empirical/source/web/Button.h","../../alex_empirical/source/base/array.h","../../alex_empirical/source/hardware/../base/Ptr.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/typeinfo","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/type_traits","source/web/../MapElitesScopeGP_World.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/__functional_base","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/__tree","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/map","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/utility","../../alex_empirical/source/web/../Evolve/../data/Trait.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/algorithm","../../alex_empirical/source/web/../tools/DynamicString.h","../../alex_empirical/source/web/Attributes.h","../../alex_empirical/source/web/Listeners.h","../../alex_empirical/source/web/CanvasShape.h","../../alex_empirical/source/web/CanvasAction.h","../../alex_empirical/source/web/../geometry/Point2D.h","../../alex_empirical/source/config/config.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/__split_buffer","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/unordered_set","../../alex_empirical/source/web/Document.h","../../alex_empirical/source/web/Text.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/stdexcept","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/__string","../../alex_empirical/source/web/WidgetExtras.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/iterator","../../alex_empirical/source/web/../Evolve/World_structure.h","../../alex_empirical/source/web/../Evolve/World_reflect.h","../../alex_empirical/source/web/../Evolve/Systematics.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/unordered_map","../../alex_empirical/source/web/../Evolve/../data/DataNode.h","../../alex_empirical/source/web/../geometry/../tools/alert.h","../../alex_empirical/source/tools/stats.h","../../alex_empirical/source/web/../Evolve/../control/Signal.h","../../alex_empirical/source/web/../Evolve/../data/../tools/FunctionSet.h","../../alex_empirical/source/web/init.h","../../alex_empirical/source/web/../tools/tuple_utils.h","../../alex_empirical/source/web/TextArea.h","../../alex_empirical/source/web/../Evolve/../control/SignalControl.h","source/web/../TestcaseSet.h","../../alex_empirical/source/web/../control/ActionManager.h","../../alex_empirical/source/web/../control/SignalManager.h","../../alex_empirical/source/web/../Evolve/../data/DataManager.h","../../alex_empirical/source/web/../control/Action.h","../../alex_empirical/source/web/../tools/alert.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/fstream","../../alex_empirical/source/web/../geometry/../tools/mem_track.h","../../alex_empirical/source/tools/Random.h","../../alex_empirical/source/hardware/InstLib.h","/home/emily/repos/emsdk/emscripten/1.37.38/system/include/libcxx/iosfwd","../../alex_empirical/source/hardware/AvidaCPU_InstLib.h","../../alex_empirical/source/web/events.h","../../alex_empirical/source/web/color_map.h"],"names":[],"mappingspEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AH0pEA;AAAA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AE7/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AH0pEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;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;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;;;;;;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;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ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AmBn2CA;ApBggEA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AmBn2CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;ApB+/DA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AmBl2CA;ApB+/DA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AmBl2CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;ApB8/DA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AmBj2CA;ApB8/DA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AmBj2CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;ApB6/DA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AD6pBA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;ADkjCA;AAPA;AAVA;;;AA0QA;AACA;AAAA;AmBh2CA;ApB6/DA;AAAA;AAAA;ACrpBA;;AAxBA;;;AA5RA;;;AAiFA;ACjlCA;A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;;;;AesSA;;;;;;;;;;;;;;;AqB5pBA;AMh0BA;;;;;A1Ck9CA;;;;;;;;;AwBrMA;;;;;;;;;;APzpCA;;;;;;;;AFkrDA;;;;;;;AfpVA;;;;;;AAAA;;AA5RA;;;AAkDA;;;;;;;;AEnwCA;;AF6+CA;;;AA5RA;;;;;;;AoCrfA;;;;;;;;AA+HA;A1B/zBA;;;;;;;AVi+CA;AAQA;;;;;;AmC7zBA;ApC09CA;AoCpuBA;;;;;;AnCuEA;;;AAtBA;;;;;AAcA;AE7/CA;AAAA;;;;;;;AKmIA;AAAA;;AAAA;AkBk2BA;AAAA;;;;;;;;;;;;;;ATjjBA;AAAA;;;;AhBykCA;;;;;;;;;AA5SA;;;AAiFA;;;;;;;AGlyBA;;;;;;;;;;AMjCA;;;;;AN8FA;AAAA;AAAA;AACA;;;;;;;;;A4EveA;;AAAA;;;;;;;;A5CinBA;ApC09CA;AoCpuBA;;;;;;AQv0CA;AAAA;AAAA;AAAA;;;;;;ARilBA;ApC09CA;AoCpuBA;;;;;;ApBmYA;;AACA;;;AAEA;;;;;;;;AoB5nCA;ApC09CA;AoCpuBA;;;;;;AHu4FA;AenwHA;;;AAfA;;AACA;;;;;;AZoJA;ApC09CA;AoCpuBA;;;;;;AlB/3CA;AAAA;AAAA;AAAA;;;;;;;;;;;Abk0BA;AAAA;AAprBA;AL68DA;;;;;AgBzVA;;AACA;;;AAEA;;;;;;;;;;;;;;;;;;;;;AfxkBA;;AAgQA;;;AAhBA;;;;;;;;AA3RA;;AChgCA;;;;;;;;;;;;;AD2iCA;;;AAgQA;;;;;;;;;;;;;;;AAbA;;;;;;;;;;;;;;;;;;;;;A8Cr3CA;;;;;;;;;ATiMA;AAAA;;;;;;;ArCs5BA;;;;;;;AY1nCA;AACA;AAAA;;;;;A+BnDA;AAAA;AAAA;AAAA;;;;;;ArBqEA;;;;;;;AUmlIA;;;;;;;A7BjoHA;AAAA;AAAA;AACA;;;;;;AH+rBA;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;;A0E3rBA;A3CxaA;;AAAA;;A2C2aA;;;;;;A1Em5BA;;;;;;;AAhBA;;AA5RA;;;;;;AA4SA;AAQA;AAxBA;;;;;;;AAgBA;;;;;;;AiC/zCA;AAAA;AAGA;;;;;;;ArBPA;AACA;;;;;;;;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AA2NA;;;;;;;AA3NA;ACjlCA;AD2iCA;;;;;;;;;;;;;;;;;;;;AA3CA;;;;;;ADy8BA;AC9qBA;;;;;;;AsBx7CA;;;;;;AAAA;;;;;;AvBsmEA;ACrpBA;;;;;;;AAxBA;;;;;;;;;;;AA3MA;;;;;;;;;AA2MA;;;;;;;;;;;;;;;;;;;;AAjPA;;;;;;;AAyBA;;AAo8BA;;AQloEA;;;;;;;;;;A4CwIA;;;;;ANzGA;;;;;A9C2lCA;AAiFA;;;;;;AA2NA;AAAA;AAQA;;;;;AqCttCA;AAAA;;;;;;ArC8rCA;;AA5RA;AAAA;;;;;;AG37BA;;;;;;;;;A2C7JA;;;;;;AACA;;;;;;A9CkoCA;;;;;;AoDniCA;;;;;;;ArC0/CA;AA9QA;;;;;;A+BjxCA;;;;;;A9Cy0CA;AE7/CA;AAAA;;;;;AF6/CA;AE7/CA;AAAA;;;;;;;;;;;;AoB+GA;;;;;;;;AtBg4CA;AA9RA;;;;;;;;;AAAA;;;;;;AgBrRA;AAAA;AA1UA;;;;;;AhBipBA;AAjBA;;;;;ACjiCA;;;;;ADilCA;;;;;;AewbA;;;;;Af0kDA;;;;;;;AGj6FA;;;;;;AAAA;;;;;A+DlQA;;;;;;;AlE22CA;;;;;;;;;;;;AACA;;AAEA;;;;AAnPA;AAAA;;;;;;AqCj8BA;AAAA;;;;;;;;;;;;;;;;;;ApC1GA;;;;;;AGgrBA;;;;;AJ8mBA;AA9RA;;;;;;AGzzBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AwBhUA;;;;;AZ87CA;;;;;AChmBA;;AAEA;;;;;;A0DzIA;AAAA;;;AAIA;;;AAAA;;;;;;;;;;;;;;;;;;;;;A1E0sBA;;;;;;AC5yCA;ADkjCA;AAjBA;AAAA;;;;;;;;AAjCA;;;AAiFA;;;;;;;;AG/iCA;;AAAA;;;;;;;AsBymBA;;;;;AvB51BA;AAAA;;;;;;;;;;;AmD4BA;;;;;AACA;;;;;;AlDoNA;;AAAA;;;;;;;;;AakLA;;;AjByvDA;;;;;;AE38DA;AD2iCA;;;;;;A+C56BA;;;;;;;;A/Ck9BA;;;;;A8E1qCA;AAAA;;;;;;A9E0nCA;;;;AAAA;;;;;;;;AAjCA;;;;;;;AD+zCA;;;;;;;AC9uCA;;;;;;AANA;;;;;;A8CrqCA;AAAA;;;;;;A9C0lCA;AAiFA;AAAA;;;;;;A8C5qCA;AAAA;;;;;;;A3C8NA;;;;;;;AH63BA;;;;;;;;ADulBA;;;;;ACtjBA;;;;;AA2QA;;;;;;AGzwCA;;AAAA;;;;;;;;AH69BA;AAAA;;;;;;;AiBlkCA;AAAA;;;;;;ACurCA;;;;;AlBrHA;;;;;AAAA;;;;;AAAA;;;;AChgCA;;;;;;;AcuoDA;AAAA;;;AACA;;;;;AhB2VA;;;;;;;AU1rDA;;;;;;;;;;;;;;;;;;;;;AOq9CA;AAAA;;;AACA;;;;;;Ab9tDA;;AAAA;;;;;;;;;;;;;;;;;;;AH2wCA;AAAA;;;;;;;AeuVA;AAAA;;;AAAA;;;;;;AAWA;AAAA;;;AACA;;;;;AKhjDA;;;;;;;ApB+rCA;;;;;;;;;;;AuB5sCA;;;;;;APwHA;AAAA;;;;;;;;AhBu1BA;;;;AgBh1BA;AACA;AjByvDA;AkBrhEA;;;;;;AjB0kCA;;;AAiFA;;;;;AqCn/BA;AAAA;;;;;AnC/SA;;;;;;;;;;;;;;;;A+BmFA;AAAA;AAOA;AAAA;;;;;AlCgkEA;;;;;;;;;;AsDpoEA;;;;;AACA;;;;;ArD2tCA;;AA0QA;;;;;;;;;;;;;;;;;;;;;;;AAbA;;;;;;AAAA;;;;;;AAAA;;AA9RA;;;;;AA2CA;AAVA;;;;;;AAUA;;;;;;AC3iCA;AD2iCA;;;;;;;AAiQA;AAAA;;;;;;;;;;;;;;;AS9hCA;;;;;;ATghCA;;;;;;;AA7PA;AA0QA;AACA;;;;;AAhBA;;;;;;;;;AA3PA;;;;;ACjiCA;;;;;;AD2iCA;AAVA;;;;;;;ADkZA;;;;;;AgDj1CA;;;;;;;;;;;;AAJA;;;;;;AKvGA;;;;;;ApCyIA;;;;;;;;;;;;;;;;;;AgBm/HA;;;;;;AhC/zFA;AAxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxPA;;;;;;;AD2XA;;;;;;AUtnCA;;;;;AFvXA;AAAA;;;;;AP8kCA;;;;;;;;AAAA;AAAA;;;;;;AW99BA;;;;;;;;;;A6B9KA;;;;;;;;;;;;;AMiDA;;;;Ab/BA;;;;;AjCqqCA;;;;;AAAA;;;;;AAVA;;;;;AO/lCA;;;;;AiC9EA;;;;;AxCw7CA;;;;;AA5SA;AAAA;;;;;;;;;;;;;;AA4SA;;AAQA;;;;;;;;;;AAtBA;;AA9RA;AAAA;;;;;;;;;;;;;;;;;;;;AAoTA;;;;;;AwCh8CA;;;;;;AxCw6CA;;;;;;;;;;;;;;;ACpxCA;;;;;;;;;;;;;AkC4RA;;;;;;;;;;;;;;;ApBg9BA;AhByuBA;AgBpdA;;;;;;AT/iCA;;;;;;ANilBA;;;;;ASlwBA;;;;;;AAAA;;;;;ATwvBA;;AA2QA;AAAA;;;;;;AE7/CA;;;;;;;;;;;;;;;AAAA;AH0pEA;;;;;;AAAA;ACrpBA;;;AAxBA;;;;;AA3PA;AAAA;;;AA2QA;;;;;;;;;;AGp+BA;;;;;;;;;AJioDA;;;;;;;;;;;;;;;;;;;;;;AC95BA;AAVA;;;;;;AAmRA;;;;;;AAzBA;;;;;A8Ct3CA;;;;;A1C2wBA;;;;;;AFj4BA;AAAA;;;;;AO0fA;;;;;;ATwyBA;;;;;AA2MA;;;;;;;;;;;;;;;;;;;AA3PA;;;;;;;AGj3BA;;;;;;AAAA;;;;;AHi6BA;;;;;AAAA;AAAA;;;;;AA/BA;AAPA;AAVA;;;;;;;;;ADw6BA;AC9qBA;AACA;;;;;;AAjPA;AAVA;AAAA;;;;;;;;;;AAUA;;;;AAAA;;;;;;;;;;;;AY1jCA;AACA;AACA;;;;AZ6gCA;;;;;;ADy8BA;AC7qBA;;;;;;AeyMA;;;;;;;;;;AfreA;;AAiFA;AA/BA;;;;;;AA0PA;AAAA;AE7/CA;;;;;;;;;;AiCqiCA;;;;A/BpKA;;;;;;AWokBA;AhByuBA;AgBpdA;;;;;;AhBo/BA;AAAA;AAAA;AAAA;;;;;;AyBtmBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AzB8nBA;AAAA;AAAA;AAAA;;;;;;AyBlnFA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AxBmkCA;;;;;;;;;;AAsTA;;;;AAgBA;AD6pBA;AC9qBA;AACA;;;;;;;;;;AAeA;;;;;AmCvdA;;;;;AAqtBA;AACA;;;;;;;;;;AnC1iBA;AAAA;;AAiFA;;;;;;;;;;;;ADm5BA;;AiB3vCA;;;;;;;AjB2vCA;;;;;;;ACn5BA;AA2NA;;;;;;AAhBA;;;;;;AA3MA;AAAA;;;;;;;AAhDA;;;;;;;AgB1TA;AAAA;AAvmBA;AjBo2DA;;;;;;;ACtsBA;;;;;;;A0E9oBA;;;;;;AAoBA;AAAA;;;;;ApE3MA;AACA;;;;;;;;;;;;ANk1BA;;;;;;;;;AA3NA;ACjlCA;ADkjCA;;;;;AiB3qCA;;;;;;;;;;;;;;AmCsKA;;;;ApD+vCA;;;;;AE7/CA;AAAA;AH0pEA;AC9qBA;;;;;AiB71CA;AAAA;;;;;;;AjBs3CA;AAzBA;;;;;AAzOA;AAPA;;;;;;;;;;;AAAA;AAVA;;AA0QA;;;;;;AAfA;;;;;;;;;;;A8C5nCA;;;;;AxBjOA;;;;;ApBhJA;;;;;A4C0HA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;A9C24CA;;;;;;;AErgDA;;;;;;AFmwCA;AAAA;AAPA;AAAA;;;;;AG7vBA;;;;;AHmvBA;;;;;;AemNA;AhByuBA;AgBpdA;;;;;Af9dA;AAAA;;;;;AiBzmCA;AAAA;;;;;AkBuXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AnCk/BA;AACA;;;;;;;AAhBA;AAEA;;;;;;AA7PA;AA0QA;;;;;;;;;AgB14BA;AAAA;;;;;;AGvlBA;;;;;;;;;;;;;;;;;;;AnButCA;;;;;;;AGr+BA;;AACA;;;;;;;;;;;;;;;;;;;;AJ44DA;;;;;ACz8BA;;;;;AiCpmCA;AAAA;;;;;AjBqTA;AACA;AjByvDA;AkBrhEA;;;;;;AjBq3CA;;;;;;AGrhCA;AAAA;;;;;;;;;;AHshCA;;;;;AA3QA;;;;;AAUA;AAAA;AAAA;AAAA;;;;;;AeyMA;AAqRA;;;;;;AArRA;AAqRA;;;;;;AArRA;AAqRA;;;;;;;;;;A+BjmDA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;A5CzHA;AAAA;;;;;AF4+CA;AACA;;;;;;;;AG92BA;;;;;;;AMnKA;;;;;;;;;;;;;;ATghCA;;;;;AmCvcA;;;;;AnC6PA;;;;;;AAAA;;;;;;ACjlCA;;;;;AD4yCA;AAAA;;;;;;;;;;;AAhBA;;;;;;;;;AmCxcA;;;;AAAA;;;;;;;;;;;;AnC6PA;AA/BA;AAPA;AAVA;;;;;AElvCA;AAAA;AAAA;AFqgDA;;;;;;AG9+BA;AAAA;;;;;AqCldA;;;;;;;;;;AxB6VA;AACA;AjByvDA;AkBrhEA;;;;;AjB0kCA;;AAiFA;AA/BA;;;;;;;;;AAyPA;;;;;;AW30CA;;;;;;;;;;;AmEzDA;AAAA;;;;;;;;A9Eo4CA;;;;;;;AA1NA;AAAA;AA/BA;AAPA;;;;;;;;;;;;AArEA;;;;;;;;AgBiXA;;;;;AqBzvCA;;;;;;;;;;;;;;;;;;;;;ArCo9BA;;;;;ADu5BA;;;;AC7qBA;;AAEA;;;;;;AA5OA;;;;;;AA4OA;;;;;;;AGvtCA;;;;;;AwCpKA;AAAA;;;;;;;;;;;;;;A1C6FA;;;;;AeiNA;AACA;AjByvDA;AkBrhEA;;;;;;;AlBmhEA;;;;;;;;;;ACx3BA;ACjlCA;ADkjCA;;;;;AAyBA;;;;;;;;;;AiB3oCA;;;;;;;A8B+LA;;;;;;;;;;;;;A/C6qCA;;;;;;;;;;;;;;A8E94CA;AAAA;;;;;A9E64CA;;;;;AgBxkCA;;;;;;;;AmBkdA;;;;;;;;;;;;;;;;;;;;;ApC22BA;;;;;;AiB34CA;;;;;;;;;;;;AhB2iBA;;;;;AA2mBA;;;;;;;;;;AyE1+CA;;;;;;;AzD81BA;;;AjBgwBA;;;;;;;;;;;;;AsCj0CA;;;;;;ArC68BA;;;;;;AIpvBA;;;;;;;;;;;AJmxBA;;;ASt0BA;;;;;;;;;;;;;;ATg0BA;;;;;;;;;;AqCt+BA;;;;;;;;;AtCowCA;AAAA;;;;;;;;;;;;;;;;;;;;AI5xCA;;;;;;Aai1CA;;;ACj5CA;;;;;;;;;AjB0/BA;;;;;;;;;;;;;;;;;;;;;;;;;AiBlkCA;AAAA;;;;;AoChIA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;ArDksCA;;;;;AAiCA;;;;;;;;;;AA2PA;;;;;;;;;;;;;;;AmCjiCA;;;;;AA8QA;;;;;ApCg8CA;;;;;AC7pBA;;;;;;AAAA;AD6pBA;ACrpBA;;;;;AAlQA;AAPA;AAAA;;;;;;AAgQA;AACA;AAAA;;;;;;AAAA;;;;;AA3QA;;;;;AAAA;AAAA;;;;;;AA2PA;;;;;;;AA3PA;;;;;;;AAAA;;;;;;A8C3nCA;AAAA;;;;;AIrFA;AAAA;AAAA;;;;;AlDgwCA;;;;;;;;;;;;;;;ACjlCA;;;;;;;AD2iCA;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AMjvBA;;;;;;;;;;;;A+B/MA;;;;;;ArBkuCA;;;;;AhB5PA;ACjlCA;;;;;;AiDpJA;AAAA;;;;;;;;;;;;;;;;;;;;;;AlDg8CA;;;;;;;;;;AA5SA;AAAA;;;;;;;;;;;;;;AA4SA;;;;;;;;;;;;;;;;;;;;;;AsDxEA;;AhCz2CA;AAAA;;;;;;;ANwWA;;;;;;;;;;;;;A0DgIA;;;;;A3E8jCA;;;;;;;;;AChVA;;;;;;;;AA0NA;AACA;;;;;;;ACpyCA;;;;;;;;;;;;;;ADmyCA;;;;AA1NA;AAAA;;;;;;;AA0NA;AACA;AAAA;;;;;;;;;;;AeuXA;;;;;;;;;;;;;;;;;;;;AfjnBA;;;;;AA0PA;;;;;;;;;AuBhnCA;;;;;;;;;;;;;A2B5UA;AACA;;;;;AlDgrCA;;;;;ADw6BA;;;;;ACz8BA;AAAA;;AAiFA;;;;;;;;;;;;;;;;Ae0PA;;;;;Af3UA;;;AAiFA;;;;;;AMznBA;;;;;;;;;;;ANmlBA;AAAA;;;;;;;;;;;;;;;;;;;;;;AS9pCA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;AQiDA;AAAA;;;;;;;;;;;;;;;;;;;;AhBkEA;ADkjCA;;;;;AiBlnCA;;;;;;AjBimCA;;;;;;ASppCA;;;;;;;;;;AP9FA;;;;;;AAAA;AAAA;AAAA;;;;;;;;AmC+SA;;;;;AAAA;;;;;ArC8sCA;;;;;A2Cl4CA;AAAA;AAAA;;;;A3Ck3CA;;AAEA;;;;;;AAcA;AAAA;;;;;;;;;;;;;;AyCt+CA;;;;;;;;;;;AzC2tCA;;;;;;;;;;AA0PA;;;;;;;;;;;;;AAgBA;AAAA;;;;;;;AA1QA;;;;;;AA2QA;;;;;AAjOA;;;;;AiB7oCA;AAAA;;;;;;AjB82CA;;;;;;;;;;;AA5SA;;;;;;AA4SA;AD6pBA;AC9qBA;;;;;;;AoDnxCA;;AAAA;;;;;;;;;;;;;AZ5LA;;;;;;;;;;;;;AvCoLA;;;;;;ADkjCA;AAPA;AAVA;;;;;AA2QA;;;;;AAAA;;;;;AD6pBA;;;;;;;;;;;;;;ACx6BA;;;;;;;;;;;;;;;;;;;AElvCA;AAAA;;;;;AFkyCA;;;;;AA2NA;AE7/CA;AAAA;;;;;;;;;;;;;AF6/CA;;;;;;;;;;AD6pBA;;;;AC7pBA;;;;A0Cv+CA;;;;;AhCCA;;;;;;AgE6iBA;;;;;;;;;;;;A1EwrBA;;;;;;;;;;;;;AAVA;;;;;AA2PA;;;;;AA3MA;;;;;AAhDA;;;;;AGx8BA;;;;;;;;;;;;;;;;;;;;;;;;;;AauvCA;;;;;;AhB/SA;;;;;;;;;ADiYA;;;;;A+CnwCA;;;;;;AHrQA;AAAA;AAAA;;;;;;;;;A3C05CA;;;;;;;;;AS3gCA;;;;;AT2gCA;;;;;;A6Ch/CA;AAAA;;;;;;;;AzC2NA;;AKqOA;;AAEA;;;;ARtQA;;;;;;AD2xCA;;;;;AS/jCA;;;;;;;;;;;AAPA;;;;;;;;;;;;;;;;;A0B1EA;AAAA;;;;;;AAmsDA;;;;;;AlBv5DA;AAAA;;;;;;AbyvBA;AC1sBA;;;;AL80CA;AAzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AAAA;;;;;;AAAA;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AE7/CA;;;;AFqgDA;;;;;;ASziCA;;;;;ATuyBA;;;;;AA0PA;AAAA;;;;;;;;;;;;;;;;;AmCpgCA;AAAA;;;;;ACu1BA;ADtfA;;;;;;;;;ACCA;;;;;;;;;AK9xBA;;;;AzCg8CA;;;;AAjQA;;;;AGnuBA;AAAA;;;;;AHmuBA;AAAA;;;;;;;;;;;;;;;;AA3CA;;;;;;;;;;;;;AA4SA;;;;;AYvtCA;;;;;AuB9NA;;;;;;;;;;;AnC0tCA;AAAA;;;;;AAjFA;;;;;;;;;;;;;AAoTA;;;;;;;;;;;AATA;;;;AACA;;;;AAAA;;;;;AE7/CA;;;;;;AF4+CA;;;;;;;;;;;;;;;AA3RA;AAAA;;;;;AsB5rCA;AAAA;;;;AtB4rCA;AAAA;;;;;AA8RA;;;;;;;;;;;AqDh+CA;;;;;;;;;;;A5C6cA;;;;;;;AAAA;;;;;;;;Ac7SA;;;;AR0lDA;;;;;;AE5pDA;AAAA;;;;;;A6CEA;;;;;;AvDoBA;;;;;AUuDA;;;;;Ad+VA;AAAA;;;;;;;;;;;A+D5aA;;;;;;A/DHA;;;;;;;;;;AHwoCA;AAAA;;;;;;;;;;;;;;;AElvCA;;;;;AF6/CA;;;;;AD6pBA;;;;;AC93BA;;;;;;;;;AAiOA;;;;;;;;;;ASjiCA;;;;;AN6DA;AAAA;;;;;;ASlQA;;;;;;;;;;AT8QA;AACA;;;;;AWvGA;;;;;;;;;;;;;;;AdkxBA;;;;;;;;;;;;AeoPA;AAqRA;;;;;;AArRA;AAqRA;;;;;;;;;;;;;;AVpiDA;;;;AyC2LA;;;;A7ChKA;;;;AgC3EA;;;;;AjCu2CA;;;;;;;;;;AYjuCA;;;;;;AZy+BA;;AA9DA;;AA8DA;;;;;AegNA;AAqRA;;;;;;AArRA;AAqRA;;;;;;AArRA;AAqRA;;;;;;AArRA;AAqRA;;;;;;;;;;;AoBmUA;;;;;;;;;;;;;;;AY7sDA;;;;;A7ChVA;AAAA;;;;;;;;;;;;;;A4C+WA;;;;;;;;A1C8kBA;;;;;AJgjBA;;;;;;;;;;AADA;;;;;;;;;;AgBhkBA;;;;AD6wBA;;;;AmDxjDA;AAAA;;;;;ArDHA;AAAA;;;;;;;Ab+2CA;;;;;;;;;;AE7+CA;;;;;;;;AU4QA;;;;;AuBspBA;AnCqRA;;;;AA8FA;;;;;AG94BA;AAAA;;;;;AA9RA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Aa2wBA;;;;;AhB6VA;;;;AA2CA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;AItyBA;;;;AJq0BA;ACjlCA;;;;;;;;;;;AEwUA;AAAA;;;;;AHwrBA;;;;;;A4BrmCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;A7B8iEA;;;;AC7qBA;;;;AA5RA;;;;;;;;;;AA2SA;AACA;;;;;;AAhBA;;;;;;AAeA;;;;;;;;;;;AgB14BA;AAAA;;;;;;Ab5jBA;AACA;;;;AHqsCA;;;;;;;;;;;;;;AAVA;;;;;;AAUA;AAAA;;;;;;AAiQA;AAAA;;;;;AAdA;;;;;AGt9BA;AAAA;;;;;AmB9aA;AAAA;;;;;;;;;;;;;;;AvB+iEA;;;;ACz8BA;;;;AA2CA;;;;;AsB5oCA;;;;;AL+BA;AAAA;;;;;AjBmmCA;AAAA;;;;;AGztBA;AAAA;;;;;;;;;AAiBA;;;AD1iBA;AH0pEA;;;;;ACx3BA;;;;;;;;;;;;;;;AA/BA;;;;;AsBppCA;;;;;;AtB6oCA;AAVA;;;;;;;A6C5tCA;AAAA;;;;;;;;;;;;A9B+nDA;AAAA;;;;AfnaA;;;;;;;;;;;;AA2PA;;;;;;;;AAwBA;;;;Ae+TA;;;;AfvUA;AG3uCA;;;;;AH0tCA;AACA;;;;;AA3PA;;;;;;;AAiBA;AAPA;;;;AkDvrCA;AAAA;;;;;AtCuMA;AAAA;;;;;AZiuCA;;;;;;;;;;;;;;;;AAjPA;AAAA;;;;;;;;;;;AAaA;;;;AAxDA;AAAA;;;;;AAiFA;AAAA;;;;;;AA0NA;;;;;;;;;;;AArUA;AAAA;;;;;;;;AgBrkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AhBgrBA;AAAA;;;;;;;AqBjvCA;;;;;;;;;;ApBgKA;AAAA;;;ADilCA;ACjlCA;;;;;;;;AgBOA;;;;;;;;;;;AZo0CA;AAAA;;;;AM12CA;AAAA;;;;;;;;;;;;;;;;;AXilCA;;;;;;;;;AiBlnCA;;;;AVvBA;AAAA;AAAA;;;;APkoCA;AAAA;;;;;;;;;;;;AmBjnCA;;;;;;;;;;;;;;;;;;;;;AlBsEA;;;;;AD2xCA;;;;;AArnBA;;;;;AAwnBA;;;;;AAFA;;;;;;;;;;AWxwCA;AADA;;;;A+D0oBA;AAAA;;;;AxE92BA;;;;;Ac46BA;;;;AhBmkBA;;;;;AA9RA;;;;AAAA;;;;AiBhkCA;;;;;;;;;;AjBipCA;;;;;;;AA0MA;;;;;;;;;;;;;;;;;;;AAAA;;;;;AD8qBA;;;;;;;;;AI3pDA;;;;A2CjYA;;;;;A9CoqCA;;;;;ASxyBA;AAAA;;;;;AqCnYA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;A9Cs4CA;;;;;AAdA;;;;;;AiBv4CA;;;;;;;;;;AAKA;;;;;A6CDA;;;;;;;;;;;;;;;AhBWA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;A9Cs4CA;AAAA;;;;A8Er4CA;;;;;;;;;;;;;;;AJqlBA;;;;;;;;;;;;;A1CunHA;AACA;AjCjwEA;;;;;;;;ACj0BA;;;;;;;;;AAjBA;;;;;;A0EjaA;;;;A1E2qBA;;;;;;AACA;;;;;AAAA;AAAA;;;;;;;;;;;;;A+En7CA;;;;;;;;;;;;;;;;;;;A/E2pFA;;;;AgBzyDA;AuBxPA;;;;AvBlFA;AA06BA;;;;;;;;;AhBrWA;AAkFA;;;;;;AgB/WA;;;;;;;;;;;;;ADmpBA;;;;A2D/3BA;AAAA;;;;;;AAEA;;;;;AnDpIA;AAAA;;;;;AvBssBA;;;;;;;;;;;;;;AAgDA;;;;AAtCA;;;;;;;;;;;;;AAiQA;;;;;;;;;;;;;;;;;;;;;AAQA;AAzBA;;;;;;;;;;;;;ADgrBA;;;;;AC13BA;;;;;AA2NA;;;;;AAdA;;;;;AA7MA;;;;;;;;;;;;;AYluCA;AAAA;;;;;;;;;;;;;;ATgaA;;;;;;;;;AHkxBA;;;;;AA2PA;;;;;;AE7+CA;;;;;;;;;Ac46BA;;;;;;;;Af3tBA;;;;;;;;;;;AD2xCA;;;;;;;;;;;;;;;;;;;;;;;AGvoCA;;;Aa2rCA;AACA;;;;AAvmBA;AAAA;;;;;AiB5zBA;;;;;AjCoqCA;;;;;;;;ADw3BA;;;;;;;;A4C3iEA;AAAA;;;;;;;;;;;;;;;;A+B8ZA;AAAA;;;;;;;;;A1EquBA;;;;;;;;;AAjCA;AAAA;;;;AAiFA;;;;;;AW9jCA;;;;;AyC5BA;;;;;ApDuyCA;;;;;;AAAA;;;;;;ADsPA;AEphDA;;;;;;;;;;;;;;;;;AD8xCA;;;;;;;;;;;AAAA;;;;;;;;;AkD78CA;AAAA;;;;;A5CysBA;;;;;;;;;;;;;;;ANseA;AAAA;;;;;;;;;;;;;A0E7pBA;;;;;A1EwsBA;;;;;;;;AAsCA;;;;;;AcxiCA;;;;;AHZA;AAAA;;;;;;;;;;;AXm+BA;;;;;AAkDA;;;;AgE5uCA;AACA;;;;;;;ApB4BA;;;;;;;;;;;;;;;A5CwsCA;;;;AiDptCA;AAAA;;;;;ANgDA;AAAA;;;;;A3C0sCA;;;;;;;;ADw3BA;;;;;AAAA;;;;;;;;;AwBj7DA;;;;;AvBw+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;;AA+BA;;;;AOrpCA;;;;;;;;;;;;;;;;AmEsdA;AAAA;;;;;;;;;;;AtDxWA;;;;;;;;;;;;AlB3PA;AAAA;;;;;;A6CgFA;;;;;A7ChFA;AH0pEA;;;;;;;AKtnDA;;;;;;;;;;;;;;;;ADpCA;;;;Aa4aA;;;;AhBgVA;;;;AAgPA;;;;Ac5nCA;;;;;;;;;Ad4oCA;;;;;;;;;;;;;;;;;A0B1pBA;AAAA;;;;;;A0BxpBA;;;;;;;;ApDugCA;;;;;;;;AEjtCA;;;;;;;;AE+gBA;;;;AJs/BA;;;;AATA;AACA;;;;;;AG7/BA;;;;;;;;;;;ADhgBA;AAAA;;;;;;AF++CA;;;;;AWpvCA;;;;;;;;AKirBA;;;;;;;;AC3xBA;;;;;;;;;;;;;;;;AjB2mCA;AAAA;;;;;A0EzpBA;AAAA;;;;;A1E04BA;;;;;;;;;;AoDxwCA;;;;AH7LA;AAAA;;;;;;;;AjDu8CA;;;;;AA7PA;;;;;AAjCA;;;;;;;;;AiD9pCA;;;;;AjD08CA;;;;;;;;;;AYl0CA;;;;;;;;AZumCA;;;;;AA2NA;;;;;AA3NA;;;;;AAAA;;;;;;;;;AgBhrBA;;;;;AhB04BA;;;;;AmCqQA;;;;;AnClRA;;;;;;;;;;;;;AE/+CA;;;;;AF4vCA;;;;AC3iCA;;;;AD4yCA;;;;AAhBA;;;;AA1OA;;;;;AIjzBA;;;;AJ0hCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AgBhkBA;;;;;;;;;;;;;;;;;AMj0BA;AAAA;;;;;AtBsmCA;;;;;;;AuBziCA;;;;;;;;;;;;;;;;;;;;AnBytBA;;;;;;;;;;;;;;;;;AJ8mBA;AAAA;;;;;AC9xCA;;;;AgC1HA;;;;;;;;;AjCqqCA;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;AoB1iCA;;;;ApByiGA;;;;AmCzwCA;;;;;;;;;;AnBrcA;;;;;;;;AAvqBA;;;;AJnwBA;;;;AkCaA;;;;;;;;;;;;A3C4KA;AAAA;;;;;A+C7RA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AtCkMA;;;;AIymBA;;;;AbhWA;;;;;;ASpQA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AGm4CA;;;;;AmCzmDA;;;;;;;;;AtCoIA;;;;;AZq0CA;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;AAtUA;;;;;;;;;;;;;;;;;AAqEA;;;;;;;;;;;;AY1kCA;;;;;;;;AsC3IA;;;;;;;ACoLA;;;;AnDukCA;;;;;;;;;;;;;A0EpmBA;;;;A1E8jBA;;;;;;;;;AAgPA;;;;;;;;;;;;;;;;;;;;AD8qBA;;;;;;;;;A+CpiEA;;;;A9Cu4CA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAdA;;;;AAFA;;;;;AAjPA;;;;;AAsCA;;;;;;;;;;AiChmCA;;;;;;;;;AtByDA;;;;;A+DqsBA;;;;;;;;;;;;A1EyUA;;;;;;;;AEzwCA;;;;AFkvCA;;;;;AGh+BA;;;;;;AAnKA;;;;AD/GA;;;;;;;;;;;;AFitCA;;;;;;AA4RA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AwBulBA;;;;AAppCA;;;;;;;;AxB4UA;;;;;;;;AAVA;;;;;AAAA;;;;;AmBtoCA;;;;AJy1CA;;;;;ANh/BA;;;;;ATuyBA;;;;AgBhVA;;;;;;;;AhBgkBA;;;;AA1MA;;;;;;;;;AAjFA;;;;;AeoJA;;;;;;;;;AfhFA;;;;AD+5BA;;;;ACn+BA;;;;AA4SA;;;;AgBrkBA;;;;;;;;;;;;ACh1BA;;;;;;;;AjBopCA;;;;;;;;;;;AAmPA;;;;;;;;AuBt7CA;;;;AvB48CA;;;;AARA;;;;;;;;;;;;AAQA;;;;AAzQA;;;;AAiPA;;;;;;;;;AAjPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiQA;;;;;;;;;;;;;AA3QA;;;;AiB1oCA;;;;;;;;AmCyHA;;;;AnCvBA;;;;;;;;AjBugCA;;;;;;;;AoD9+BA;;;;ApBimIA;;;;AhCv1FA;;;;;;;;Aev1BA;;;;Af4lBA;;;;AAgDA;;;;AAtCA;;;;;;;;;;AAiQA;;;;AoD5yCA;;;;A7BxJA;;;;AvBo8CA;;;;AADA;;;;;;;;AAhQA;;;;AAgPA;;;;AACA;;;;A+C1rCA;;;;;;;;;;;;;;;;;;;;;AzB1NA;;;;;;;;;;;AHpEA;;;;;;;;;;;;;AK8FA;;;;;;;;AF3BA;;;;;;;;;;;;AtB0sCA;;;;;AmC71BA;;;;AlB9WA;;;;AjB2pCA;;;;;;;;AA2QA;;;;AAAA;;;;;AYt0CA;;;;AG8qCA;;;;;;;;;AZplCA;;;;AA5LA;;;;;;;;AH4nCA;;;;AAiCA;;;;;;;;;;;;;;;;AmB/uCA;;;;;;;;;;AnB0+CA;;;;;;;;A8C/2CA;;;;AAAA;;;;AAAA;;;;AAAA;;;;A5C9HA;;;;;;;;AF6+CA;;;;AA5RA;;;;AItvBA;;;;;AJ0iCA;AAAA;;;;AG5xCA;;;AgBzNA;;;;;;;;;ApB0oEA;;;;;;AkBj/DA;;;;AjBynCA;;;;;;;;;AAhDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AUprCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AkCFA;;;;ADvBA;;;;;;;;;;;;;;;AxCgPA;;;AGqZA;;;;;ANuiBA;;;;;;;;AiBtoCA;;;;;;;;A6BPA;;;;;;;;;A9BuiDA;;;;;;;;;ADuCA;;;;;;;;;;;;;;;;;;;;Af/YA;;;;;;;;;;;;;;;;;AA0PA;AAAA;;;AgB34BA;;;;;;;;;;;;;;;;;;;;;;;;;;;AhB23BA;;;;;;;;;;;AiBr0CA;;;;AjBu0CA;;;;;;;;AAtRA;;;;;;;;;;;;;AAgDA;;;;AAmPA;;;;;;;;;;;;;AA1NA;;;;;;;AAmOA;;;;;AApTA;;;;;;;;;;;AAiFA;;;;;;;;;;;;;;;;;A+Cn/BA;;;;;;;;;;;;A/Ck6BA;;;AAiFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AiB1nCA;;;;;;;AjB0nGA;;;;;;AIntFA;;;;;;;;;;AJ86BA","file":"web/MAPE_EXP.js","sourcesContent":["// -*- C++ -*-\n//===-------------------------- memory ------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_MEMORY\n#define _LIBCPP_MEMORY\n\n/*\n    memory synopsis\n\nnamespace std\n{\n\nstruct allocator_arg_t { };\nconstexpr allocator_arg_t allocator_arg = allocator_arg_t();\n\ntemplate <class T, class Alloc> struct uses_allocator;\n\ntemplate <class Ptr>\nstruct pointer_traits\n{\n    typedef Ptr pointer;\n    typedef <details> element_type;\n    typedef <details> difference_type;\n\n    template <class U> using rebind = <details>;\n\n    static pointer pointer_to(<details>);\n};\n\ntemplate <class T>\nstruct pointer_traits<T*>\n{\n    typedef T* pointer;\n    typedef T element_type;\n    typedef ptrdiff_t difference_type;\n\n    template <class U> using rebind = U*;\n\n    static pointer pointer_to(<details>) noexcept;\n};\n\ntemplate <class Alloc>\nstruct allocator_traits\n{\n    typedef Alloc                        allocator_type;\n    typedef typename allocator_type::value_type\n                                         value_type;\n\n    typedef Alloc::pointer | value_type* pointer;\n    typedef Alloc::const_pointer\n          | pointer_traits<pointer>::rebind<const value_type>\n                                         const_pointer;\n    typedef Alloc::void_pointer\n          | pointer_traits<pointer>::rebind<void>\n                                         void_pointer;\n    typedef Alloc::const_void_pointer\n          | pointer_traits<pointer>::rebind<const void>\n                                         const_void_pointer;\n    typedef Alloc::difference_type\n          | pointer_traits<pointer>::difference_type\n                                         difference_type;\n    typedef Alloc::size_type\n          | make_unsigned<difference_type>::type\n                                         size_type;\n    typedef Alloc::propagate_on_container_copy_assignment\n          | false_type                   propagate_on_container_copy_assignment;\n    typedef Alloc::propagate_on_container_move_assignment\n          | false_type                   propagate_on_container_move_assignment;\n    typedef Alloc::propagate_on_container_swap\n          | false_type                   propagate_on_container_swap;\n    typedef Alloc::is_always_equal\n          | is_empty                     is_always_equal;\n\n    template <class T> using rebind_alloc  = Alloc::rebind<U>::other | Alloc<T, Args...>;\n    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;\n\n    static pointer allocate(allocator_type& a, size_type n);\n    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint);\n\n    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept;\n\n    template <class T, class... Args>\n        static void construct(allocator_type& a, T* p, Args&&... args);\n\n    template <class T>\n        static void destroy(allocator_type& a, T* p);\n\n    static size_type max_size(const allocator_type& a); // noexcept in C++14\n\n    static allocator_type\n        select_on_container_copy_construction(const allocator_type& a);\n};\n\ntemplate <>\nclass allocator<void>\n{\npublic:\n    typedef void*                                 pointer;\n    typedef const void*                           const_pointer;\n    typedef void                                  value_type;\n\n    template <class _Up> struct rebind {typedef allocator<_Up> other;};\n};\n\ntemplate <class T>\nclass allocator\n{\npublic:\n    typedef size_t                                size_type;\n    typedef ptrdiff_t                             difference_type;\n    typedef T*                                    pointer;\n    typedef const T*                              const_pointer;\n    typedef typename add_lvalue_reference<T>::type       reference;\n    typedef typename add_lvalue_reference<const T>::type const_reference;\n    typedef T                                     value_type;\n\n    template <class U> struct rebind {typedef allocator<U> other;};\n\n    allocator() noexcept;\n    allocator(const allocator&) noexcept;\n    template <class U> allocator(const allocator<U>&) noexcept;\n    ~allocator();\n    pointer address(reference x) const noexcept;\n    const_pointer address(const_reference x) const noexcept;\n    pointer allocate(size_type, allocator<void>::const_pointer hint = 0);\n    void deallocate(pointer p, size_type n) noexcept;\n    size_type max_size() const noexcept;\n    template<class U, class... Args>\n        void construct(U* p, Args&&... args);\n    template <class U>\n        void destroy(U* p);\n};\n\ntemplate <class T, class U>\nbool operator==(const allocator<T>&, const allocator<U>&) noexcept;\n\ntemplate <class T, class U>\nbool operator!=(const allocator<T>&, const allocator<U>&) noexcept;\n\ntemplate <class OutputIterator, class T>\nclass raw_storage_iterator\n    : public iterator<output_iterator_tag,\n                      T,                               // purposefully not C++03\n                      ptrdiff_t,                       // purposefully not C++03\n                      T*,                              // purposefully not C++03\n                      raw_storage_iterator&>           // purposefully not C++03\n{\npublic:\n    explicit raw_storage_iterator(OutputIterator x);\n    raw_storage_iterator& operator*();\n    raw_storage_iterator& operator=(const T& element);\n    raw_storage_iterator& operator++();\n    raw_storage_iterator  operator++(int);\n};\n\ntemplate <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;\ntemplate <class T> void               return_temporary_buffer(T* p) noexcept;\n\ntemplate <class T> T* addressof(T& r) noexcept;\ntemplate <class T> T* addressof(const T&& r) noexcept = delete;\n\ntemplate <class InputIterator, class ForwardIterator>\nForwardIterator\nuninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);\n\ntemplate <class InputIterator, class Size, class ForwardIterator>\nForwardIterator\nuninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);\n\ntemplate <class ForwardIterator, class T>\nvoid uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);\n\ntemplate <class ForwardIterator, class Size, class T>\nForwardIterator\nuninitialized_fill_n(ForwardIterator first, Size n, const T& x);\n\ntemplate <class T>\nvoid destroy_at(T* location);\n\ntemplate <class ForwardIterator>\n void destroy(ForwardIterator first, ForwardIterator last);\n\ntemplate <class ForwardIterator, class Size>\n ForwardIterator destroy_n(ForwardIterator first, Size n);\n\ntemplate <class InputIterator, class ForwardIterator>\n ForwardIterator uninitialized_move(InputIterator first, InputIterator last, ForwardIterator result);\n\ntemplate <class InputIterator, class Size, class ForwardIterator>\n pair<InputIterator,ForwardIterator> uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);\n\ntemplate <class ForwardIterator>\n void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);\n\ntemplate <class ForwardIterator, class Size>\n ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);\n\ntemplate <class ForwardIterator>\n void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);\n\ntemplate <class ForwardIterator, class Size>\n ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);\n\ntemplate <class Y> struct auto_ptr_ref {};\n\ntemplate<class X>\nclass auto_ptr\n{\npublic:\n    typedef X element_type;\n\n    explicit auto_ptr(X* p =0) throw();\n    auto_ptr(auto_ptr&) throw();\n    template<class Y> auto_ptr(auto_ptr<Y>&) throw();\n    auto_ptr& operator=(auto_ptr&) throw();\n    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();\n    auto_ptr& operator=(auto_ptr_ref<X> r) throw();\n    ~auto_ptr() throw();\n\n    typename add_lvalue_reference<X>::type operator*() const throw();\n    X* operator->() const throw();\n    X* get() const throw();\n    X* release() throw();\n    void reset(X* p =0) throw();\n\n    auto_ptr(auto_ptr_ref<X>) throw();\n    template<class Y> operator auto_ptr_ref<Y>() throw();\n    template<class Y> operator auto_ptr<Y>() throw();\n};\n\ntemplate <class T>\nstruct default_delete\n{\n    constexpr default_delete() noexcept = default;\n    template <class U> default_delete(const default_delete<U>&) noexcept;\n\n    void operator()(T*) const noexcept;\n};\n\ntemplate <class T>\nstruct default_delete<T[]>\n{\n    constexpr default_delete() noexcept = default;\n    void operator()(T*) const noexcept;\n    template <class U> void operator()(U*) const = delete;\n};\n\ntemplate <class T, class D = default_delete<T>>\nclass unique_ptr\n{\npublic:\n    typedef see below pointer;\n    typedef T element_type;\n    typedef D deleter_type;\n\n    // constructors\n    constexpr unique_ptr() noexcept;\n    explicit unique_ptr(pointer p) noexcept;\n    unique_ptr(pointer p, see below d1) noexcept;\n    unique_ptr(pointer p, see below d2) noexcept;\n    unique_ptr(unique_ptr&& u) noexcept;\n    unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n    template <class U, class E>\n        unique_ptr(unique_ptr<U, E>&& u) noexcept;\n    template <class U>\n        unique_ptr(auto_ptr<U>&& u) noexcept;\n\n    // destructor\n    ~unique_ptr();\n\n    // assignment\n    unique_ptr& operator=(unique_ptr&& u) noexcept;\n    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;\n    unique_ptr& operator=(nullptr_t) noexcept;\n\n    // observers\n    typename add_lvalue_reference<T>::type operator*() const;\n    pointer operator->() const noexcept;\n    pointer get() const noexcept;\n    deleter_type& get_deleter() noexcept;\n    const deleter_type& get_deleter() const noexcept;\n    explicit operator bool() const noexcept;\n\n    // modifiers\n    pointer release() noexcept;\n    void reset(pointer p = pointer()) noexcept;\n    void swap(unique_ptr& u) noexcept;\n};\n\ntemplate <class T, class D>\nclass unique_ptr<T[], D>\n{\npublic:\n    typedef implementation-defined pointer;\n    typedef T element_type;\n    typedef D deleter_type;\n\n    // constructors\n    constexpr unique_ptr() noexcept;\n    explicit unique_ptr(pointer p) noexcept;\n    unique_ptr(pointer p, see below d) noexcept;\n    unique_ptr(pointer p, see below d) noexcept;\n    unique_ptr(unique_ptr&& u) noexcept;\n    unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n\n    // destructor\n    ~unique_ptr();\n\n    // assignment\n    unique_ptr& operator=(unique_ptr&& u) noexcept;\n    unique_ptr& operator=(nullptr_t) noexcept;\n\n    // observers\n    T& operator[](size_t i) const;\n    pointer get() const noexcept;\n    deleter_type& get_deleter() noexcept;\n    const deleter_type& get_deleter() const noexcept;\n    explicit operator bool() const noexcept;\n\n    // modifiers\n    pointer release() noexcept;\n    void reset(pointer p = pointer()) noexcept;\n    void reset(nullptr_t) noexcept;\n    template <class U> void reset(U) = delete;\n    void swap(unique_ptr& u) noexcept;\n};\n\ntemplate <class T, class D>\n    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;\n\ntemplate <class T1, class D1, class T2, class D2>\n    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);\ntemplate <class T1, class D1, class T2, class D2>\n    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);\ntemplate <class T1, class D1, class T2, class D2>\n    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);\ntemplate <class T1, class D1, class T2, class D2>\n    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);\ntemplate <class T1, class D1, class T2, class D2>\n    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);\ntemplate <class T1, class D1, class T2, class D2>\n    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);\n\ntemplate <class T, class D>\n    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;\ntemplate <class T, class D>\n    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;\ntemplate <class T, class D>\n    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;\ntemplate <class T, class D>\n    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;\n\ntemplate <class T, class D>\n    bool operator<(const unique_ptr<T, D>& x, nullptr_t);\ntemplate <class T, class D>\n    bool operator<(nullptr_t, const unique_ptr<T, D>& y);\ntemplate <class T, class D>\n    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);\ntemplate <class T, class D>\n    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);\ntemplate <class T, class D>\n    bool operator>(const unique_ptr<T, D>& x, nullptr_t);\ntemplate <class T, class D>\n    bool operator>(nullptr_t, const unique_ptr<T, D>& y);\ntemplate <class T, class D>\n    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);\ntemplate <class T, class D>\n    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);\n\nclass bad_weak_ptr\n    : public std::exception\n{\n    bad_weak_ptr() noexcept;\n};\n\ntemplate<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14\ntemplate<class T>                unique_ptr<T> make_unique(size_t n);           // C++14\ntemplate<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]\n\ntemplate<class T>\nclass shared_ptr\n{\npublic:\n    typedef T element_type;\n    typedef weak_ptr<T> weak_type; // C++17\n\n    // constructors:\n    constexpr shared_ptr() noexcept;\n    template<class Y> explicit shared_ptr(Y* p);\n    template<class Y, class D> shared_ptr(Y* p, D d);\n    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);\n    template <class D> shared_ptr(nullptr_t p, D d);\n    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);\n    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;\n    shared_ptr(const shared_ptr& r) noexcept;\n    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;\n    shared_ptr(shared_ptr&& r) noexcept;\n    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;\n    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);\n    template<class Y> shared_ptr(auto_ptr<Y>&& r);\n    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);\n    shared_ptr(nullptr_t) : shared_ptr() { }\n\n    // destructor:\n    ~shared_ptr();\n\n    // assignment:\n    shared_ptr& operator=(const shared_ptr& r) noexcept;\n    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;\n    shared_ptr& operator=(shared_ptr&& r) noexcept;\n    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);\n    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r);\n    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);\n\n    // modifiers:\n    void swap(shared_ptr& r) noexcept;\n    void reset() noexcept;\n    template<class Y> void reset(Y* p);\n    template<class Y, class D> void reset(Y* p, D d);\n    template<class Y, class D, class A> void reset(Y* p, D d, A a);\n\n    // observers:\n    T* get() const noexcept;\n    T& operator*() const noexcept;\n    T* operator->() const noexcept;\n    long use_count() const noexcept;\n    bool unique() const noexcept;\n    explicit operator bool() const noexcept;\n    template<class U> bool owner_before(shared_ptr<U> const& b) const;\n    template<class U> bool owner_before(weak_ptr<U> const& b) const;\n};\n\n// shared_ptr comparisons:\ntemplate<class T, class U>\n    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;\ntemplate<class T, class U>\n    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;\ntemplate<class T, class U>\n    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;\ntemplate<class T, class U>\n    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;\ntemplate<class T, class U>\n    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;\ntemplate<class T, class U>\n    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;\n\ntemplate <class T>\n    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;\ntemplate <class T>\n    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;\ntemplate <class T>\n    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;\ntemplate <class T>\n    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;\ntemplate <class T>\n    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;\ntemplate <class T>\nbool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;\ntemplate <class T>\n    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;\ntemplate <class T>\n    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;\ntemplate <class T>\n    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;\ntemplate <class T>\n    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;\ntemplate <class T>\n    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;\ntemplate <class T>\n    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;\n\n// shared_ptr specialized algorithms:\ntemplate<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;\n\n// shared_ptr casts:\ntemplate<class T, class U>\n    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;\ntemplate<class T, class U>\n    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;\ntemplate<class T, class U>\n    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;\n\n// shared_ptr I/O:\ntemplate<class E, class T, class Y>\n    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);\n\n// shared_ptr get_deleter:\ntemplate<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;\n\ntemplate<class T, class... Args>\n    shared_ptr<T> make_shared(Args&&... args);\ntemplate<class T, class A, class... Args>\n    shared_ptr<T> allocate_shared(const A& a, Args&&... args);\n\ntemplate<class T>\nclass weak_ptr\n{\npublic:\n    typedef T element_type;\n\n    // constructors\n    constexpr weak_ptr() noexcept;\n    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;\n    weak_ptr(weak_ptr const& r) noexcept;\n    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;\n    weak_ptr(weak_ptr&& r) noexcept;                      // C++14\n    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14\n\n    // destructor\n    ~weak_ptr();\n\n    // assignment\n    weak_ptr& operator=(weak_ptr const& r) noexcept;\n    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;\n    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;\n    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14\n    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14\n\n    // modifiers\n    void swap(weak_ptr& r) noexcept;\n    void reset() noexcept;\n\n    // observers\n    long use_count() const noexcept;\n    bool expired() const noexcept;\n    shared_ptr<T> lock() const noexcept;\n    template<class U> bool owner_before(shared_ptr<U> const& b) const;\n    template<class U> bool owner_before(weak_ptr<U> const& b) const;\n};\n\n// weak_ptr specialized algorithms:\ntemplate<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;\n\n// class owner_less:\ntemplate<class T> struct owner_less;\n\ntemplate<class T>\nstruct owner_less<shared_ptr<T>>\n    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>\n{\n    typedef bool result_type;\n    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const;\n    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const;\n    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const;\n};\n\ntemplate<class T>\nstruct owner_less<weak_ptr<T>>\n    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>\n{\n    typedef bool result_type;\n    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const;\n    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const;\n    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const;\n};\n\ntemplate<class T>\nclass enable_shared_from_this\n{\nprotected:\n    constexpr enable_shared_from_this() noexcept;\n    enable_shared_from_this(enable_shared_from_this const&) noexcept;\n    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;\n    ~enable_shared_from_this();\npublic:\n    shared_ptr<T> shared_from_this();\n    shared_ptr<T const> shared_from_this() const;\n};\n\ntemplate<class T>\n    bool atomic_is_lock_free(const shared_ptr<T>* p);\ntemplate<class T>\n    shared_ptr<T> atomic_load(const shared_ptr<T>* p);\ntemplate<class T>\n    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);\ntemplate<class T>\n    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);\ntemplate<class T>\n    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);\ntemplate<class T>\n    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);\ntemplate<class T>\n    shared_ptr<T>\n    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);\ntemplate<class T>\n    bool\n    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);\ntemplate<class T>\n    bool\n    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);\ntemplate<class T>\n    bool\n    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,\n                                          shared_ptr<T> w, memory_order success,\n                                          memory_order failure);\ntemplate<class T>\n    bool\n    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,\n                                            shared_ptr<T> w, memory_order success,\n                                            memory_order failure);\n// Hash support\ntemplate <class T> struct hash;\ntemplate <class T, class D> struct hash<unique_ptr<T, D> >;\ntemplate <class T> struct hash<shared_ptr<T> >;\n\n// Pointer safety\nenum class pointer_safety { relaxed, preferred, strict };\nvoid declare_reachable(void *p);\ntemplate <class T> T *undeclare_reachable(T *p);\nvoid declare_no_pointers(char *p, size_t n);\nvoid undeclare_no_pointers(char *p, size_t n);\npointer_safety get_pointer_safety() noexcept;\n\nvoid* align(size_t alignment, size_t size, void*& ptr, size_t& space);\n\n}  // std\n\n*/\n\n#include <__config>\n#include <type_traits>\n#include <typeinfo>\n#include <cstddef>\n#include <cstdint>\n#include <new>\n#include <utility>\n#include <limits>\n#include <iterator>\n#include <__functional_base>\n#include <iosfwd>\n#include <tuple>\n#include <stdexcept>\n#include <cstring>\n\n#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)\n#  include <atomic>\n#endif\n\n#include <__undef_min_max>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _ValueType>\ninline _LIBCPP_ALWAYS_INLINE\n_ValueType __libcpp_relaxed_load(_ValueType const* __value) {\n#if !defined(_LIBCPP_HAS_NO_THREADS) && \\\n    defined(__ATOMIC_RELAXED) &&        \\\n    (__has_builtin(__atomic_load_n) || _GNUC_VER >= 407)\n    return __atomic_load_n(__value, __ATOMIC_RELAXED);\n#else\n    return *__value;\n#endif\n}\n\ntemplate <class _ValueType>\ninline _LIBCPP_ALWAYS_INLINE\n_ValueType __libcpp_acquire_load(_ValueType const* __value) {\n#if !defined(_LIBCPP_HAS_NO_THREADS) && \\\n    defined(__ATOMIC_ACQUIRE) &&        \\\n    (__has_builtin(__atomic_load_n) || _GNUC_VER >= 407)\n    return __atomic_load_n(__value, __ATOMIC_ACQUIRE);\n#else\n    return *__value;\n#endif\n}\n\n// addressof moved to <type_traits>\n\ntemplate <class _Tp> class allocator;\n\ntemplate <>\nclass _LIBCPP_TEMPLATE_VIS allocator<void>\n{\npublic:\n    typedef void*             pointer;\n    typedef const void*       const_pointer;\n    typedef void              value_type;\n\n    template <class _Up> struct rebind {typedef allocator<_Up> other;};\n};\n\ntemplate <>\nclass _LIBCPP_TEMPLATE_VIS allocator<const void>\n{\npublic:\n    typedef const void*       pointer;\n    typedef const void*       const_pointer;\n    typedef const void        value_type;\n\n    template <class _Up> struct rebind {typedef allocator<_Up> other;};\n};\n\n// pointer_traits\n\ntemplate <class _Tp>\nstruct __has_element_type\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::element_type* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Ptr, bool = __has_element_type<_Ptr>::value>\nstruct __pointer_traits_element_type;\n\ntemplate <class _Ptr>\nstruct __pointer_traits_element_type<_Ptr, true>\n{\n    typedef typename _Ptr::element_type type;\n};\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <template <class, class...> class _Sp, class _Tp, class ..._Args>\nstruct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>\n{\n    typedef typename _Sp<_Tp, _Args...>::element_type type;\n};\n\ntemplate <template <class, class...> class _Sp, class _Tp, class ..._Args>\nstruct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>\n{\n    typedef _Tp type;\n};\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <template <class> class _Sp, class _Tp>\nstruct __pointer_traits_element_type<_Sp<_Tp>, true>\n{\n    typedef typename _Sp<_Tp>::element_type type;\n};\n\ntemplate <template <class> class _Sp, class _Tp>\nstruct __pointer_traits_element_type<_Sp<_Tp>, false>\n{\n    typedef _Tp type;\n};\n\ntemplate <template <class, class> class _Sp, class _Tp, class _A0>\nstruct __pointer_traits_element_type<_Sp<_Tp, _A0>, true>\n{\n    typedef typename _Sp<_Tp, _A0>::element_type type;\n};\n\ntemplate <template <class, class> class _Sp, class _Tp, class _A0>\nstruct __pointer_traits_element_type<_Sp<_Tp, _A0>, false>\n{\n    typedef _Tp type;\n};\n\ntemplate <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>\nstruct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, true>\n{\n    typedef typename _Sp<_Tp, _A0, _A1>::element_type type;\n};\n\ntemplate <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>\nstruct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, false>\n{\n    typedef _Tp type;\n};\n\ntemplate <template <class, class, class, class> class _Sp, class _Tp, class _A0,\n                                                           class _A1, class _A2>\nstruct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, true>\n{\n    typedef typename _Sp<_Tp, _A0, _A1, _A2>::element_type type;\n};\n\ntemplate <template <class, class, class, class> class _Sp, class _Tp, class _A0,\n                                                           class _A1, class _A2>\nstruct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, false>\n{\n    typedef _Tp type;\n};\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp>\nstruct __has_difference_type\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::difference_type* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Ptr, bool = __has_difference_type<_Ptr>::value>\nstruct __pointer_traits_difference_type\n{\n    typedef ptrdiff_t type;\n};\n\ntemplate <class _Ptr>\nstruct __pointer_traits_difference_type<_Ptr, true>\n{\n    typedef typename _Ptr::difference_type type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __has_rebind\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Xp> static __two __test(...);\n    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>\nstruct __pointer_traits_rebind\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename _Tp::template rebind<_Up> type;\n#else\n    typedef typename _Tp::template rebind<_Up>::other type;\n#endif\n};\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up> type;\n#else\n    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;\n#endif\n};\n\ntemplate <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>\n{\n    typedef _Sp<_Up, _Args...> type;\n};\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <template <class> class _Sp, class _Tp, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp>, _Up, true>\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename _Sp<_Tp>::template rebind<_Up> type;\n#else\n    typedef typename _Sp<_Tp>::template rebind<_Up>::other type;\n#endif\n};\n\ntemplate <template <class> class _Sp, class _Tp, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp>, _Up, false>\n{\n    typedef _Sp<_Up> type;\n};\n\ntemplate <template <class, class> class _Sp, class _Tp, class _A0, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, true>\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename _Sp<_Tp, _A0>::template rebind<_Up> type;\n#else\n    typedef typename _Sp<_Tp, _A0>::template rebind<_Up>::other type;\n#endif\n};\n\ntemplate <template <class, class> class _Sp, class _Tp, class _A0, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, false>\n{\n    typedef _Sp<_Up, _A0> type;\n};\n\ntemplate <template <class, class, class> class _Sp, class _Tp, class _A0,\n                                         class _A1, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, true>\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up> type;\n#else\n    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up>::other type;\n#endif\n};\n\ntemplate <template <class, class, class> class _Sp, class _Tp, class _A0,\n                                         class _A1, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, false>\n{\n    typedef _Sp<_Up, _A0, _A1> type;\n};\n\ntemplate <template <class, class, class, class> class _Sp, class _Tp, class _A0,\n                                                class _A1, class _A2, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, true>\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up> type;\n#else\n    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;\n#endif\n};\n\ntemplate <template <class, class, class, class> class _Sp, class _Tp, class _A0,\n                                                class _A1, class _A2, class _Up>\nstruct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, false>\n{\n    typedef _Sp<_Up, _A0, _A1, _A2> type;\n};\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Ptr>\nstruct _LIBCPP_TEMPLATE_VIS pointer_traits\n{\n    typedef _Ptr                                                     pointer;\n    typedef typename __pointer_traits_element_type<pointer>::type    element_type;\n    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;\n#else\n    template <class _Up> struct rebind\n        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};\n#endif  // _LIBCPP_CXX03_LANG\n\nprivate:\n    struct __nat {};\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    static pointer pointer_to(typename conditional<is_void<element_type>::value,\n                                           __nat, element_type>::type& __r)\n        {return pointer::pointer_to(__r);}\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS pointer_traits<_Tp*>\n{\n    typedef _Tp*      pointer;\n    typedef _Tp       element_type;\n    typedef ptrdiff_t difference_type;\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class _Up> using rebind = _Up*;\n#else\n    template <class _Up> struct rebind {typedef _Up* other;};\n#endif\n\nprivate:\n    struct __nat {};\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    static pointer pointer_to(typename conditional<is_void<element_type>::value,\n                                      __nat, element_type>::type& __r) _NOEXCEPT\n        {return _VSTD::addressof(__r);}\n};\n\ntemplate <class _From, class _To>\nstruct __rebind_pointer {\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename pointer_traits<_From>::template rebind<_To>        type;\n#else\n    typedef typename pointer_traits<_From>::template rebind<_To>::other type;\n#endif\n};\n\n// allocator_traits\n\nnamespace __has_pointer_type_imp\n{\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::pointer* = 0);\n}\n\ntemplate <class _Tp>\nstruct __has_pointer_type\n    : public integral_constant<bool, sizeof(__has_pointer_type_imp::__test<_Tp>(0)) == 1>\n{\n};\n\nnamespace __pointer_type_imp\n{\n\ntemplate <class _Tp, class _Dp, bool = __has_pointer_type<_Dp>::value>\nstruct __pointer_type\n{\n    typedef typename _Dp::pointer type;\n};\n\ntemplate <class _Tp, class _Dp>\nstruct __pointer_type<_Tp, _Dp, false>\n{\n    typedef _Tp* type;\n};\n\n}  // __pointer_type_imp\n\ntemplate <class _Tp, class _Dp>\nstruct __pointer_type\n{\n    typedef typename __pointer_type_imp::__pointer_type<_Tp, typename remove_reference<_Dp>::type>::type type;\n};\n\ntemplate <class _Tp>\nstruct __has_const_pointer\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::const_pointer* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>\nstruct __const_pointer\n{\n    typedef typename _Alloc::const_pointer type;\n};\n\ntemplate <class _Tp, class _Ptr, class _Alloc>\nstruct __const_pointer<_Tp, _Ptr, _Alloc, false>\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp> type;\n#else\n    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp>::other type;\n#endif\n};\n\ntemplate <class _Tp>\nstruct __has_void_pointer\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::void_pointer* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>\nstruct __void_pointer\n{\n    typedef typename _Alloc::void_pointer type;\n};\n\ntemplate <class _Ptr, class _Alloc>\nstruct __void_pointer<_Ptr, _Alloc, false>\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename pointer_traits<_Ptr>::template rebind<void> type;\n#else\n    typedef typename pointer_traits<_Ptr>::template rebind<void>::other type;\n#endif\n};\n\ntemplate <class _Tp>\nstruct __has_const_void_pointer\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::const_void_pointer* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>\nstruct __const_void_pointer\n{\n    typedef typename _Alloc::const_void_pointer type;\n};\n\ntemplate <class _Ptr, class _Alloc>\nstruct __const_void_pointer<_Ptr, _Alloc, false>\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename pointer_traits<_Ptr>::template rebind<const void> type;\n#else\n    typedef typename pointer_traits<_Ptr>::template rebind<const void>::other type;\n#endif\n};\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_Tp*\n__to_raw_pointer(_Tp* __p) _NOEXCEPT\n{\n    return __p;\n}\n\ntemplate <class _Pointer>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename pointer_traits<_Pointer>::element_type*\n__to_raw_pointer(_Pointer __p) _NOEXCEPT\n{\n    return _VSTD::__to_raw_pointer(__p.operator->());\n}\n\ntemplate <class _Tp>\nstruct __has_size_type\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::size_type* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>\nstruct __size_type\n{\n    typedef typename make_unsigned<_DiffType>::type type;\n};\n\ntemplate <class _Alloc, class _DiffType>\nstruct __size_type<_Alloc, _DiffType, true>\n{\n    typedef typename _Alloc::size_type type;\n};\n\ntemplate <class _Tp>\nstruct __has_propagate_on_container_copy_assignment\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::propagate_on_container_copy_assignment* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>\nstruct __propagate_on_container_copy_assignment\n{\n    typedef false_type type;\n};\n\ntemplate <class _Alloc>\nstruct __propagate_on_container_copy_assignment<_Alloc, true>\n{\n    typedef typename _Alloc::propagate_on_container_copy_assignment type;\n};\n\ntemplate <class _Tp>\nstruct __has_propagate_on_container_move_assignment\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::propagate_on_container_move_assignment* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>\nstruct __propagate_on_container_move_assignment\n{\n    typedef false_type type;\n};\n\ntemplate <class _Alloc>\nstruct __propagate_on_container_move_assignment<_Alloc, true>\n{\n    typedef typename _Alloc::propagate_on_container_move_assignment type;\n};\n\ntemplate <class _Tp>\nstruct __has_propagate_on_container_swap\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::propagate_on_container_swap* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>\nstruct __propagate_on_container_swap\n{\n    typedef false_type type;\n};\n\ntemplate <class _Alloc>\nstruct __propagate_on_container_swap<_Alloc, true>\n{\n    typedef typename _Alloc::propagate_on_container_swap type;\n};\n\ntemplate <class _Tp>\nstruct __has_is_always_equal\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::is_always_equal* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>\nstruct __is_always_equal\n{\n    typedef typename _VSTD::is_empty<_Alloc>::type type;\n};\n\ntemplate <class _Alloc>\nstruct __is_always_equal<_Alloc, true>\n{\n    typedef typename _Alloc::is_always_equal type;\n};\n\ntemplate <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>\nstruct __has_rebind_other\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Xp> static __two __test(...);\n    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>::other* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __has_rebind_other<_Tp, _Up, false>\n{\n    static const bool value = false;\n};\n\ntemplate <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>\nstruct __allocator_traits_rebind\n{\n    typedef typename _Tp::template rebind<_Up>::other type;\n};\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true>\n{\n    typedef typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other type;\n};\n\ntemplate <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false>\n{\n    typedef _Alloc<_Up, _Args...> type;\n};\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <template <class> class _Alloc, class _Tp, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp>, _Up, true>\n{\n    typedef typename _Alloc<_Tp>::template rebind<_Up>::other type;\n};\n\ntemplate <template <class> class _Alloc, class _Tp, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp>, _Up, false>\n{\n    typedef _Alloc<_Up> type;\n};\n\ntemplate <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, true>\n{\n    typedef typename _Alloc<_Tp, _A0>::template rebind<_Up>::other type;\n};\n\ntemplate <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, false>\n{\n    typedef _Alloc<_Up, _A0> type;\n};\n\ntemplate <template <class, class, class> class _Alloc, class _Tp, class _A0,\n                                         class _A1, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, true>\n{\n    typedef typename _Alloc<_Tp, _A0, _A1>::template rebind<_Up>::other type;\n};\n\ntemplate <template <class, class, class> class _Alloc, class _Tp, class _A0,\n                                         class _A1, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, false>\n{\n    typedef _Alloc<_Up, _A0, _A1> type;\n};\n\ntemplate <template <class, class, class, class> class _Alloc, class _Tp, class _A0,\n                                                class _A1, class _A2, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, true>\n{\n    typedef typename _Alloc<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;\n};\n\ntemplate <template <class, class, class, class> class _Alloc, class _Tp, class _A0,\n                                                class _A1, class _A2, class _Up>\nstruct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, false>\n{\n    typedef _Alloc<_Up, _A0, _A1, _A2> type;\n};\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Alloc, class _SizeType, class _ConstVoidPtr>\nauto\n__has_allocate_hint_test(_Alloc&& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)\n    -> decltype(__a.allocate(__sz, __p), true_type());\n\ntemplate <class _Alloc, class _SizeType, class _ConstVoidPtr>\nauto\n__has_allocate_hint_test(const _Alloc& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)\n    -> false_type;\n\ntemplate <class _Alloc, class _SizeType, class _ConstVoidPtr>\nstruct __has_allocate_hint\n    : integral_constant<bool,\n        is_same<\n            decltype(__has_allocate_hint_test(declval<_Alloc>(),\n                                          declval<_SizeType>(),\n                                          declval<_ConstVoidPtr>())),\n            true_type>::value>\n{\n};\n\n#else  // _LIBCPP_CXX03_LANG\n\ntemplate <class _Alloc, class _SizeType, class _ConstVoidPtr>\nstruct __has_allocate_hint\n    : true_type\n{\n};\n\n#endif  // _LIBCPP_CXX03_LANG\n\n#if !defined(_LIBCPP_CXX03_LANG)\n\ntemplate <class _Alloc, class _Tp, class ..._Args>\ndecltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Tp*>(),\n                                           _VSTD::declval<_Args>()...),\n                                           true_type())\n__has_construct_test(_Alloc&& __a, _Tp* __p, _Args&& ...__args);\n\ntemplate <class _Alloc, class _Pointer, class ..._Args>\nfalse_type\n__has_construct_test(const _Alloc& __a, _Pointer&& __p, _Args&& ...__args);\n\ntemplate <class _Alloc, class _Pointer, class ..._Args>\nstruct __has_construct\n    : integral_constant<bool,\n        is_same<\n            decltype(__has_construct_test(declval<_Alloc>(),\n                                          declval<_Pointer>(),\n                                          declval<_Args>()...)),\n            true_type>::value>\n{\n};\n\ntemplate <class _Alloc, class _Pointer>\nauto\n__has_destroy_test(_Alloc&& __a, _Pointer&& __p)\n    -> decltype(__a.destroy(__p), true_type());\n\ntemplate <class _Alloc, class _Pointer>\nauto\n__has_destroy_test(const _Alloc& __a, _Pointer&& __p)\n    -> false_type;\n\ntemplate <class _Alloc, class _Pointer>\nstruct __has_destroy\n    : integral_constant<bool,\n        is_same<\n            decltype(__has_destroy_test(declval<_Alloc>(),\n                                        declval<_Pointer>())),\n            true_type>::value>\n{\n};\n\ntemplate <class _Alloc>\nauto\n__has_max_size_test(_Alloc&& __a)\n    -> decltype(__a.max_size(), true_type());\n\ntemplate <class _Alloc>\nauto\n__has_max_size_test(const volatile _Alloc& __a)\n    -> false_type;\n\ntemplate <class _Alloc>\nstruct __has_max_size\n    : integral_constant<bool,\n        is_same<\n            decltype(__has_max_size_test(declval<_Alloc&>())),\n            true_type>::value>\n{\n};\n\ntemplate <class _Alloc>\nauto\n__has_select_on_container_copy_construction_test(_Alloc&& __a)\n    -> decltype(__a.select_on_container_copy_construction(), true_type());\n\ntemplate <class _Alloc>\nauto\n__has_select_on_container_copy_construction_test(const volatile _Alloc& __a)\n    -> false_type;\n\ntemplate <class _Alloc>\nstruct __has_select_on_container_copy_construction\n    : integral_constant<bool,\n        is_same<\n            decltype(__has_select_on_container_copy_construction_test(declval<_Alloc&>())),\n            true_type>::value>\n{\n};\n\n#else  // _LIBCPP_CXX03_LANG\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Alloc, class _Pointer, class ..._Args>\nstruct __has_construct\n    : false_type\n{\n};\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Alloc, class _Pointer, class _Args>\nstruct __has_construct\n    : false_type\n{\n};\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Alloc, class _Pointer>\nstruct __has_destroy\n    : false_type\n{\n};\n\ntemplate <class _Alloc>\nstruct __has_max_size\n    : true_type\n{\n};\n\ntemplate <class _Alloc>\nstruct __has_select_on_container_copy_construction\n    : false_type\n{\n};\n\n#endif  // _LIBCPP_CXX03_LANG\n\ntemplate <class _Alloc, class _Ptr, bool = __has_difference_type<_Alloc>::value>\nstruct __alloc_traits_difference_type\n{\n    typedef typename pointer_traits<_Ptr>::difference_type type;\n};\n\ntemplate <class _Alloc, class _Ptr>\nstruct __alloc_traits_difference_type<_Alloc, _Ptr, true>\n{\n    typedef typename _Alloc::difference_type type;\n};\n\ntemplate <class _Alloc>\nstruct _LIBCPP_TEMPLATE_VIS allocator_traits\n{\n    typedef _Alloc                              allocator_type;\n    typedef typename allocator_type::value_type value_type;\n\n    typedef typename __pointer_type<value_type, allocator_type>::type pointer;\n    typedef typename __const_pointer<value_type, pointer, allocator_type>::type const_pointer;\n    typedef typename __void_pointer<pointer, allocator_type>::type void_pointer;\n    typedef typename __const_void_pointer<pointer, allocator_type>::type const_void_pointer;\n\n    typedef typename __alloc_traits_difference_type<allocator_type, pointer>::type difference_type;\n    typedef typename __size_type<allocator_type, difference_type>::type size_type;\n\n    typedef typename __propagate_on_container_copy_assignment<allocator_type>::type\n                     propagate_on_container_copy_assignment;\n    typedef typename __propagate_on_container_move_assignment<allocator_type>::type\n                     propagate_on_container_move_assignment;\n    typedef typename __propagate_on_container_swap<allocator_type>::type\n                     propagate_on_container_swap;\n    typedef typename __is_always_equal<allocator_type>::type\n                     is_always_equal;\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class _Tp> using rebind_alloc =\n                  typename __allocator_traits_rebind<allocator_type, _Tp>::type;\n    template <class _Tp> using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;\n#else  // _LIBCPP_CXX03_LANG\n    template <class _Tp> struct rebind_alloc\n        {typedef typename __allocator_traits_rebind<allocator_type, _Tp>::type other;};\n    template <class _Tp> struct rebind_traits\n        {typedef allocator_traits<typename rebind_alloc<_Tp>::other> other;};\n#endif  // _LIBCPP_CXX03_LANG\n\n    _LIBCPP_INLINE_VISIBILITY\n    static pointer allocate(allocator_type& __a, size_type __n)\n        {return __a.allocate(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)\n        {return allocate(__a, __n, __hint,\n            __has_allocate_hint<allocator_type, size_type, const_void_pointer>());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    static void deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT\n        {__a.deallocate(__p, __n);}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n    template <class _Tp, class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        static void construct(allocator_type& __a, _Tp* __p, _Args&&... __args)\n            {__construct(__has_construct<allocator_type, _Tp*, _Args...>(),\n                         __a, __p, _VSTD::forward<_Args>(__args)...);}\n#else  // _LIBCPP_HAS_NO_VARIADICS\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        static void construct(allocator_type& __a, _Tp* __p)\n            {\n                ::new ((void*)__p) _Tp();\n            }\n    template <class _Tp, class _A0>\n        _LIBCPP_INLINE_VISIBILITY\n        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0)\n            {\n                ::new ((void*)__p) _Tp(__a0);\n            }\n    template <class _Tp, class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0,\n                              const _A1& __a1)\n            {\n                ::new ((void*)__p) _Tp(__a0, __a1);\n            }\n    template <class _Tp, class _A0, class _A1, class _A2>\n        _LIBCPP_INLINE_VISIBILITY\n        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0,\n                              const _A1& __a1, const _A2& __a2)\n            {\n                ::new ((void*)__p) _Tp(__a0, __a1, __a2);\n            }\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        static void destroy(allocator_type& __a, _Tp* __p)\n            {__destroy(__has_destroy<allocator_type, _Tp*>(), __a, __p);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    static size_type max_size(const allocator_type& __a) _NOEXCEPT\n        {return __max_size(__has_max_size<const allocator_type>(), __a);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    static allocator_type\n        select_on_container_copy_construction(const allocator_type& __a)\n            {return select_on_container_copy_construction(\n                __has_select_on_container_copy_construction<const allocator_type>(),\n                __a);}\n\n    template <class _Ptr>\n        _LIBCPP_INLINE_VISIBILITY\n        static\n        void\n        __construct_forward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2)\n        {\n            for (; __begin1 != __end1; ++__begin1, ++__begin2)\n                construct(__a, _VSTD::__to_raw_pointer(__begin2), _VSTD::move_if_noexcept(*__begin1));\n        }\n\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        static\n        typename enable_if\n        <\n            (is_same<allocator_type, allocator<_Tp> >::value\n                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&\n             is_trivially_move_constructible<_Tp>::value,\n            void\n        >::type\n        __construct_forward(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)\n        {\n            ptrdiff_t _Np = __end1 - __begin1;\n            if (_Np > 0)\n            {\n                _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));\n                __begin2 += _Np;\n            }\n        }\n\n    template <class _Iter, class _Ptr>\n        _LIBCPP_INLINE_VISIBILITY\n        static\n        void\n        __construct_range_forward(allocator_type& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2)\n        {\n            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)\n                construct(__a, _VSTD::__to_raw_pointer(__begin2), *__begin1);\n        }\n\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        static\n        typename enable_if\n        <\n            (is_same<allocator_type, allocator<_Tp> >::value\n                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&\n             is_trivially_move_constructible<_Tp>::value,\n            void\n        >::type\n        __construct_range_forward(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)\n        {\n            typedef typename remove_const<_Tp>::type _Vp;\n            ptrdiff_t _Np = __end1 - __begin1;\n            if (_Np > 0)\n            {\n                _VSTD::memcpy(const_cast<_Vp*>(__begin2), __begin1, _Np * sizeof(_Tp));\n                __begin2 += _Np;\n            }\n        }\n\n    template <class _Ptr>\n        _LIBCPP_INLINE_VISIBILITY\n        static\n        void\n        __construct_backward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2)\n        {\n            while (__end1 != __begin1)\n            {\n                construct(__a, _VSTD::__to_raw_pointer(__end2-1), _VSTD::move_if_noexcept(*--__end1));\n                --__end2;\n            }\n        }\n\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        static\n        typename enable_if\n        <\n            (is_same<allocator_type, allocator<_Tp> >::value\n                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&\n             is_trivially_move_constructible<_Tp>::value,\n            void\n        >::type\n        __construct_backward(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __end2)\n        {\n            ptrdiff_t _Np = __end1 - __begin1;\n            __end2 -= _Np;\n            if (_Np > 0)\n                _VSTD::memcpy(__end2, __begin1, _Np * sizeof(_Tp));\n        }\n\nprivate:\n\n    _LIBCPP_INLINE_VISIBILITY\n    static pointer allocate(allocator_type& __a, size_type __n,\n        const_void_pointer __hint, true_type)\n        {return __a.allocate(__n, __hint);}\n    _LIBCPP_INLINE_VISIBILITY\n    static pointer allocate(allocator_type& __a, size_type __n,\n        const_void_pointer, false_type)\n        {return __a.allocate(__n);}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n    template <class _Tp, class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        static void __construct(true_type, allocator_type& __a, _Tp* __p, _Args&&... __args)\n            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}\n    template <class _Tp, class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        static void __construct(false_type, allocator_type&, _Tp* __p, _Args&&... __args)\n            {\n                ::new ((void*)__p) _Tp(_VSTD::forward<_Args>(__args)...);\n            }\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        static void __destroy(true_type, allocator_type& __a, _Tp* __p)\n            {__a.destroy(__p);}\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        static void __destroy(false_type, allocator_type&, _Tp* __p)\n            {\n                __p->~_Tp();\n            }\n\n    _LIBCPP_INLINE_VISIBILITY\n    static size_type __max_size(true_type, const allocator_type& __a)\n            {return __a.max_size();}\n    _LIBCPP_INLINE_VISIBILITY\n    static size_type __max_size(false_type, const allocator_type&)\n            {return numeric_limits<size_type>::max() / sizeof(value_type);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    static allocator_type\n        select_on_container_copy_construction(true_type, const allocator_type& __a)\n            {return __a.select_on_container_copy_construction();}\n    _LIBCPP_INLINE_VISIBILITY\n    static allocator_type\n        select_on_container_copy_construction(false_type, const allocator_type& __a)\n            {return __a;}\n};\n\ntemplate <class _Traits, class _Tp>\nstruct __rebind_alloc_helper\n{\n#ifndef _LIBCPP_CXX03_LANG\n    typedef typename _Traits::template rebind_alloc<_Tp>        type;\n#else\n    typedef typename _Traits::template rebind_alloc<_Tp>::other type;\n#endif\n};\n\n// allocator\n\ntemplate <class _Tp>\nclass _LIBCPP_TEMPLATE_VIS allocator\n{\npublic:\n    typedef size_t            size_type;\n    typedef ptrdiff_t         difference_type;\n    typedef _Tp*              pointer;\n    typedef const _Tp*        const_pointer;\n    typedef _Tp&              reference;\n    typedef const _Tp&        const_reference;\n    typedef _Tp               value_type;\n\n    typedef true_type propagate_on_container_move_assignment;\n    typedef true_type is_always_equal;\n\n    template <class _Up> struct rebind {typedef allocator<_Up> other;};\n\n    _LIBCPP_INLINE_VISIBILITY allocator() _NOEXCEPT {}\n    template <class _Up> _LIBCPP_INLINE_VISIBILITY allocator(const allocator<_Up>&) _NOEXCEPT {}\n    _LIBCPP_INLINE_VISIBILITY pointer address(reference __x) const _NOEXCEPT\n        {return _VSTD::addressof(__x);}\n    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT\n        {return _VSTD::addressof(__x);}\n    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)\n        {\n        if (__n > max_size())\n            __throw_length_error(\"allocator<T>::allocate(size_t n)\"\n                                 \" 'n' exceeds maximum supported size\");\n        return static_cast<pointer>(_VSTD::__allocate(__n * sizeof(_Tp)));\n        }\n    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT\n        {_VSTD::__libcpp_deallocate((void*)__p);}\n    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT\n        {return size_type(~0) / sizeof(_Tp);}\n#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n    template <class _Up, class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(_Up* __p, _Args&&... __args)\n        {\n            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);\n        }\n#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p)\n        {\n            ::new((void*)__p) _Tp();\n        }\n# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)\n\n    template <class _A0>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, _A0& __a0)\n        {\n            ::new((void*)__p) _Tp(__a0);\n        }\n    template <class _A0>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, const _A0& __a0)\n        {\n            ::new((void*)__p) _Tp(__a0);\n        }\n# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, _A0& __a0, _A1& __a1)\n        {\n            ::new((void*)__p) _Tp(__a0, __a1);\n        }\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, const _A0& __a0, _A1& __a1)\n        {\n            ::new((void*)__p) _Tp(__a0, __a1);\n        }\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, _A0& __a0, const _A1& __a1)\n        {\n            ::new((void*)__p) _Tp(__a0, __a1);\n        }\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, const _A0& __a0, const _A1& __a1)\n        {\n            ::new((void*)__p) _Tp(__a0, __a1);\n        }\n#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}\n};\n\ntemplate <class _Tp>\nclass _LIBCPP_TEMPLATE_VIS allocator<const _Tp>\n{\npublic:\n    typedef size_t            size_type;\n    typedef ptrdiff_t         difference_type;\n    typedef const _Tp*        pointer;\n    typedef const _Tp*        const_pointer;\n    typedef const _Tp&        reference;\n    typedef const _Tp&        const_reference;\n    typedef const _Tp         value_type;\n\n    typedef true_type propagate_on_container_move_assignment;\n    typedef true_type is_always_equal;\n\n    template <class _Up> struct rebind {typedef allocator<_Up> other;};\n\n    _LIBCPP_INLINE_VISIBILITY allocator() _NOEXCEPT {}\n    template <class _Up> _LIBCPP_INLINE_VISIBILITY allocator(const allocator<_Up>&) _NOEXCEPT {}\n    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT\n        {return _VSTD::addressof(__x);}\n    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)\n    {\n        if (__n > max_size())\n            __throw_length_error(\"allocator<const T>::allocate(size_t n)\"\n                                 \" 'n' exceeds maximum supported size\");\n        return static_cast<pointer>(_VSTD::__allocate(__n * sizeof(_Tp)));\n    }\n    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT\n        {_VSTD::__libcpp_deallocate((void*)__p);}\n    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT\n        {return size_type(~0) / sizeof(_Tp);}\n#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n    template <class _Up, class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(_Up* __p, _Args&&... __args)\n        {\n            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);\n        }\n#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p)\n        {\n            ::new((void*)__p) _Tp();\n        }\n# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)\n\n    template <class _A0>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, _A0& __a0)\n        {\n            ::new((void*)__p) _Tp(__a0);\n        }\n    template <class _A0>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, const _A0& __a0)\n        {\n            ::new((void*)__p) _Tp(__a0);\n        }\n# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, _A0& __a0, _A1& __a1)\n        {\n            ::new((void*)__p) _Tp(__a0, __a1);\n        }\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, const _A0& __a0, _A1& __a1)\n        {\n            ::new((void*)__p) _Tp(__a0, __a1);\n        }\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, _A0& __a0, const _A1& __a1)\n        {\n            ::new((void*)__p) _Tp(__a0, __a1);\n        }\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        construct(pointer __p, const _A0& __a0, const _A1& __a1)\n        {\n            ::new((void*)__p) _Tp(__a0, __a1);\n        }\n#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}\n};\n\ntemplate <class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\nbool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}\n\ntemplate <class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\nbool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}\n\ntemplate <class _OutputIterator, class _Tp>\nclass _LIBCPP_TEMPLATE_VIS raw_storage_iterator\n    : public iterator<output_iterator_tag,\n                      _Tp,                                         // purposefully not C++03\n                      ptrdiff_t,                                   // purposefully not C++03\n                      _Tp*,                                        // purposefully not C++03\n                      raw_storage_iterator<_OutputIterator, _Tp>&> // purposefully not C++03\n{\nprivate:\n    _OutputIterator __x_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}\n    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator*() {return *this;}\n    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(const _Tp& __element)\n        {::new(&*__x_) _Tp(__element); return *this;}\n#if _LIBCPP_STD_VER >= 14\n    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(_Tp&& __element)\n        {::new(&*__x_) _Tp(_VSTD::move(__element)); return *this;}\n#endif\n    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator++() {++__x_; return *this;}\n    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator  operator++(int)\n        {raw_storage_iterator __t(*this); ++__x_; return __t;}\n#if _LIBCPP_STD_VER >= 14\n    _LIBCPP_INLINE_VISIBILITY _OutputIterator base() const { return __x_; } \n#endif\n};\n\ntemplate <class _Tp>\npair<_Tp*, ptrdiff_t>\nget_temporary_buffer(ptrdiff_t __n) _NOEXCEPT\n{\n    pair<_Tp*, ptrdiff_t> __r(0, 0);\n    const ptrdiff_t __m = (~ptrdiff_t(0) ^\n                           ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * __CHAR_BIT__ - 1)))\n                           / sizeof(_Tp);\n    if (__n > __m)\n        __n = __m;\n    while (__n > 0)\n    {\n        __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));\n        if (__r.first)\n        {\n            __r.second = __n;\n            break;\n        }\n        __n /= 2;\n    }\n    return __r;\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid return_temporary_buffer(_Tp* __p) _NOEXCEPT {::operator delete(__p);}\n\ntemplate <class _Tp>\nstruct auto_ptr_ref\n{\n    _Tp* __ptr_;\n};\n\ntemplate<class _Tp>\nclass _LIBCPP_TEMPLATE_VIS auto_ptr\n{\nprivate:\n    _Tp* __ptr_;\npublic:\n    typedef _Tp element_type;\n\n    _LIBCPP_INLINE_VISIBILITY explicit auto_ptr(_Tp* __p = 0) throw() : __ptr_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr& __p) throw() : __ptr_(__p.release()) {}\n    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr<_Up>& __p) throw()\n        : __ptr_(__p.release()) {}\n    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr& __p) throw()\n        {reset(__p.release()); return *this;}\n    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr<_Up>& __p) throw()\n        {reset(__p.release()); return *this;}\n    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr_ref<_Tp> __p) throw()\n        {reset(__p.__ptr_); return *this;}\n    _LIBCPP_INLINE_VISIBILITY ~auto_ptr() throw() {delete __ptr_;}\n\n    _LIBCPP_INLINE_VISIBILITY _Tp& operator*() const throw()\n        {return *__ptr_;}\n    _LIBCPP_INLINE_VISIBILITY _Tp* operator->() const throw() {return __ptr_;}\n    _LIBCPP_INLINE_VISIBILITY _Tp* get() const throw() {return __ptr_;}\n    _LIBCPP_INLINE_VISIBILITY _Tp* release() throw()\n    {\n        _Tp* __t = __ptr_;\n        __ptr_ = 0;\n        return __t;\n    }\n    _LIBCPP_INLINE_VISIBILITY void reset(_Tp* __p = 0) throw()\n    {\n        if (__ptr_ != __p)\n            delete __ptr_;\n        __ptr_ = __p;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr_ref<_Tp> __p) throw() : __ptr_(__p.__ptr_) {}\n    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr_ref<_Up>() throw()\n        {auto_ptr_ref<_Up> __t; __t.__ptr_ = release(); return __t;}\n    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr<_Up>() throw()\n        {return auto_ptr<_Up>(release());}\n};\n\ntemplate <>\nclass _LIBCPP_TEMPLATE_VIS auto_ptr<void>\n{\npublic:\n    typedef void element_type;\n};\n\ntemplate <class _T1, class _T2, bool = is_same<typename remove_cv<_T1>::type,\n                                                     typename remove_cv<_T2>::type>::value,\n                                bool = is_empty<_T1>::value\n                                       && !__libcpp_is_final<_T1>::value,\n                                bool = is_empty<_T2>::value\n                                       && !__libcpp_is_final<_T2>::value\n         >\nstruct __libcpp_compressed_pair_switch;\n\ntemplate <class _T1, class _T2, bool IsSame>\nstruct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, false, false> {enum {value = 0};};\n\ntemplate <class _T1, class _T2, bool IsSame>\nstruct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, true, false>  {enum {value = 1};};\n\ntemplate <class _T1, class _T2, bool IsSame>\nstruct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, false, true>  {enum {value = 2};};\n\ntemplate <class _T1, class _T2>\nstruct __libcpp_compressed_pair_switch<_T1, _T2, false, true, true>    {enum {value = 3};};\n\ntemplate <class _T1, class _T2>\nstruct __libcpp_compressed_pair_switch<_T1, _T2, true, true, true>     {enum {value = 1};};\n\ntemplate <class _T1, class _T2, unsigned = __libcpp_compressed_pair_switch<_T1, _T2>::value>\nclass __libcpp_compressed_pair_imp;\n\ntemplate <class _T1, class _T2>\nclass __libcpp_compressed_pair_imp<_T1, _T2, 0>\n{\nprivate:\n    _T1 __first_;\n    _T2 __second_;\npublic:\n    typedef _T1 _T1_param;\n    typedef _T2 _T2_param;\n\n    typedef typename remove_reference<_T1>::type& _T1_reference;\n    typedef typename remove_reference<_T2>::type& _T2_reference;\n\n    typedef const typename remove_reference<_T1>::type& _T1_const_reference;\n    typedef const typename remove_reference<_T2>::type& _T2_const_reference;\n\n    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __first_(), __second_() {}\n    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)\n        : __first_(_VSTD::forward<_T1_param>(__t1)), __second_() {}\n    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)\n        : __first_(), __second_(_VSTD::forward<_T2_param>(__t2)) {}\n    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)\n        : __first_(_VSTD::forward<_T1_param>(__t1)), __second_(_VSTD::forward<_T2_param>(__t2)) {}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>\n        _LIBCPP_INLINE_VISIBILITY\n        __libcpp_compressed_pair_imp(piecewise_construct_t,\n                                     tuple<_Args1...> __first_args,\n                                     tuple<_Args2...> __second_args,\n                                     __tuple_indices<_I1...>,\n                                     __tuple_indices<_I2...>)\n            : __first_(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),\n              __second_(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)\n            {}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return __first_;}\n    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return __first_;}\n\n    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return __second_;}\n    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return __second_;}\n\n    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)\n        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&\n                   __is_nothrow_swappable<_T2>::value)\n    {\n        using _VSTD::swap;\n        swap(__first_, __x.__first_);\n        swap(__second_, __x.__second_);\n    }\n};\n\ntemplate <class _T1, class _T2>\nclass __libcpp_compressed_pair_imp<_T1, _T2, 1>\n    : private _T1\n{\nprivate:\n    _T2 __second_;\npublic:\n    typedef _T1 _T1_param;\n    typedef _T2 _T2_param;\n\n    typedef _T1&                                        _T1_reference;\n    typedef typename remove_reference<_T2>::type& _T2_reference;\n\n    typedef const _T1&                                        _T1_const_reference;\n    typedef const typename remove_reference<_T2>::type& _T2_const_reference;\n\n    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __second_() {}\n    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)\n        : _T1(_VSTD::forward<_T1_param>(__t1)), __second_() {}\n    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)\n        : __second_(_VSTD::forward<_T2_param>(__t2)) {}\n    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)\n        : _T1(_VSTD::forward<_T1_param>(__t1)), __second_(_VSTD::forward<_T2_param>(__t2)) {}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>\n        _LIBCPP_INLINE_VISIBILITY\n        __libcpp_compressed_pair_imp(piecewise_construct_t,\n                                     tuple<_Args1...> __first_args,\n                                     tuple<_Args2...> __second_args,\n                                     __tuple_indices<_I1...>,\n                                     __tuple_indices<_I2...>)\n            : _T1(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),\n              __second_(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)\n            {}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return *this;}\n    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return *this;}\n\n    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return __second_;}\n    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return __second_;}\n\n    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)\n        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&\n                   __is_nothrow_swappable<_T2>::value)\n    {\n        using _VSTD::swap;\n        swap(__second_, __x.__second_);\n    }\n};\n\ntemplate <class _T1, class _T2>\nclass __libcpp_compressed_pair_imp<_T1, _T2, 2>\n    : private _T2\n{\nprivate:\n    _T1 __first_;\npublic:\n    typedef _T1 _T1_param;\n    typedef _T2 _T2_param;\n\n    typedef typename remove_reference<_T1>::type& _T1_reference;\n    typedef _T2&                                        _T2_reference;\n\n    typedef const typename remove_reference<_T1>::type& _T1_const_reference;\n    typedef const _T2&                                        _T2_const_reference;\n\n    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __first_() {}\n    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)\n        : __first_(_VSTD::forward<_T1_param>(__t1)) {}\n    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)\n        : _T2(_VSTD::forward<_T2_param>(__t2)), __first_() {}\n    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)\n        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&\n                   is_nothrow_move_constructible<_T2>::value)\n        : _T2(_VSTD::forward<_T2_param>(__t2)), __first_(_VSTD::forward<_T1_param>(__t1)) {}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>\n        _LIBCPP_INLINE_VISIBILITY\n        __libcpp_compressed_pair_imp(piecewise_construct_t,\n                                     tuple<_Args1...> __first_args,\n                                     tuple<_Args2...> __second_args,\n                                     __tuple_indices<_I1...>,\n                                     __tuple_indices<_I2...>)\n            : _T2(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...),\n              __first_(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...)\n              \n            {}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return __first_;}\n    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return __first_;}\n\n    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return *this;}\n    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return *this;}\n\n    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)\n        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&\n                   __is_nothrow_swappable<_T2>::value)\n    {\n        using _VSTD::swap;\n        swap(__first_, __x.__first_);\n    }\n};\n\ntemplate <class _T1, class _T2>\nclass __libcpp_compressed_pair_imp<_T1, _T2, 3>\n    : private _T1,\n      private _T2\n{\npublic:\n    typedef _T1 _T1_param;\n    typedef _T2 _T2_param;\n\n    typedef _T1& _T1_reference;\n    typedef _T2& _T2_reference;\n\n    typedef const _T1& _T1_const_reference;\n    typedef const _T2& _T2_const_reference;\n\n    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() {}\n    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)\n        : _T1(_VSTD::forward<_T1_param>(__t1)) {}\n    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)\n        : _T2(_VSTD::forward<_T2_param>(__t2)) {}\n    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)\n        : _T1(_VSTD::forward<_T1_param>(__t1)), _T2(_VSTD::forward<_T2_param>(__t2)) {}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>\n        _LIBCPP_INLINE_VISIBILITY\n        __libcpp_compressed_pair_imp(piecewise_construct_t,\n                                     tuple<_Args1...> __first_args,\n                                     tuple<_Args2...> __second_args,\n                                     __tuple_indices<_I1...>,\n                                     __tuple_indices<_I2...>)\n            : _T1(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),\n              _T2(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)\n            {}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return *this;}\n    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return *this;}\n\n    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return *this;}\n    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return *this;}\n\n    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp&)\n        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&\n                   __is_nothrow_swappable<_T2>::value)\n    {\n    }\n};\n\ntemplate <class _T1, class _T2>\nclass __compressed_pair\n    : private __libcpp_compressed_pair_imp<_T1, _T2>\n{\n    typedef __libcpp_compressed_pair_imp<_T1, _T2> base;\npublic:\n    typedef typename base::_T1_param _T1_param;\n    typedef typename base::_T2_param _T2_param;\n\n    typedef typename base::_T1_reference _T1_reference;\n    typedef typename base::_T2_reference _T2_reference;\n\n    typedef typename base::_T1_const_reference _T1_const_reference;\n    typedef typename base::_T2_const_reference _T2_const_reference;\n\n    _LIBCPP_INLINE_VISIBILITY __compressed_pair() {}\n    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T1_param __t1)\n        : base(_VSTD::forward<_T1_param>(__t1)) {}\n    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T2_param __t2)\n        : base(_VSTD::forward<_T2_param>(__t2)) {}\n    _LIBCPP_INLINE_VISIBILITY __compressed_pair(_T1_param __t1, _T2_param __t2)\n        : base(_VSTD::forward<_T1_param>(__t1), _VSTD::forward<_T2_param>(__t2)) {}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n    template <class... _Args1, class... _Args2>\n        _LIBCPP_INLINE_VISIBILITY\n        __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,\n                                                      tuple<_Args2...> __second_args)\n            : base(__pc, _VSTD::move(__first_args), _VSTD::move(__second_args),\n                   typename __make_tuple_indices<sizeof...(_Args1)>::type(),\n                   typename __make_tuple_indices<sizeof...(_Args2) >::type())\n            {}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return base::first();}\n    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return base::first();}\n\n    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return base::second();}\n    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return base::second();}\n\n    _LIBCPP_INLINE_VISIBILITY void swap(__compressed_pair& __x)\n        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&\n                   __is_nothrow_swappable<_T2>::value)\n        {base::swap(__x);}\n};\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)\n        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&\n                   __is_nothrow_swappable<_T2>::value)\n    {__x.swap(__y);}\n\n// __same_or_less_cv_qualified\n\ntemplate <class _Ptr1, class _Ptr2,\n          bool = is_same<typename remove_cv<typename pointer_traits<_Ptr1>::element_type>::type,\n                         typename remove_cv<typename pointer_traits<_Ptr2>::element_type>::type\n                        >::value\n         >\nstruct __same_or_less_cv_qualified_imp\n    : is_convertible<_Ptr1, _Ptr2> {};\n\ntemplate <class _Ptr1, class _Ptr2>\nstruct __same_or_less_cv_qualified_imp<_Ptr1, _Ptr2, false>\n    : false_type {};\n\ntemplate <class _Ptr1, class _Ptr2, bool = is_pointer<_Ptr1>::value ||\n                                           is_same<_Ptr1, _Ptr2>::value ||\n                                           __has_element_type<_Ptr1>::value>\nstruct __same_or_less_cv_qualified\n    : __same_or_less_cv_qualified_imp<_Ptr1, _Ptr2> {};\n\ntemplate <class _Ptr1, class _Ptr2>\nstruct __same_or_less_cv_qualified<_Ptr1, _Ptr2, false>\n    : false_type {};\n\n// default_delete\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS default_delete\n{\n#ifndef _LIBCPP_CXX03_LANG\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT = default;\n#else\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT {}\n#endif\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY default_delete(const default_delete<_Up>&,\n             typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* = 0) _NOEXCEPT {}\n    _LIBCPP_INLINE_VISIBILITY void operator() (_Tp* __ptr) const _NOEXCEPT\n        {\n            static_assert(sizeof(_Tp) > 0, \"default_delete can not delete incomplete type\");\n            static_assert(!is_void<_Tp>::value, \"default_delete can not delete incomplete type\");\n            delete __ptr;\n        }\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS default_delete<_Tp[]>\n{\npublic:\n#ifndef _LIBCPP_CXX03_LANG\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT = default;\n#else\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT {}\n#endif\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY default_delete(const default_delete<_Up[]>&,\n             typename enable_if<__same_or_less_cv_qualified<_Up*, _Tp*>::value>::type* = 0) _NOEXCEPT {}\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY\n        void operator() (_Up* __ptr,\n                         typename enable_if<__same_or_less_cv_qualified<_Up*, _Tp*>::value>::type* = 0) const _NOEXCEPT\n        {\n            static_assert(sizeof(_Tp) > 0, \"default_delete can not delete incomplete type\");\n            static_assert(!is_void<_Tp>::value, \"default_delete can not delete void type\");\n            delete [] __ptr;\n        }\n};\n\ntemplate <class _Tp, class _Dp = default_delete<_Tp> >\nclass _LIBCPP_TEMPLATE_VIS unique_ptr\n{\npublic:\n    typedef _Tp element_type;\n    typedef _Dp deleter_type;\n    typedef typename __pointer_type<_Tp, deleter_type>::type pointer;\nprivate:\n    __compressed_pair<pointer, deleter_type> __ptr_;\n\n#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    unique_ptr(unique_ptr&);\n    template <class _Up, class _Ep>\n        unique_ptr(unique_ptr<_Up, _Ep>&);\n    unique_ptr& operator=(unique_ptr&);\n    template <class _Up, class _Ep>\n        unique_ptr& operator=(unique_ptr<_Up, _Ep>&);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    struct __nat {int __for_bool_;};\n\n    typedef       typename remove_reference<deleter_type>::type& _Dp_reference;\n    typedef const typename remove_reference<deleter_type>::type& _Dp_const_reference;\npublic:\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT\n        : __ptr_(pointer())\n        {\n            static_assert(!is_pointer<deleter_type>::value,\n                \"unique_ptr constructed with null function pointer deleter\");\n        }\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT\n        : __ptr_(pointer())\n        {\n            static_assert(!is_pointer<deleter_type>::value,\n                \"unique_ptr constructed with null function pointer deleter\");\n        }\n    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(pointer __p) _NOEXCEPT\n        : __ptr_(_VSTD::move(__p))\n        {\n            static_assert(!is_pointer<deleter_type>::value,\n                \"unique_ptr constructed with null function pointer deleter\");\n        }\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, typename conditional<\n                                        is_reference<deleter_type>::value,\n                                        deleter_type,\n                                        typename add_lvalue_reference<const deleter_type>::type>::type __d)\n             _NOEXCEPT\n        : __ptr_(__p, __d) {}\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, typename remove_reference<deleter_type>::type&& __d)\n             _NOEXCEPT\n        : __ptr_(__p, _VSTD::move(__d))\n        {\n            static_assert(!is_reference<deleter_type>::value, \"rvalue deleter bound to reference\");\n        }\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(unique_ptr&& __u) _NOEXCEPT\n        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}\n    template <class _Up, class _Ep>\n        _LIBCPP_INLINE_VISIBILITY\n        unique_ptr(unique_ptr<_Up, _Ep>&& __u,\n                   typename enable_if\n                      <\n                        !is_array<_Up>::value &&\n                         is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&\n                         is_convertible<_Ep, deleter_type>::value &&\n                         (\n                            !is_reference<deleter_type>::value ||\n                            is_same<deleter_type, _Ep>::value\n                         ),\n                         __nat\n                      >::type = __nat()) _NOEXCEPT\n            : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}\n\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY unique_ptr(auto_ptr<_Up>&& __p,\n                typename enable_if<\n                                      is_convertible<_Up*, _Tp*>::value &&\n                                      is_same<_Dp, default_delete<_Tp> >::value,\n                                      __nat\n                                  >::type = __nat()) _NOEXCEPT\n            : __ptr_(__p.release())\n            {\n            }\n\n        _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT\n            {\n                reset(__u.release());\n                __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());\n                return *this;\n            }\n\n        template <class _Up, class _Ep>\n            _LIBCPP_INLINE_VISIBILITY\n            typename enable_if\n            <\n                !is_array<_Up>::value &&\n                is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&\n                is_assignable<deleter_type&, _Ep&&>::value,\n                unique_ptr&\n            >::type\n            operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT\n            {\n                reset(__u.release());\n                __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());\n                return *this;\n            }\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY operator __rv<unique_ptr>()\n    {\n        return __rv<unique_ptr>(*this);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(__rv<unique_ptr> __u)\n        : __ptr_(__u->release(), _VSTD::forward<deleter_type>(__u->get_deleter())) {}\n\n    template <class _Up, class _Ep>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<\n        !is_array<_Up>::value &&\n        is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&\n        is_assignable<deleter_type&, _Ep&>::value,\n        unique_ptr&\n    >::type\n    operator=(unique_ptr<_Up, _Ep> __u)\n    {\n        reset(__u.release());\n        __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, deleter_type __d)\n        : __ptr_(_VSTD::move(__p), _VSTD::move(__d)) {}\n\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY\n                typename enable_if<\n                                      is_convertible<_Up*, _Tp*>::value &&\n                                      is_same<_Dp, default_delete<_Tp> >::value,\n                                      unique_ptr&\n                                  >::type\n        operator=(auto_ptr<_Up> __p)\n            {reset(__p.release()); return *this;}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY ~unique_ptr() {reset();}\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(nullptr_t) _NOEXCEPT\n    {\n        reset();\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY typename add_lvalue_reference<_Tp>::type operator*() const\n        {return *__ptr_.first();}\n    _LIBCPP_INLINE_VISIBILITY pointer operator->() const _NOEXCEPT {return __ptr_.first();}\n    _LIBCPP_INLINE_VISIBILITY pointer get() const _NOEXCEPT {return __ptr_.first();}\n    _LIBCPP_INLINE_VISIBILITY       _Dp_reference get_deleter() _NOEXCEPT\n        {return __ptr_.second();}\n    _LIBCPP_INLINE_VISIBILITY _Dp_const_reference get_deleter() const _NOEXCEPT\n        {return __ptr_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT\n        {return __ptr_.first() != nullptr;}\n\n    _LIBCPP_INLINE_VISIBILITY pointer release() _NOEXCEPT\n    {\n        pointer __t = __ptr_.first();\n        __ptr_.first() = pointer();\n        return __t;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY void reset(pointer __p = pointer()) _NOEXCEPT\n    {\n        pointer __tmp = __ptr_.first();\n        __ptr_.first() = __p;\n        if (__tmp)\n            __ptr_.second()(__tmp);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY void swap(unique_ptr& __u) _NOEXCEPT\n        {__ptr_.swap(__u.__ptr_);}\n};\n\ntemplate <class _Tp, class _Dp>\nclass _LIBCPP_TEMPLATE_VIS unique_ptr<_Tp[], _Dp>\n{\npublic:\n    typedef _Tp element_type;\n    typedef _Dp deleter_type;\n    typedef typename __pointer_type<_Tp, deleter_type>::type pointer;\nprivate:\n    __compressed_pair<pointer, deleter_type> __ptr_;\n\n#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    unique_ptr(unique_ptr&);\n    template <class _Up>\n        unique_ptr(unique_ptr<_Up>&);\n    unique_ptr& operator=(unique_ptr&);\n    template <class _Up>\n        unique_ptr& operator=(unique_ptr<_Up>&);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    struct __nat {int __for_bool_;};\n\n    typedef       typename remove_reference<deleter_type>::type& _Dp_reference;\n    typedef const typename remove_reference<deleter_type>::type& _Dp_const_reference;\npublic:\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT\n        : __ptr_(pointer())\n        {\n            static_assert(!is_pointer<deleter_type>::value,\n                \"unique_ptr constructed with null function pointer deleter\");\n        }\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT\n        : __ptr_(pointer())\n        {\n            static_assert(!is_pointer<deleter_type>::value,\n                \"unique_ptr constructed with null function pointer deleter\");\n        }\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(_Pp __p,\n            typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat()) _NOEXCEPT\n        : __ptr_(__p)\n        {\n            static_assert(!is_pointer<deleter_type>::value,\n                \"unique_ptr constructed with null function pointer deleter\");\n        }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(_Pp __p, typename conditional<\n                                       is_reference<deleter_type>::value,\n                                       deleter_type,\n                                       typename add_lvalue_reference<const deleter_type>::type>::type __d,\n                                       typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat())\n             _NOEXCEPT\n        : __ptr_(__p, __d) {}\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, typename conditional<\n                                       is_reference<deleter_type>::value,\n                                       deleter_type,\n                                       typename add_lvalue_reference<const deleter_type>::type>::type __d)\n             _NOEXCEPT\n        : __ptr_(pointer(), __d) {}\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(_Pp __p,\n                                         typename remove_reference<deleter_type>::type&& __d,\n                                         typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat())\n             _NOEXCEPT\n        : __ptr_(__p, _VSTD::move(__d))\n        {\n            static_assert(!is_reference<deleter_type>::value, \"rvalue deleter bound to reference\");\n        }\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, typename remove_reference<deleter_type>::type&& __d)\n             _NOEXCEPT\n        : __ptr_(pointer(), _VSTD::move(__d))\n        {\n            static_assert(!is_reference<deleter_type>::value, \"rvalue deleter bound to reference\");\n        }\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(unique_ptr&& __u) _NOEXCEPT\n        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT\n        {\n            reset(__u.release());\n            __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());\n            return *this;\n        }\n\n    template <class _Up, class _Ep>\n        _LIBCPP_INLINE_VISIBILITY\n        unique_ptr(unique_ptr<_Up, _Ep>&& __u,\n                   typename enable_if\n                            <\n                                is_array<_Up>::value &&\n                                __same_or_less_cv_qualified<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value\n                                && is_convertible<_Ep, deleter_type>::value &&\n                                (\n                                    !is_reference<deleter_type>::value ||\n                                    is_same<deleter_type, _Ep>::value\n                                ),\n                                __nat\n                            >::type = __nat()\n                  ) _NOEXCEPT\n        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}\n\n\n        template <class _Up, class _Ep>\n            _LIBCPP_INLINE_VISIBILITY\n            typename enable_if\n            <\n                is_array<_Up>::value &&\n                __same_or_less_cv_qualified<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&\n                is_assignable<deleter_type&, _Ep&&>::value,\n                unique_ptr&\n            >::type\n            operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT\n            {\n                reset(__u.release());\n                __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());\n                return *this;\n            }\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(pointer __p)\n        : __ptr_(__p)\n        {\n            static_assert(!is_pointer<deleter_type>::value,\n                \"unique_ptr constructed with null function pointer deleter\");\n        }\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, deleter_type __d)\n        : __ptr_(__p, _VSTD::forward<deleter_type>(__d)) {}\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, deleter_type __d)\n        : __ptr_(pointer(), _VSTD::forward<deleter_type>(__d)) {}\n\n    _LIBCPP_INLINE_VISIBILITY operator __rv<unique_ptr>()\n    {\n        return __rv<unique_ptr>(*this);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr(__rv<unique_ptr> __u)\n        : __ptr_(__u->release(), _VSTD::forward<deleter_type>(__u->get_deleter())) {}\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(__rv<unique_ptr> __u)\n    {\n        reset(__u->release());\n        __ptr_.second() = _VSTD::forward<deleter_type>(__u->get_deleter());\n        return *this;\n    }\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY ~unique_ptr() {reset();}\n\n    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(nullptr_t) _NOEXCEPT\n    {\n        reset();\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY typename add_lvalue_reference<_Tp>::type operator[](size_t __i) const\n        {return __ptr_.first()[__i];}\n    _LIBCPP_INLINE_VISIBILITY pointer get() const _NOEXCEPT {return __ptr_.first();}\n    _LIBCPP_INLINE_VISIBILITY       _Dp_reference get_deleter() _NOEXCEPT\n        {return __ptr_.second();}\n    _LIBCPP_INLINE_VISIBILITY _Dp_const_reference get_deleter() const _NOEXCEPT\n        {return __ptr_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT\n        {return __ptr_.first() != nullptr;}\n\n    _LIBCPP_INLINE_VISIBILITY pointer release() _NOEXCEPT\n    {\n        pointer __t = __ptr_.first();\n        __ptr_.first() = pointer();\n        return __t;\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, void>::type\n    reset(_Pp __p) _NOEXCEPT\n    {\n        pointer __tmp = __ptr_.first();\n        __ptr_.first() = __p;\n        if (__tmp)\n            __ptr_.second()(__tmp);\n    }\n    _LIBCPP_INLINE_VISIBILITY void reset(nullptr_t = nullptr) _NOEXCEPT\n    {\n        pointer __tmp = __ptr_.first();\n        __ptr_.first() = nullptr;\n        if (__tmp)\n            __ptr_.second()(__tmp);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY void swap(unique_ptr& __u) {__ptr_.swap(__u.__ptr_);}\nprivate:\n\n#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template <class _Up>\n        explicit unique_ptr(_Up);\n    template <class _Up>\n        unique_ptr(_Up __u,\n                   typename conditional<\n                                       is_reference<deleter_type>::value,\n                                       deleter_type,\n                                       typename add_lvalue_reference<const deleter_type>::type>::type,\n                   typename enable_if\n                      <\n                         is_convertible<_Up, pointer>::value,\n                         __nat\n                      >::type = __nat());\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n};\n\ntemplate <class _Tp, class _Dp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if<\n    __is_swappable<_Dp>::value,\n    void\n>::type\nswap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}\n\ntemplate <class _T1, class _D1, class _T2, class _D2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}\n\ntemplate <class _T1, class _D1, class _T2, class _D2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}\n\ntemplate <class _T1, class _D1, class _T2, class _D2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)\n{\n    typedef typename unique_ptr<_T1, _D1>::pointer _P1;\n    typedef typename unique_ptr<_T2, _D2>::pointer _P2;\n    typedef typename common_type<_P1, _P2>::type _Vp;\n    return less<_Vp>()(__x.get(), __y.get());\n}\n\ntemplate <class _T1, class _D1, class _T2, class _D2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}\n\ntemplate <class _T1, class _D1, class _T2, class _D2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}\n\ntemplate <class _T1, class _D1, class _T2, class _D2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT\n{\n    return !__x;\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT\n{\n    return !__x;\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT\n{\n    return static_cast<bool>(__x);\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT\n{\n    return static_cast<bool>(__x);\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)\n{\n    typedef typename unique_ptr<_T1, _D1>::pointer _P1;\n    return less<_P1>()(__x.get(), nullptr);\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)\n{\n    typedef typename unique_ptr<_T1, _D1>::pointer _P1;\n    return less<_P1>()(nullptr, __x.get());\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)\n{\n    return nullptr < __x;\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)\n{\n    return __x < nullptr;\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)\n{\n    return !(nullptr < __x);\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)\n{\n    return !(__x < nullptr);\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)\n{\n    return !(__x < nullptr);\n}\n\ntemplate <class _T1, class _D1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)\n{\n    return !(nullptr < __x);\n}\n\n#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Dp>\ninline _LIBCPP_INLINE_VISIBILITY\nunique_ptr<_Tp, _Dp>\nmove(unique_ptr<_Tp, _Dp>& __t)\n{\n    return unique_ptr<_Tp, _Dp>(__rv<unique_ptr<_Tp, _Dp> >(__t));\n}\n\n#endif\n\n#if _LIBCPP_STD_VER > 11\n\ntemplate<class _Tp>\nstruct __unique_if\n{\n    typedef unique_ptr<_Tp> __unique_single;\n};\n\ntemplate<class _Tp>\nstruct __unique_if<_Tp[]>\n{\n    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;\n};\n\ntemplate<class _Tp, size_t _Np>\nstruct __unique_if<_Tp[_Np]>\n{\n    typedef void __unique_array_known_bound;\n};\n\ntemplate<class _Tp, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename __unique_if<_Tp>::__unique_single\nmake_unique(_Args&&... __args)\n{\n    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename __unique_if<_Tp>::__unique_array_unknown_bound\nmake_unique(size_t __n)\n{\n    typedef typename remove_extent<_Tp>::type _Up;\n    return unique_ptr<_Tp>(new _Up[__n]());\n}\n\ntemplate<class _Tp, class... _Args>\n    typename __unique_if<_Tp>::__unique_array_known_bound\n    make_unique(_Args&&...) = delete;\n\n#endif  // _LIBCPP_STD_VER > 11\n\ntemplate <class _Size>\ninline _LIBCPP_INLINE_VISIBILITY\n_Size\n__loadword(const void* __p)\n{\n    _Size __r;\n    std::memcpy(&__r, __p, sizeof(__r));\n    return __r;\n}\n\n// We use murmur2 when size_t is 32 bits, and cityhash64 when size_t\n// is 64 bits.  This is because cityhash64 uses 64bit x 64bit\n// multiplication, which can be very slow on 32-bit systems.\ntemplate <class _Size, size_t = sizeof(_Size)*__CHAR_BIT__>\nstruct __murmur2_or_cityhash;\n\ntemplate <class _Size>\nstruct __murmur2_or_cityhash<_Size, 32>\n{\n    _Size operator()(const void* __key, _Size __len);\n};\n\n// murmur2\ntemplate <class _Size>\n_Size\n__murmur2_or_cityhash<_Size, 32>::operator()(const void* __key, _Size __len) _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK \n{\n    const _Size __m = 0x5bd1e995;\n    const _Size __r = 24;\n    _Size __h = __len;\n    const unsigned char* __data = static_cast<const unsigned char*>(__key);\n    for (; __len >= 4; __data += 4, __len -= 4)\n    {\n        _Size __k = __loadword<_Size>(__data);\n        __k *= __m;\n        __k ^= __k >> __r;\n        __k *= __m;\n        __h *= __m;\n        __h ^= __k;\n    }\n    switch (__len)\n    {\n    case 3:\n        __h ^= __data[2] << 16;\n    case 2:\n        __h ^= __data[1] << 8;\n    case 1:\n        __h ^= __data[0];\n        __h *= __m;\n    }\n    __h ^= __h >> 13;\n    __h *= __m;\n    __h ^= __h >> 15;\n    return __h;\n}\n\ntemplate <class _Size>\nstruct __murmur2_or_cityhash<_Size, 64>\n{\n    _Size operator()(const void* __key, _Size __len);\n\n private:\n  // Some primes between 2^63 and 2^64.\n  static const _Size __k0 = 0xc3a5c85c97cb3127ULL;\n  static const _Size __k1 = 0xb492b66fbe98f273ULL;\n  static const _Size __k2 = 0x9ae16a3b2f90404fULL;\n  static const _Size __k3 = 0xc949d7c7509e6557ULL;\n\n  static _Size __rotate(_Size __val, int __shift) {\n    return __shift == 0 ? __val : ((__val >> __shift) | (__val << (64 - __shift)));\n  }\n\n  static _Size __rotate_by_at_least_1(_Size __val, int __shift) {\n    return (__val >> __shift) | (__val << (64 - __shift));\n  }\n\n  static _Size __shift_mix(_Size __val) {\n    return __val ^ (__val >> 47);\n  }\n\n  static _Size __hash_len_16(_Size __u, _Size __v) {\n    const _Size __mul = 0x9ddfea08eb382d69ULL;\n    _Size __a = (__u ^ __v) * __mul;\n    __a ^= (__a >> 47);\n    _Size __b = (__v ^ __a) * __mul;\n    __b ^= (__b >> 47);\n    __b *= __mul;\n    return __b;\n  }\n\n  static _Size __hash_len_0_to_16(const char* __s, _Size __len) {\n    if (__len > 8) {\n      const _Size __a = __loadword<_Size>(__s);\n      const _Size __b = __loadword<_Size>(__s + __len - 8);\n      return __hash_len_16(__a, __rotate_by_at_least_1(__b + __len, __len)) ^ __b;\n    }\n    if (__len >= 4) {\n      const uint32_t __a = __loadword<uint32_t>(__s);\n      const uint32_t __b = __loadword<uint32_t>(__s + __len - 4);\n      return __hash_len_16(__len + (__a << 3), __b);\n    }\n    if (__len > 0) {\n      const unsigned char __a = __s[0];\n      const unsigned char __b = __s[__len >> 1];\n      const unsigned char __c = __s[__len - 1];\n      const uint32_t __y = static_cast<uint32_t>(__a) +\n                           (static_cast<uint32_t>(__b) << 8);\n      const uint32_t __z = __len + (static_cast<uint32_t>(__c) << 2);\n      return __shift_mix(__y * __k2 ^ __z * __k3) * __k2;\n    }\n    return __k2;\n  }\n\n  static _Size __hash_len_17_to_32(const char *__s, _Size __len) {\n    const _Size __a = __loadword<_Size>(__s) * __k1;\n    const _Size __b = __loadword<_Size>(__s + 8);\n    const _Size __c = __loadword<_Size>(__s + __len - 8) * __k2;\n    const _Size __d = __loadword<_Size>(__s + __len - 16) * __k0;\n    return __hash_len_16(__rotate(__a - __b, 43) + __rotate(__c, 30) + __d,\n                         __a + __rotate(__b ^ __k3, 20) - __c + __len);\n  }\n\n  // Return a 16-byte hash for 48 bytes.  Quick and dirty.\n  // Callers do best to use \"random-looking\" values for a and b.\n  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(\n      _Size __w, _Size __x, _Size __y, _Size __z, _Size __a, _Size __b) {\n    __a += __w;\n    __b = __rotate(__b + __a + __z, 21);\n    const _Size __c = __a;\n    __a += __x;\n    __a += __y;\n    __b += __rotate(__a, 44);\n    return pair<_Size, _Size>(__a + __z, __b + __c);\n  }\n\n  // Return a 16-byte hash for s[0] ... s[31], a, and b.  Quick and dirty.\n  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(\n      const char* __s, _Size __a, _Size __b) {\n    return __weak_hash_len_32_with_seeds(__loadword<_Size>(__s),\n                                         __loadword<_Size>(__s + 8),\n                                         __loadword<_Size>(__s + 16),\n                                         __loadword<_Size>(__s + 24),\n                                         __a,\n                                         __b);\n  }\n\n  // Return an 8-byte hash for 33 to 64 bytes.\n  static _Size __hash_len_33_to_64(const char *__s, size_t __len) {\n    _Size __z = __loadword<_Size>(__s + 24);\n    _Size __a = __loadword<_Size>(__s) +\n                (__len + __loadword<_Size>(__s + __len - 16)) * __k0;\n    _Size __b = __rotate(__a + __z, 52);\n    _Size __c = __rotate(__a, 37);\n    __a += __loadword<_Size>(__s + 8);\n    __c += __rotate(__a, 7);\n    __a += __loadword<_Size>(__s + 16);\n    _Size __vf = __a + __z;\n    _Size __vs = __b + __rotate(__a, 31) + __c;\n    __a = __loadword<_Size>(__s + 16) + __loadword<_Size>(__s + __len - 32);\n    __z += __loadword<_Size>(__s + __len - 8);\n    __b = __rotate(__a + __z, 52);\n    __c = __rotate(__a, 37);\n    __a += __loadword<_Size>(__s + __len - 24);\n    __c += __rotate(__a, 7);\n    __a += __loadword<_Size>(__s + __len - 16);\n    _Size __wf = __a + __z;\n    _Size __ws = __b + __rotate(__a, 31) + __c;\n    _Size __r = __shift_mix((__vf + __ws) * __k2 + (__wf + __vs) * __k0);\n    return __shift_mix(__r * __k0 + __vs) * __k2;\n  }\n};\n\n// cityhash64\ntemplate <class _Size>\n_Size\n__murmur2_or_cityhash<_Size, 64>::operator()(const void* __key, _Size __len) _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK \n{\n  const char* __s = static_cast<const char*>(__key);\n  if (__len <= 32) {\n    if (__len <= 16) {\n      return __hash_len_0_to_16(__s, __len);\n    } else {\n      return __hash_len_17_to_32(__s, __len);\n    }\n  } else if (__len <= 64) {\n    return __hash_len_33_to_64(__s, __len);\n  }\n\n  // For strings over 64 bytes we hash the end first, and then as we\n  // loop we keep 56 bytes of state: v, w, x, y, and z.\n  _Size __x = __loadword<_Size>(__s + __len - 40);\n  _Size __y = __loadword<_Size>(__s + __len - 16) +\n              __loadword<_Size>(__s + __len - 56);\n  _Size __z = __hash_len_16(__loadword<_Size>(__s + __len - 48) + __len,\n                          __loadword<_Size>(__s + __len - 24));\n  pair<_Size, _Size> __v = __weak_hash_len_32_with_seeds(__s + __len - 64, __len, __z);\n  pair<_Size, _Size> __w = __weak_hash_len_32_with_seeds(__s + __len - 32, __y + __k1, __x);\n  __x = __x * __k1 + __loadword<_Size>(__s);\n\n  // Decrease len to the nearest multiple of 64, and operate on 64-byte chunks.\n  __len = (__len - 1) & ~static_cast<_Size>(63);\n  do {\n    __x = __rotate(__x + __y + __v.first + __loadword<_Size>(__s + 8), 37) * __k1;\n    __y = __rotate(__y + __v.second + __loadword<_Size>(__s + 48), 42) * __k1;\n    __x ^= __w.second;\n    __y += __v.first + __loadword<_Size>(__s + 40);\n    __z = __rotate(__z + __w.first, 33) * __k1;\n    __v = __weak_hash_len_32_with_seeds(__s, __v.second * __k1, __x + __w.first);\n    __w = __weak_hash_len_32_with_seeds(__s + 32, __z + __w.second,\n                                        __y + __loadword<_Size>(__s + 16));\n    std::swap(__z, __x);\n    __s += 64;\n    __len -= 64;\n  } while (__len != 0);\n  return __hash_len_16(\n      __hash_len_16(__v.first, __w.first) + __shift_mix(__y) * __k1 + __z,\n      __hash_len_16(__v.second, __w.second) + __x);\n}\n\ntemplate <class _Tp, size_t = sizeof(_Tp) / sizeof(size_t)>\nstruct __scalar_hash;\n\ntemplate <class _Tp>\nstruct __scalar_hash<_Tp, 0>\n    : public unary_function<_Tp, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(_Tp __v) const _NOEXCEPT\n    {\n        union\n        {\n            _Tp    __t;\n            size_t __a;\n        } __u;\n        __u.__a = 0;\n        __u.__t = __v;\n        return __u.__a;\n    }\n};\n\ntemplate <class _Tp>\nstruct __scalar_hash<_Tp, 1>\n    : public unary_function<_Tp, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(_Tp __v) const _NOEXCEPT\n    {\n        union\n        {\n            _Tp    __t;\n            size_t __a;\n        } __u;\n        __u.__t = __v;\n        return __u.__a;\n    }\n};\n\ntemplate <class _Tp>\nstruct __scalar_hash<_Tp, 2>\n    : public unary_function<_Tp, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(_Tp __v) const _NOEXCEPT\n    {\n        union\n        {\n            _Tp __t;\n            struct\n            {\n                size_t __a;\n                size_t __b;\n            } __s;\n        } __u;\n        __u.__t = __v;\n        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));\n    }\n};\n\ntemplate <class _Tp>\nstruct __scalar_hash<_Tp, 3>\n    : public unary_function<_Tp, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(_Tp __v) const _NOEXCEPT\n    {\n        union\n        {\n            _Tp __t;\n            struct\n            {\n                size_t __a;\n                size_t __b;\n                size_t __c;\n            } __s;\n        } __u;\n        __u.__t = __v;\n        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));\n    }\n};\n\ntemplate <class _Tp>\nstruct __scalar_hash<_Tp, 4>\n    : public unary_function<_Tp, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(_Tp __v) const _NOEXCEPT\n    {\n        union\n        {\n            _Tp __t;\n            struct\n            {\n                size_t __a;\n                size_t __b;\n                size_t __c;\n                size_t __d;\n            } __s;\n        } __u;\n        __u.__t = __v;\n        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));\n    }\n};\n\nstruct _PairT {\n  size_t first;\n  size_t second;\n};\n\n_LIBCPP_INLINE_VISIBILITY\ninline size_t __hash_combine(size_t __lhs, size_t __rhs) _NOEXCEPT {\n    typedef __scalar_hash<_PairT> _HashT;\n    const _PairT __p = {__lhs, __rhs};\n    return _HashT()(__p);\n}\n\ntemplate<class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS hash<_Tp*>\n    : public unary_function<_Tp*, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(_Tp* __v) const _NOEXCEPT\n    {\n        union\n        {\n            _Tp* __t;\n            size_t __a;\n        } __u;\n        __u.__t = __v;\n        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));\n    }\n};\n\ntemplate <class _Tp, class _Dp>\nstruct _LIBCPP_TEMPLATE_VIS hash<unique_ptr<_Tp, _Dp> >\n{\n    typedef unique_ptr<_Tp, _Dp> argument_type;\n    typedef size_t               result_type;\n    _LIBCPP_INLINE_VISIBILITY\n    result_type operator()(const argument_type& __ptr) const _NOEXCEPT\n    {\n        typedef typename argument_type::pointer pointer;\n        return hash<pointer>()(__ptr.get());\n    }\n};\n\nstruct __destruct_n\n{\nprivate:\n    size_t size;\n\n    template <class _Tp>\n    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT\n        {for (size_t __i = 0; __i < size; ++__i, ++__p) __p->~_Tp();}\n\n    template <class _Tp>\n    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT\n        {}\n\n    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT\n        {++size;}\n    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT\n        {}\n\n    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT\n        {size = __s;}\n    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT\n        {}\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT\n        : size(__s) {}\n\n    template <class _Tp>\n    _LIBCPP_INLINE_VISIBILITY void __incr(_Tp*) _NOEXCEPT\n        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}\n\n    template <class _Tp>\n    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT\n        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}\n\n    template <class _Tp>\n    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT\n        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}\n};\n\ntemplate <class _Alloc>\nclass __allocator_destructor\n{\n    typedef allocator_traits<_Alloc> __alloc_traits;\npublic:\n    typedef typename __alloc_traits::pointer pointer;\n    typedef typename __alloc_traits::size_type size_type;\nprivate:\n    _Alloc& __alloc_;\n    size_type __s_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY __allocator_destructor(_Alloc& __a, size_type __s)\n             _NOEXCEPT\n        : __alloc_(__a), __s_(__s) {}\n    _LIBCPP_INLINE_VISIBILITY\n    void operator()(pointer __p) _NOEXCEPT\n        {__alloc_traits::deallocate(__alloc_, __p, __s_);}\n};\n\ntemplate <class _InputIterator, class _ForwardIterator>\n_ForwardIterator\nuninitialized_copy(_InputIterator __f, _InputIterator __l, _ForwardIterator __r)\n{\n    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    _ForwardIterator __s = __r;\n    try\n    {\n#endif\n        for (; __f != __l; ++__f, (void) ++__r)\n            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        for (; __s != __r; ++__s)\n            __s->~value_type();\n        throw;\n    }\n#endif\n    return __r;\n}\n\ntemplate <class _InputIterator, class _Size, class _ForwardIterator>\n_ForwardIterator\nuninitialized_copy_n(_InputIterator __f, _Size __n, _ForwardIterator __r)\n{\n    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    _ForwardIterator __s = __r;\n    try\n    {\n#endif\n        for (; __n > 0; ++__f, (void) ++__r, (void) --__n)\n            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        for (; __s != __r; ++__s)\n            __s->~value_type();\n        throw;\n    }\n#endif\n    return __r;\n}\n\ntemplate <class _ForwardIterator, class _Tp>\nvoid\nuninitialized_fill(_ForwardIterator __f, _ForwardIterator __l, const _Tp& __x)\n{\n    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    _ForwardIterator __s = __f;\n    try\n    {\n#endif\n        for (; __f != __l; ++__f)\n            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        for (; __s != __f; ++__s)\n            __s->~value_type();\n        throw;\n    }\n#endif\n}\n\ntemplate <class _ForwardIterator, class _Size, class _Tp>\n_ForwardIterator\nuninitialized_fill_n(_ForwardIterator __f, _Size __n, const _Tp& __x)\n{\n    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    _ForwardIterator __s = __f;\n    try\n    {\n#endif\n        for (; __n > 0; ++__f, (void) --__n)\n            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        for (; __s != __f; ++__s)\n            __s->~value_type();\n        throw;\n    }\n#endif\n    return __f;\n}\n\n#if _LIBCPP_STD_VER > 14\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid destroy_at(_Tp* __loc) {\n    _LIBCPP_ASSERT(__loc, \"null pointer given to destroy_at\");\n    __loc->~_Tp();\n}\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid destroy(_ForwardIterator __first, _ForwardIterator __last) {\n    for (; __first != __last; ++__first)\n        _VSTD::destroy_at(_VSTD::addressof(*__first));\n}\n\ntemplate <class _ForwardIterator, class _Size>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator destroy_n(_ForwardIterator __first, _Size __n) {\n    for (; __n > 0; (void)++__first, --__n)\n        _VSTD::destroy_at(_VSTD::addressof(*__first));\n    return __first;\n}\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last) {\n    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;\n    auto __idx = __first;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try {\n#endif\n    for (; __idx != __last; ++__idx)\n        ::new((void*)_VSTD::addressof(*__idx)) _Vt;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    } catch (...) {\n        _VSTD::destroy(__first, __idx);\n        throw;\n    }\n#endif\n}\n\ntemplate <class _ForwardIterator, class _Size>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {\n    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;\n    auto __idx = __first;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try {\n#endif\n    for (; __n > 0; (void)++__idx, --__n)\n        ::new((void*)_VSTD::addressof(*__idx)) _Vt;\n    return __idx;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    } catch (...) {\n        _VSTD::destroy(__first, __idx);\n        throw;\n    }\n#endif\n}\n\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last) {\n    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;\n    auto __idx = __first;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try {\n#endif\n    for (; __idx != __last; ++__idx)\n        ::new((void*)_VSTD::addressof(*__idx)) _Vt();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    } catch (...) {\n        _VSTD::destroy(__first, __idx);\n        throw;\n    }\n#endif\n}\n\ntemplate <class _ForwardIterator, class _Size>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {\n    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;\n    auto __idx = __first;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try {\n#endif\n    for (; __n > 0; (void)++__idx, --__n)\n        ::new((void*)_VSTD::addressof(*__idx)) _Vt();\n    return __idx;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    } catch (...) {\n        _VSTD::destroy(__first, __idx);\n        throw;\n    }\n#endif\n}\n\n\ntemplate <class _InputIt, class _ForwardIt>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIt uninitialized_move(_InputIt __first, _InputIt __last, _ForwardIt __first_res) {\n    using _Vt = typename iterator_traits<_ForwardIt>::value_type;\n    auto __idx = __first_res;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try {\n#endif\n    for (; __first != __last; (void)++__idx, ++__first)\n        ::new((void*)_VSTD::addressof(*__idx)) _Vt(std::move(*__first));\n    return __idx;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    } catch (...) {\n        _VSTD::destroy(__first_res, __idx);\n        throw;\n    }\n#endif\n}\n\ntemplate <class _InputIt, class _Size, class _ForwardIt>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_InputIt, _ForwardIt>\nuninitialized_move_n(_InputIt __first, _Size __n, _ForwardIt __first_res) {\n    using _Vt = typename iterator_traits<_ForwardIt>::value_type;\n    auto __idx = __first_res;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try {\n#endif\n    for (; __n > 0; ++__idx, (void)++__first, --__n)\n        ::new((void*)_VSTD::addressof(*__idx)) _Vt(std::move(*__first));\n    return {__first, __idx};\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    } catch (...) {\n        _VSTD::destroy(__first_res, __idx);\n        throw;\n    }\n#endif\n}\n\n\n#endif // _LIBCPP_STD_VER > 14\n\nclass _LIBCPP_EXCEPTION_ABI bad_weak_ptr\n    : public std::exception\n{\npublic:\n    virtual ~bad_weak_ptr() _NOEXCEPT;\n    virtual const char* what() const  _NOEXCEPT;\n};\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_bad_weak_ptr()\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw bad_weak_ptr();\n#else\n    _VSTD::abort();\n#endif\n}\n\ntemplate<class _Tp> class _LIBCPP_TEMPLATE_VIS weak_ptr;\n\nclass _LIBCPP_TYPE_VIS __shared_count\n{\n    __shared_count(const __shared_count&);\n    __shared_count& operator=(const __shared_count&);\n\nprotected:\n    long __shared_owners_;\n    virtual ~__shared_count();\nprivate:\n    virtual void __on_zero_shared() _NOEXCEPT = 0;\n\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __shared_count(long __refs = 0) _NOEXCEPT\n        : __shared_owners_(__refs) {}\n\n    void __add_shared() _NOEXCEPT;\n    bool __release_shared() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    long use_count() const _NOEXCEPT {\n        return __libcpp_relaxed_load(&__shared_owners_) + 1;\n    }\n};\n\nclass _LIBCPP_TYPE_VIS __shared_weak_count\n    : private __shared_count\n{\n    long __shared_weak_owners_;\n\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT\n        : __shared_count(__refs),\n          __shared_weak_owners_(__refs) {}\nprotected:\n    virtual ~__shared_weak_count();\n\npublic:\n    void __add_shared() _NOEXCEPT;\n    void __add_weak() _NOEXCEPT;\n    void __release_shared() _NOEXCEPT;\n    void __release_weak() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    long use_count() const _NOEXCEPT {return __shared_count::use_count();}\n    __shared_weak_count* lock() _NOEXCEPT;\n\n    // Define the function out only if we build static libc++ without RTTI.\n    // Otherwise we may break clients who need to compile their projects with\n    // -fno-rtti and yet link against a libc++.dylib compiled\n    // without -fno-rtti.\n#if !defined(_LIBCPP_NO_RTTI) || !defined(_LIBCPP_BUILD_STATIC)\n    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;\n#endif\nprivate:\n    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;\n};\n\ntemplate <class _Tp, class _Dp, class _Alloc>\nclass __shared_ptr_pointer\n    : public __shared_weak_count\n{\n    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)\n        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}\n\n#ifndef _LIBCPP_NO_RTTI\n    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;\n#endif\n\nprivate:\n    virtual void __on_zero_shared() _NOEXCEPT;\n    virtual void __on_zero_shared_weak() _NOEXCEPT;\n};\n\n#ifndef _LIBCPP_NO_RTTI\n\ntemplate <class _Tp, class _Dp, class _Alloc>\nconst void*\n__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT\n{\n    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : 0;\n}\n\n#endif  // _LIBCPP_NO_RTTI\n\ntemplate <class _Tp, class _Dp, class _Alloc>\nvoid\n__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT\n{\n    __data_.first().second()(__data_.first().first());\n    __data_.first().second().~_Dp();\n}\n\ntemplate <class _Tp, class _Dp, class _Alloc>\nvoid\n__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT\n{\n    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;\n    typedef allocator_traits<_Al> _ATraits;\n    typedef pointer_traits<typename _ATraits::pointer> _PTraits;\n\n    _Al __a(__data_.second());\n    __data_.second().~_Alloc();\n    __a.deallocate(_PTraits::pointer_to(*this), 1);\n}\n\ntemplate <class _Tp, class _Alloc>\nclass __shared_ptr_emplace\n    : public __shared_weak_count\n{\n    __compressed_pair<_Alloc, _Tp> __data_;\npublic:\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n    _LIBCPP_INLINE_VISIBILITY\n    __shared_ptr_emplace(_Alloc __a)\n        :  __data_(_VSTD::move(__a)) {}\n\n    template <class ..._Args>\n        _LIBCPP_INLINE_VISIBILITY\n        __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)\n            :  __data_(piecewise_construct, _VSTD::forward_as_tuple(__a),\n                   _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)) {}\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\n    _LIBCPP_INLINE_VISIBILITY\n    __shared_ptr_emplace(_Alloc __a)\n        :  __data_(__a) {}\n\n    template <class _A0>\n        _LIBCPP_INLINE_VISIBILITY\n        __shared_ptr_emplace(_Alloc __a, _A0& __a0)\n            :  __data_(__a, _Tp(__a0)) {}\n\n    template <class _A0, class _A1>\n        _LIBCPP_INLINE_VISIBILITY\n        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1)\n            :  __data_(__a, _Tp(__a0, __a1)) {}\n\n    template <class _A0, class _A1, class _A2>\n        _LIBCPP_INLINE_VISIBILITY\n        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1, _A2& __a2)\n            :  __data_(__a, _Tp(__a0, __a1, __a2)) {}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\nprivate:\n    virtual void __on_zero_shared() _NOEXCEPT;\n    virtual void __on_zero_shared_weak() _NOEXCEPT;\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    _Tp* get() _NOEXCEPT {return &__data_.second();}\n};\n\ntemplate <class _Tp, class _Alloc>\nvoid\n__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared() _NOEXCEPT\n{\n    __data_.second().~_Tp();\n}\n\ntemplate <class _Tp, class _Alloc>\nvoid\n__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT\n{\n    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al;\n    typedef allocator_traits<_Al> _ATraits;\n    typedef pointer_traits<typename _ATraits::pointer> _PTraits;\n    _Al __a(__data_.first());\n    __data_.first().~_Alloc();\n    __a.deallocate(_PTraits::pointer_to(*this), 1);\n}\n\ntemplate<class _Tp> class _LIBCPP_TEMPLATE_VIS enable_shared_from_this;\n\ntemplate<class _Tp>\nclass _LIBCPP_TEMPLATE_VIS shared_ptr\n{\npublic:\n    typedef _Tp element_type;\n\n#if _LIBCPP_STD_VER > 14\n    typedef weak_ptr<_Tp> weak_type;\n#endif\nprivate:\n    element_type*      __ptr_;\n    __shared_weak_count* __cntrl_;\n\n    struct __nat {int __for_bool_;};\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT;\n    template<class _Yp>\n        explicit shared_ptr(_Yp* __p,\n                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());\n    template<class _Yp, class _Dp>\n        shared_ptr(_Yp* __p, _Dp __d,\n                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());\n    template<class _Yp, class _Dp, class _Alloc>\n        shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,\n                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());\n    template <class _Dp> shared_ptr(nullptr_t __p, _Dp __d);\n    template <class _Dp, class _Alloc> shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a);\n    template<class _Yp> _LIBCPP_INLINE_VISIBILITY shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    shared_ptr(const shared_ptr& __r) _NOEXCEPT;\n    template<class _Yp>\n        _LIBCPP_INLINE_VISIBILITY\n        shared_ptr(const shared_ptr<_Yp>& __r,\n                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat())\n                       _NOEXCEPT;\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    shared_ptr(shared_ptr&& __r) _NOEXCEPT;\n    template<class _Yp> _LIBCPP_INLINE_VISIBILITY  shared_ptr(shared_ptr<_Yp>&& __r,\n                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat())\n                       _NOEXCEPT;\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template<class _Yp> explicit shared_ptr(const weak_ptr<_Yp>& __r,\n                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type= __nat());\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template<class _Yp>\n        shared_ptr(auto_ptr<_Yp>&& __r,\n                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());\n#else\n    template<class _Yp>\n        shared_ptr(auto_ptr<_Yp> __r,\n                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());\n#endif\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template <class _Yp, class _Dp>\n        shared_ptr(unique_ptr<_Yp, _Dp>&&,\n                   typename enable_if\n                   <\n                       !is_lvalue_reference<_Dp>::value &&\n                       !is_array<_Yp>::value &&\n                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,\n                       __nat\n                   >::type = __nat());\n    template <class _Yp, class _Dp>\n        shared_ptr(unique_ptr<_Yp, _Dp>&&,\n                   typename enable_if\n                   <\n                       is_lvalue_reference<_Dp>::value &&\n                       !is_array<_Yp>::value &&\n                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,\n                       __nat\n                   >::type = __nat());\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template <class _Yp, class _Dp>\n        shared_ptr(unique_ptr<_Yp, _Dp>,\n                   typename enable_if\n                   <\n                       !is_lvalue_reference<_Dp>::value &&\n                       !is_array<_Yp>::value &&\n                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,\n                       __nat\n                   >::type = __nat());\n    template <class _Yp, class _Dp>\n        shared_ptr(unique_ptr<_Yp, _Dp>,\n                   typename enable_if\n                   <\n                       is_lvalue_reference<_Dp>::value &&\n                       !is_array<_Yp>::value &&\n                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,\n                       __nat\n                   >::type = __nat());\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    ~shared_ptr();\n\n    _LIBCPP_INLINE_VISIBILITY\n    shared_ptr& operator=(const shared_ptr& __r) _NOEXCEPT;\n    template<class _Yp>\n        typename enable_if\n        <\n            is_convertible<_Yp*, element_type*>::value,\n            shared_ptr&\n        >::type\n        _LIBCPP_INLINE_VISIBILITY\n        operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT;\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    shared_ptr& operator=(shared_ptr&& __r) _NOEXCEPT;\n    template<class _Yp>\n        typename enable_if\n        <\n            is_convertible<_Yp*, element_type*>::value,\n            shared_ptr<_Tp>&\n        >::type\n        _LIBCPP_INLINE_VISIBILITY\n        operator=(shared_ptr<_Yp>&& __r);\n    template<class _Yp>\n        _LIBCPP_INLINE_VISIBILITY\n        typename enable_if\n        <\n            !is_array<_Yp>::value &&\n            is_convertible<_Yp*, element_type*>::value,\n            shared_ptr\n        >::type&\n        operator=(auto_ptr<_Yp>&& __r);\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template<class _Yp>\n        _LIBCPP_INLINE_VISIBILITY\n        typename enable_if\n        <\n            !is_array<_Yp>::value &&\n            is_convertible<_Yp*, element_type*>::value,\n            shared_ptr&\n        >::type\n        operator=(auto_ptr<_Yp> __r);\n#endif\n    template <class _Yp, class _Dp>\n        typename enable_if\n        <\n            !is_array<_Yp>::value &&\n            is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,\n            shared_ptr&\n        >::type\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n        _LIBCPP_INLINE_VISIBILITY\n        operator=(unique_ptr<_Yp, _Dp>&& __r);\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n        _LIBCPP_INLINE_VISIBILITY\n        operator=(unique_ptr<_Yp, _Dp> __r);\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(shared_ptr& __r) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    void reset() _NOEXCEPT;\n    template<class _Yp>\n        typename enable_if\n        <\n            is_convertible<_Yp*, element_type*>::value,\n            void\n        >::type\n        _LIBCPP_INLINE_VISIBILITY\n        reset(_Yp* __p);\n    template<class _Yp, class _Dp>\n        typename enable_if\n        <\n            is_convertible<_Yp*, element_type*>::value,\n            void\n        >::type\n        _LIBCPP_INLINE_VISIBILITY\n        reset(_Yp* __p, _Dp __d);\n    template<class _Yp, class _Dp, class _Alloc>\n        typename enable_if\n        <\n            is_convertible<_Yp*, element_type*>::value,\n            void\n        >::type\n        _LIBCPP_INLINE_VISIBILITY\n        reset(_Yp* __p, _Dp __d, _Alloc __a);\n\n    _LIBCPP_INLINE_VISIBILITY\n    element_type* get() const _NOEXCEPT {return __ptr_;}\n    _LIBCPP_INLINE_VISIBILITY\n    typename add_lvalue_reference<element_type>::type operator*() const _NOEXCEPT\n        {return *__ptr_;}\n    _LIBCPP_INLINE_VISIBILITY\n    element_type* operator->() const _NOEXCEPT {return __ptr_;}\n    _LIBCPP_INLINE_VISIBILITY\n    long use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_->use_count() : 0;}\n    _LIBCPP_INLINE_VISIBILITY\n    bool unique() const _NOEXCEPT {return use_count() == 1;}\n    _LIBCPP_INLINE_VISIBILITY\n    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return get() != 0;}\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY\n        bool owner_before(shared_ptr<_Up> const& __p) const\n        {return __cntrl_ < __p.__cntrl_;}\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY\n        bool owner_before(weak_ptr<_Up> const& __p) const\n        {return __cntrl_ < __p.__cntrl_;}\n    _LIBCPP_INLINE_VISIBILITY\n    bool\n    __owner_equivalent(const shared_ptr& __p) const\n        {return __cntrl_ == __p.__cntrl_;}\n\n#ifndef _LIBCPP_NO_RTTI\n    template <class _Dp>\n        _LIBCPP_INLINE_VISIBILITY\n        _Dp* __get_deleter() const _NOEXCEPT\n            {return (_Dp*)(__cntrl_ ? __cntrl_->__get_deleter(typeid(_Dp)) : 0);}\n#endif  // _LIBCPP_NO_RTTI\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n    template<class ..._Args>\n        static\n        shared_ptr<_Tp>\n        make_shared(_Args&& ...__args);\n\n    template<class _Alloc, class ..._Args>\n        static\n        shared_ptr<_Tp>\n        allocate_shared(const _Alloc& __a, _Args&& ...__args);\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\n    static shared_ptr<_Tp> make_shared();\n\n    template<class _A0>\n        static shared_ptr<_Tp> make_shared(_A0&);\n\n    template<class _A0, class _A1>\n        static shared_ptr<_Tp> make_shared(_A0&, _A1&);\n\n    template<class _A0, class _A1, class _A2>\n        static shared_ptr<_Tp> make_shared(_A0&, _A1&, _A2&);\n\n    template<class _Alloc>\n        static shared_ptr<_Tp>\n        allocate_shared(const _Alloc& __a);\n\n    template<class _Alloc, class _A0>\n        static shared_ptr<_Tp>\n        allocate_shared(const _Alloc& __a, _A0& __a0);\n\n    template<class _Alloc, class _A0, class _A1>\n        static shared_ptr<_Tp>\n        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1);\n\n    template<class _Alloc, class _A0, class _A1, class _A2>\n        static shared_ptr<_Tp>\n        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2);\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\nprivate:\n\n    template <class _Yp, class _OrigPtr>\n        _LIBCPP_INLINE_VISIBILITY\n        void\n        __enable_weak_this(const enable_shared_from_this<_Yp>* __e,\n                           _OrigPtr* __ptr) _NOEXCEPT\n        {\n            typedef typename remove_cv<_Yp>::type _RawYp;\n            if (__e && __e->__weak_this_.expired())\n            {\n                __e->__weak_this_ = shared_ptr<_RawYp>(*this,\n                    const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));\n            }\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __enable_weak_this(const volatile void*, const volatile void*) _NOEXCEPT {}\n\n    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;\n    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;\n};\n\ntemplate<class _Tp>\ninline\n_LIBCPP_CONSTEXPR\nshared_ptr<_Tp>::shared_ptr() _NOEXCEPT\n    : __ptr_(0),\n      __cntrl_(0)\n{\n}\n\ntemplate<class _Tp>\ninline\n_LIBCPP_CONSTEXPR\nshared_ptr<_Tp>::shared_ptr(nullptr_t) _NOEXCEPT\n    : __ptr_(0),\n      __cntrl_(0)\n{\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\nshared_ptr<_Tp>::shared_ptr(_Yp* __p,\n                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)\n    : __ptr_(__p)\n{\n    unique_ptr<_Yp> __hold(__p);\n    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;\n    __cntrl_ = new _CntrlBlk(__p, default_delete<_Yp>(), allocator<_Yp>());\n    __hold.release();\n    __enable_weak_this(__p, __p);\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp, class _Dp>\nshared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d,\n                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)\n    : __ptr_(__p)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typedef __shared_ptr_pointer<_Yp*, _Dp, allocator<_Yp> > _CntrlBlk;\n        __cntrl_ = new _CntrlBlk(__p, __d, allocator<_Yp>());\n        __enable_weak_this(__p, __p);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __d(__p);\n        throw;\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n}\n\ntemplate<class _Tp>\ntemplate<class _Dp>\nshared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d)\n    : __ptr_(0)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typedef __shared_ptr_pointer<nullptr_t, _Dp, allocator<_Tp> > _CntrlBlk;\n        __cntrl_ = new _CntrlBlk(__p, __d, allocator<_Tp>());\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __d(__p);\n        throw;\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp, class _Dp, class _Alloc>\nshared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,\n                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)\n    : __ptr_(__p)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;\n        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;\n        typedef __allocator_destructor<_A2> _D2;\n        _A2 __a2(__a);\n        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));\n        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))\n            _CntrlBlk(__p, __d, __a);\n        __cntrl_ = _VSTD::addressof(*__hold2.release());\n        __enable_weak_this(__p, __p);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __d(__p);\n        throw;\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n}\n\ntemplate<class _Tp>\ntemplate<class _Dp, class _Alloc>\nshared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)\n    : __ptr_(0)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;\n        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;\n        typedef __allocator_destructor<_A2> _D2;\n        _A2 __a2(__a);\n        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));\n        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))\n            _CntrlBlk(__p, __d, __a);\n        __cntrl_ = _VSTD::addressof(*__hold2.release());\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __d(__p);\n        throw;\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\nshared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT\n    : __ptr_(__p),\n      __cntrl_(__r.__cntrl_)\n{\n    if (__cntrl_)\n        __cntrl_->__add_shared();\n}\n\ntemplate<class _Tp>\ninline\nshared_ptr<_Tp>::shared_ptr(const shared_ptr& __r) _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    if (__cntrl_)\n        __cntrl_->__add_shared();\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\nshared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r,\n                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)\n         _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    if (__cntrl_)\n        __cntrl_->__add_shared();\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\ninline\nshared_ptr<_Tp>::shared_ptr(shared_ptr&& __r) _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    __r.__ptr_ = 0;\n    __r.__cntrl_ = 0;\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\nshared_ptr<_Tp>::shared_ptr(shared_ptr<_Yp>&& __r,\n                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)\n         _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    __r.__ptr_ = 0;\n    __r.__cntrl_ = 0;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\ntemplate<class _Yp>\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\nshared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp>&& __r,\n#else\nshared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp> __r,\n#endif\n                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)\n    : __ptr_(__r.get())\n{\n    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;\n    __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());\n    __enable_weak_this(__r.get(), __r.get());\n    __r.release();\n}\n\ntemplate<class _Tp>\ntemplate <class _Yp, class _Dp>\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\nshared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,\n#else\nshared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,\n#endif\n                            typename enable_if\n                            <\n                                !is_lvalue_reference<_Dp>::value &&\n                                !is_array<_Yp>::value &&\n                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,\n                                __nat\n                            >::type)\n    : __ptr_(__r.get())\n{\n#if _LIBCPP_STD_VER > 11\n    if (__ptr_ == nullptr)\n        __cntrl_ = nullptr;\n    else\n#endif\n    {\n        typedef __shared_ptr_pointer<_Yp*, _Dp, allocator<_Yp> > _CntrlBlk;\n        __cntrl_ = new _CntrlBlk(__r.get(), __r.get_deleter(), allocator<_Yp>());\n        __enable_weak_this(__r.get(), __r.get());\n    }\n    __r.release();\n}\n\ntemplate<class _Tp>\ntemplate <class _Yp, class _Dp>\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\nshared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,\n#else\nshared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,\n#endif\n                            typename enable_if\n                            <\n                                is_lvalue_reference<_Dp>::value &&\n                                !is_array<_Yp>::value &&\n                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,\n                                __nat\n                            >::type)\n    : __ptr_(__r.get())\n{\n#if _LIBCPP_STD_VER > 11\n    if (__ptr_ == nullptr)\n        __cntrl_ = nullptr;\n    else\n#endif\n    {\n        typedef __shared_ptr_pointer<_Yp*,\n                                     reference_wrapper<typename remove_reference<_Dp>::type>,\n                                     allocator<_Yp> > _CntrlBlk;\n        __cntrl_ = new _CntrlBlk(__r.get(), ref(__r.get_deleter()), allocator<_Yp>());\n        __enable_weak_this(__r.get(), __r.get());\n    }\n    __r.release();\n}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate<class _Tp>\ntemplate<class ..._Args>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::make_shared(_Args&& ...__args)\n{\n    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;\n    typedef allocator<_CntrlBlk> _A2;\n    typedef __allocator_destructor<_A2> _D2;\n    _A2 __a2;\n    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));\n    ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = __hold2.release();\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\ntemplate<class _Tp>\ntemplate<class _Alloc, class ..._Args>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _Args&& ...__args)\n{\n    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;\n    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;\n    typedef __allocator_destructor<_A2> _D2;\n    _A2 __a2(__a);\n    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));\n    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))\n        _CntrlBlk(__a, _VSTD::forward<_Args>(__args)...);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate<class _Tp>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::make_shared()\n{\n    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;\n    typedef allocator<_CntrlBlk> _Alloc2;\n    typedef __allocator_destructor<_Alloc2> _D2;\n    _Alloc2 __alloc2;\n    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));\n    ::new(__hold2.get()) _CntrlBlk(__alloc2);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = __hold2.release();\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\ntemplate<class _Tp>\ntemplate<class _A0>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::make_shared(_A0& __a0)\n{\n    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;\n    typedef allocator<_CntrlBlk> _Alloc2;\n    typedef __allocator_destructor<_Alloc2> _D2;\n    _Alloc2 __alloc2;\n    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));\n    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = __hold2.release();\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\ntemplate<class _Tp>\ntemplate<class _A0, class _A1>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1)\n{\n    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;\n    typedef allocator<_CntrlBlk> _Alloc2;\n    typedef __allocator_destructor<_Alloc2> _D2;\n    _Alloc2 __alloc2;\n    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));\n    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = __hold2.release();\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\ntemplate<class _Tp>\ntemplate<class _A0, class _A1, class _A2>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1, _A2& __a2)\n{\n    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;\n    typedef allocator<_CntrlBlk> _Alloc2;\n    typedef __allocator_destructor<_Alloc2> _D2;\n    _Alloc2 __alloc2;\n    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));\n    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1, __a2);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = __hold2.release();\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\ntemplate<class _Tp>\ntemplate<class _Alloc>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::allocate_shared(const _Alloc& __a)\n{\n    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;\n    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;\n    typedef __allocator_destructor<_Alloc2> _D2;\n    _Alloc2 __alloc2(__a);\n    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));\n    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))\n        _CntrlBlk(__a);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\ntemplate<class _Tp>\ntemplate<class _Alloc, class _A0>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0)\n{\n    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;\n    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;\n    typedef __allocator_destructor<_Alloc2> _D2;\n    _Alloc2 __alloc2(__a);\n    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));\n    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))\n        _CntrlBlk(__a, __a0);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\ntemplate<class _Tp>\ntemplate<class _Alloc, class _A0, class _A1>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)\n{\n    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;\n    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;\n    typedef __allocator_destructor<_Alloc2> _D2;\n    _Alloc2 __alloc2(__a);\n    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));\n    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))\n        _CntrlBlk(__a, __a0, __a1);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\ntemplate<class _Tp>\ntemplate<class _Alloc, class _A0, class _A1, class _A2>\nshared_ptr<_Tp>\nshared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)\n{\n    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;\n    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;\n    typedef __allocator_destructor<_Alloc2> _D2;\n    _Alloc2 __alloc2(__a);\n    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));\n    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))\n        _CntrlBlk(__a, __a0, __a1, __a2);\n    shared_ptr<_Tp> __r;\n    __r.__ptr_ = __hold2.get()->get();\n    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());\n    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);\n    return __r;\n}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate<class _Tp>\nshared_ptr<_Tp>::~shared_ptr()\n{\n    if (__cntrl_)\n        __cntrl_->__release_shared();\n}\n\ntemplate<class _Tp>\ninline\nshared_ptr<_Tp>&\nshared_ptr<_Tp>::operator=(const shared_ptr& __r) _NOEXCEPT\n{\n    shared_ptr(__r).swap(*this);\n    return *this;\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\ntypename enable_if\n<\n    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,\n    shared_ptr<_Tp>&\n>::type\nshared_ptr<_Tp>::operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT\n{\n    shared_ptr(__r).swap(*this);\n    return *this;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\ninline\nshared_ptr<_Tp>&\nshared_ptr<_Tp>::operator=(shared_ptr&& __r) _NOEXCEPT\n{\n    shared_ptr(_VSTD::move(__r)).swap(*this);\n    return *this;\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\ntypename enable_if\n<\n    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,\n    shared_ptr<_Tp>&\n>::type\nshared_ptr<_Tp>::operator=(shared_ptr<_Yp>&& __r)\n{\n    shared_ptr(_VSTD::move(__r)).swap(*this);\n    return *this;\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\ntypename enable_if\n<\n    !is_array<_Yp>::value &&\n    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,\n    shared_ptr<_Tp>\n>::type&\nshared_ptr<_Tp>::operator=(auto_ptr<_Yp>&& __r)\n{\n    shared_ptr(_VSTD::move(__r)).swap(*this);\n    return *this;\n}\n\ntemplate<class _Tp>\ntemplate <class _Yp, class _Dp>\ninline\ntypename enable_if\n<\n    !is_array<_Yp>::value &&\n    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, \n                   typename shared_ptr<_Tp>::element_type*>::value,\n    shared_ptr<_Tp>&\n>::type\nshared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp>&& __r)\n{\n    shared_ptr(_VSTD::move(__r)).swap(*this);\n    return *this;\n}\n\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    !is_array<_Yp>::value &&\n    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,\n    shared_ptr<_Tp>&\n>::type\nshared_ptr<_Tp>::operator=(auto_ptr<_Yp> __r)\n{\n    shared_ptr(__r).swap(*this);\n    return *this;\n}\n\ntemplate<class _Tp>\ntemplate <class _Yp, class _Dp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    !is_array<_Yp>::value &&\n    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, \n                   typename shared_ptr<_Tp>::element_type*>::value,\n    shared_ptr<_Tp>&\n>::type\nshared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp> __r)\n{\n    shared_ptr(_VSTD::move(__r)).swap(*this);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\ninline\nvoid\nshared_ptr<_Tp>::swap(shared_ptr& __r) _NOEXCEPT\n{\n    _VSTD::swap(__ptr_, __r.__ptr_);\n    _VSTD::swap(__cntrl_, __r.__cntrl_);\n}\n\ntemplate<class _Tp>\ninline\nvoid\nshared_ptr<_Tp>::reset() _NOEXCEPT\n{\n    shared_ptr().swap(*this);\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\ntypename enable_if\n<\n    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,\n    void\n>::type\nshared_ptr<_Tp>::reset(_Yp* __p)\n{\n    shared_ptr(__p).swap(*this);\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp, class _Dp>\ninline\ntypename enable_if\n<\n    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,\n    void\n>::type\nshared_ptr<_Tp>::reset(_Yp* __p, _Dp __d)\n{\n    shared_ptr(__p, __d).swap(*this);\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp, class _Dp, class _Alloc>\ninline\ntypename enable_if\n<\n    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,\n    void\n>::type\nshared_ptr<_Tp>::reset(_Yp* __p, _Dp __d, _Alloc __a)\n{\n    shared_ptr(__p, __d, __a).swap(*this);\n}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate<class _Tp, class ..._Args>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    !is_array<_Tp>::value,\n    shared_ptr<_Tp>\n>::type\nmake_shared(_Args&& ...__args)\n{\n    return shared_ptr<_Tp>::make_shared(_VSTD::forward<_Args>(__args)...);\n}\n\ntemplate<class _Tp, class _Alloc, class ..._Args>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    !is_array<_Tp>::value,\n    shared_ptr<_Tp>\n>::type\nallocate_shared(const _Alloc& __a, _Args&& ...__args)\n{\n    return shared_ptr<_Tp>::allocate_shared(__a, _VSTD::forward<_Args>(__args)...);\n}\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\nmake_shared()\n{\n    return shared_ptr<_Tp>::make_shared();\n}\n\ntemplate<class _Tp, class _A0>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\nmake_shared(_A0& __a0)\n{\n    return shared_ptr<_Tp>::make_shared(__a0);\n}\n\ntemplate<class _Tp, class _A0, class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\nmake_shared(_A0& __a0, _A1& __a1)\n{\n    return shared_ptr<_Tp>::make_shared(__a0, __a1);\n}\n\ntemplate<class _Tp, class _A0, class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\nmake_shared(_A0& __a0, _A1& __a1, _A2& __a2)\n{\n    return shared_ptr<_Tp>::make_shared(__a0, __a1, __a2);\n}\n\ntemplate<class _Tp, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\nallocate_shared(const _Alloc& __a)\n{\n    return shared_ptr<_Tp>::allocate_shared(__a);\n}\n\ntemplate<class _Tp, class _Alloc, class _A0>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\nallocate_shared(const _Alloc& __a, _A0& __a0)\n{\n    return shared_ptr<_Tp>::allocate_shared(__a, __a0);\n}\n\ntemplate<class _Tp, class _Alloc, class _A0, class _A1>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\nallocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)\n{\n    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1);\n}\n\ntemplate<class _Tp, class _Alloc, class _A0, class _A1, class _A2>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\nallocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)\n{\n    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1, __a2);\n}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate<class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT\n{\n    return __x.get() == __y.get();\n}\n\ntemplate<class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT\n{\n    return !(__x == __y);\n}\n\ntemplate<class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT\n{\n    typedef typename common_type<_Tp*, _Up*>::type _Vp;\n    return less<_Vp>()(__x.get(), __y.get());\n}\n\ntemplate<class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT\n{\n    return __y < __x;\n}\n\ntemplate<class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT\n{\n    return !(__y < __x);\n}\n\ntemplate<class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT\n{\n    return !(__x < __y);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT\n{\n    return !__x;\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT\n{\n    return !__x;\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT\n{\n    return static_cast<bool>(__x);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT\n{\n    return static_cast<bool>(__x);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT\n{\n    return less<_Tp*>()(__x.get(), nullptr);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT\n{\n    return less<_Tp*>()(nullptr, __x.get());\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT\n{\n    return nullptr < __x;\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT\n{\n    return __x < nullptr;\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT\n{\n    return !(nullptr < __x);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT\n{\n    return !(__x < nullptr);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT\n{\n    return !(__x < nullptr);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT\n{\n    return !(nullptr < __x);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT\n{\n    __x.swap(__y);\n}\n\ntemplate<class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    !is_array<_Tp>::value && !is_array<_Up>::value,\n    shared_ptr<_Tp>\n>::type\nstatic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT\n{\n    return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get()));\n}\n\ntemplate<class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    !is_array<_Tp>::value && !is_array<_Up>::value,\n    shared_ptr<_Tp>\n>::type\ndynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT\n{\n    _Tp* __p = dynamic_cast<_Tp*>(__r.get());\n    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();\n}\n\ntemplate<class _Tp, class _Up>\ntypename enable_if\n<\n    is_array<_Tp>::value == is_array<_Up>::value,\n    shared_ptr<_Tp>\n>::type\nconst_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT\n{\n    typedef typename remove_extent<_Tp>::type _RTp;\n    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));\n}\n\n#ifndef _LIBCPP_NO_RTTI\n\ntemplate<class _Dp, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_Dp*\nget_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT\n{\n    return __p.template __get_deleter<_Dp>();\n}\n\n#endif  // _LIBCPP_NO_RTTI\n\ntemplate<class _Tp>\nclass _LIBCPP_TEMPLATE_VIS weak_ptr\n{\npublic:\n    typedef _Tp element_type;\nprivate:\n    element_type*        __ptr_;\n    __shared_weak_count* __cntrl_;\n\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;\n    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(shared_ptr<_Yp> const& __r,\n                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)\n                        _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    weak_ptr(weak_ptr const& __r) _NOEXCEPT;\n    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp> const& __r,\n                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)\n                         _NOEXCEPT;\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    weak_ptr(weak_ptr&& __r) _NOEXCEPT;\n    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp>&& __r,\n                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)\n                         _NOEXCEPT;\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    ~weak_ptr();\n\n    _LIBCPP_INLINE_VISIBILITY\n    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;\n    template<class _Yp>\n        typename enable_if\n        <\n            is_convertible<_Yp*, element_type*>::value,\n            weak_ptr&\n        >::type\n        _LIBCPP_INLINE_VISIBILITY\n        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY\n    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;\n    template<class _Yp>\n        typename enable_if\n        <\n            is_convertible<_Yp*, element_type*>::value,\n            weak_ptr&\n        >::type\n        _LIBCPP_INLINE_VISIBILITY\n        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    template<class _Yp>\n        typename enable_if\n        <\n            is_convertible<_Yp*, element_type*>::value,\n            weak_ptr&\n        >::type\n        _LIBCPP_INLINE_VISIBILITY\n        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(weak_ptr& __r) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    void reset() _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    long use_count() const _NOEXCEPT\n        {return __cntrl_ ? __cntrl_->use_count() : 0;}\n    _LIBCPP_INLINE_VISIBILITY\n    bool expired() const _NOEXCEPT\n        {return __cntrl_ == 0 || __cntrl_->use_count() == 0;}\n    shared_ptr<_Tp> lock() const _NOEXCEPT;\n    template<class _Up>\n        _LIBCPP_INLINE_VISIBILITY\n        bool owner_before(const shared_ptr<_Up>& __r) const\n        {return __cntrl_ < __r.__cntrl_;}\n    template<class _Up>\n        _LIBCPP_INLINE_VISIBILITY\n        bool owner_before(const weak_ptr<_Up>& __r) const\n        {return __cntrl_ < __r.__cntrl_;}\n\n    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;\n    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;\n};\n\ntemplate<class _Tp>\ninline\n_LIBCPP_CONSTEXPR\nweak_ptr<_Tp>::weak_ptr() _NOEXCEPT\n    : __ptr_(0),\n      __cntrl_(0)\n{\n}\n\ntemplate<class _Tp>\ninline\nweak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    if (__cntrl_)\n        __cntrl_->__add_weak();\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\nweak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,\n                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)\n                         _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    if (__cntrl_)\n        __cntrl_->__add_weak();\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\nweak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,\n                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)\n         _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    if (__cntrl_)\n        __cntrl_->__add_weak();\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\ninline\nweak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    __r.__ptr_ = 0;\n    __r.__cntrl_ = 0;\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\nweak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,\n                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)\n         _NOEXCEPT\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_)\n{\n    __r.__ptr_ = 0;\n    __r.__cntrl_ = 0;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\nweak_ptr<_Tp>::~weak_ptr()\n{\n    if (__cntrl_)\n        __cntrl_->__release_weak();\n}\n\ntemplate<class _Tp>\ninline\nweak_ptr<_Tp>&\nweak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT\n{\n    weak_ptr(__r).swap(*this);\n    return *this;\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\ntypename enable_if\n<\n    is_convertible<_Yp*, _Tp*>::value,\n    weak_ptr<_Tp>&\n>::type\nweak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT\n{\n    weak_ptr(__r).swap(*this);\n    return *this;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\ninline\nweak_ptr<_Tp>&\nweak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT\n{\n    weak_ptr(_VSTD::move(__r)).swap(*this);\n    return *this;\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\ntypename enable_if\n<\n    is_convertible<_Yp*, _Tp*>::value,\n    weak_ptr<_Tp>&\n>::type\nweak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT\n{\n    weak_ptr(_VSTD::move(__r)).swap(*this);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _Tp>\ntemplate<class _Yp>\ninline\ntypename enable_if\n<\n    is_convertible<_Yp*, _Tp*>::value,\n    weak_ptr<_Tp>&\n>::type\nweak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT\n{\n    weak_ptr(__r).swap(*this);\n    return *this;\n}\n\ntemplate<class _Tp>\ninline\nvoid\nweak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT\n{\n    _VSTD::swap(__ptr_, __r.__ptr_);\n    _VSTD::swap(__cntrl_, __r.__cntrl_);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT\n{\n    __x.swap(__y);\n}\n\ntemplate<class _Tp>\ninline\nvoid\nweak_ptr<_Tp>::reset() _NOEXCEPT\n{\n    weak_ptr().swap(*this);\n}\n\ntemplate<class _Tp>\ntemplate<class _Yp>\nshared_ptr<_Tp>::shared_ptr(const weak_ptr<_Yp>& __r,\n                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)\n    : __ptr_(__r.__ptr_),\n      __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)\n{\n    if (__cntrl_ == 0)\n        __throw_bad_weak_ptr();\n}\n\ntemplate<class _Tp>\nshared_ptr<_Tp>\nweak_ptr<_Tp>::lock() const _NOEXCEPT\n{\n    shared_ptr<_Tp> __r;\n    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;\n    if (__r.__cntrl_)\n        __r.__ptr_ = __ptr_;\n    return __r;\n}\n\n#if _LIBCPP_STD_VER > 14\ntemplate <class _Tp = void> struct owner_less;\n#else\ntemplate <class _Tp> struct owner_less;\n#endif\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS owner_less<shared_ptr<_Tp> >\n    : binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>\n{\n    typedef bool result_type;\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const\n        {return __x.owner_before(__y);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const\n        {return __x.owner_before(__y);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const\n        {return __x.owner_before(__y);}\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS owner_less<weak_ptr<_Tp> >\n    : binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>\n{\n    typedef bool result_type;\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const\n        {return __x.owner_before(__y);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const\n        {return __x.owner_before(__y);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const\n        {return __x.owner_before(__y);}\n};\n\n#if _LIBCPP_STD_VER > 14\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS owner_less<void>\n{\n    template <class _Tp, class _Up>\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const\n        {return __x.owner_before(__y);}\n    template <class _Tp, class _Up>\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()( shared_ptr<_Tp> const& __x,  weak_ptr<_Up> const& __y) const\n        {return __x.owner_before(__y);}\n    template <class _Tp, class _Up>\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const\n        {return __x.owner_before(__y);}\n    template <class _Tp, class _Up>\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const\n        {return __x.owner_before(__y);}\n    typedef void is_transparent;\n};\n#endif\n\ntemplate<class _Tp>\nclass _LIBCPP_TEMPLATE_VIS enable_shared_from_this\n{\n    mutable weak_ptr<_Tp> __weak_this_;\nprotected:\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR\n    enable_shared_from_this() _NOEXCEPT {}\n    _LIBCPP_INLINE_VISIBILITY\n    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}\n    _LIBCPP_INLINE_VISIBILITY\n    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT\n        {return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    ~enable_shared_from_this() {}\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    shared_ptr<_Tp> shared_from_this()\n        {return shared_ptr<_Tp>(__weak_this_);}\n    _LIBCPP_INLINE_VISIBILITY\n    shared_ptr<_Tp const> shared_from_this() const\n        {return shared_ptr<const _Tp>(__weak_this_);}\n\n#if _LIBCPP_STD_VER > 14\n    _LIBCPP_INLINE_VISIBILITY\n    weak_ptr<_Tp> weak_from_this() _NOEXCEPT\n       { return __weak_this_; }\n\n    _LIBCPP_INLINE_VISIBILITY\n    weak_ptr<const _Tp> weak_from_this() const _NOEXCEPT\n        { return __weak_this_; }\n#endif // _LIBCPP_STD_VER > 14\n\n    template <class _Up> friend class shared_ptr;\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS hash<shared_ptr<_Tp> >\n{\n    typedef shared_ptr<_Tp>      argument_type;\n    typedef size_t               result_type;\n    _LIBCPP_INLINE_VISIBILITY\n    result_type operator()(const argument_type& __ptr) const _NOEXCEPT\n    {\n        return hash<_Tp*>()(__ptr.get());\n    }\n};\n\ntemplate<class _CharT, class _Traits, class _Yp>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);\n\n\n#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)\n\nclass _LIBCPP_TYPE_VIS __sp_mut\n{\n    void* __lx;\npublic:\n    void lock() _NOEXCEPT;\n    void unlock() _NOEXCEPT;\n\nprivate:\n    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;\n    __sp_mut(const __sp_mut&);\n    __sp_mut& operator=(const __sp_mut&);\n\n    friend _LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);\n};\n\n_LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\natomic_is_lock_free(const shared_ptr<_Tp>*)\n{\n    return false;\n}\n\ntemplate <class _Tp>\nshared_ptr<_Tp>\natomic_load(const shared_ptr<_Tp>* __p)\n{\n    __sp_mut& __m = __get_sp_mut(__p);\n    __m.lock();\n    shared_ptr<_Tp> __q = *__p;\n    __m.unlock();\n    return __q;\n}\n  \ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\natomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)\n{\n    return atomic_load(__p);\n}\n\ntemplate <class _Tp>\nvoid\natomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)\n{\n    __sp_mut& __m = __get_sp_mut(__p);\n    __m.lock();\n    __p->swap(__r);\n    __m.unlock();\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\natomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)\n{\n    atomic_store(__p, __r);\n}\n\ntemplate <class _Tp>\nshared_ptr<_Tp>\natomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)\n{\n    __sp_mut& __m = __get_sp_mut(__p);\n    __m.lock();\n    __p->swap(__r);\n    __m.unlock();\n    return __r;\n}\n  \ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nshared_ptr<_Tp>\natomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)\n{\n    return atomic_exchange(__p, __r);\n}\n\ntemplate <class _Tp>\nbool\natomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)\n{\n    shared_ptr<_Tp> __temp;\n    __sp_mut& __m = __get_sp_mut(__p);\n    __m.lock();\n    if (__p->__owner_equivalent(*__v))\n    {\n        _VSTD::swap(__temp, *__p);\n        *__p = __w;\n        __m.unlock();\n        return true;\n    }\n    _VSTD::swap(__temp, *__v);\n    *__v = *__p;\n    __m.unlock();\n    return false;\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\natomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)\n{\n    return atomic_compare_exchange_strong(__p, __v, __w);\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\natomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,\n                                        shared_ptr<_Tp> __w, memory_order, memory_order)\n{\n    return atomic_compare_exchange_strong(__p, __v, __w);\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\natomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,\n                                      shared_ptr<_Tp> __w, memory_order, memory_order)\n{\n    return atomic_compare_exchange_weak(__p, __v, __w);\n}\n\n#endif  // !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)\n\n//enum class\n#if defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE)\n# ifndef _LIBCPP_CXX03_LANG\nenum class pointer_safety : unsigned char {\n  relaxed,\n  preferred,\n  strict\n};\n# endif\n#else\nstruct _LIBCPP_TYPE_VIS pointer_safety\n{\n    enum __lx\n    {\n        relaxed,\n        preferred,\n        strict\n    };\n\n    __lx __v_;\n\n    _LIBCPP_INLINE_VISIBILITY\n    pointer_safety() : __v_() {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    pointer_safety(__lx __v) : __v_(__v) {}\n    _LIBCPP_INLINE_VISIBILITY\n    operator int() const {return __v_;}\n};\n#endif\n\n#if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) && \\\n    defined(_LIBCPP_BUILDING_MEMORY)\n_LIBCPP_FUNC_VIS pointer_safety get_pointer_safety() _NOEXCEPT;\n#else\n// This function is only offered in C++03 under ABI v1.\n# if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) || !defined(_LIBCPP_CXX03_LANG)\ninline _LIBCPP_INLINE_VISIBILITY\npointer_safety get_pointer_safety() _NOEXCEPT {\n  return pointer_safety::relaxed;\n}\n# endif\n#endif\n\n\n_LIBCPP_FUNC_VIS void declare_reachable(void* __p);\n_LIBCPP_FUNC_VIS void declare_no_pointers(char* __p, size_t __n);\n_LIBCPP_FUNC_VIS void undeclare_no_pointers(char* __p, size_t __n);\n_LIBCPP_FUNC_VIS void* __undeclare_reachable(void* __p);\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_Tp*\nundeclare_reachable(_Tp* __p)\n{\n    return static_cast<_Tp*>(__undeclare_reachable(__p));\n}\n\n_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);\n\n// --- Helper for container swap --\ntemplate <typename _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __swap_allocator(_Alloc & __a1, _Alloc & __a2)\n#if _LIBCPP_STD_VER >= 14\n    _NOEXCEPT\n#else\n    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)\n#endif\n{\n    __swap_allocator(__a1, __a2, \n      integral_constant<bool, _VSTD::allocator_traits<_Alloc>::propagate_on_container_swap::value>());\n}\n\ntemplate <typename _Alloc>\n_LIBCPP_INLINE_VISIBILITY\nvoid __swap_allocator(_Alloc & __a1, _Alloc & __a2, true_type)\n#if _LIBCPP_STD_VER >= 14\n    _NOEXCEPT\n#else\n    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)\n#endif\n{\n    using _VSTD::swap;\n    swap(__a1, __a2);\n}\n\ntemplate <typename _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __swap_allocator(_Alloc &, _Alloc &, false_type) _NOEXCEPT {}\n\ntemplate <typename _Alloc, typename _Traits=allocator_traits<_Alloc> >\nstruct __noexcept_move_assign_container : public integral_constant<bool, \n    _Traits::propagate_on_container_move_assignment::value\n#if _LIBCPP_STD_VER > 14\n        || _Traits::is_always_equal::value\n#else\n        && is_nothrow_move_assignable<_Alloc>::value\n#endif\n    > {};\n\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\ntemplate <class _Tp, class _Alloc>\nstruct __temp_value {\n    typedef allocator_traits<_Alloc> _Traits;\n    \n    typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __v;\n    _Alloc &__a;\n\n    _Tp *__addr() { return reinterpret_cast<_Tp *>(addressof(__v)); }\n    _Tp &   get() { return *__addr(); }\n        \n    template<class... _Args>\n    __temp_value(_Alloc &__alloc, _Args&& ... __args) : __a(__alloc)\n    { _Traits::construct(__a, __addr(), _VSTD::forward<_Args>(__args)...); }\n    \n    ~__temp_value() { _Traits::destroy(__a, __addr()); }\n    };\n#endif\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_MEMORY\n","// -*- C++ -*-\n//===--------------------------- string -----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is distributed under the University of Illinois Open Source\n// License. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_STRING\n#define _LIBCPP_STRING\n\n/*\n    string synopsis\n\nnamespace std\n{\n\ntemplate <class stateT>\nclass fpos\n{\nprivate:\n    stateT st;\npublic:\n    fpos(streamoff = streamoff());\n\n    operator streamoff() const;\n\n    stateT state() const;\n    void state(stateT);\n\n    fpos& operator+=(streamoff);\n    fpos  operator+ (streamoff) const;\n    fpos& operator-=(streamoff);\n    fpos  operator- (streamoff) const;\n};\n\ntemplate <class stateT> streamoff operator-(const fpos<stateT>& x, const fpos<stateT>& y);\n\ntemplate <class stateT> bool operator==(const fpos<stateT>& x, const fpos<stateT>& y);\ntemplate <class stateT> bool operator!=(const fpos<stateT>& x, const fpos<stateT>& y);\n\ntemplate <class charT>\nstruct char_traits\n{\n    typedef charT     char_type;\n    typedef ...       int_type;\n    typedef streamoff off_type;\n    typedef streampos pos_type;\n    typedef mbstate_t state_type;\n\n    static void assign(char_type& c1, const char_type& c2) noexcept;\n    static constexpr bool eq(char_type c1, char_type c2) noexcept;\n    static constexpr bool lt(char_type c1, char_type c2) noexcept;\n\n    static int              compare(const char_type* s1, const char_type* s2, size_t n);\n    static size_t           length(const char_type* s);\n    static const char_type* find(const char_type* s, size_t n, const char_type& a);\n    static char_type*       move(char_type* s1, const char_type* s2, size_t n);\n    static char_type*       copy(char_type* s1, const char_type* s2, size_t n);\n    static char_type*       assign(char_type* s, size_t n, char_type a);\n\n    static constexpr int_type  not_eof(int_type c) noexcept;\n    static constexpr char_type to_char_type(int_type c) noexcept;\n    static constexpr int_type  to_int_type(char_type c) noexcept;\n    static constexpr bool      eq_int_type(int_type c1, int_type c2) noexcept;\n    static constexpr int_type  eof() noexcept;\n};\n\ntemplate <> struct char_traits<char>;\ntemplate <> struct char_traits<wchar_t>;\n\ntemplate<class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\nclass basic_string\n{\npublic:\n// types:\n    typedef traits traits_type;\n    typedef typename traits_type::char_type value_type;\n    typedef Allocator allocator_type;\n    typedef typename allocator_type::size_type size_type;\n    typedef typename allocator_type::difference_type difference_type;\n    typedef typename allocator_type::reference reference;\n    typedef typename allocator_type::const_reference const_reference;\n    typedef typename allocator_type::pointer pointer;\n    typedef typename allocator_type::const_pointer const_pointer;\n    typedef implementation-defined iterator;\n    typedef implementation-defined const_iterator;\n    typedef std::reverse_iterator<iterator> reverse_iterator;\n    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n\n    static const size_type npos = -1;\n\n    basic_string()\n        noexcept(is_nothrow_default_constructible<allocator_type>::value);\n    explicit basic_string(const allocator_type& a);\n    basic_string(const basic_string& str);\n    basic_string(basic_string&& str)\n        noexcept(is_nothrow_move_constructible<allocator_type>::value);\n    basic_string(const basic_string& str, size_type pos,\n                 const allocator_type& a = allocator_type());\n    basic_string(const basic_string& str, size_type pos, size_type n,\n                 const Allocator& a = Allocator());\n    template<class T>\n        basic_string(const T& t, size_type pos, size_type n, const Allocator& a = Allocator()); // C++17\n    explicit basic_string(const basic_string_view<charT, traits> sv, const Allocator& a = Allocator());\n    basic_string(const value_type* s, const allocator_type& a = allocator_type());\n    basic_string(const value_type* s, size_type n, const allocator_type& a = allocator_type());\n    basic_string(size_type n, value_type c, const allocator_type& a = allocator_type());\n    template<class InputIterator>\n        basic_string(InputIterator begin, InputIterator end,\n                     const allocator_type& a = allocator_type());\n    basic_string(initializer_list<value_type>, const Allocator& = Allocator());\n    basic_string(const basic_string&, const Allocator&);\n    basic_string(basic_string&&, const Allocator&);\n\n    ~basic_string();\n\n    operator basic_string_view<charT, traits>() const noexcept;\n\n    basic_string& operator=(const basic_string& str);\n    basic_string& operator=(basic_string_view<charT, traits> sv);\n    basic_string& operator=(basic_string&& str)\n        noexcept(\n             allocator_type::propagate_on_container_move_assignment::value ||\n             allocator_type::is_always_equal::value ); // C++17\n    basic_string& operator=(const value_type* s);\n    basic_string& operator=(value_type c);\n    basic_string& operator=(initializer_list<value_type>);\n\n    iterator       begin() noexcept;\n    const_iterator begin() const noexcept;\n    iterator       end() noexcept;\n    const_iterator end() const noexcept;\n\n    reverse_iterator       rbegin() noexcept;\n    const_reverse_iterator rbegin() const noexcept;\n    reverse_iterator       rend() noexcept;\n    const_reverse_iterator rend() const noexcept;\n\n    const_iterator         cbegin() const noexcept;\n    const_iterator         cend() const noexcept;\n    const_reverse_iterator crbegin() const noexcept;\n    const_reverse_iterator crend() const noexcept;\n\n    size_type size() const noexcept;\n    size_type length() const noexcept;\n    size_type max_size() const noexcept;\n    size_type capacity() const noexcept;\n\n    void resize(size_type n, value_type c);\n    void resize(size_type n);\n\n    void reserve(size_type res_arg = 0);\n    void shrink_to_fit();\n    void clear() noexcept;\n    bool empty() const noexcept;\n\n    const_reference operator[](size_type pos) const;\n    reference       operator[](size_type pos);\n\n    const_reference at(size_type n) const;\n    reference       at(size_type n);\n\n    basic_string& operator+=(const basic_string& str);\n    basic_string& operator+=(basic_string_view<charT, traits> sv);\n    basic_string& operator+=(const value_type* s);\n    basic_string& operator+=(value_type c);\n    basic_string& operator+=(initializer_list<value_type>);\n\n    basic_string& append(const basic_string& str);\n    basic_string& append(basic_string_view<charT, traits> sv);\n    basic_string& append(const basic_string& str, size_type pos, size_type n=npos); //C++14\n    template <class T>\n        basic_string& append(const T& t, size_type pos, size_type n=npos); // C++17\n    basic_string& append(const value_type* s, size_type n);\n    basic_string& append(const value_type* s);\n    basic_string& append(size_type n, value_type c);\n    template<class InputIterator>\n        basic_string& append(InputIterator first, InputIterator last);\n    basic_string& append(initializer_list<value_type>);\n\n    void push_back(value_type c);\n    void pop_back();\n    reference       front();\n    const_reference front() const;\n    reference       back();\n    const_reference back() const;\n\n    basic_string& assign(const basic_string& str);\n    basic_string& assign(basic_string_view<charT, traits> sv);\n    basic_string& assign(basic_string&& str);\n    basic_string& assign(const basic_string& str, size_type pos, size_type n=npos); // C++14\n    template <class T>\n        basic_string& assign(const T& t, size_type pos, size_type n=npos); // C++17\n    basic_string& assign(const value_type* s, size_type n);\n    basic_string& assign(const value_type* s);\n    basic_string& assign(size_type n, value_type c);\n    template<class InputIterator>\n        basic_string& assign(InputIterator first, InputIterator last);\n    basic_string& assign(initializer_list<value_type>);\n\n    basic_string& insert(size_type pos1, const basic_string& str);\n    basic_string& insert(size_type pos1, basic_string_view<charT, traits> sv);\n    basic_string& insert(size_type pos1, const basic_string& str,\n                         size_type pos2, size_type n);\n    template <class T>\n        basic_string& insert(size_type pos1, const T& t, size_type pos2, size_type n); // C++17\n    basic_string& insert(size_type pos, const value_type* s, size_type n=npos); //C++14\n    basic_string& insert(size_type pos, const value_type* s);\n    basic_string& insert(size_type pos, size_type n, value_type c);\n    iterator      insert(const_iterator p, value_type c);\n    iterator      insert(const_iterator p, size_type n, value_type c);\n    template<class InputIterator>\n        iterator insert(const_iterator p, InputIterator first, InputIterator last);\n    iterator      insert(const_iterator p, initializer_list<value_type>);\n\n    basic_string& erase(size_type pos = 0, size_type n = npos);\n    iterator      erase(const_iterator position);\n    iterator      erase(const_iterator first, const_iterator last);\n\n    basic_string& replace(size_type pos1, size_type n1, const basic_string& str);\n    basic_string& replace(size_type pos1, size_type n1, basic_string_view<charT, traits> sv);\n    basic_string& replace(size_type pos1, size_type n1, const basic_string& str,\n                          size_type pos2, size_type n2=npos); // C++14\n    template <class T>\n        basic_string& replace(size_type pos1, size_type n1, const T& t,\n                              size_type pos2, size_type n); // C++17\n    basic_string& replace(size_type pos, size_type n1, const value_type* s, size_type n2);\n    basic_string& replace(size_type pos, size_type n1, const value_type* s);\n    basic_string& replace(size_type pos, size_type n1, size_type n2, value_type c);\n    basic_string& replace(const_iterator i1, const_iterator i2, const basic_string& str);\n    basic_string& replace(const_iterator i1, const_iterator i2, basic_string_view<charT, traits> sv);\n    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s, size_type n);\n    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s);\n    basic_string& replace(const_iterator i1, const_iterator i2, size_type n, value_type c);\n    template<class InputIterator>\n        basic_string& replace(const_iterator i1, const_iterator i2, InputIterator j1, InputIterator j2);\n    basic_string& replace(const_iterator i1, const_iterator i2, initializer_list<value_type>);\n\n    size_type copy(value_type* s, size_type n, size_type pos = 0) const;\n    basic_string substr(size_type pos = 0, size_type n = npos) const;\n\n    void swap(basic_string& str)\n        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||\n                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17\n\n    const value_type* c_str() const noexcept;\n    const value_type* data() const noexcept;\n          value_type* data()       noexcept;   // C++17\n\n    allocator_type get_allocator() const noexcept;\n\n    size_type find(const basic_string& str, size_type pos = 0) const noexcept;\n    size_type find(basic_string_view<charT, traits> sv, size_type pos = 0) const noexcept;\n    size_type find(const value_type* s, size_type pos, size_type n) const noexcept;\n    size_type find(const value_type* s, size_type pos = 0) const noexcept;\n    size_type find(value_type c, size_type pos = 0) const noexcept;\n\n    size_type rfind(const basic_string& str, size_type pos = npos) const noexcept;\n    size_type ffind(basic_string_view<charT, traits> sv, size_type pos = 0) const noexcept;\n    size_type rfind(const value_type* s, size_type pos, size_type n) const noexcept;\n    size_type rfind(const value_type* s, size_type pos = npos) const noexcept;\n    size_type rfind(value_type c, size_type pos = npos) const noexcept;\n\n    size_type find_first_of(const basic_string& str, size_type pos = 0) const noexcept;\n    size_type find_first_of(basic_string_view<charT, traits> sv, size_type pos = 0) const noexcept;\n    size_type find_first_of(const value_type* s, size_type pos, size_type n) const noexcept;\n    size_type find_first_of(const value_type* s, size_type pos = 0) const noexcept;\n    size_type find_first_of(value_type c, size_type pos = 0) const noexcept;\n\n    size_type find_last_of(const basic_string& str, size_type pos = npos) const noexcept;\n    size_type find_last_of(basic_string_view<charT, traits> sv, size_type pos = 0) const noexcept;\n    size_type find_last_of(const value_type* s, size_type pos, size_type n) const noexcept;\n    size_type find_last_of(const value_type* s, size_type pos = npos) const noexcept;\n    size_type find_last_of(value_type c, size_type pos = npos) const noexcept;\n\n    size_type find_first_not_of(const basic_string& str, size_type pos = 0) const noexcept;\n    size_type find_first_not_of(basic_string_view<charT, traits> sv, size_type pos = 0) const noexcept;\n    size_type find_first_not_of(const value_type* s, size_type pos, size_type n) const noexcept;\n    size_type find_first_not_of(const value_type* s, size_type pos = 0) const noexcept;\n    size_type find_first_not_of(value_type c, size_type pos = 0) const noexcept;\n\n    size_type find_last_not_of(const basic_string& str, size_type pos = npos) const noexcept;\n    size_type find_last_not_of(basic_string_view<charT, traits> sv, size_type pos = 0) const noexcept;\n    size_type find_last_not_of(const value_type* s, size_type pos, size_type n) const noexcept;\n    size_type find_last_not_of(const value_type* s, size_type pos = npos) const noexcept;\n    size_type find_last_not_of(value_type c, size_type pos = npos) const noexcept;\n\n    int compare(const basic_string& str) const noexcept;\n    int compare(basic_string_view<charT, traits> sv) const noexcept;\n    int compare(size_type pos1, size_type n1, const basic_string& str) const;\n    int compare(size_type pos1, size_type n1, basic_string_view<charT, traits> sv) const;\n    int compare(size_type pos1, size_type n1, const basic_string& str,\n                size_type pos2, size_type n2=npos) const; // C++14\n    template <class T>\n        int compare(size_type pos1, size_type n1, const T& t,\n                    size_type pos2, size_type n2=npos) const; // C++17\n    int compare(const value_type* s) const noexcept;\n    int compare(size_type pos1, size_type n1, const value_type* s) const;\n    int compare(size_type pos1, size_type n1, const value_type* s, size_type n2) const;\n\n    bool __invariants() const;\n};\n\ntemplate<class charT, class traits, class Allocator>\nbasic_string<charT, traits, Allocator>\noperator+(const basic_string<charT, traits, Allocator>& lhs,\n          const basic_string<charT, traits, Allocator>& rhs);\n\ntemplate<class charT, class traits, class Allocator>\nbasic_string<charT, traits, Allocator>\noperator+(const charT* lhs , const basic_string<charT,traits,Allocator>&rhs);\n\ntemplate<class charT, class traits, class Allocator>\nbasic_string<charT, traits, Allocator>\noperator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);\n\ntemplate<class charT, class traits, class Allocator>\nbasic_string<charT, traits, Allocator>\noperator+(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs);\n\ntemplate<class charT, class traits, class Allocator>\nbasic_string<charT, traits, Allocator>\noperator+(const basic_string<charT, traits, Allocator>& lhs, charT rhs);\n\ntemplate<class charT, class traits, class Allocator>\nbool operator==(const basic_string<charT, traits, Allocator>& lhs,\n                const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator==(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator==(const basic_string<charT,traits,Allocator>& lhs, const charT* rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator!=(const basic_string<charT,traits,Allocator>& lhs,\n                const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator!=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator!=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator< (const basic_string<charT, traits, Allocator>& lhs,\n                const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator< (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator< (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator> (const basic_string<charT, traits, Allocator>& lhs,\n                const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator> (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator> (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator<=(const basic_string<charT, traits, Allocator>& lhs,\n                const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator<=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator<=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator>=(const basic_string<charT, traits, Allocator>& lhs,\n                const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator>=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nbool operator>=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;\n\ntemplate<class charT, class traits, class Allocator>\nvoid swap(basic_string<charT, traits, Allocator>& lhs,\n          basic_string<charT, traits, Allocator>& rhs)\n            noexcept(noexcept(lhs.swap(rhs)));\n\ntemplate<class charT, class traits, class Allocator>\nbasic_istream<charT, traits>&\noperator>>(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);\n\ntemplate<class charT, class traits, class Allocator>\nbasic_ostream<charT, traits>&\noperator<<(basic_ostream<charT, traits>& os, const basic_string<charT, traits, Allocator>& str);\n\ntemplate<class charT, class traits, class Allocator>\nbasic_istream<charT, traits>&\ngetline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str,\n        charT delim);\n\ntemplate<class charT, class traits, class Allocator>\nbasic_istream<charT, traits>&\ngetline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);\n\ntypedef basic_string<char>    string;\ntypedef basic_string<wchar_t> wstring;\ntypedef basic_string<char16_t> u16string;\ntypedef basic_string<char32_t> u32string;\n\nint                stoi  (const string& str, size_t* idx = 0, int base = 10);\nlong               stol  (const string& str, size_t* idx = 0, int base = 10);\nunsigned long      stoul (const string& str, size_t* idx = 0, int base = 10);\nlong long          stoll (const string& str, size_t* idx = 0, int base = 10);\nunsigned long long stoull(const string& str, size_t* idx = 0, int base = 10);\n\nfloat       stof (const string& str, size_t* idx = 0);\ndouble      stod (const string& str, size_t* idx = 0);\nlong double stold(const string& str, size_t* idx = 0);\n\nstring to_string(int val);\nstring to_string(unsigned val);\nstring to_string(long val);\nstring to_string(unsigned long val);\nstring to_string(long long val);\nstring to_string(unsigned long long val);\nstring to_string(float val);\nstring to_string(double val);\nstring to_string(long double val);\n\nint                stoi  (const wstring& str, size_t* idx = 0, int base = 10);\nlong               stol  (const wstring& str, size_t* idx = 0, int base = 10);\nunsigned long      stoul (const wstring& str, size_t* idx = 0, int base = 10);\nlong long          stoll (const wstring& str, size_t* idx = 0, int base = 10);\nunsigned long long stoull(const wstring& str, size_t* idx = 0, int base = 10);\n\nfloat       stof (const wstring& str, size_t* idx = 0);\ndouble      stod (const wstring& str, size_t* idx = 0);\nlong double stold(const wstring& str, size_t* idx = 0);\n\nwstring to_wstring(int val);\nwstring to_wstring(unsigned val);\nwstring to_wstring(long val);\nwstring to_wstring(unsigned long val);\nwstring to_wstring(long long val);\nwstring to_wstring(unsigned long long val);\nwstring to_wstring(float val);\nwstring to_wstring(double val);\nwstring to_wstring(long double val);\n\ntemplate <> struct hash<string>;\ntemplate <> struct hash<u16string>;\ntemplate <> struct hash<u32string>;\ntemplate <> struct hash<wstring>;\n\nbasic_string<char>     operator \"\" s( const char *str,     size_t len ); // C++14\nbasic_string<wchar_t>  operator \"\" s( const wchar_t *str,  size_t len ); // C++14\nbasic_string<char16_t> operator \"\" s( const char16_t *str, size_t len ); // C++14\nbasic_string<char32_t> operator \"\" s( const char32_t *str, size_t len ); // C++14\n\n}  // std\n\n*/\n\n#include <__config>\n#include <string_view>\n#include <iosfwd>\n#include <cstring>\n#include <cstdio>  // For EOF.\n#include <cwchar>\n#include <algorithm>\n#include <iterator>\n#include <utility>\n#include <memory>\n#include <stdexcept>\n#include <type_traits>\n#include <initializer_list>\n#include <__functional_base>\n#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS\n#include <cstdint>\n#endif\n\n#include <__undef_min_max>\n\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\n// fpos\n\ntemplate <class _StateT>\nclass _LIBCPP_TEMPLATE_VIS fpos\n{\nprivate:\n    _StateT __st_;\n    streamoff __off_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY fpos(streamoff __off = streamoff()) : __st_(), __off_(__off) {}\n\n    _LIBCPP_INLINE_VISIBILITY operator streamoff() const {return __off_;}\n\n    _LIBCPP_INLINE_VISIBILITY _StateT state() const {return __st_;}\n    _LIBCPP_INLINE_VISIBILITY void state(_StateT __st) {__st_ = __st;}\n\n    _LIBCPP_INLINE_VISIBILITY fpos& operator+=(streamoff __off) {__off_ += __off; return *this;}\n    _LIBCPP_INLINE_VISIBILITY fpos  operator+ (streamoff __off) const {fpos __t(*this); __t += __off; return __t;}\n    _LIBCPP_INLINE_VISIBILITY fpos& operator-=(streamoff __off) {__off_ -= __off; return *this;}\n    _LIBCPP_INLINE_VISIBILITY fpos  operator- (streamoff __off) const {fpos __t(*this); __t -= __off; return __t;}\n};\n\ntemplate <class _StateT>\ninline _LIBCPP_INLINE_VISIBILITY\nstreamoff operator-(const fpos<_StateT>& __x, const fpos<_StateT>& __y)\n    {return streamoff(__x) - streamoff(__y);}\n\ntemplate <class _StateT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool operator==(const fpos<_StateT>& __x, const fpos<_StateT>& __y)\n    {return streamoff(__x) == streamoff(__y);}\n\ntemplate <class _StateT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool operator!=(const fpos<_StateT>& __x, const fpos<_StateT>& __y)\n    {return streamoff(__x) != streamoff(__y);}\n\n// basic_string\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const basic_string<_CharT, _Traits, _Allocator>& __x,\n          const basic_string<_CharT, _Traits, _Allocator>& __y);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const _CharT* __x, const basic_string<_CharT,_Traits,_Allocator>& __y);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(_CharT __x, const basic_string<_CharT,_Traits,_Allocator>& __y);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const _CharT* __y);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const basic_string<_CharT, _Traits, _Allocator>& __x, _CharT __y);\n\ntemplate <bool>\nclass _LIBCPP_TEMPLATE_VIS __basic_string_common\n{\nprotected:\n    _LIBCPP_NORETURN void __throw_length_error() const;\n    _LIBCPP_NORETURN void __throw_out_of_range() const;\n};\n\ntemplate <bool __b>\nvoid\n__basic_string_common<__b>::__throw_length_error() const\n{\n    _VSTD::__throw_length_error(\"basic_string\");\n}\n\ntemplate <bool __b>\nvoid\n__basic_string_common<__b>::__throw_out_of_range() const\n{\n    _VSTD::__throw_out_of_range(\"basic_string\");\n}\n\n#ifdef _LIBCPP_MSVC\n#pragma warning( push )\n#pragma warning( disable: 4231 )\n#endif // _LIBCPP_MSVC\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __basic_string_common<true>)\n#ifdef _LIBCPP_MSVC\n#pragma warning( pop )\n#endif // _LIBCPP_MSVC\n\n#ifdef _LIBCPP_NO_EXCEPTIONS\ntemplate <class _Iter>\nstruct __libcpp_string_gets_noexcept_iterator_impl : public true_type {};\n#elif defined(_LIBCPP_HAS_NO_NOEXCEPT)\ntemplate <class _Iter>\nstruct __libcpp_string_gets_noexcept_iterator_impl : public false_type {};\n#else\ntemplate <class _Iter, bool = __is_forward_iterator<_Iter>::value>\nstruct __libcpp_string_gets_noexcept_iterator_impl : public _LIBCPP_BOOL_CONSTANT((\n    noexcept(++(declval<_Iter&>())) && \n    is_nothrow_assignable<_Iter&, _Iter>::value && \n    noexcept(declval<_Iter>() == declval<_Iter>()) && \n    noexcept(*declval<_Iter>())\n)) {};\n\ntemplate <class _Iter> \nstruct __libcpp_string_gets_noexcept_iterator_impl<_Iter, false> : public false_type {};\n#endif\n\n\ntemplate <class _Iter>\nstruct __libcpp_string_gets_noexcept_iterator\n    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value || __libcpp_string_gets_noexcept_iterator_impl<_Iter>::value) {};\n\ntemplate <class _CharT, class _Traits, class _Tp>\nstruct __can_be_converted_to_string_view : public _LIBCPP_BOOL_CONSTANT(\n\t( is_convertible<const _Tp&, basic_string_view<_CharT, _Traits> >::value &&\n     !is_convertible<const _Tp&, const _CharT*>::value)) {};\n\n#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT\n\ntemplate <class _CharT, size_t = sizeof(_CharT)>\nstruct __padding\n{\n    unsigned char __xx[sizeof(_CharT)-1];\n};\n\ntemplate <class _CharT>\nstruct __padding<_CharT, 1>\n{\n};\n\n#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nclass _LIBCPP_TEMPLATE_VIS basic_string\n    : private __basic_string_common<true>\n{\npublic:\n    typedef basic_string                                 __self;\n    typedef basic_string_view<_CharT, _Traits>           __self_view;\n    typedef _Traits                                      traits_type;\n    typedef typename traits_type::char_type              value_type;\n    typedef _Allocator                                   allocator_type;\n    typedef allocator_traits<allocator_type>             __alloc_traits;\n    typedef typename __alloc_traits::size_type           size_type;\n    typedef typename __alloc_traits::difference_type     difference_type;\n    typedef value_type&                                  reference;\n    typedef const value_type&                            const_reference;\n    typedef typename __alloc_traits::pointer             pointer;\n    typedef typename __alloc_traits::const_pointer       const_pointer;\n\n    static_assert(is_pod<value_type>::value, \"Character type of basic_string must be a POD\");\n    static_assert((is_same<_CharT, value_type>::value),\n                  \"traits_type::char_type must be the same type as CharT\");\n    static_assert((is_same<typename allocator_type::value_type, value_type>::value),\n                  \"Allocator::value_type must be same type as value_type\");\n#if defined(_LIBCPP_RAW_ITERATORS)\n    typedef pointer                                      iterator;\n    typedef const_pointer                                const_iterator;\n#else  // defined(_LIBCPP_RAW_ITERATORS)\n    typedef __wrap_iter<pointer>                         iterator;\n    typedef __wrap_iter<const_pointer>                   const_iterator;\n#endif  // defined(_LIBCPP_RAW_ITERATORS)\n    typedef _VSTD::reverse_iterator<iterator>             reverse_iterator;\n    typedef _VSTD::reverse_iterator<const_iterator>       const_reverse_iterator;\n\nprivate:\n\n#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT\n\n    struct __long\n    {\n        pointer   __data_;\n        size_type __size_;\n        size_type __cap_;\n    };\n\n#if _LIBCPP_BIG_ENDIAN\n    enum {__short_mask = 0x01};\n    enum {__long_mask  = 0x1ul};\n#else  // _LIBCPP_BIG_ENDIAN\n    enum {__short_mask = 0x80};\n    enum {__long_mask  = ~(size_type(~0) >> 1)};\n#endif  // _LIBCPP_BIG_ENDIAN\n\n    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?\n                      (sizeof(__long) - 1)/sizeof(value_type) : 2};\n\n    struct __short\n    {\n        value_type __data_[__min_cap];\n        struct\n            : __padding<value_type>\n        {\n            unsigned char __size_;\n        };\n    };\n\n#else\n\n    struct __long\n    {\n        size_type __cap_;\n        size_type __size_;\n        pointer   __data_;\n    };\n\n#if _LIBCPP_BIG_ENDIAN\n    enum {__short_mask = 0x80};\n    enum {__long_mask  = ~(size_type(~0) >> 1)};\n#else  // _LIBCPP_BIG_ENDIAN\n    enum {__short_mask = 0x01};\n    enum {__long_mask  = 0x1ul};\n#endif  // _LIBCPP_BIG_ENDIAN\n\n    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?\n                      (sizeof(__long) - 1)/sizeof(value_type) : 2};\n\n    struct __short\n    {\n        union\n        {\n            unsigned char __size_;\n            value_type __lx;\n        };\n        value_type __data_[__min_cap];\n    };\n\n#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT\n\n    union __ulx{__long __lx; __short __lxx;};\n\n    enum {__n_words = sizeof(__ulx) / sizeof(size_type)};\n\n    struct __raw\n    {\n        size_type __words[__n_words];\n    };\n\n    struct __rep\n    {\n        union\n        {\n            __long  __l;\n            __short __s;\n            __raw   __r;\n        };\n    };\n\n    __compressed_pair<__rep, allocator_type> __r_;\n\npublic:\n    static const size_type npos = -1;\n\n    _LIBCPP_INLINE_VISIBILITY basic_string()\n        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);\n\n    _LIBCPP_INLINE_VISIBILITY explicit basic_string(const allocator_type& __a)\n#if _LIBCPP_STD_VER <= 14\n        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);\n#else\n        _NOEXCEPT;\n#endif\n\n    basic_string(const basic_string& __str);\n    basic_string(const basic_string& __str, const allocator_type& __a);\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(basic_string&& __str)\n#if _LIBCPP_STD_VER <= 14\n        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);\n#else\n        _NOEXCEPT;\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(basic_string&& __str, const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY basic_string(const value_type* __s);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(const value_type* __s, const allocator_type& __a);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(const value_type* __s, size_type __n);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(const value_type* __s, size_type __n, const allocator_type& __a);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(size_type __n, value_type __c);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(size_type __n, value_type __c, const allocator_type& __a);\n    basic_string(const basic_string& __str, size_type __pos, size_type __n,\n                 const allocator_type& __a = allocator_type());\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(const basic_string& __str, size_type __pos,\n                 const allocator_type& __a = allocator_type());\n    template<class _Tp>\n        basic_string(const _Tp& __t, size_type __pos, size_type __n, \n                     const allocator_type& __a = allocator_type(),\n                     typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type* = 0);\n    _LIBCPP_INLINE_VISIBILITY explicit\n    basic_string(__self_view __sv);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(__self_view __sv, const allocator_type& __a);\n    template<class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        basic_string(_InputIterator __first, _InputIterator __last);\n    template<class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        basic_string(_InputIterator __first, _InputIterator __last, const allocator_type& __a);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(initializer_list<value_type> __il);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string(initializer_list<value_type> __il, const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    inline ~basic_string();\n\n    _LIBCPP_INLINE_VISIBILITY\n    operator __self_view() const _NOEXCEPT { return __self_view(data(), size()); }\n\n    basic_string& operator=(const basic_string& __str);\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class = void>\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& operator=(__self_view __sv)  {return assign(__sv);}\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& operator=(basic_string&& __str)\n        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));\n#endif\n    _LIBCPP_INLINE_VISIBILITY basic_string& operator=(const value_type* __s) {return assign(__s);}\n    basic_string& operator=(value_type __c);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& operator=(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    iterator begin() _NOEXCEPT\n        {return iterator(this, __get_pointer());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin() const _NOEXCEPT\n        {return const_iterator(this, __get_pointer());}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator end() _NOEXCEPT\n        {return iterator(this, __get_pointer() + size());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end() const _NOEXCEPT\n        {return const_iterator(this, __get_pointer() + size());}\n#else\n    _LIBCPP_INLINE_VISIBILITY\n    iterator begin() _NOEXCEPT\n        {return iterator(__get_pointer());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin() const _NOEXCEPT\n        {return const_iterator(__get_pointer());}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator end() _NOEXCEPT\n        {return iterator(__get_pointer() + size());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end() const _NOEXCEPT\n        {return const_iterator(__get_pointer() + size());}\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    reverse_iterator rbegin() _NOEXCEPT\n        {return reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rbegin() const _NOEXCEPT\n        {return const_reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n    reverse_iterator rend() _NOEXCEPT\n        {return reverse_iterator(begin());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rend() const _NOEXCEPT\n        {return const_reverse_iterator(begin());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cbegin() const _NOEXCEPT\n        {return begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cend() const _NOEXCEPT\n        {return end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crbegin() const _NOEXCEPT\n        {return rbegin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crend() const _NOEXCEPT\n        {return rend();}\n\n    _LIBCPP_INLINE_VISIBILITY size_type size() const _NOEXCEPT\n        {return __is_long() ? __get_long_size() : __get_short_size();}\n    _LIBCPP_INLINE_VISIBILITY size_type length() const _NOEXCEPT {return size();}\n    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY size_type capacity() const _NOEXCEPT\n        {return (__is_long() ? __get_long_cap()\n                             : static_cast<size_type>(__min_cap)) - 1;}\n\n    void resize(size_type __n, value_type __c);\n    _LIBCPP_INLINE_VISIBILITY void resize(size_type __n) {resize(__n, value_type());}\n\n    void reserve(size_type res_arg = 0);\n    _LIBCPP_INLINE_VISIBILITY\n    void shrink_to_fit() _NOEXCEPT {reserve();}\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY bool empty() const _NOEXCEPT {return size() == 0;}\n\n    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __pos) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __pos)       _NOEXCEPT;\n\n    const_reference at(size_type __n) const;\n    reference       at(size_type __n);\n\n    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const basic_string& __str) {return append(__str);}\n    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(__self_view __sv)          {return append(__sv);}\n    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const value_type* __s)     {return append(__s);}\n    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(value_type __c)            {push_back(__c); return *this;}\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(initializer_list<value_type> __il) {return append(__il);}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& append(const basic_string& __str);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& append(__self_view __sv) { return append(__sv.data(), __sv.size()); }\n    basic_string& append(const basic_string& __str, size_type __pos, size_type __n=npos);\n    template <class _Tp>\n        typename enable_if\n        <\n            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n            basic_string&\n        >::type\n                  append(const _Tp& __t, size_type __pos, size_type __n=npos);\n    basic_string& append(const value_type* __s, size_type __n);\n    basic_string& append(const value_type* __s);\n    basic_string& append(size_type __n, value_type __c);\n    template <class _ForwardIterator>\n    inline basic_string& __append_forward_unsafe(_ForwardIterator, _ForwardIterator);\n    template<class _InputIterator>\n        typename enable_if\n        <\n            __is_exactly_input_iterator<_InputIterator>::value\n                || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,\n            basic_string&\n        >::type\n    _LIBCPP_INLINE_VISIBILITY\n    append(_InputIterator __first, _InputIterator __last) {\n      const basic_string __temp (__first, __last, __alloc());\n      append(__temp.data(), __temp.size());\n      return *this;\n    }\n    template<class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value\n                && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,\n            basic_string&\n        >::type\n    _LIBCPP_INLINE_VISIBILITY\n    append(_ForwardIterator __first, _ForwardIterator __last) {\n      return __append_forward_unsafe(__first, __last);\n    }\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& append(initializer_list<value_type> __il) {return append(__il.begin(), __il.size());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    void push_back(value_type __c);\n    _LIBCPP_INLINE_VISIBILITY\n    void pop_back();\n    _LIBCPP_INLINE_VISIBILITY reference       front();\n    _LIBCPP_INLINE_VISIBILITY const_reference front() const;\n    _LIBCPP_INLINE_VISIBILITY reference       back();\n    _LIBCPP_INLINE_VISIBILITY const_reference back() const;\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& assign(__self_view __sv) { return assign(__sv.data(), __sv.size()); }\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& assign(const basic_string& __str) { return *this = __str; }\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& assign(basic_string&& str)\n        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))\n        {*this = _VSTD::move(str); return *this;}\n#endif\n    basic_string& assign(const basic_string& __str, size_type __pos, size_type __n=npos);\n    template <class _Tp>\n        typename enable_if\n        <\n            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n            basic_string&\n        >::type\n                  assign(const _Tp & __t, size_type pos, size_type n=npos);\n    basic_string& assign(const value_type* __s, size_type __n);\n    basic_string& assign(const value_type* __s);\n    basic_string& assign(size_type __n, value_type __c);\n    template<class _InputIterator>\n        typename enable_if\n        <\n           __is_exactly_input_iterator<_InputIterator>::value\n                || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,\n            basic_string&\n        >::type\n        assign(_InputIterator __first, _InputIterator __last);\n    template<class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value\n                 && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,\n            basic_string&\n        >::type\n        assign(_ForwardIterator __first, _ForwardIterator __last);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& assign(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& insert(size_type __pos1, const basic_string& __str);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& insert(size_type __pos1, __self_view __sv) { return insert(__pos1, __sv.data(), __sv.size()); }\n    template <class _Tp>\n        typename enable_if\n        <\n            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n            basic_string&\n        >::type\n                  insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n=npos);\n    basic_string& insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n=npos);\n    basic_string& insert(size_type __pos, const value_type* __s, size_type __n);\n    basic_string& insert(size_type __pos, const value_type* __s);\n    basic_string& insert(size_type __pos, size_type __n, value_type __c);\n    iterator      insert(const_iterator __pos, value_type __c);\n    _LIBCPP_INLINE_VISIBILITY\n    iterator      insert(const_iterator __pos, size_type __n, value_type __c);\n    template<class _InputIterator>\n        typename enable_if\n        <\n           __is_exactly_input_iterator<_InputIterator>::value\n                || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,\n            iterator\n        >::type\n        insert(const_iterator __pos, _InputIterator __first, _InputIterator __last);\n    template<class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value\n                 && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,\n            iterator\n        >::type\n        insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __pos, initializer_list<value_type> __il)\n                    {return insert(__pos, __il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    basic_string& erase(size_type __pos = 0, size_type __n = npos);\n    _LIBCPP_INLINE_VISIBILITY\n    iterator      erase(const_iterator __pos);\n    _LIBCPP_INLINE_VISIBILITY\n    iterator      erase(const_iterator __first, const_iterator __last);\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& replace(size_type __pos1, size_type __n1, __self_view __sv) { return replace(__pos1, __n1, __sv.data(), __sv.size()); }\n    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos);\n    template <class _Tp>\n        typename enable_if\n        <\n            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n            basic_string&\n        >::type\n                  replace(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2=npos);\n    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2);\n    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s);\n    basic_string& replace(size_type __pos, size_type __n1, size_type __n2, value_type __c);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& replace(const_iterator __i1, const_iterator __i2, const basic_string& __str);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& replace(const_iterator __i1, const_iterator __i2, __self_view __sv) { return replace(__i1 - begin(), __i2 - __i1, __sv); }\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c);\n    template<class _InputIterator>\n        typename enable_if\n        <\n            __is_input_iterator<_InputIterator>::value,\n            basic_string&\n        >::type\n        replace(const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string& replace(const_iterator __i1, const_iterator __i2, initializer_list<value_type> __il)\n        {return replace(__i1, __i2, __il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    size_type copy(value_type* __s, size_type __n, size_type __pos = 0) const;\n    _LIBCPP_INLINE_VISIBILITY\n    basic_string substr(size_type __pos = 0, size_type __n = npos) const;\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(basic_string& __str)\n#if _LIBCPP_STD_VER >= 14\n        _NOEXCEPT_DEBUG;\n#else\n        _NOEXCEPT_DEBUG_(!__alloc_traits::propagate_on_container_swap::value ||\n                    __is_nothrow_swappable<allocator_type>::value);\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    const value_type* c_str() const _NOEXCEPT {return data();}\n    _LIBCPP_INLINE_VISIBILITY\n    const value_type* data() const _NOEXCEPT  {return _VSTD::__to_raw_pointer(__get_pointer());}\n#if _LIBCPP_STD_VER > 14\n    _LIBCPP_INLINE_VISIBILITY\n    value_type* data()             _NOEXCEPT  {return _VSTD::__to_raw_pointer(__get_pointer());}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type get_allocator() const _NOEXCEPT {return __alloc();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find(__self_view __sv, size_type __pos = 0) const _NOEXCEPT;\n    size_type find(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;\n    size_type find(value_type __c, size_type __pos = 0) const _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type rfind(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type rfind(__self_view __sv, size_type __pos = 0) const _NOEXCEPT;\n    size_type rfind(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type rfind(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;\n    size_type rfind(value_type __c, size_type __pos = npos) const _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_first_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_first_of(__self_view __sv, size_type __pos = 0) const _NOEXCEPT;\n    size_type find_first_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_first_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_first_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_last_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_last_of(__self_view __sv, size_type __pos = 0) const _NOEXCEPT;\n    size_type find_last_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_last_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_last_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_first_not_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_first_not_of(__self_view __sv, size_type __pos = 0) const _NOEXCEPT;\n    size_type find_first_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_first_not_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_first_not_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_last_not_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_last_not_of(__self_view __sv, size_type __pos = 0) const _NOEXCEPT;\n    size_type find_last_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_last_not_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type find_last_not_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    int compare(const basic_string& __str) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    int compare(__self_view __sv) const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    int compare(size_type __pos1, size_type __n1, __self_view __sv) const;\n    _LIBCPP_INLINE_VISIBILITY\n    int compare(size_type __pos1, size_type __n1, const basic_string& __str) const;\n    int compare(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos) const;\n    template <class _Tp>\n    inline _LIBCPP_INLINE_VISIBILITY\n        typename enable_if\n        <\n            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n            int\n        >::type\n        compare(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2=npos) const;\n    int compare(const value_type* __s) const _NOEXCEPT;\n    int compare(size_type __pos1, size_type __n1, const value_type* __s) const;\n    int compare(size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const;\n\n    _LIBCPP_INLINE_VISIBILITY bool __invariants() const;\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool __is_long() const _NOEXCEPT\n        {return bool(__r_.first().__s.__size_ & __short_mask);}\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\n    bool __dereferenceable(const const_iterator* __i) const;\n    bool __decrementable(const const_iterator* __i) const;\n    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;\n    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\nprivate:\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type& __alloc() _NOEXCEPT\n        {return __r_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    const allocator_type& __alloc() const _NOEXCEPT\n        {return __r_.second();}\n\n#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __set_short_size(size_type __s) _NOEXCEPT\n#   if _LIBCPP_BIG_ENDIAN\n        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}\n#   else\n        {__r_.first().__s.__size_ = (unsigned char)(__s);}\n#   endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type __get_short_size() const _NOEXCEPT\n#   if _LIBCPP_BIG_ENDIAN\n        {return __r_.first().__s.__size_ >> 1;}\n#   else\n        {return __r_.first().__s.__size_;}\n#   endif\n\n#else  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __set_short_size(size_type __s) _NOEXCEPT\n#   if _LIBCPP_BIG_ENDIAN\n        {__r_.first().__s.__size_ = (unsigned char)(__s);}\n#   else\n        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}\n#   endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type __get_short_size() const _NOEXCEPT\n#   if _LIBCPP_BIG_ENDIAN\n        {return __r_.first().__s.__size_;}\n#   else\n        {return __r_.first().__s.__size_ >> 1;}\n#   endif\n\n#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __set_long_size(size_type __s) _NOEXCEPT\n        {__r_.first().__l.__size_ = __s;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type __get_long_size() const _NOEXCEPT\n        {return __r_.first().__l.__size_;}\n    _LIBCPP_INLINE_VISIBILITY\n    void __set_size(size_type __s) _NOEXCEPT\n        {if (__is_long()) __set_long_size(__s); else __set_short_size(__s);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __set_long_cap(size_type __s) _NOEXCEPT\n        {__r_.first().__l.__cap_  = __long_mask | __s;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type __get_long_cap() const _NOEXCEPT\n        {return __r_.first().__l.__cap_ & size_type(~__long_mask);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __set_long_pointer(pointer __p) _NOEXCEPT\n        {__r_.first().__l.__data_ = __p;}\n    _LIBCPP_INLINE_VISIBILITY\n    pointer __get_long_pointer() _NOEXCEPT\n        {return __r_.first().__l.__data_;}\n    _LIBCPP_INLINE_VISIBILITY\n    const_pointer __get_long_pointer() const _NOEXCEPT\n        {return __r_.first().__l.__data_;}\n    _LIBCPP_INLINE_VISIBILITY\n    pointer __get_short_pointer() _NOEXCEPT\n        {return pointer_traits<pointer>::pointer_to(__r_.first().__s.__data_[0]);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_pointer __get_short_pointer() const _NOEXCEPT\n        {return pointer_traits<const_pointer>::pointer_to(__r_.first().__s.__data_[0]);}\n    _LIBCPP_INLINE_VISIBILITY\n    pointer __get_pointer() _NOEXCEPT\n        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_pointer __get_pointer() const _NOEXCEPT\n        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __zero() _NOEXCEPT\n        {\n            size_type (&__a)[__n_words] = __r_.first().__r.__words;\n            for (unsigned __i = 0; __i < __n_words; ++__i)\n                __a[__i] = 0;\n        }\n\n    template <size_type __a> static\n        _LIBCPP_INLINE_VISIBILITY\n        size_type __align_it(size_type __s) _NOEXCEPT\n            {return (__s + (__a-1)) & ~(__a-1);}\n    enum {__alignment = 16};\n    static _LIBCPP_INLINE_VISIBILITY\n    size_type __recommend(size_type __s) _NOEXCEPT\n        {return (__s < __min_cap ? static_cast<size_type>(__min_cap) :\n                 __align_it<sizeof(value_type) < __alignment ?\n                            __alignment/sizeof(value_type) : 1 > (__s+1)) - 1;}\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void __init(const value_type* __s, size_type __sz, size_type __reserve);\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void __init(const value_type* __s, size_type __sz);\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void __init(size_type __n, value_type __c);\n\n    template <class _InputIterator>\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    typename enable_if\n    <\n        __is_exactly_input_iterator<_InputIterator>::value,\n        void\n    >::type\n    __init(_InputIterator __first, _InputIterator __last);\n\n    template <class _ForwardIterator>\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    typename enable_if\n    <\n        __is_forward_iterator<_ForwardIterator>::value,\n        void\n    >::type\n    __init(_ForwardIterator __first, _ForwardIterator __last);\n\n    void __grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,\n                   size_type __n_copy,  size_type __n_del,     size_type __n_add = 0);\n    void __grow_by_and_replace(size_type __old_cap, size_type __delta_cap, size_type __old_sz,\n                               size_type __n_copy,  size_type __n_del,\n                               size_type __n_add, const value_type* __p_new_stuff);\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __erase_to_end(size_type __pos);\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const basic_string& __str)\n        {__copy_assign_alloc(__str, integral_constant<bool,\n                      __alloc_traits::propagate_on_container_copy_assignment::value>());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const basic_string& __str, true_type)\n        {\n            if (__alloc() != __str.__alloc())\n            {\n                clear();\n                shrink_to_fit();\n            }\n            __alloc() = __str.__alloc();\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const basic_string&, false_type) _NOEXCEPT\n        {}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign(basic_string& __str, false_type)\n        _NOEXCEPT_(__alloc_traits::is_always_equal::value);\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign(basic_string& __str, true_type)\n#if _LIBCPP_STD_VER > 14\n        _NOEXCEPT;\n#else\n        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);\n#endif\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    void\n    __move_assign_alloc(basic_string& __str)\n        _NOEXCEPT_(\n            !__alloc_traits::propagate_on_container_move_assignment::value ||\n            is_nothrow_move_assignable<allocator_type>::value)\n    {__move_assign_alloc(__str, integral_constant<bool,\n                      __alloc_traits::propagate_on_container_move_assignment::value>());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(basic_string& __c, true_type)\n        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)\n        {\n            __alloc() = _VSTD::move(__c.__alloc());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(basic_string&, false_type)\n        _NOEXCEPT\n        {}\n\n    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();\n    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(size_type);\n\n    friend basic_string operator+<>(const basic_string&, const basic_string&);\n    friend basic_string operator+<>(const value_type*, const basic_string&);\n    friend basic_string operator+<>(value_type, const basic_string&);\n    friend basic_string operator+<>(const basic_string&, const value_type*);\n    friend basic_string operator+<>(const basic_string&, value_type);\n};\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__invalidate_all_iterators()\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__invalidate_all(this);\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__invalidate_iterators_past(size_type\n#if _LIBCPP_DEBUG_LEVEL >= 2\n                                                                        __pos\n#endif\n                                                                      )\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __c_node* __c = __get_db()->__find_c_and_lock(this);\n    if (__c)\n    {\n        const_pointer __new_last = __get_pointer() + __pos;\n        for (__i_node** __p = __c->end_; __p != __c->beg_; )\n        {\n            --__p;\n            const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);\n            if (__i->base() > __new_last)\n            {\n                (*__p)->__c_ = nullptr;\n                if (--__c->end_ != __p)\n                    memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));\n            }\n        }\n        __get_db()->unlock();\n    }\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string()\n    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __zero();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const allocator_type& __a)\n#if _LIBCPP_STD_VER <= 14\n        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)\n#else\n        _NOEXCEPT\n#endif\n: __r_(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __zero();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s,\n                                                       size_type __sz,\n                                                       size_type __reserve)\n{\n    if (__reserve > max_size())\n        this->__throw_length_error();\n    pointer __p;\n    if (__reserve < __min_cap)\n    {\n        __set_short_size(__sz);\n        __p = __get_short_pointer();\n    }\n    else\n    {\n        size_type __cap = __recommend(__reserve);\n        __p = __alloc_traits::allocate(__alloc(), __cap+1);\n        __set_long_pointer(__p);\n        __set_long_cap(__cap+1);\n        __set_long_size(__sz);\n    }\n    traits_type::copy(_VSTD::__to_raw_pointer(__p), __s, __sz);\n    traits_type::assign(__p[__sz], value_type());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz)\n{\n    if (__sz > max_size())\n        this->__throw_length_error();\n    pointer __p;\n    if (__sz < __min_cap)\n    {\n        __set_short_size(__sz);\n        __p = __get_short_pointer();\n    }\n    else\n    {\n        size_type __cap = __recommend(__sz);\n        __p = __alloc_traits::allocate(__alloc(), __cap+1);\n        __set_long_pointer(__p);\n        __set_long_cap(__cap+1);\n        __set_long_size(__sz);\n    }\n    traits_type::copy(_VSTD::__to_raw_pointer(__p), __s, __sz);\n    traits_type::assign(__p[__sz], value_type());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s)\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*) detected nullptr\");\n    __init(__s, traits_type::length(__s));\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s, const allocator_type& __a)\n    : __r_(__a)\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*, allocator) detected nullptr\");\n    __init(__s, traits_type::length(__s));\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s, size_type __n)\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"basic_string(const char*, n) detected nullptr\");\n    __init(__s, __n);\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s, size_type __n, const allocator_type& __a)\n    : __r_(__a)\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"basic_string(const char*, n, allocator) detected nullptr\");\n    __init(__s, __n);\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str)\n    : __r_(__alloc_traits::select_on_container_copy_construction(__str.__alloc()))\n{\n    if (!__str.__is_long())\n        __r_.first().__r = __str.__r_.first().__r;\n    else\n        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str, const allocator_type& __a)\n    : __r_(__a)\n{\n    if (!__str.__is_long())\n        __r_.first().__r = __str.__r_.first().__r;\n    else\n        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str)\n#if _LIBCPP_STD_VER <= 14\n        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)\n#else\n        _NOEXCEPT\n#endif\n    : __r_(_VSTD::move(__str.__r_))\n{\n    __str.__zero();\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n    if (__is_long())\n        __get_db()->swap(this, &__str);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str, const allocator_type& __a)\n    : __r_(__a)\n{\n    if (__str.__is_long() && __a != __str.__alloc()) // copy, not move\n        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());\n    else\n    {\n        __r_.first().__r = __str.__r_.first().__r;\n        __str.__zero();\n    }\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n    if (__is_long())\n        __get_db()->swap(this, &__str);\n#endif\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__init(size_type __n, value_type __c)\n{\n    if (__n > max_size())\n        this->__throw_length_error();\n    pointer __p;\n    if (__n < __min_cap)\n    {\n        __set_short_size(__n);\n        __p = __get_short_pointer();\n    }\n    else\n    {\n        size_type __cap = __recommend(__n);\n        __p = __alloc_traits::allocate(__alloc(), __cap+1);\n        __set_long_pointer(__p);\n        __set_long_cap(__cap+1);\n        __set_long_size(__n);\n    }\n    traits_type::assign(_VSTD::__to_raw_pointer(__p), __n, __c);\n    traits_type::assign(__p[__n], value_type());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, value_type __c)\n{\n    __init(__n, __c);\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, value_type __c, const allocator_type& __a)\n    : __r_(__a)\n{\n    __init(__n, __c);\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str, size_type __pos, size_type __n,\n                                                        const allocator_type& __a)\n    : __r_(__a)\n{\n    size_type __str_sz = __str.size();\n    if (__pos > __str_sz)\n        this->__throw_out_of_range();\n    __init(__str.data() + __pos, _VSTD::min(__n, __str_sz - __pos));\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str, size_type __pos,\n                                                        const allocator_type& __a)\n    : __r_(__a)\n{\n    size_type __str_sz = __str.size();\n    if (__pos > __str_sz)\n        this->__throw_out_of_range();\n    __init(__str.data() + __pos, __str_sz - __pos);\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate <class _Tp>\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(\n             const _Tp& __t, size_type __pos, size_type __n, const allocator_type& __a,\n\t\t\t typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type *)\n    : __r_(__a)\n{\n\t__self_view __sv = __self_view(__t).substr(__pos, __n);\n    __init(__sv.data(), __sv.size());\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\t\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(__self_view __sv)\n{\n    __init(__sv.data(), __sv.size());\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(__self_view __sv, const allocator_type& __a)\n    : __r_(__a)\n{\n    __init(__sv.data(), __sv.size());\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate <class _InputIterator>\ntypename enable_if\n<\n    __is_exactly_input_iterator<_InputIterator>::value,\n    void\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::__init(_InputIterator __first, _InputIterator __last)\n{\n    __zero();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    for (; __first != __last; ++__first)\n        push_back(*__first);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        if (__is_long())\n            __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());\n        throw;\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate <class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value,\n    void\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::__init(_ForwardIterator __first, _ForwardIterator __last)\n{\n    size_type __sz = static_cast<size_type>(_VSTD::distance(__first, __last));\n    if (__sz > max_size())\n        this->__throw_length_error();\n    pointer __p;\n    if (__sz < __min_cap)\n    {\n        __set_short_size(__sz);\n        __p = __get_short_pointer();\n    }\n    else\n    {\n        size_type __cap = __recommend(__sz);\n        __p = __alloc_traits::allocate(__alloc(), __cap+1);\n        __set_long_pointer(__p);\n        __set_long_cap(__cap+1);\n        __set_long_size(__sz);\n    }\n    for (; __first != __last; ++__first, (void) ++__p)\n        traits_type::assign(*__p, *__first);\n    traits_type::assign(*__p, value_type());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate<class _InputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last)\n{\n    __init(__first, __last);\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate<class _InputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last,\n                                                        const allocator_type& __a)\n    : __r_(__a)\n{\n    __init(__first, __last);\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(initializer_list<value_type> __il)\n{\n    __init(__il.begin(), __il.end());\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>::basic_string(initializer_list<value_type> __il, const allocator_type& __a)\n    : __r_(__a)\n{\n    __init(__il.begin(), __il.end());\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>::~basic_string()\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__erase_c(this);\n#endif\n    if (__is_long())\n        __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__grow_by_and_replace\n    (size_type __old_cap, size_type __delta_cap, size_type __old_sz,\n     size_type __n_copy,  size_type __n_del,     size_type __n_add, const value_type* __p_new_stuff)\n{\n    size_type __ms = max_size();\n    if (__delta_cap > __ms - __old_cap - 1)\n        this->__throw_length_error();\n    pointer __old_p = __get_pointer();\n    size_type __cap = __old_cap < __ms / 2 - __alignment ?\n                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :\n                          __ms - 1;\n    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);\n    __invalidate_all_iterators();\n    if (__n_copy != 0)\n        traits_type::copy(_VSTD::__to_raw_pointer(__p),\n                          _VSTD::__to_raw_pointer(__old_p), __n_copy);\n    if (__n_add != 0)\n        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy, __p_new_stuff, __n_add);\n    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;\n    if (__sec_cp_sz != 0)\n        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy + __n_add,\n                          _VSTD::__to_raw_pointer(__old_p) + __n_copy + __n_del, __sec_cp_sz);\n    if (__old_cap+1 != __min_cap)\n        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);\n    __set_long_pointer(__p);\n    __set_long_cap(__cap+1);\n    __old_sz = __n_copy + __n_add + __sec_cp_sz;\n    __set_long_size(__old_sz);\n    traits_type::assign(__p[__old_sz], value_type());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,\n                                                     size_type __n_copy,  size_type __n_del,     size_type __n_add)\n{\n    size_type __ms = max_size();\n    if (__delta_cap > __ms - __old_cap)\n        this->__throw_length_error();\n    pointer __old_p = __get_pointer();\n    size_type __cap = __old_cap < __ms / 2 - __alignment ?\n                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :\n                          __ms - 1;\n    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);\n    __invalidate_all_iterators();\n    if (__n_copy != 0)\n        traits_type::copy(_VSTD::__to_raw_pointer(__p),\n                          _VSTD::__to_raw_pointer(__old_p), __n_copy);\n    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;\n    if (__sec_cp_sz != 0)\n        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy + __n_add,\n                          _VSTD::__to_raw_pointer(__old_p) + __n_copy + __n_del,\n                          __sec_cp_sz);\n    if (__old_cap+1 != __min_cap)\n        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);\n    __set_long_pointer(__p);\n    __set_long_cap(__cap+1);\n}\n\n// assign\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s, size_type __n)\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::assign received nullptr\");\n    size_type __cap = capacity();\n    if (__cap >= __n)\n    {\n        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());\n        traits_type::move(__p, __s, __n);\n        traits_type::assign(__p[__n], value_type());\n        __set_size(__n);\n        __invalidate_iterators_past(__n);\n    }\n    else\n    {\n        size_type __sz = size();\n        __grow_by_and_replace(__cap, __n - __cap, __sz, 0, __sz, __n, __s);\n    }\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::assign(size_type __n, value_type __c)\n{\n    size_type __cap = capacity();\n    if (__cap < __n)\n    {\n        size_type __sz = size();\n        __grow_by(__cap, __n - __cap, __sz, 0, __sz);\n    }\n    else\n        __invalidate_iterators_past(__n);\n    value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());\n    traits_type::assign(__p, __n, __c);\n    traits_type::assign(__p[__n], value_type());\n    __set_size(__n);\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::operator=(value_type __c)\n{\n    pointer __p;\n    if (__is_long())\n    {\n        __p = __get_long_pointer();\n        __set_long_size(1);\n    }\n    else\n    {\n        __p = __get_short_pointer();\n        __set_short_size(1);\n    }\n    traits_type::assign(*__p, __c);\n    traits_type::assign(*++__p, value_type());\n    __invalidate_iterators_past(1);\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::operator=(const basic_string& __str)\n{\n    if (this != &__str)\n    {\n        __copy_assign_alloc(__str);\n        assign(__str.data(), __str.size());\n    }\n    return *this;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, false_type)\n    _NOEXCEPT_(__alloc_traits::is_always_equal::value)\n{\n    if (__alloc() != __str.__alloc())\n        assign(__str);\n    else\n        __move_assign(__str, true_type());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, true_type)\n#if _LIBCPP_STD_VER > 14\n    _NOEXCEPT\n#else\n    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)\n#endif\n{\n    clear();\n    shrink_to_fit();\n    __r_.first() = __str.__r_.first();\n    __move_assign_alloc(__str);\n    __str.__zero();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::operator=(basic_string&& __str)\n    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))\n{\n    __move_assign(__str, integral_constant<bool,\n          __alloc_traits::propagate_on_container_move_assignment::value>());\n    return *this;\n}\n\n#endif\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate<class _InputIterator>\ntypename enable_if\n<\n     __is_exactly_input_iterator <_InputIterator>::value\n          || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,\n    basic_string<_CharT, _Traits, _Allocator>&\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::assign(_InputIterator __first, _InputIterator __last)\n{\n    const basic_string __temp(__first, __last, __alloc());\n    assign(__temp.data(), __temp.size());\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate<class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value\n         && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,\n    basic_string<_CharT, _Traits, _Allocator>&\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)\n{\n    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));\n    size_type __cap = capacity();\n    if (__cap < __n)\n    {\n        size_type __sz = size();\n        __grow_by(__cap, __n - __cap, __sz, 0, __sz);\n    }\n    else\n        __invalidate_iterators_past(__n);\n    pointer __p = __get_pointer();\n    for (; __first != __last; ++__first, ++__p)\n        traits_type::assign(*__p, *__first);\n    traits_type::assign(*__p, value_type());\n    __set_size(__n);\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str, size_type __pos, size_type __n)\n{\n    size_type __sz = __str.size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    return assign(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate <class _Tp>\ntypename enable_if\n<\n    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n\tbasic_string<_CharT, _Traits, _Allocator>&\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::assign(const _Tp & __t, size_type __pos, size_type __n)\n{\n    __self_view __sv = __t;\n    size_type __sz = __sv.size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    return assign(__sv.data() + __pos, _VSTD::min(__n, __sz - __pos));\n}\n\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s)\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::assign received nullptr\");\n    return assign(__s, traits_type::length(__s));\n}\n\n// append\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n)\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::append received nullptr\");\n    size_type __cap = capacity();\n    size_type __sz = size();\n    if (__cap - __sz >= __n)\n    {\n        if (__n)\n        {\n            value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());\n            traits_type::copy(__p + __sz, __s, __n);\n            __sz += __n;\n            __set_size(__sz);\n            traits_type::assign(__p[__sz], value_type());\n        }\n    }\n    else\n        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::append(size_type __n, value_type __c)\n{\n    if (__n)\n    {\n        size_type __cap = capacity();\n        size_type __sz = size();\n        if (__cap - __sz < __n)\n            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);\n        pointer __p = __get_pointer();\n        traits_type::assign(_VSTD::__to_raw_pointer(__p) + __sz, __n, __c);\n        __sz += __n;\n        __set_size(__sz);\n        traits_type::assign(__p[__sz], value_type());\n    }\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c)\n{\n    bool __is_short = !__is_long();\n    size_type __cap;\n    size_type __sz;\n    if (__is_short)\n    {\n        __cap = __min_cap - 1;\n        __sz = __get_short_size();\n    }\n    else\n    {\n        __cap = __get_long_cap() - 1;\n        __sz = __get_long_size();\n    }\n    if (__sz == __cap)\n    {\n        __grow_by(__cap, 1, __sz, __sz, 0);\n        __is_short = !__is_long();\n    }\n    pointer __p;\n    if (__is_short)\n    {\n        __p = __get_short_pointer() + __sz;\n        __set_short_size(__sz+1);\n    }\n    else\n    {\n        __p = __get_long_pointer() + __sz;\n        __set_long_size(__sz+1);\n    }\n    traits_type::assign(*__p, __c);\n    traits_type::assign(*++__p, value_type());\n}\n\ntemplate <class _Tp>\nbool __ptr_in_range (const _Tp* __p, const _Tp* __first, const _Tp* __last)\n{\n    return __first <= __p && __p < __last;\n}\n\ntemplate <class _Tp1, class _Tp2>\nbool __ptr_in_range (const _Tp1*, const _Tp2*, const _Tp2*)\n{\n    return false;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate<class _ForwardIterator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::__append_forward_unsafe(\n    _ForwardIterator __first, _ForwardIterator __last)\n{\n    static_assert(__is_forward_iterator<_ForwardIterator>::value,\n                  \"function requires a ForwardIterator\");\n    size_type __sz = size();\n    size_type __cap = capacity();\n    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));\n    if (__n)\n    {\n        typedef typename iterator_traits<_ForwardIterator>::reference _CharRef;\n        _CharRef __tmp_ref = *__first;\n        if (__ptr_in_range(_VSTD::addressof(__tmp_ref), data(), data() + size()))\n        {\n            const basic_string __temp (__first, __last, __alloc());\n            append(__temp.data(), __temp.size());\n        }\n        else \n        {\n            if (__cap - __sz < __n)\n                __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);\n            pointer __p = __get_pointer() + __sz;\n            for (; __first != __last; ++__p, ++__first)\n                traits_type::assign(*__p, *__first);\n            traits_type::assign(*__p, value_type());\n            __set_size(__sz + __n);\n        }\n    }\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str)\n{\n    return append(__str.data(), __str.size());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str, size_type __pos, size_type __n)\n{\n    size_type __sz = __str.size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    return append(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate <class _Tp>\n    typename enable_if\n    <\n        __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n        basic_string<_CharT, _Traits, _Allocator>&\n    >::type\nbasic_string<_CharT, _Traits, _Allocator>::append(const _Tp & __t, size_type __pos, size_type __n)\n{\n    __self_view __sv = __t;\n    size_type __sz = __sv.size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    return append(__sv.data() + __pos, _VSTD::min(__n, __sz - __pos));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s)\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::append received nullptr\");\n    return append(__s, traits_type::length(__s));\n}\n\n// insert\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s, size_type __n)\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::insert received nullptr\");\n    size_type __sz = size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    size_type __cap = capacity();\n    if (__cap - __sz >= __n)\n    {\n        if (__n)\n        {\n            value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());\n            size_type __n_move = __sz - __pos;\n            if (__n_move != 0)\n            {\n                if (__p + __pos <= __s && __s < __p + __sz)\n                    __s += __n;\n                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);\n            }\n            traits_type::move(__p + __pos, __s, __n);\n            __sz += __n;\n            __set_size(__sz);\n            traits_type::assign(__p[__sz], value_type());\n        }\n    }\n    else\n        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n, __s);\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, size_type __n, value_type __c)\n{\n    size_type __sz = size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    if (__n)\n    {\n        size_type __cap = capacity();\n        value_type* __p;\n        if (__cap - __sz >= __n)\n        {\n            __p = _VSTD::__to_raw_pointer(__get_pointer());\n            size_type __n_move = __sz - __pos;\n            if (__n_move != 0)\n                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);\n        }\n        else\n        {\n            __grow_by(__cap, __sz + __n - __cap, __sz, __pos, 0, __n);\n            __p = _VSTD::__to_raw_pointer(__get_long_pointer());\n        }\n        traits_type::assign(__p + __pos, __n, __c);\n        __sz += __n;\n        __set_size(__sz);\n        traits_type::assign(__p[__sz], value_type());\n    }\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate<class _InputIterator>\ntypename enable_if\n<\n   __is_exactly_input_iterator<_InputIterator>::value\n        || !__libcpp_string_gets_noexcept_iterator<_InputIterator>::value,\n   typename basic_string<_CharT, _Traits, _Allocator>::iterator\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _InputIterator __first, _InputIterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,\n        \"string::insert(iterator, range) called with an iterator not\"\n        \" referring to this string\");\n#endif\n    const basic_string __temp(__first, __last, __alloc());\n    return insert(__pos, __temp.data(), __temp.data() + __temp.size());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate<class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value\n        && __libcpp_string_gets_noexcept_iterator<_ForwardIterator>::value,\n    typename basic_string<_CharT, _Traits, _Allocator>::iterator\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,\n        \"string::insert(iterator, range) called with an iterator not\"\n        \" referring to this string\");\n#endif\n    size_type __ip = static_cast<size_type>(__pos - begin());\n    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));\n    if (__n)\n    {\n        typedef typename iterator_traits<_ForwardIterator>::reference _CharRef;\n        _CharRef __tmp_char = *__first;\n        if (__ptr_in_range(_VSTD::addressof(__tmp_char), data(), data() + size()))\n        {\n            const basic_string __temp(__first, __last, __alloc());\n            return insert(__pos, __temp.data(), __temp.data() + __temp.size());\n        }\n\n        size_type __sz = size();\n        size_type __cap = capacity();\n        value_type* __p;\n        if (__cap - __sz >= __n)\n        {\n            __p = _VSTD::__to_raw_pointer(__get_pointer());\n            size_type __n_move = __sz - __ip;\n            if (__n_move != 0)\n                traits_type::move(__p + __ip + __n, __p + __ip, __n_move);\n        }\n        else\n        {\n            __grow_by(__cap, __sz + __n - __cap, __sz, __ip, 0, __n);\n            __p = _VSTD::__to_raw_pointer(__get_long_pointer());\n        }\n        __sz += __n;\n        __set_size(__sz);\n        traits_type::assign(__p[__sz], value_type());\n        for (__p += __ip; __first != __last; ++__p, ++__first)\n            traits_type::assign(*__p, *__first);\n    }\n    return begin() + __ip;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str)\n{\n    return insert(__pos1, __str.data(), __str.size());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str,\n                                                  size_type __pos2, size_type __n)\n{\n    size_type __str_sz = __str.size();\n    if (__pos2 > __str_sz)\n        this->__throw_out_of_range();\n    return insert(__pos1, __str.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate <class _Tp>\ntypename enable_if\n<\n    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n\tbasic_string<_CharT, _Traits, _Allocator>&\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const _Tp& __t,\n                                                  size_type __pos2, size_type __n)\n{\n    __self_view __sv = __t;\n    size_type __str_sz = __sv.size();\n    if (__pos2 > __str_sz)\n        this->__throw_out_of_range();\n    return insert(__pos1, __sv.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s)\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::insert received nullptr\");\n    return insert(__pos, __s, traits_type::length(__s));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::iterator\nbasic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, value_type __c)\n{\n    size_type __ip = static_cast<size_type>(__pos - begin());\n    size_type __sz = size();\n    size_type __cap = capacity();\n    value_type* __p;\n    if (__cap == __sz)\n    {\n        __grow_by(__cap, 1, __sz, __ip, 0, 1);\n        __p = _VSTD::__to_raw_pointer(__get_long_pointer());\n    }\n    else\n    {\n        __p = _VSTD::__to_raw_pointer(__get_pointer());\n        size_type __n_move = __sz - __ip;\n        if (__n_move != 0)\n            traits_type::move(__p + __ip + 1, __p + __ip, __n_move);\n    }\n    traits_type::assign(__p[__ip], __c);\n    traits_type::assign(__p[++__sz], value_type());\n    __set_size(__sz);\n    return begin() + static_cast<difference_type>(__ip);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::iterator\nbasic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, size_type __n, value_type __c)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,\n        \"string::insert(iterator, n, value) called with an iterator not\"\n        \" referring to this string\");\n#endif\n    difference_type __p = __pos - begin();\n    insert(static_cast<size_type>(__p), __n, __c);\n    return begin() + __p;\n}\n\n// replace\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2)\n{\n    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, \"string::replace received nullptr\");\n    size_type __sz = size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    __n1 = _VSTD::min(__n1, __sz - __pos);\n    size_type __cap = capacity();\n    if (__cap - __sz + __n1 >= __n2)\n    {\n        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());\n        if (__n1 != __n2)\n        {\n            size_type __n_move = __sz - __pos - __n1;\n            if (__n_move != 0)\n            {\n                if (__n1 > __n2)\n                {\n                    traits_type::move(__p + __pos, __s, __n2);\n                    traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);\n                    goto __finish;\n                }\n                if (__p + __pos < __s && __s < __p + __sz)\n                {\n                    if (__p + __pos + __n1 <= __s)\n                        __s += __n2 - __n1;\n                    else // __p + __pos < __s < __p + __pos + __n1\n                    {\n                        traits_type::move(__p + __pos, __s, __n1);\n                        __pos += __n1;\n                        __s += __n2;\n                        __n2 -= __n1;\n                        __n1 = 0;\n                    }\n                }\n                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);\n            }\n        }\n        traits_type::move(__p + __pos, __s, __n2);\n__finish:\n        __sz += __n2 - __n1;\n        __set_size(__sz);\n        __invalidate_iterators_past(__sz);\n        traits_type::assign(__p[__sz], value_type());\n    }\n    else\n        __grow_by_and_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2, __s);\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, size_type __n2, value_type __c)\n{\n    size_type __sz = size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    __n1 = _VSTD::min(__n1, __sz - __pos);\n    size_type __cap = capacity();\n    value_type* __p;\n    if (__cap - __sz + __n1 >= __n2)\n    {\n        __p = _VSTD::__to_raw_pointer(__get_pointer());\n        if (__n1 != __n2)\n        {\n            size_type __n_move = __sz - __pos - __n1;\n            if (__n_move != 0)\n                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);\n        }\n    }\n    else\n    {\n        __grow_by(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2);\n        __p = _VSTD::__to_raw_pointer(__get_long_pointer());\n    }\n    traits_type::assign(__p + __pos, __n2, __c);\n    __sz += __n2 - __n1;\n    __set_size(__sz);\n    __invalidate_iterators_past(__sz);\n    traits_type::assign(__p[__sz], value_type());\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate<class _InputIterator>\ntypename enable_if\n<\n    __is_input_iterator<_InputIterator>::value,\n    basic_string<_CharT, _Traits, _Allocator>&\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2,\n                                                   _InputIterator __j1, _InputIterator __j2)\n{\n    const basic_string __temp(__j1, __j2, __alloc());\n    return this->replace(__i1, __i2, __temp);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str)\n{\n    return replace(__pos1, __n1, __str.data(), __str.size());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str,\n                                                   size_type __pos2, size_type __n2)\n{\n    size_type __str_sz = __str.size();\n    if (__pos2 > __str_sz)\n        this->__throw_out_of_range();\n    return replace(__pos1, __n1, __str.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate <class _Tp>\ntypename enable_if\n<\n\t__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n\tbasic_string<_CharT, _Traits, _Allocator>&\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const _Tp& __t,\n                                                   size_type __pos2, size_type __n2)\n{\n    __self_view __sv = __t;\n    size_type __str_sz = __sv.size();\n    if (__pos2 > __str_sz)\n        this->__throw_out_of_range();\n    return replace(__pos1, __n1, __sv.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s)\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::replace received nullptr\");\n    return replace(__pos, __n1, __s, traits_type::length(__s));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const basic_string& __str)\n{\n    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1),\n                   __str.data(), __str.size());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n)\n{\n    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s, __n);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s)\n{\n    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c)\n{\n    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __n, __c);\n}\n\n// erase\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>&\nbasic_string<_CharT, _Traits, _Allocator>::erase(size_type __pos, size_type __n)\n{\n    size_type __sz = size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    if (__n)\n    {\n        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());\n        __n = _VSTD::min(__n, __sz - __pos);\n        size_type __n_move = __sz - __pos - __n;\n        if (__n_move != 0)\n            traits_type::move(__p + __pos, __p + __pos + __n, __n_move);\n        __sz -= __n;\n        __set_size(__sz);\n        __invalidate_iterators_past(__sz);\n        traits_type::assign(__p[__sz], value_type());\n    }\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::iterator\nbasic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __pos)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,\n        \"string::erase(iterator) called with an iterator not\"\n        \" referring to this string\");\n#endif\n    _LIBCPP_ASSERT(__pos != end(),\n        \"string::erase(iterator) called with a non-dereferenceable iterator\");\n    iterator __b = begin();\n    size_type __r = static_cast<size_type>(__pos - __b);\n    erase(__r, 1);\n    return __b + static_cast<difference_type>(__r);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::iterator\nbasic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __first, const_iterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,\n        \"string::erase(iterator,  iterator) called with an iterator not\"\n        \" referring to this string\");\n#endif\n    _LIBCPP_ASSERT(__first <= __last, \"string::erase(first, last) called with invalid range\");\n    iterator __b = begin();\n    size_type __r = static_cast<size_type>(__first - __b);\n    erase(__r, static_cast<size_type>(__last - __first));\n    return __b + static_cast<difference_type>(__r);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::pop_back()\n{\n    _LIBCPP_ASSERT(!empty(), \"string::pop_back(): string is already empty\");\n    size_type __sz;\n    if (__is_long())\n    {\n        __sz = __get_long_size() - 1;\n        __set_long_size(__sz);\n        traits_type::assign(*(__get_long_pointer() + __sz), value_type());\n    }\n    else\n    {\n        __sz = __get_short_size() - 1;\n        __set_short_size(__sz);\n        traits_type::assign(*(__get_short_pointer() + __sz), value_type());\n    }\n    __invalidate_iterators_past(__sz);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::clear() _NOEXCEPT\n{\n    __invalidate_all_iterators();\n    if (__is_long())\n    {\n        traits_type::assign(*__get_long_pointer(), value_type());\n        __set_long_size(0);\n    }\n    else\n    {\n        traits_type::assign(*__get_short_pointer(), value_type());\n        __set_short_size(0);\n    }\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::__erase_to_end(size_type __pos)\n{\n    if (__is_long())\n    {\n        traits_type::assign(*(__get_long_pointer() + __pos), value_type());\n        __set_long_size(__pos);\n    }\n    else\n    {\n        traits_type::assign(*(__get_short_pointer() + __pos), value_type());\n        __set_short_size(__pos);\n    }\n    __invalidate_iterators_past(__pos);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::resize(size_type __n, value_type __c)\n{\n    size_type __sz = size();\n    if (__n > __sz)\n        append(__n - __sz, __c);\n    else\n        __erase_to_end(__n);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::max_size() const _NOEXCEPT\n{\n    size_type __m = __alloc_traits::max_size(__alloc());\n#if _LIBCPP_BIG_ENDIAN\n    return (__m <= ~__long_mask ? __m : __m/2) - __alignment;\n#else\n    return __m - __alignment;\n#endif\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::reserve(size_type __res_arg)\n{\n    if (__res_arg > max_size())\n        this->__throw_length_error();\n    size_type __cap = capacity();\n    size_type __sz = size();\n    __res_arg = _VSTD::max(__res_arg, __sz);\n    __res_arg = __recommend(__res_arg);\n    if (__res_arg != __cap)\n    {\n        pointer __new_data, __p;\n        bool __was_long, __now_long;\n        if (__res_arg == __min_cap - 1)\n        {\n            __was_long = true;\n            __now_long = false;\n            __new_data = __get_short_pointer();\n            __p = __get_long_pointer();\n        }\n        else\n        {\n            if (__res_arg > __cap)\n                __new_data = __alloc_traits::allocate(__alloc(), __res_arg+1);\n            else\n            {\n            #ifndef _LIBCPP_NO_EXCEPTIONS\n                try\n                {\n            #endif  // _LIBCPP_NO_EXCEPTIONS\n                    __new_data = __alloc_traits::allocate(__alloc(), __res_arg+1);\n            #ifndef _LIBCPP_NO_EXCEPTIONS\n                }\n                catch (...)\n                {\n                    return;\n                }\n            #else  // _LIBCPP_NO_EXCEPTIONS\n                if (__new_data == nullptr)\n                    return;\n            #endif  // _LIBCPP_NO_EXCEPTIONS\n            }\n            __now_long = true;\n            __was_long = __is_long();\n            __p = __get_pointer();\n        }\n        traits_type::copy(_VSTD::__to_raw_pointer(__new_data),\n                          _VSTD::__to_raw_pointer(__p), size()+1);\n        if (__was_long)\n            __alloc_traits::deallocate(__alloc(), __p, __cap+1);\n        if (__now_long)\n        {\n            __set_long_cap(__res_arg+1);\n            __set_long_size(__sz);\n            __set_long_pointer(__new_data);\n        }\n        else\n            __set_short_size(__sz);\n        __invalidate_all_iterators();\n    }\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::const_reference\nbasic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__pos <= size(), \"string index out of bounds\");\n    return *(data() + __pos);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::reference\nbasic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__pos <= size(), \"string index out of bounds\");\n    return *(__get_pointer() + __pos);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::const_reference\nbasic_string<_CharT, _Traits, _Allocator>::at(size_type __n) const\n{\n    if (__n >= size())\n        this->__throw_out_of_range();\n    return (*this)[__n];\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::reference\nbasic_string<_CharT, _Traits, _Allocator>::at(size_type __n)\n{\n    if (__n >= size())\n        this->__throw_out_of_range();\n    return (*this)[__n];\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::reference\nbasic_string<_CharT, _Traits, _Allocator>::front()\n{\n    _LIBCPP_ASSERT(!empty(), \"string::front(): string is empty\");\n    return *__get_pointer();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::const_reference\nbasic_string<_CharT, _Traits, _Allocator>::front() const\n{\n    _LIBCPP_ASSERT(!empty(), \"string::front(): string is empty\");\n    return *data();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::reference\nbasic_string<_CharT, _Traits, _Allocator>::back()\n{\n    _LIBCPP_ASSERT(!empty(), \"string::back(): string is empty\");\n    return *(__get_pointer() + size() - 1);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::const_reference\nbasic_string<_CharT, _Traits, _Allocator>::back() const\n{\n    _LIBCPP_ASSERT(!empty(), \"string::back(): string is empty\");\n    return *(data() + size() - 1);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::copy(value_type* __s, size_type __n, size_type __pos) const\n{\n    size_type __sz = size();\n    if (__pos > __sz)\n        this->__throw_out_of_range();\n    size_type __rlen = _VSTD::min(__n, __sz - __pos);\n    traits_type::copy(__s, data() + __pos, __rlen);\n    return __rlen;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>::substr(size_type __pos, size_type __n) const\n{\n    return basic_string(*this, __pos, __n, __alloc());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_string<_CharT, _Traits, _Allocator>::swap(basic_string& __str)\n#if _LIBCPP_STD_VER >= 14\n        _NOEXCEPT_DEBUG\n#else\n        _NOEXCEPT_DEBUG_(!__alloc_traits::propagate_on_container_swap::value ||\n                    __is_nothrow_swappable<allocator_type>::value)\n#endif\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    if (!__is_long())\n        __get_db()->__invalidate_all(this);\n    if (!__str.__is_long())\n        __get_db()->__invalidate_all(&__str);\n    __get_db()->swap(this, &__str);\n#endif\n    _LIBCPP_ASSERT(\n        __alloc_traits::propagate_on_container_swap::value ||\n        __alloc_traits::is_always_equal::value ||\n        __alloc() == __str.__alloc(), \"swapping non-equal allocators\");\n    _VSTD::swap(__r_.first(), __str.__r_.first());\n    __swap_allocator(__alloc(), __str.__alloc());\n}\n\n// find\n\ntemplate <class _Traits>\nstruct _LIBCPP_HIDDEN __traits_eq\n{\n    typedef typename _Traits::char_type char_type;\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const char_type& __x, const char_type& __y) _NOEXCEPT\n        {return _Traits::eq(__x, __y);}\n};\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,\n                                                size_type __pos,\n                                                size_type __n) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find(): received nullptr\");\n    return __str_find<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, __n);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find(const basic_string& __str,\n                                                size_type __pos) const _NOEXCEPT\n{\n    return __str_find<value_type, size_type, traits_type, npos>\n        (data(), size(), __str.data(), __pos, __str.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find(__self_view __sv,\n                                                size_type __pos) const _NOEXCEPT\n{\n    return __str_find<value_type, size_type, traits_type, npos>\n        (data(), size(), __sv.data(), __pos, __sv.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,\n                                                size_type __pos) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::find(): received nullptr\");\n    return __str_find<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, traits_type::length(__s));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find(value_type __c,\n                                                size_type __pos) const _NOEXCEPT\n{\n    return __str_find<value_type, size_type, traits_type, npos>\n        (data(), size(), __c, __pos);\n}\n\n// rfind\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,\n                                                 size_type __pos,\n                                                 size_type __n) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::rfind(): received nullptr\");\n    return __str_rfind<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, __n);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::rfind(const basic_string& __str,\n                                                 size_type __pos) const _NOEXCEPT\n{\n    return __str_rfind<value_type, size_type, traits_type, npos>\n        (data(), size(), __str.data(), __pos, __str.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::rfind(__self_view __sv,\n                                                size_type __pos) const _NOEXCEPT\n{\n    return __str_rfind<value_type, size_type, traits_type, npos>\n        (data(), size(), __sv.data(), __pos, __sv.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,\n                                                 size_type __pos) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::rfind(): received nullptr\");\n    return __str_rfind<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, traits_type::length(__s));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::rfind(value_type __c,\n                                                 size_type __pos) const _NOEXCEPT\n{\n    return __str_rfind<value_type, size_type, traits_type, npos>\n        (data(), size(), __c, __pos);\n}\n\n// find_first_of\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,\n                                                         size_type __pos,\n                                                         size_type __n) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find_first_of(): received nullptr\");\n    return __str_find_first_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, __n);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_of(const basic_string& __str,\n                                                         size_type __pos) const _NOEXCEPT\n{\n    return __str_find_first_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __str.data(), __pos, __str.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_of(__self_view __sv,\n                                                size_type __pos) const _NOEXCEPT\n{\n    return __str_find_first_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __sv.data(), __pos, __sv.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,\n                                                         size_type __pos) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::find_first_of(): received nullptr\");\n    return __str_find_first_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, traits_type::length(__s));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_of(value_type __c,\n                                                         size_type __pos) const _NOEXCEPT\n{\n    return find(__c, __pos);\n}\n\n// find_last_of\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,\n                                                        size_type __pos,\n                                                        size_type __n) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find_last_of(): received nullptr\");\n    return __str_find_last_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, __n);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_of(const basic_string& __str,\n                                                        size_type __pos) const _NOEXCEPT\n{\n    return __str_find_last_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __str.data(), __pos, __str.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_of(__self_view __sv,\n                                                size_type __pos) const _NOEXCEPT\n{\n    return __str_find_last_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __sv.data(), __pos, __sv.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,\n                                                        size_type __pos) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::find_last_of(): received nullptr\");\n    return __str_find_last_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, traits_type::length(__s));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_of(value_type __c,\n                                                        size_type __pos) const _NOEXCEPT\n{\n    return rfind(__c, __pos);\n}\n\n// find_first_not_of\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,\n                                                             size_type __pos,\n                                                             size_type __n) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find_first_not_of(): received nullptr\");\n    return __str_find_first_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, __n);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const basic_string& __str,\n                                                             size_type __pos) const _NOEXCEPT\n{\n    return __str_find_first_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __str.data(), __pos, __str.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_not_of(__self_view __sv,\n                                                size_type __pos) const _NOEXCEPT\n{\n    return __str_find_first_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __sv.data(), __pos, __sv.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,\n                                                             size_type __pos) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::find_first_not_of(): received nullptr\");\n    return __str_find_first_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, traits_type::length(__s));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_first_not_of(value_type __c,\n                                                             size_type __pos) const _NOEXCEPT\n{\n    return __str_find_first_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __c, __pos);\n}\n\n// find_last_not_of\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,\n                                                            size_type __pos,\n                                                            size_type __n) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find_last_not_of(): received nullptr\");\n    return __str_find_last_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, __n);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const basic_string& __str,\n                                                            size_type __pos) const _NOEXCEPT\n{\n    return __str_find_last_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __str.data(), __pos, __str.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_not_of(__self_view __sv,\n                                                size_type __pos) const _NOEXCEPT\n{\n    return __str_find_last_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __sv.data(), __pos, __sv.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,\n                                                            size_type __pos) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::find_last_not_of(): received nullptr\");\n    return __str_find_last_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __s, __pos, traits_type::length(__s));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename basic_string<_CharT, _Traits, _Allocator>::size_type\nbasic_string<_CharT, _Traits, _Allocator>::find_last_not_of(value_type __c,\n                                                            size_type __pos) const _NOEXCEPT\n{\n    return __str_find_last_not_of<value_type, size_type, traits_type, npos>\n        (data(), size(), __c, __pos);\n}\n\n// compare\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nint\nbasic_string<_CharT, _Traits, _Allocator>::compare(__self_view __sv) const _NOEXCEPT\n{\n    size_t __lhs_sz = size();\n    size_t __rhs_sz = __sv.size();\n    int __result = traits_type::compare(data(), __sv.data(),\n                                        _VSTD::min(__lhs_sz, __rhs_sz));\n    if (__result != 0)\n        return __result;\n    if (__lhs_sz < __rhs_sz)\n        return -1;\n    if (__lhs_sz > __rhs_sz)\n        return 1;\n    return 0;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nint\nbasic_string<_CharT, _Traits, _Allocator>::compare(const basic_string& __str) const _NOEXCEPT\n{\n    return compare(__self_view(__str));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nint\nbasic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,\n                                                   size_type __n1,\n                                                   const value_type* __s,\n                                                   size_type __n2) const\n{\n    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, \"string::compare(): received nullptr\");\n    size_type __sz = size();\n    if (__pos1 > __sz || __n2 == npos)\n        this->__throw_out_of_range();\n    size_type __rlen = _VSTD::min(__n1, __sz - __pos1);\n    int __r = traits_type::compare(data() + __pos1, __s, _VSTD::min(__rlen, __n2));\n    if (__r == 0)\n    {\n        if (__rlen < __n2)\n            __r = -1;\n        else if (__rlen > __n2)\n            __r = 1;\n    }\n    return __r;\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nint\nbasic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,\n                                                   size_type __n1,\n                                                   __self_view __sv) const\n{\n    return compare(__pos1, __n1, __sv.data(), __sv.size());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nint\nbasic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,\n                                                   size_type __n1,\n                                                   const basic_string& __str) const\n{\n    return compare(__pos1, __n1, __str.data(), __str.size());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntemplate <class _Tp>\ntypename enable_if\n<\n\t__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,\n\tint\n>::type\nbasic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,\n                                                   size_type __n1,\n                                                   const _Tp& __t,\n                                                   size_type __pos2,\n                                                   size_type __n2) const\n{\n    __self_view __sv = __t;\n    return __self_view(*this).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nint\nbasic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,\n                                                   size_type __n1,\n                                                   const basic_string& __str,\n                                                   size_type __pos2,\n                                                   size_type __n2) const\n{\n        return compare(__pos1, __n1, __self_view(__str), __pos2, __n2);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nint\nbasic_string<_CharT, _Traits, _Allocator>::compare(const value_type* __s) const _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::compare(): received nullptr\");\n    return compare(0, npos, __s, traits_type::length(__s));\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nint\nbasic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,\n                                                   size_type __n1,\n                                                   const value_type* __s) const\n{\n    _LIBCPP_ASSERT(__s != nullptr, \"string::compare(): received nullptr\");\n    return compare(__pos1, __n1, __s, traits_type::length(__s));\n}\n\n// __invariants\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nbasic_string<_CharT, _Traits, _Allocator>::__invariants() const\n{\n    if (size() > capacity())\n        return false;\n    if (capacity() < __min_cap - 1)\n        return false;\n    if (data() == 0)\n        return false;\n    if (data()[size()] != value_type(0))\n        return false;\n    return true;\n}\n\n// operator==\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    size_t __lhs_sz = __lhs.size();\n    return __lhs_sz == __rhs.size() && _Traits::compare(__lhs.data(),\n                                                        __rhs.data(),\n                                                        __lhs_sz) == 0;\n}\n\ntemplate<class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const basic_string<char, char_traits<char>, _Allocator>& __lhs,\n           const basic_string<char, char_traits<char>, _Allocator>& __rhs) _NOEXCEPT\n{\n    size_t __lhs_sz = __lhs.size();\n    if (__lhs_sz != __rhs.size())\n        return false;\n    const char* __lp = __lhs.data();\n    const char* __rp = __rhs.data();\n    if (__lhs.__is_long())\n        return char_traits<char>::compare(__lp, __rp, __lhs_sz) == 0;\n    for (; __lhs_sz != 0; --__lhs_sz, ++__lp, ++__rp)\n        if (*__lp != *__rp)\n            return false;\n    return true;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const _CharT* __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    typedef basic_string<_CharT, _Traits, _Allocator> _String;\n    _LIBCPP_ASSERT(__lhs != nullptr, \"operator==(char*, basic_string): received nullptr\");\n    size_t __lhs_len = _Traits::length(__lhs);\n    if (__lhs_len != __rhs.size()) return false;\n    return __rhs.compare(0, _String::npos, __lhs, __lhs_len) == 0;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n           const _CharT* __rhs) _NOEXCEPT\n{\n    typedef basic_string<_CharT, _Traits, _Allocator> _String;\n    _LIBCPP_ASSERT(__rhs != nullptr, \"operator==(basic_string, char*): received nullptr\");\n    size_t __rhs_len = _Traits::length(__rhs);\n    if (__rhs_len != __lhs.size()) return false;\n    return __lhs.compare(0, _String::npos, __rhs, __rhs_len) == 0;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return !(__lhs == __rhs);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const _CharT* __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return !(__lhs == __rhs);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const _CharT* __rhs) _NOEXCEPT\n{\n    return !(__lhs == __rhs);\n}\n\n// operator<\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return __lhs.compare(__rhs) < 0;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const _CharT* __rhs) _NOEXCEPT\n{\n    return __lhs.compare(__rhs) < 0;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator< (const _CharT* __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return __rhs.compare(__lhs) > 0;\n}\n\n// operator>\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return __rhs < __lhs;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const _CharT* __rhs) _NOEXCEPT\n{\n    return __rhs < __lhs;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator> (const _CharT* __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return __rhs < __lhs;\n}\n\n// operator<=\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return !(__rhs < __lhs);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const _CharT* __rhs) _NOEXCEPT\n{\n    return !(__rhs < __lhs);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const _CharT* __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return !(__rhs < __lhs);\n}\n\n// operator>=\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return !(__lhs < __rhs);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n           const _CharT* __rhs) _NOEXCEPT\n{\n    return !(__lhs < __rhs);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const _CharT* __lhs,\n           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT\n{\n    return !(__lhs < __rhs);\n}\n\n// operator +\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,\n          const basic_string<_CharT, _Traits, _Allocator>& __rhs)\n{\n    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());\n    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();\n    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();\n    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);\n    __r.append(__rhs.data(), __rhs_sz);\n    return __r;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const _CharT* __lhs , const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n{\n    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());\n    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = _Traits::length(__lhs);\n    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();\n    __r.__init(__lhs, __lhs_sz, __lhs_sz + __rhs_sz);\n    __r.append(__rhs.data(), __rhs_sz);\n    return __r;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n{\n    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());\n    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();\n    __r.__init(&__lhs, 1, 1 + __rhs_sz);\n    __r.append(__rhs.data(), __rhs_sz);\n    return __r;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs)\n{\n    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());\n    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();\n    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = _Traits::length(__rhs);\n    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);\n    __r.append(__rhs, __rhs_sz);\n    return __r;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, _CharT __rhs)\n{\n    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());\n    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();\n    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + 1);\n    __r.push_back(__rhs);\n    return __r;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs)\n{\n    return _VSTD::move(__lhs.append(__rhs));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)\n{\n    return _VSTD::move(__rhs.insert(0, __lhs));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)\n{\n    return _VSTD::move(__lhs.append(__rhs));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(const _CharT* __lhs , basic_string<_CharT,_Traits,_Allocator>&& __rhs)\n{\n    return _VSTD::move(__rhs.insert(0, __lhs));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(_CharT __lhs, basic_string<_CharT,_Traits,_Allocator>&& __rhs)\n{\n    __rhs.insert(__rhs.begin(), __lhs);\n    return _VSTD::move(__rhs);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs)\n{\n    return _VSTD::move(__lhs.append(__rhs));\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_string<_CharT, _Traits, _Allocator>\noperator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, _CharT __rhs)\n{\n    __lhs.push_back(__rhs);\n    return _VSTD::move(__lhs);\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n// swap\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_string<_CharT, _Traits, _Allocator>& __lhs,\n     basic_string<_CharT, _Traits, _Allocator>& __rhs)\n     _NOEXCEPT_(_NOEXCEPT_(__lhs.swap(__rhs)))\n{\n    __lhs.swap(__rhs);\n}\n\n#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS\n\ntypedef basic_string<char16_t> u16string;\ntypedef basic_string<char32_t> u32string;\n\n#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS\n\n_LIBCPP_FUNC_VIS int                stoi  (const string& __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS long               stol  (const string& __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS unsigned long      stoul (const string& __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS long long          stoll (const string& __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS unsigned long long stoull(const string& __str, size_t* __idx = 0, int __base = 10);\n\n_LIBCPP_FUNC_VIS float       stof (const string& __str, size_t* __idx = 0);\n_LIBCPP_FUNC_VIS double      stod (const string& __str, size_t* __idx = 0);\n_LIBCPP_FUNC_VIS long double stold(const string& __str, size_t* __idx = 0);\n\n_LIBCPP_FUNC_VIS string to_string(int __val);\n_LIBCPP_FUNC_VIS string to_string(unsigned __val);\n_LIBCPP_FUNC_VIS string to_string(long __val);\n_LIBCPP_FUNC_VIS string to_string(unsigned long __val);\n_LIBCPP_FUNC_VIS string to_string(long long __val);\n_LIBCPP_FUNC_VIS string to_string(unsigned long long __val);\n_LIBCPP_FUNC_VIS string to_string(float __val);\n_LIBCPP_FUNC_VIS string to_string(double __val);\n_LIBCPP_FUNC_VIS string to_string(long double __val);\n\n_LIBCPP_FUNC_VIS int                stoi  (const wstring& __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS long               stol  (const wstring& __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS unsigned long      stoul (const wstring& __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS long long          stoll (const wstring& __str, size_t* __idx = 0, int __base = 10);\n_LIBCPP_FUNC_VIS unsigned long long stoull(const wstring& __str, size_t* __idx = 0, int __base = 10);\n\n_LIBCPP_FUNC_VIS float       stof (const wstring& __str, size_t* __idx = 0);\n_LIBCPP_FUNC_VIS double      stod (const wstring& __str, size_t* __idx = 0);\n_LIBCPP_FUNC_VIS long double stold(const wstring& __str, size_t* __idx = 0);\n\n_LIBCPP_FUNC_VIS wstring to_wstring(int __val);\n_LIBCPP_FUNC_VIS wstring to_wstring(unsigned __val);\n_LIBCPP_FUNC_VIS wstring to_wstring(long __val);\n_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long __val);\n_LIBCPP_FUNC_VIS wstring to_wstring(long long __val);\n_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long long __val);\n_LIBCPP_FUNC_VIS wstring to_wstring(float __val);\n_LIBCPP_FUNC_VIS wstring to_wstring(double __val);\n_LIBCPP_FUNC_VIS wstring to_wstring(long double __val);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\n    const typename basic_string<_CharT, _Traits, _Allocator>::size_type\n                   basic_string<_CharT, _Traits, _Allocator>::npos;\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nstruct _LIBCPP_TEMPLATE_VIS hash<basic_string<_CharT, _Traits, _Allocator> >\n    : public unary_function<basic_string<_CharT, _Traits, _Allocator>, size_t>\n{\n    size_t\n        operator()(const basic_string<_CharT, _Traits, _Allocator>& __val) const _NOEXCEPT;\n};\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nsize_t\nhash<basic_string<_CharT, _Traits, _Allocator> >::operator()(\n        const basic_string<_CharT, _Traits, _Allocator>& __val) const _NOEXCEPT\n{\n    return __do_string_hash(__val.data(), __val.data() + __val.size());\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os,\n           const basic_string<_CharT, _Traits, _Allocator>& __str);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_istream<_CharT, _Traits>&\noperator>>(basic_istream<_CharT, _Traits>& __is,\n           basic_string<_CharT, _Traits, _Allocator>& __str);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_istream<_CharT, _Traits>&\ngetline(basic_istream<_CharT, _Traits>& __is,\n        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<_CharT, _Traits>&\ngetline(basic_istream<_CharT, _Traits>& __is,\n        basic_string<_CharT, _Traits, _Allocator>& __str);\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<_CharT, _Traits>&\ngetline(basic_istream<_CharT, _Traits>&& __is,\n        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<_CharT, _Traits>&\ngetline(basic_istream<_CharT, _Traits>&& __is,\n        basic_string<_CharT, _Traits, _Allocator>& __str);\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbool\nbasic_string<_CharT, _Traits, _Allocator>::__dereferenceable(const const_iterator* __i) const\n{\n    return this->data() <= _VSTD::__to_raw_pointer(__i->base()) &&\n           _VSTD::__to_raw_pointer(__i->base()) < this->data() + this->size();\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbool\nbasic_string<_CharT, _Traits, _Allocator>::__decrementable(const const_iterator* __i) const\n{\n    return this->data() < _VSTD::__to_raw_pointer(__i->base()) &&\n           _VSTD::__to_raw_pointer(__i->base()) <= this->data() + this->size();\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbool\nbasic_string<_CharT, _Traits, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const\n{\n    const value_type* __p = _VSTD::__to_raw_pointer(__i->base()) + __n;\n    return this->data() <= __p && __p <= this->data() + this->size();\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbool\nbasic_string<_CharT, _Traits, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const\n{\n    const value_type* __p = _VSTD::__to_raw_pointer(__i->base()) + __n;\n    return this->data() <= __p && __p < this->data() + this->size();\n}\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\n#if _LIBCPP_STD_VER > 11 \n// Literal suffixes for basic_string [basic.string.literals]\ninline namespace literals\n{\n  inline namespace string_literals\n  {\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_string<char> operator \"\" s( const char *__str, size_t __len )\n    {\n        return basic_string<char> (__str, __len);\n    }\n\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_string<wchar_t> operator \"\" s( const wchar_t *__str, size_t __len )\n    {\n        return basic_string<wchar_t> (__str, __len);\n    }\n\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_string<char16_t> operator \"\" s( const char16_t *__str, size_t __len )\n    {\n        return basic_string<char16_t> (__str, __len);\n    }\n\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_string<char32_t> operator \"\" s( const char32_t *__str, size_t __len )\n    {\n        return basic_string<char32_t> (__str, __len);\n    }\n  }\n}\n#endif\n\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_string<char>)\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_string<wchar_t>)\n_LIBCPP_EXTERN_TEMPLATE(string operator+<char, char_traits<char>, allocator<char> >(char const*, string const&))\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_STRING\n","// -*- C++ -*-\n//===----------------------------- new ------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_NEW\n#define _LIBCPP_NEW\n\n/*\n    new synopsis\n\nnamespace std\n{\n\nclass bad_alloc\n    : public exception\n{\npublic:\n    bad_alloc() noexcept;\n    bad_alloc(const bad_alloc&) noexcept;\n    bad_alloc& operator=(const bad_alloc&) noexcept;\n    virtual const char* what() const noexcept;\n};\n\nclass bad_array_length : public bad_alloc // FIXME: Not part of C++\n{\npublic:\n    bad_array_length() noexcept;\n};\n\nclass bad_array_new_length : public bad_alloc // C++14\n{\npublic:\n    bad_array_new_length() noexcept;\n};\n\nenum class align_val_t : size_t {}; // C++17\nstruct nothrow_t {};\nextern const nothrow_t nothrow;\ntypedef void (*new_handler)();\nnew_handler set_new_handler(new_handler new_p) noexcept;\nnew_handler get_new_handler() noexcept;\n\n}  // std\n\nvoid* operator new(std::size_t size);                                   // replaceable\nvoid* operator new(std::size_t size, std::align_val_t alignment);       // replaceable, C++17\nvoid* operator new(std::size_t size, const std::nothrow_t&) noexcept;   // replaceable\nvoid* operator new(std::size_t size, std::align_val_t alignment,\n                   const std::nothrow_t&) noexcept;                     // replaceable, C++17\nvoid  operator delete(void* ptr) noexcept;                              // replaceable\nvoid  operator delete(void* ptr, std::size_t size) noexcept;            // replaceable, C++14\nvoid  operator delete(void* ptr, std::align_val_t alignment) noexcept;  // replaceable, C++17\nvoid  operator delete(void* ptr, std::size_t size,\n                      std::align_val_t alignment) noexcept;             // replaceable, C++17\nvoid  operator delete(void* ptr, const std::nothrow_t&) noexcept;       // replaceable\nvoid  operator delete(void* ptr, std:align_val_t alignment,\n                      const std::nothrow_t&) noexcept;                  // replaceable, C++17\n\nvoid* operator new[](std::size_t size);                                 // replaceable\nvoid* operator new[](std::size_t size,\n                     std::align_val_t alignment) noexcept;              // replaceable, C++17\nvoid* operator new[](std::size_t size, const std::nothrow_t&) noexcept; // replaceable\nvoid* operator new[](std::size_t size, std::align_val_t alignment,\n                     const std::nothrow_t&) noexcept;                   // replaceable, C++17\nvoid  operator delete[](void* ptr) noexcept;                            // replaceable\nvoid  operator delete[](void* ptr, std::size_t size) noexcept;          // replaceable, C++14\nvoid  operator delete[](void* ptr,\n                        std::align_val_t alignment) noexcept;           // replaceable, C++17\nvoid  operator delete[](void* ptr, std::size_t size,\n                        std::align_val_t alignment) noexcept;           // replaceable, C++17\nvoid  operator delete[](void* ptr, const std::nothrow_t&) noexcept;     // replaceable\nvoid  operator delete[](void* ptr, std::align_val_t alignment,\n                        const std::nothrow_t&) noexcept;                // replaceable, C++17\n\nvoid* operator new  (std::size_t size, void* ptr) noexcept;\nvoid* operator new[](std::size_t size, void* ptr) noexcept;\nvoid  operator delete  (void* ptr, void*) noexcept;\nvoid  operator delete[](void* ptr, void*) noexcept;\n\n*/\n\n#include <__config>\n#include <exception>\n#include <cstddef>\n#ifdef _LIBCPP_NO_EXCEPTIONS\n#include <cstdlib>\n#endif\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n#if !(defined(_LIBCPP_BUILDING_NEW) || _LIBCPP_STD_VER >= 14 || \\\n    (defined(__cpp_sized_deallocation) && __cpp_sized_deallocation >= 201309))\n# define _LIBCPP_HAS_NO_SIZED_DEALLOCATION\n#endif\n\n#if !defined(_LIBCPP_HAS_NO_ALIGNED_ALLOCATION) && \\\n    (!(defined(_LIBCPP_BUILDING_NEW) || _LIBCPP_STD_VER > 14 || \\\n    (defined(__cpp_aligned_new) && __cpp_aligned_new >= 201606)))\n# define _LIBCPP_HAS_NO_ALIGNED_ALLOCATION\n#endif\n\nnamespace std  // purposefully not using versioning namespace\n{\n\nclass _LIBCPP_EXCEPTION_ABI bad_alloc\n    : public exception\n{\npublic:\n    bad_alloc() _NOEXCEPT;\n    virtual ~bad_alloc() _NOEXCEPT;\n    virtual const char* what() const _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI bad_array_new_length\n    : public bad_alloc\n{\npublic:\n    bad_array_new_length() _NOEXCEPT;\n    virtual ~bad_array_new_length() _NOEXCEPT;\n    virtual const char* what() const _NOEXCEPT;\n};\n\n_LIBCPP_NORETURN _LIBCPP_FUNC_VIS void __throw_bad_alloc();  // not in C++ spec\n\n#if defined(_LIBCPP_BUILDING_NEW) || (_LIBCPP_STD_VER > 11)\n\nclass _LIBCPP_EXCEPTION_ABI bad_array_length\n    : public bad_alloc\n{\npublic:\n    bad_array_length() _NOEXCEPT;\n    virtual ~bad_array_length() _NOEXCEPT;\n    virtual const char* what() const _NOEXCEPT;\n};\n\n#define _LIBCPP_BAD_ARRAY_LENGTH_DEFINED\n\n#endif  // defined(_LIBCPP_BUILDING_NEW) || (_LIBCPP_STD_VER > 11)\n\n#if !defined(_LIBCPP_HAS_NO_ALIGNED_ALLOCATION) || _LIBCPP_STD_VER > 14\n#ifndef _LIBCPP_CXX03_LANG\nenum class _LIBCPP_ENUM_VIS align_val_t : size_t { };\n#else\nenum align_val_t { __zero = 0, __max = (size_t)-1 };\n#endif\n#endif\n\nstruct _LIBCPP_TYPE_VIS nothrow_t {};\nextern _LIBCPP_FUNC_VIS const nothrow_t nothrow;\ntypedef void (*new_handler)();\n_LIBCPP_FUNC_VIS new_handler set_new_handler(new_handler) _NOEXCEPT;\n_LIBCPP_FUNC_VIS new_handler get_new_handler() _NOEXCEPT;\n\n}  // std\n\n#if defined(_LIBCPP_CXX03_LANG)\n#define _THROW_BAD_ALLOC throw(std::bad_alloc)\n#else\n#define _THROW_BAD_ALLOC\n#endif\n\n_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(std::size_t __sz) _THROW_BAD_ALLOC;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(std::size_t __sz, const std::nothrow_t&) _NOEXCEPT _NOALIAS;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p) _NOEXCEPT;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, const std::nothrow_t&) _NOEXCEPT;\n#ifndef _LIBCPP_HAS_NO_SIZED_DEALLOCATION\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, std::size_t __sz) _NOEXCEPT;\n#endif\n\n_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](std::size_t __sz) _THROW_BAD_ALLOC;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](std::size_t __sz, const std::nothrow_t&) _NOEXCEPT _NOALIAS;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p) _NOEXCEPT;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, const std::nothrow_t&) _NOEXCEPT;\n#ifndef _LIBCPP_HAS_NO_SIZED_DEALLOCATION\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, std::size_t __sz) _NOEXCEPT;\n#endif\n\n#ifndef _LIBCPP_HAS_NO_ALIGNED_ALLOCATION\n_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(std::size_t __sz, std::align_val_t) _THROW_BAD_ALLOC;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(std::size_t __sz, std::align_val_t, const std::nothrow_t&) _NOEXCEPT _NOALIAS;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, std::align_val_t) _NOEXCEPT;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, std::align_val_t, const std::nothrow_t&) _NOEXCEPT;\n#ifndef _LIBCPP_HAS_NO_SIZED_DEALLOCATION\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, std::size_t __sz, std::align_val_t) _NOEXCEPT;\n#endif\n\n_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](std::size_t __sz, std::align_val_t) _THROW_BAD_ALLOC;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](std::size_t __sz, std::align_val_t, const std::nothrow_t&) _NOEXCEPT _NOALIAS;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, std::align_val_t) _NOEXCEPT;\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, std::align_val_t, const std::nothrow_t&) _NOEXCEPT;\n#ifndef _LIBCPP_HAS_NO_SIZED_DEALLOCATION\n_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, std::size_t __sz, std::align_val_t) _NOEXCEPT;\n#endif\n#endif\n\ninline _LIBCPP_INLINE_VISIBILITY void* operator new  (std::size_t, void* __p) _NOEXCEPT {return __p;}\ninline _LIBCPP_INLINE_VISIBILITY void* operator new[](std::size_t, void* __p) _NOEXCEPT {return __p;}\ninline _LIBCPP_INLINE_VISIBILITY void  operator delete  (void*, void*) _NOEXCEPT {}\ninline _LIBCPP_INLINE_VISIBILITY void  operator delete[](void*, void*) _NOEXCEPT {}\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ninline _LIBCPP_INLINE_VISIBILITY void *__allocate(size_t __size) {\n#ifdef _LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE\n  return ::operator new(__size);\n#else\n  return __builtin_operator_new(__size);\n#endif\n}\n\ninline _LIBCPP_INLINE_VISIBILITY void __libcpp_deallocate(void *__ptr) {\n#ifdef _LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE\n  ::operator delete(__ptr);\n#else\n  __builtin_operator_delete(__ptr);\n#endif\n}\n\n#ifdef _LIBCPP_BAD_ARRAY_LENGTH_DEFINED\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_bad_array_length()\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw bad_array_length();\n#else\n\t_VSTD::abort();\n#endif\n}\n#endif\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_NEW\n","#ifndef MAPE_GP_CONFIG_H\n#define MAPE_GP_CONFIG_H\n\n#include \"config/config.h\"\n\nEMP_BUILD_CONFIG( MapElitesGPConfig,\n  GROUP(GENERAL, \"General settings for our experiment.\"),\n  VALUE(WORLD_STRUCTURE, size_t, 0, \"What mode are we running in? \\n0: Well-mixed, \\n1: MAP-Elites\"),\n  VALUE(RANDOM_SEED, int, -1, \"Random number seed (negative value for based on time)\"),\n  VALUE(POP_SIZE, size_t, 1000, \"Total population size\"),\n  VALUE(REPRESENTATION, size_t, 0, \"0 = SignalGP, 1=ScopeGP\"),\n  VALUE(GENERATIONS, size_t, 100, \"How many generations should we run evolution?\"),\n  VALUE(POP_INIT_METHOD, size_t, 0, \"How should we initialize the population? \\n0: Randomly, \\n1: From a common ancestor\"),\n  VALUE(ANCESTOR_FPATH, std::string, \"ancestor.gp\", \"Ancestor program file\"),\n\n  GROUP(EVALUATION, \"Settings related to evaluating SignalGP programs.\"),\n  VALUE(EVAL_TRIAL_CNT, size_t, 3, \"How many independent trials should we evaluate each program for when calculating fitness?\"),\n  VALUE(EVAL_TRIAL_AGG_METHOD, size_t, 0, \"What method should we use to aggregate scores (to determine actual fitness) across fitness evaluation trials? \\n0: Fitness = Min trial score \\n1: Fitness = Max trial score \\n2: Fitness = Avg trial score\"),\n  VALUE(EVAL_TIME, size_t, 256, \"How many time steps should we evaluate organisms during each evaluation trial?\"),\n\n  GROUP(EA_SELECTION, \"Settings used to specify how selection should happen.\"),\n  VALUE(SELECTION_METHOD, size_t, 0, \"Which selection scheme should we use to select organisms to reproduce (asexually)? Note: this is only relevant when running in EA mode. \\n0: Tournament \\n1: Lexicase \\n2: Random \"),\n  VALUE(ELITE_CNT, size_t, 0, \"How many elites should we select to reproduce no matter what (0=no elite selection)?\"),\n  VALUE(TOURNAMENT_SIZE, size_t, 2, \"How big are tournaments when performing tournament selection?\"),\n\n  GROUP(MAP_ELITES, \"Settings specific to MAP-Elites\"),\n  VALUE(USE_MAPE_AXIS__INST_ENTROPY, bool, true, \"Should we use instruction entropy as a MAP-Elites axis?\"),\n  VALUE(MAPE_AXIS_SIZE__INST_ENTROPY, size_t, 20, \"Width (in map grid cells) of the instruction entropy MAPE axis?\"),\n  VALUE(USE_MAPE_AXIS__INST_CNT, bool, false, \"Should we use instruction count as a MAP-Elites axis?\"),\n  VALUE(USE_MAPE_AXIS__FUNC_USED, bool, true, \"Should we use functions used as a MAP-Elites axis?\"),\n  VALUE(USE_MAPE_AXIS__FUNC_CNT, bool, false, \"Should we use function count as a MAP-Elites axis?\"),\n  VALUE(USE_MAPE_AXIS__FUNC_ENTERED, bool, false, \"Should we use number of functions entered (repeats are counted) as a MAP-Elites axis?\"),\n  VALUE(USE_MAPE_AXIS__FUNC_ENTERED_ENTROPY, bool, false, \"Should we use entropy of number of functions entered as a MAP-Elites axis?\"),\n  VALUE(MAPE_AXIS_SIZE__FUNC_ENTERED_ENTROPY, size_t, 20, \"Width (in map grid cells) of the functions entered entropy MAPE axis?\"),\n\n  GROUP(PROBLEM, \"Settings related to the problem we're evolving programs to solve.\"),\n  VALUE(PROBLEM_TYPE, size_t, 0, \"What problem are we solving? \\n0: Changing environment problem \\n1: Testcase problem (requires TESTCASES_FPATH setting) \\n2: Logic tasks problem\"),\n  VALUE(TESTCASES_FPATH, std::string, \"testcases/examples-squares.csv\", \"Where is the file containing testcases for the problem we're solving?\"),\n\n  GROUP(CHG_ENV_PROBLEM, \"Settings specific to the changing environment problem\"),\n  VALUE(ENV_TAG_GEN_METHOD, size_t, 0, \"How should we generate environment tags (true and distraction)? \\n0: Randomly\\n1: Load from file (ENV_TAG_FPATH)\"),\n  VALUE(ENV_TAG_FPATH, std::string, \"env_tags.csv\", \"Where should we save/load environment tags to/from?\"),\n  VALUE(ENV_STATE_CNT, size_t, 8, \"How many environment states are there?\"),\n  VALUE(ENV_CHG_SIG, bool, true, \"Does the environment produce a signal on a change?\"),\n  VALUE(ENV_DISTRACTION_SIGS, bool, false, \"Does the environment emit distraction signals?\"),\n  VALUE(ENV_DISTRACTION_SIG_CNT, size_t, 8, \"How many environment distraction signals are there?\"),\n  VALUE(ENV_CHG_METHOD, size_t, 0, \"How should the environment change? \\n0: Probabilistically every time step \\n1: At a fixed time cycle?\"),\n  VALUE(ENV_CHG_PROB, double, 0.125, \"With what probability should the environment change (only relevant when ENV_CHG_METHOD = 0)?\"),\n  VALUE(ENV_CHG_RATE, size_t, 16, \"How often should the environment change (only relevant when ENV_CHG_METHOD = 1)?\"),\n  VALUE(ENV_SENSORS, bool, false, \"Should we include active-polling environment sensors in the instruction set?\"),\n\n  GROUP(TESTCASES_PROBLEM, \"Settings specific to test case problems.\"),\n  VALUE(NUM_TEST_CASES, size_t, 10, \"How many test cases should we use when evaluating an organism?\"), \n  VALUE(SHUFFLE_TEST_CASES, bool, false, \"Should we shuffle test cases used to evaluate agents every generation? \"),\n\n  GROUP(PROGRAM_CONSTRAINTS, \"SignalGP program constraits that mutation operators/initialization will respect.\"),\n  VALUE(PROG_MIN_FUNC_CNT, size_t, 1, \"Minimum number of functions mutations are allowed to reduce a SignalGP program to.\"),\n  VALUE(PROG_MAX_FUNC_CNT, size_t, 32, \"Maximum number of functions a mutated SignalGP program can grow to. \"),\n  VALUE(PROG_MIN_FUNC_LEN, size_t, 1, \"Minimum number of instructions a SignalGP function can shrink to.\"),\n  VALUE(PROG_MAX_FUNC_LEN, size_t, 32, \"Maximum number of instructions a SignalGP function can grow to.\"),\n  VALUE(PROG_MAX_TOTAL_LEN, size_t, 512, \"Maximum number of *total* instructions a SignalGP program can grow to. \"),\n  VALUE(PROG_MIN_ARG_VAL, int, 0, \"Minimum argument value a SignalGP instruction can mutate to.\"),\n  VALUE(PROG_MAX_ARG_VAL, int, 15, \"Maximum argument value a SignalGP instruction can mutate to.\"),\n\n  GROUP(MUTATION, \"Settings specifying mutation rates.\"),\n  VALUE(ARG_SUB__PER_ARG, double, 0.005, \"Rate to apply substitutions to instruction arguments.\"),\n  VALUE(INST_SUB__PER_INST, double, 0.005, \"Per-instruction rate to apply instruction substitutions. \"),\n  VALUE(INST_INS__PER_INST, double, 0.005, \"Per-instruction rate to apply instruction insertions.\"),\n  VALUE(INST_DEL__PER_INST, double, 0.005, \"Per-instruction rate to apply instruction deletions.\"),\n  VALUE(SLIP__PER_FUNC, double, 0.05, \"Per-function rate to apply slip-mutations.\"),\n  VALUE(FUNC_DUP__PER_FUNC, double, 0.05, \"Per-function rate to apply function duplications.\"),\n  VALUE(FUNC_DEL__PER_FUNC, double, 0.05, \"Per-function rate to apply function deletions.\"),\n  VALUE(TAG_BIT_FLIP__PER_BIT, double, 0.005, \"Per-bit rate to apply tag bit flips. \"),\n  VALUE(EVOLVE_HW_TAG_SIM_THRESH, bool, false, \"Are we evolving SignalGP tag similarity thresholds?\"),\n\n  // VALUE()\n\n  GROUP(HARDWARE, \"Settings for SignalGP hardware\"),\n  VALUE(HW_MAX_THREAD_CNT, size_t, 8, \"What is the maximum number of threads that can be active at any one time on the SignalGP hardware?\"),\n  VALUE(HW_MAX_CALL_DEPTH, size_t, 128, \"What is the maximum call depth for SignalGP hardware?\"),\n  VALUE(HW_MIN_TAG_SIMILARITY_THRESH, double, 0.0, \"What is the minimum required similarity threshold for tags to successfully match when performing tag-based referencing?\"),\n\n  GROUP(DATA_TRACKING, \"Settings relevant to experiment data-tracking.\"),\n  VALUE(DATA_DIRECTORY, std::string, \"./output\", \"Location to dump data output.\"),\n  VALUE(STATISTICS_INTERVAL, size_t, 100, \"How often should we output summary statistics?\"),\n  VALUE(SNAPSHOT_INTERVAL, size_t, 1000, \"How often should we take a population snapshot?\"),\n  VALUE(DOM_SNAPSHOT_TRIAL_CNT, size_t, 100, \"How many trials should we do in dominant snapshot?\"),\n  VALUE(MAP_SNAPSHOT_TRIAL_CNT, size_t, 10, \"How many trials should we do in a map snapshot?\"),\n)\n\n#endif","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  Widget.h\n *  @brief Widgets maintain individual components on a web page and link to Elements\n *\n *  Each HTML Widget has all of its details stored in a WidgetInfo object; Multiple Widgets can\n *  be attached to the same WidgetInfo, simplifying the usage.  All the library user needs to\n *  worry about is the Widget object itself; the WidgetInfo will be managed behind the scenes.\n *\n *  WidgetInfo contains the basic information for all Widgets\n *  Widget is a generic base class, with a shared pointer to WidgetInfo\n *  WidgetFacet is a template that allows Set* methods to return derived return-type.\n *\n *  In other files, Widgets will be used to define specific elements.\n *  ELEMENTInfo maintains information about the specific widget (derived from WidgetInfo)\n *  ELEMENT interfaces to ELEMENTInfo so multiple elements use same core; derived from WidgetFacet\n *\n *  Library users should not need to access Widgets directly, only specific derived types.\n *\n *  Tips for using widgets:\n *\n *  1. If you are about to make a lot of changes at once, run Freeze(), make the changes, and\n *     then run Activate() again.  Freeze prevents widgets from being updated immediately.\n *\n *  2. Trust the Widget to handle all of the manipulation behind the scenes\n *\n */\n\n\n#ifndef EMP_WEB_WIDGET_H\n#define EMP_WEB_WIDGET_H\n\n#include <string>\n\n#include \"../base/vector.h\"\n#include \"../tools/mem_track.h\"\n\n#include \"events.h\"\n#include \"Font.h\"\n#include \"init.h\"\n#include \"WidgetExtras.h\"\n\nnamespace emp {\nnamespace web {\n\n  // Setup some types we will need later\n  namespace internal {\n    // Pre-declare WidgetInfo so classes can inter-operate.\n    class WidgetInfo;\n    class DivInfo;\n    class TableInfo;\n\n    /// Quick method for generating unique Widget ID numbers when not otherwise specified.\n    static size_t NextWidgetNum(bool inc_num=true) {\n      static size_t next_id = 0;\n      if (!inc_num) return next_id;\n      return next_id++;\n    }\n\n    /// Quick method for generating unique string IDs for Widgets.\n    static std::string NextWidgetID() {\n      return emp::to_string(\"emp__\", NextWidgetNum());\n    }\n\n    /// Base class for command-objects that can be fed into widgets.\n    class WidgetCommand {\n    public:\n      virtual ~WidgetCommand() { ; }\n      virtual bool Trigger(WidgetInfo &) const = 0;\n    };\n  }\n\n\n  /// Widget is effectively a smart pointer to a WidgetInfo object, plus some basic accessors.\n  class Widget {\n    friend internal::WidgetInfo; friend internal::DivInfo; friend internal::TableInfo;\n  protected:\n    using WidgetInfo = internal::WidgetInfo;\n    WidgetInfo * info;                        ///< Information associated with this widget.\n\n    /// If an Append doesn't work with current class, forward it to the parent and try there.\n    template <typename FWD_TYPE> Widget & ForwardAppend(FWD_TYPE && arg);\n\n    /// Set the information associated with this widget.\n    Widget & SetInfo(WidgetInfo * in_info);\n\n    /// Internally, we can treat a Widget as a pointer to its WidgetInfo.\n    WidgetInfo * operator->() { return info; }\n\n    /// Give derived classes the ability to access widget info.\n    static WidgetInfo * Info(const Widget & w) { return w.info; }\n\n    /// Four activity states for any widget:\n    ///   INACTIVE - Not be in DOM at all.\n    ///   WAITING  - Will become active once the page finishes loading.\n    ///   FROZEN   - Part of DOM, but not updating on the screen.\n    ///   ACTIVE   - Fully active; changes are reflected as they happen.\n\n    enum ActivityState { INACTIVE, WAITING, FROZEN, ACTIVE };\n\n    /// Default name for un-initialized widgets.\n    static const std::string no_name;\n\n  public:\n    /// When Widgets are first created, they should be provided with an ID.\n    Widget(const std::string & id);\n    Widget(WidgetInfo * in_info=nullptr);\n    Widget(const Widget & in) : Widget(in.info) { ; }\n    Widget & operator=(const Widget & in) { return SetInfo(in.info); }\n\n    virtual ~Widget();\n\n    /// Test if this widget is valid.\n    bool IsNull() const { return info == nullptr; }\n\n    /// Some debugging helpers...\n    std::string GetInfoTypeName() const;\n\n    bool IsInactive() const;  ///< Test if the activity state of this widget is currently INACTIVE\n    bool IsWaiting() const;   ///< Test if the activity state of this widget is currently WAITING\n    bool IsFrozen() const;    ///< Test if the activity state of this widget is currently FROZEN\n    bool IsActive() const;    ///< Test if the activity state of this widget is currently ACTIVE\n\n    bool AppendOK() const;    ///< Is it okay to add more internal Widgets into this one?\n    void PreventAppend();     ///< Disallow further appending to this Widget.\n\n    bool IsButton()   const { return GetInfoTypeName() == \"ButtonInfo\"; }\n    bool IsCanvas()   const { return GetInfoTypeName() == \"CanvasInfo\"; }\n    bool IsDiv()      const { return GetInfoTypeName() == \"DivInfo\"; }\n    bool IsImage()    const { return GetInfoTypeName() == \"ImageInfo\"; }\n    bool IsInput()    const { return GetInfoTypeName() == \"InputInfo\"; }\n    bool IsSelector() const { return GetInfoTypeName() == \"SelectorInfo\"; }\n    bool IsTable()    const { return GetInfoTypeName() == \"TableInfo\"; }\n    bool IsText()     const { return GetInfoTypeName() == \"TextInfo\"; }\n    bool IsTextArea() const { return GetInfoTypeName() == \"TextAreaInfo\"; }\n\n    bool IsD3Visualiation() const { return GetInfoTypeName() == \"D3VisualizationInfo\"; }\n\n    const std::string & GetID() const;  ///< What is the HTML string ID for this Widget?\n\n    /// Retrieve a specific CSS trait associated with this Widget.\n    /// Note: CSS-related options may be overridden in derived classes that have multiple styles.\n    virtual const std::string & GetCSS(const std::string & setting) const;\n\n    /// Determine is a CSS trait has been set on this Widget.\n    virtual bool HasCSS(const std::string & setting);\n\n    /// Retrieve a specific attribute associated with this Widget.\n    virtual const std::string & GetAttr(const std::string & setting) const;\n\n    /// Determine is an attribute has been set on this Widget.\n    virtual bool HasAttr(const std::string & setting);\n\n    /// Are two Widgets refering to the same HTML object?\n    bool operator==(const Widget & in) const { return info == in.info; }\n\n    /// Are two Widgets refering to differnt HTML objects?\n    bool operator!=(const Widget & in) const { return info != in.info; }\n\n    /// Conver Widget to bool (I.e., is this Widget active?)\n    operator bool() const { return info != nullptr; }\n\n    const std::string & GetTitle() const { return GetAttr(\"title\"); }  /// Get current tooltip on this widget.\n\n    double GetXPos();          ///< Get the X-position of this Widget within its parent.\n    double GetYPos();          ///< Get the Y-position of this Widget within its parent.\n    double GetWidth();         ///< Get the width of this Widget on screen.\n    double GetHeight();        ///< Get the height of this Widget on screen.\n    double GetInnerWidth();    ///< Get the width of this Widget not including padding.\n    double GetInnerHeight();   ///< Get the height of this Widget not including padding.\n    double GetOuterWidth();    ///< Get the width of this Widget including all padding.\n    double GetOuterHeight();   ///< Get the height of this Widget including all padding.\n\n    /// Make this widget live, so changes occur immediately (once document is ready)\n    void Activate();\n\n    /// Record changes internally, but keep static screen until Activate() is called.\n    void Freeze();\n\n    /// Record changes internally and REMOVE from screen until Activate is called.\n    /// (Argument is for recursive, internal use only.)\n    virtual void Deactivate(bool top_level=true);\n\n    /// Doggle between Active and Deactivated.\n    bool ToggleActive();\n\n    /// Clear and redraw the current widget on the screen.\n    void Redraw();\n\n    /// Look up previously created elements, by type.\n    Widget & Find(const std::string & test_name);\n\n    /// Add a dependant to this Widget that should be redrawn when it is.\n    Widget & AddDependant(const Widget & w);\n\n    /// Setup << operator to redirect to Append; option preparation can be overridden.\n    virtual void PrepareAppend() { ; }\n    template <typename IN_TYPE> Widget operator<<(IN_TYPE && in_val);\n\n    /// Debug...\n    std::string GetInfoType() const;\n  };\n\n  namespace internal {\n\n    // WidgetInfo is a base class containing information needed by all GUI widget classes\n    // (Buttons, Images, etc...).  It take in a return type to be cast to for accessors.\n\n    class WidgetInfo {\n    public:\n      // Smart-pointer info\n      int ptr_count;                  ///< How many widgets are pointing to this info?\n\n      // Basic info about a widget\n      std::string id;                 ///< ID used for associated DOM element.\n      WidgetExtras extras;            ///< HTML attributes, CSS style, and listeners for web events.\n\n      // Track hiearchy\n      WidgetInfo * parent;            ///< Which WidgetInfo is this one contained within?\n      emp::vector<Widget> dependants; ///< Widgets to be refreshed if this one is triggered\n      Widget::ActivityState state;    ///< Is this element active in DOM?\n\n\n      /// WidgetInfo cannot be built unless within derived class, so constructor is protected\n      WidgetInfo(const std::string & in_id=\"\")\n        : ptr_count(1), id(in_id), parent(nullptr), state(Widget::INACTIVE)\n      {\n        EMP_TRACK_CONSTRUCT(WebWidgetInfo);\n        if (id == \"\") id = NextWidgetID();\n      }\n\n      /// No copies of INFO allowed\n      WidgetInfo(const WidgetInfo &) = delete;\n      WidgetInfo & operator=(const WidgetInfo &) = delete;\n\n      virtual ~WidgetInfo() {\n        EMP_TRACK_DESTRUCT(WebWidgetInfo);\n      }\n\n      /// Debugging helpers...\n      virtual std::string GetTypeName() const { return \"WidgetInfo\"; }\n\n      // If not overloaded, pass along widget registration to parent.\n      virtual void Register_recurse(Widget & w) { if (parent) parent->Register_recurse(w); }\n      virtual void Register(Widget & w) { if (parent) parent->Register(w); }\n      virtual void Unregister_recurse(Widget & w) { if (parent) parent->Unregister_recurse(w); }\n      virtual void Unregister(Widget & w) { if (parent) parent->Unregister(w); }\n\n      // Some nodes can have children and need to be able to recursively register them.\n      virtual void RegisterChildren(DivInfo * registrar) { ; }   // No children by default.\n      virtual void UnregisterChildren(DivInfo * regestrar) { ; } // No children by default.\n\n      // Record dependants.  Dependants are only acted upon when this widget's action is\n      // triggered (e.g. a button is pressed)\n      void AddDependant(Widget in) {\n        dependants.emplace_back(in);\n      }\n\n      template <typename... T>\n      void AddDependants(Widget first, T... widgets) {\n        AddDependant(first);\n        AddDependants(widgets...);\n      }\n\n      void AddDependants() { ; }\n\n      void UpdateDependants() { for (auto & d : dependants) d->ReplaceHTML(); }\n\n\n      // Activate is delayed until the document is ready, when DoActivate will be called.\n      virtual void DoActivate(bool top_level=true) {\n        state = Widget::ACTIVE;         // Activate this widget and its children.\n        if (top_level) ReplaceHTML();   // Print full contents to document.\n      }\n\n      virtual bool AppendOK() const { return false; } // Most widgets can't be appended to.\n      virtual void PreventAppend() { emp_assert(false, GetTypeName()); } // Only for appendable widgets.\n\n      // By default, elements should forward unknown appends to their parents.\n      virtual Widget Append(const std::string & text) { return ForwardAppend(text); }\n      virtual Widget Append(const std::function<std::string()> & fn) { return ForwardAppend(fn); }\n      virtual Widget Append(Widget info) { return ForwardAppend(info); }\n      virtual Widget Append(const Font & font) { return ForwardAppend(font); }\n\n      // Convert arbitrary inputs to a string and try again!\n      virtual Widget Append(char in_char) { return Append(emp::to_string(in_char)); }\n      virtual Widget Append(double in_num) { return Append(emp::to_string(in_num)); }\n      virtual Widget Append(int in_num) { return Append(emp::to_string(in_num)); }\n      virtual Widget Append(uint32_t in_num) { return Append(emp::to_string(in_num)); }\n\n      // Handle special commands\n      virtual Widget Append(const emp::web::internal::WidgetCommand & cmd) {\n        if (cmd.Trigger(*this)) return Widget(this);\n        return ForwardAppend(cmd);  // Otherwise pass the Close to parent!\n      }\n\n\n      // If an Append doesn't work with current class, forward it to the parent.\n      template <typename FWD_TYPE>\n      Widget ForwardAppend(FWD_TYPE && arg) {\n        emp_assert(parent && \"Trying to forward append to parent, but no parent!\", id);\n        return parent->Append(std::forward<FWD_TYPE>(arg));\n      }\n\n      // All derived widgets must suply a mechanism for providing associated HTML code.\n      virtual void GetHTML(std::stringstream & ss) = 0;\n\n      // Derived widgets may also provide JavaScript code to be run on redraw.\n      virtual void TriggerJS() { ; }\n\n      // Assume that the associated ID exists and replace it with the current HTML code.\n      virtual void ReplaceHTML() {\n        // If this node is frozen, don't change it!\n        if (state == Widget::FROZEN) return;\n\n        // If this node is active, put its contents in ss; otherwise make ss an empty span.\n        std::stringstream ss;\n        if (state == Widget::ACTIVE) GetHTML(ss);\n        else ss << \"<span id='\" << id << \"'></span>\";\n\n        // Now do the replacement.\n        EM_ASM_ARGS({\n            var widget_id = Pointer_stringify($0);\n            var out_html = Pointer_stringify($1);\n            $('#' + widget_id).replaceWith(out_html);\n          }, id.c_str(), ss.str().c_str());\n\n        // If active update style, trigger JS, and recurse to children!\n        if (state == Widget::ACTIVE) {\n          extras.Apply(id); // Update the attributes, style, and listeners.\n          TriggerJS();      // Run associated Javascript code, if any (e.g., to fill out a canvas)\n        }\n      }\n\n    public:\n      virtual std::string GetType() { return \"web::WidgetInfo\"; }\n    };\n\n  }  // end namespaceinternal\n\n  // Implementation of Widget methods...\n\n  Widget::Widget(const std::string & id) {\n    emp_assert(has_whitespace(id) == false);\n    // We are creating a new widget; in derived class, make sure:\n    // ... to assign info pointer to new object of proper *Info type\n    // ... NOT to increment info->ptr_count since it's initialized to 1.\n    EMP_TRACK_CONSTRUCT(WebWidget);\n  }\n\n  Widget::Widget(WidgetInfo * in_info) {\n    info = in_info;\n    if (info) info->ptr_count++;\n    EMP_TRACK_CONSTRUCT(WebWidget);\n  }\n\n  Widget::~Widget() {\n    // We are deleting a widget.\n    if (info) {\n      info->ptr_count--;\n      if (info->ptr_count == 0) delete info;\n    }\n    EMP_TRACK_DESTRUCT(WebWidget);\n  }\n\n  std::string Widget::GetInfoTypeName() const { if (IsNull()) return \"NULL\"; return info->GetTypeName(); }\n\n  Widget & Widget::SetInfo(WidgetInfo * in_info) {\n    // If the widget is already set correctly, stop here.\n    if (info == in_info) return *this;\n\n    // Clean up the old info that was previously pointed to.\n    if (info) {\n      info->ptr_count--;\n      if (info->ptr_count == 0) delete info;\n    }\n\n    // Setup new info.\n    info = in_info;\n    if (info) info->ptr_count++;\n\n    return *this;\n  }\n\n  bool Widget::IsInactive() const { if (!info) return false; return info->state == INACTIVE; }\n  bool Widget::IsWaiting() const { if (!info) return false; return info->state == WAITING; }\n  bool Widget::IsFrozen() const { if (!info) return false; return info->state == FROZEN; }\n  bool Widget::IsActive() const { if (!info) return false; return info->state == ACTIVE; }\n\n  bool Widget::AppendOK() const { if (!info) return false; return info->AppendOK(); }\n  void Widget::PreventAppend() { emp_assert(info); info->PreventAppend(); }\n\n  const std::string Widget::no_name = \"(none)\";\n  const std::string & Widget::GetID() const { return info ? info->id : no_name; }\n\n  const std::string & Widget::GetCSS(const std::string & setting) const {\n    return info ? info->extras.GetStyle(setting) : emp::empty_string();\n  }\n  bool Widget::HasCSS(const std::string & setting) {\n    return info ? info->extras.HasStyle(setting) : false;\n  }\n\n  const std::string & Widget::GetAttr(const std::string & setting) const {\n    return info ? info->extras.GetAttr(setting) : emp::empty_string();\n  }\n  bool Widget::HasAttr(const std::string & setting) {\n    return info ? info->extras.HasAttr(setting) : false;\n  }\n\n  double Widget::GetXPos() {\n    if (!info) return -1.0;\n    emp_assert(GetID() != \"\");  // Must have a name!\n    return EM_ASM_DOUBLE({\n      var id = Pointer_stringify($0);\n      var rect = $('#' + id).position();\n      return rect.left;\n    }, GetID().c_str());\n  }\n\n  double Widget::GetYPos() {\n    if (!info) return -1.0;\n    emp_assert(GetID() != \"\");  // Must have a name!\n    return EM_ASM_DOUBLE({\n      var id = Pointer_stringify($0);\n      var rect = $('#' + id).position();\n      return rect.top;\n    }, GetID().c_str());\n  }\n\n  double Widget::GetWidth(){\n    if (!info) return -1.0;\n    emp_assert(GetID() != \"\");  // Must have a name!\n    return EM_ASM_DOUBLE({\n      var id = Pointer_stringify($0);\n      return $('#' + id).width();\n    }, GetID().c_str());\n  }\n  double Widget::GetHeight(){\n    if (!info) return -1.0;\n    emp_assert(GetID() != \"\");  // Must have a name!\n    return EM_ASM_DOUBLE({\n      var id = Pointer_stringify($0);\n      return $('#' + id).height();\n    }, GetID().c_str());\n  }\n  double Widget::GetInnerWidth(){\n    if (!info) return -1.0;\n    emp_assert(GetID() != \"\");  // Must have a name!\n    return EM_ASM_DOUBLE({\n      var id = Pointer_stringify($0);\n      return $('#' + id).innerWidth();\n    }, GetID().c_str());\n  }\n  double Widget::GetInnerHeight(){\n    if (!info) return -1.0;\n    emp_assert(GetID() != \"\");  // Must have a name!\n    return EM_ASM_DOUBLE({\n      var id = Pointer_stringify($0);\n      return $('#' + id).innerHeight();\n    }, GetID().c_str());\n  }\n  double Widget::GetOuterWidth(){\n    if (!info) return -1.0;\n    emp_assert(GetID() != \"\");  // Must have a name!\n    return EM_ASM_DOUBLE({\n      var id = Pointer_stringify($0);\n      return $('#' + id).outerWidth();\n    }, GetID().c_str());\n  }\n  double Widget::GetOuterHeight(){\n    if (!info) return -1.0;\n    emp_assert(GetID() != \"\");  // Must have a name!\n    return EM_ASM_DOUBLE({\n      var id = Pointer_stringify($0);\n      return $('#' + id).outerHeight();\n    }, GetID().c_str());\n  }\n\n  void Widget::Activate() {\n    auto * cur_info = info;\n    info->state = WAITING;\n    OnDocumentReady( std::function<void(void)>([cur_info](){ cur_info->DoActivate(); }) );\n  }\n\n  void Widget::Freeze() {\n    info->state = FROZEN;\n  }\n\n  void Widget::Deactivate(bool top_level) {\n    if (!info || info->state == INACTIVE) return;  // Skip if we are not active.\n    info->state = INACTIVE;\n    if (top_level) info->ReplaceHTML();            // If at top level, clear the contents\n  }\n\n  bool Widget::ToggleActive() {\n    emp_assert(info);\n    if (info->state != INACTIVE) Deactivate();\n    else Activate();\n    return info->state;\n  }\n\n  void Widget::Redraw() {\n    emp_assert(info);\n    info->ReplaceHTML();\n  }\n\n  Widget & Widget::AddDependant(const Widget & w) {\n    info->AddDependant(w);\n    return *this;\n  }\n\n  template <typename IN_TYPE>\n  Widget Widget::operator<<(IN_TYPE && in_val) {\n    PrepareAppend();\n    return info->Append(std::forward<IN_TYPE>(in_val));\n  }\n\n  std::string Widget::GetInfoType() const {\n    if (!info) return \"UNINITIALIZED\";\n    return info->GetType();\n  }\n\n\n  namespace internal {\n\n    /// WidgetFacet is a template that provides accessors into Widget with a derived return type.\n    template <typename RETURN_TYPE>\n    class WidgetFacet : public Widget {\n    protected:\n      /// WidgetFacet cannot be built unless within derived class, so constructors are protected\n      WidgetFacet(const std::string & in_id=\"\") : Widget(in_id) { ; }\n      WidgetFacet(const WidgetFacet & in) : Widget(in) { ; }\n      WidgetFacet(const Widget & in) : Widget(in) {\n        // Converting from a generic widget; make sure type is correct or non-existant!\n        emp_assert(!in || dynamic_cast<typename RETURN_TYPE::INFO_TYPE *>( Info(in) ) != NULL,\n                   in.GetID());\n      }\n      WidgetFacet(WidgetInfo * in_info) : Widget(in_info) { ; }\n      WidgetFacet & operator=(const WidgetFacet & in) { Widget::operator=(in); return *this; }\n      virtual ~WidgetFacet() { ; }\n\n      /// CSS-related options may be overridden in derived classes that have multiple styles.\n      /// By default DoCSS will track the new information and apply it (if active) to the widget.\n      virtual void DoCSS(const std::string & setting, const std::string & value) {\n        info->extras.style.DoSet(setting, value);\n        if (IsActive()) Style::Apply(info->id, setting, value);\n      }\n      /// Attr-related options may be overridden in derived classes that have multiple attributes.\n      /// By default DoAttr will track the new information and apply it (if active) to the widget.\n      virtual void DoAttr(const std::string & setting, const std::string & value) {\n        info->extras.attr.DoSet(setting, value);\n        if (IsActive()) Attributes::Apply(info->id, setting, value);\n      }\n      /// Listener options may be overridden in derived classes that have multiple listen targets.\n      /// By default DoListen will track new listens and set them up immediately, if active.\n      virtual void DoListen(const std::string & event_name, size_t fun_id) {\n        info->extras.listen.Set(event_name, fun_id);\n        if (IsActive()) Listeners::Apply(info->id, event_name, fun_id);\n      }\n\n    public:\n      using return_t = RETURN_TYPE;\n\n      /// Set a specific CSS value for this widget.\n      template <typename SETTING_TYPE>\n      return_t & SetCSS(const std::string & setting, SETTING_TYPE && value) {\n        emp_assert(info != nullptr);\n        DoCSS(setting, emp::to_string(value));\n        return (return_t &) *this;\n      }\n\n      /// Set a specific Attribute value for this widget.\n      template <typename SETTING_TYPE>\n      return_t & SetAttr(const std::string & setting, SETTING_TYPE && value) {\n        emp_assert(info != nullptr);\n        DoAttr(setting, emp::to_string(value));\n        return (return_t &) *this;\n      }\n\n      /// Multiple CSS settings can be provided simultaneously.\n      template <typename T1, typename T2, typename... OTHER_SETTINGS>\n      return_t & SetCSS(const std::string & setting1, T1 && val1,\n                        const std::string & setting2, T2 && val2,\n                        OTHER_SETTINGS... others) {\n        SetCSS(setting1, val1);                      // Set the first CSS value.\n        return SetCSS(setting2, val2, others...);    // Recurse to the others.\n      }\n\n      /// Multiple Attributes can be provided simultaneously.\n      template <typename T1, typename T2, typename... OTHER_SETTINGS>\n      return_t & SetAttr(const std::string & setting1, T1 && val1,\n                            const std::string & setting2, T2 && val2,\n                            OTHER_SETTINGS... others) {\n        SetAttr(setting1, val1);                      // Set the first CSS value.\n        return SetAttr(setting2, val2, others...);    // Recurse to the others.\n      }\n\n      /// Allow multiple CSS settings to be provided as a single object.\n      /// (still go through DoCSS given need for virtual re-routing.)\n      return_t & SetCSS(const Style & in_style) {\n        emp_assert(info != nullptr);\n        for (const auto & s : in_style.GetMap()) {\n          DoCSS(s.first, s.second);\n        }\n        return (return_t &) *this;\n      }\n\n      /// Allow multiple Attr settings to be provided as a single object.\n      /// (still go through DoAttr given need for virtual re-routing.)\n      return_t & SetAttr(const Attributes & in_attr) {\n        emp_assert(info != nullptr);\n        for (const auto & a : in_attr.GetMap()) {\n          DoAttr(a.first, a.second);\n        }\n        return (return_t &) *this;\n      }\n\n      /// Provide an event and a function that will be called when that event is triggered.\n      /// In this case, the function as no arguments.\n      return_t & On(const std::string & event_name, const std::function<void()> & fun) {\n        emp_assert(info != nullptr);\n        size_t fun_id = JSWrap(fun);\n        DoListen(event_name, fun_id);\n        return (return_t &) *this;\n      }\n\n      /// Provide an event and a function that will be called when that event is triggered.\n      /// In this case, the function takes a mouse event as an argument, with full info about mouse.\n      return_t & On(const std::string & event_name,\n                    const std::function<void(MouseEvent evt)> & fun) {\n        emp_assert(info != nullptr);\n        size_t fun_id = JSWrap(fun);\n        DoListen(event_name, fun_id);\n        return (return_t &) *this;\n      }\n\n      /// Provide an event and a function that will be called when that event is triggered.\n      /// In this case, the function takes two doubles which will be filled in with mouse coordinates.\n      return_t & On(const std::string & event_name,\n                    const std::function<void(double,double)> & fun) {\n        emp_assert(info != nullptr);\n        auto fun_cb = [this, fun](MouseEvent evt){\n          double x = evt.clientX - GetXPos();\n          double y = evt.clientY - GetYPos();\n          fun(x,y);\n        };\n        size_t fun_id = JSWrap(fun_cb);\n        DoListen(event_name, fun_id);\n        return (return_t &) *this;\n      }\n\n      /// Provide a function to be called when the window is resized.\n      template <typename T> return_t & OnResize(T && arg) { return On(\"resize\", arg); }\n\n      /// Provide a function to be called when the mouse button is clicked in this Widget.\n      template <typename T> return_t & OnClick(T && arg) { return On(\"click\", arg); }\n\n      /// Provide a function to be called when the mouse button is double clicked in this Widget.\n      template <typename T> return_t & OnDoubleClick(T && arg) { return On(\"dblclick\", arg); }\n\n      /// Provide a function to be called when the mouse button is pushed down in this Widget.\n      template <typename T> return_t & OnMouseDown(T && arg) { return On(\"mousedown\", arg); }\n\n      /// Provide a function to be called when the mouse button is released in this Widget.\n      template <typename T> return_t & OnMouseUp(T && arg) { return On(\"mouseup\", arg); }\n\n      /// Provide a function to be called whenever the mouse moves in this Widget.\n      template <typename T> return_t & OnMouseMove(T && arg) { return On(\"mousemove\", arg); }\n\n      /// Provide a function to be called whenever the mouse leaves the Widget.\n      template <typename T> return_t & OnMouseOut(T && arg) { return On(\"mouseout\", arg); }\n\n      /// Provide a function to be called whenever the mouse moves over the Widget.\n      template <typename T> return_t & OnMouseOver(T && arg) { return On(\"mouseover\", arg); }\n\n      /// Provide a function to be called whenever the mouse wheel moves in this Widget.\n      template <typename T> return_t & OnMouseWheel(T && arg) { return On(\"mousewheel\", arg); }\n\n      /// Provide a function to be called whenever a key is pressed down in this Widget.\n      template <typename T> return_t & OnKeydown(T && arg) { return On(\"keydown\", arg); }\n\n      /// Provide a function to be called whenever a key is pressed down and released in this Widget.\n      template <typename T> return_t & OnKeypress(T && arg) { return On(\"keypress\", arg); }\n\n      /// Provide a function to be called whenever a key is pressed released in this Widget.\n      template <typename T> return_t & OnKeyup(T && arg) { return On(\"keyup\", arg); }\n\n      /// Provide a function to be called whenever text is copied in this Widget.\n      template <typename T> return_t & OnCopy(T && arg) { return On(\"copy\", arg); }\n\n      /// Provide a function to be called whenever text is cut in this Widget.\n      template <typename T> return_t & OnCut(T && arg) { return On(\"cut\", arg); }\n\n      /// Provide a function to be called whenever text is pasted in this Widget.\n      template <typename T> return_t & OnPaste(T && arg) { return On(\"paste\", arg); }\n\n      /// Create a tooltip for this Widget.\n      return_t & SetTitle(const std::string & _in) { return SetAttr(\"title\", _in); }\n\n      /// Update the width of this Widget.\n      /// @param unit defaults to pixels (\"px\"), but can also be a measured distance (e.g, \"inches\") or a percentage(\"%\")\n      return_t & SetWidth(double w, const std::string & unit=\"px\") {\n        return SetCSS(\"width\", emp::to_string(w, unit) );\n      }\n\n      /// Update the height of this Widget.\n      /// @param unit defaults to pixels (\"px\"), but can also be a measured distance (e.g, \"inches\") or a percentage(\"%\")\n      return_t & SetHeight(double h, const std::string & unit=\"px\") {\n        return SetCSS(\"height\", emp::to_string(h, unit) );\n      }\n\n      /// Update the size (width and height) of this widget.\n      /// @param unit defaults to pixels (\"px\"), but can also be a measured distance (e.g, \"inches\") or a percentage(\"%\")\n      return_t & SetSize(double w, double h, const std::string & unit=\"px\") {\n        SetWidth(w, unit); return SetHeight(h, unit);\n      }\n\n      /// Move this widget to the center of its container.\n      return_t & Center() { return SetCSS(\"margin\", \"auto\"); }\n\n      /// Set the x-y position of this widget within its container.\n      return_t & SetPosition(int x, int y, const std::string & unit=\"px\",\n                             const std::string & pos_type=\"absolute\",\n                             const std::string & x_anchor=\"left\",\n                             const std::string & y_anchor=\"top\") {\n        return SetCSS(\"position\", pos_type,\n                      x_anchor, emp::to_string(x, unit),\n                      y_anchor, emp::to_string(y, unit));\n      }\n\n      /// Set the x-y position of this Widget within its container, using the TOP-RIGHT as an anchor.\n      return_t & SetPositionRT(int x, int y, const std::string & unit=\"px\")\n        { return SetPosition(x, y, unit, \"absolute\", \"right\", \"top\"); }\n\n      /// Set the x-y position of this Widget within its container, using the BOTTOM-RIGHT as an anchor.\n      return_t & SetPositionRB(int x, int y, const std::string & unit=\"px\")\n        { return SetPosition(x, y, unit, \"absolute\", \"right\", \"bottom\"); }\n\n      /// Set the x-y position of this Widget within its container, using the BOTTOM-LEFT as an anchor.\n      return_t & SetPositionLB(int x, int y, const std::string & unit=\"px\")\n        { return SetPosition(x, y, unit, \"absolute\", \"left\", \"bottom\"); }\n\n      /// Set the x-y position of this Widget, fixed within the browser window.\n      return_t & SetPositionFixed(int x, int y, const std::string & unit=\"px\")\n        { return SetPosition(x, y, unit, \"fixed\", \"left\", \"top\"); }\n\n      /// Set the x-y position of the top-right corner this Widget, fixed within the browser window.\n      return_t & SetPositionFixedRT(int x, int y, const std::string & unit=\"px\")\n        { return SetPosition(x, y, unit, \"fixed\", \"right\", \"top\"); }\n\n      /// Set the x-y position of the bottom-right corner this Widget, fixed within the browser window.\n      return_t & SetPositionFixedRB(int x, int y, const std::string & unit=\"px\")\n        { return SetPosition(x, y, unit, \"fixed\", \"right\", \"bottom\"); }\n\n      /// Set the x-y position of the bottom-left corner this Widget, fixed within the browser window.\n      return_t & SetPositionFixedLB(int x, int y, const std::string & unit=\"px\")\n        { return SetPosition(x, y, unit, \"fixed\", \"left\", \"bottom\"); }\n\n\n      /// Set this Widget to float appropriately within its containter.\n      return_t & SetFloat(const std::string & f=\"left\") { return SetCSS(\"float\", f); }\n\n      /// Setup how this Widget should handle overflow.\n      return_t & SetOverflow(const std::string & o=\"auto\") { return SetCSS(\"overflow\", o); }\n\n      /// Setup how this Widget to always have scrollbars.\n      return_t & SetScroll() { return SetCSS(\"overflow\", \"scroll\"); }\n\n      /// Setup how this Widget to have scrollbars if needed for overflow.\n      return_t & SetScrollAuto() { return SetCSS(\"overflow\", \"auto\"); }\n\n      /// Setup how this Widget to be user-resizable.\n      return_t & SetResizable() { return SetCSS(\"resize\", \"both\"); }\n\n      /// Setup how this Widget for the x only to be user-resizable.\n      return_t & SetResizableX() { return SetCSS(\"resize\", \"horizontal\"); }\n\n      /// Setup how this Widget for the y only to be user-resizable.\n      return_t & SetResizableY() { return SetCSS(\"resize\", \"vertical\"); }\n\n      /// Setup how this Widget to NOT be resizable.\n      return_t & SetResizableOff() { return SetCSS(\"resize\", \"none\"); }\n\n      /// Provide a Font object to setup the font for this widget.\n      return_t & SetFont(const Font & font) {\n        font.ConfigStyle(info->extras.style);\n        return (return_t &) *this;\n      }\n\n      /// Setup the Font to be used in this Widget.\n      return_t & SetFont(const std::string & font) { return SetCSS(\"font-family\", font); }\n\n      /// Setup the size of the Font to be used in this Widget.\n      return_t & SetFontSize(int s) { return SetCSS(\"font-size\", emp::to_string(s, \"px\")); }\n\n      /// Setup the size of the Font to be used in this Widget in units of % of viewport width.\n      return_t & SetFontSizeVW(double s) { return SetCSS(\"font-size\", emp::to_string(s, \"vw\")); }\n\n      /// Align text to be centered.\n      return_t & SetCenterText() { return SetCSS(\"text-align\", \"center\"); }\n\n      /// Set the background color of this Widget.\n      return_t & SetBackground(const std::string & v) { return SetCSS(\"background-color\", v); }\n\n      /// Set the foreground color of this Widget.\n      return_t & SetColor(const std::string & v) { return SetCSS(\"color\", v); }\n\n      /// Set the opacity level of this Widget.\n      return_t & SetOpacity(double v) { return SetCSS(\"opacity\", v); }\n\n      /// Set information about the Widget board.\n      return_t & SetBorder(const std::string & border_info) {\n        return SetCSS(\"border\", border_info);\n      }\n\n      /// The the number of pixels (or alternate unit) for the padding around cells (used with Tables)\n      return_t & SetPadding(double p, const std::string & unit=\"px\") {\n        return SetCSS(\"padding\", emp::to_string(p, unit));\n      }\n    };\n\n  }\n\n}\n}\n\n\n#endif\n","// -*- C++ -*-\n//===--------------------------- sstream ----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_SSTREAM\n#define _LIBCPP_SSTREAM\n\n/*\n    sstream synopsis\n\ntemplate <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\nclass basic_stringbuf\n    : public basic_streambuf<charT, traits>\n{\npublic:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    typedef Allocator                      allocator_type;\n\n    // 27.8.1.1 Constructors:\n    explicit basic_stringbuf(ios_base::openmode which = ios_base::in | ios_base::out);\n    explicit basic_stringbuf(const basic_string<char_type, traits_type, allocator_type>& str,\n                             ios_base::openmode which = ios_base::in | ios_base::out);\n    basic_stringbuf(basic_stringbuf&& rhs);\n\n    // 27.8.1.2 Assign and swap:\n    basic_stringbuf& operator=(basic_stringbuf&& rhs);\n    void swap(basic_stringbuf& rhs);\n\n    // 27.8.1.3 Get and set:\n    basic_string<char_type, traits_type, allocator_type> str() const;\n    void str(const basic_string<char_type, traits_type, allocator_type>& s);\n\nprotected:\n    // 27.8.1.4 Overridden virtual functions:\n    virtual int_type underflow();\n    virtual int_type pbackfail(int_type c = traits_type::eof());\n    virtual int_type overflow (int_type c = traits_type::eof());\n    virtual basic_streambuf<char_type, traits_type>* setbuf(char_type*, streamsize);\n    virtual pos_type seekoff(off_type off, ios_base::seekdir way,\n                             ios_base::openmode which = ios_base::in | ios_base::out);\n    virtual pos_type seekpos(pos_type sp,\n                             ios_base::openmode which = ios_base::in | ios_base::out);\n};\n\ntemplate <class charT, class traits, class Allocator>\n  void swap(basic_stringbuf<charT, traits, Allocator>& x,\n            basic_stringbuf<charT, traits, Allocator>& y);\n\ntypedef basic_stringbuf<char>    stringbuf;\ntypedef basic_stringbuf<wchar_t> wstringbuf;\n\ntemplate <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\nclass basic_istringstream\n    : public basic_istream<charT, traits>\n{\npublic:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    typedef Allocator                      allocator_type;\n\n    // 27.8.2.1 Constructors:\n    explicit basic_istringstream(ios_base::openmode which = ios_base::in);\n    explicit basic_istringstream(const basic_string<char_type, traits_type,allocator_type>& str,\n                                 ios_base::openmode which = ios_base::in);\n    basic_istringstream(basic_istringstream&& rhs);\n\n    // 27.8.2.2 Assign and swap:\n    basic_istringstream& operator=(basic_istringstream&& rhs);\n    void swap(basic_istringstream& rhs);\n\n    // 27.8.2.3 Members:\n    basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;\n    basic_string<char_type, traits_type, allocator_type> str() const;\n    void str(const basic_string<char_type, traits_type, allocator_type>& s);\n};\n\ntemplate <class charT, class traits, class Allocator>\n  void swap(basic_istringstream<charT, traits, Allocator>& x,\n            basic_istringstream<charT, traits, Allocator>& y);\n\ntypedef basic_istringstream<char>    istringstream;\ntypedef basic_istringstream<wchar_t> wistringstream;\n\ntemplate <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\nclass basic_ostringstream\n    : public basic_ostream<charT, traits>\n{\npublic:\n    // types:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    typedef Allocator                      allocator_type;\n\n    // 27.8.3.1 Constructors/destructor:\n    explicit basic_ostringstream(ios_base::openmode which = ios_base::out);\n    explicit basic_ostringstream(const basic_string<char_type, traits_type, allocator_type>& str,\n                                 ios_base::openmode which = ios_base::out);\n    basic_ostringstream(basic_ostringstream&& rhs);\n\n    // 27.8.3.2 Assign/swap:\n    basic_ostringstream& operator=(basic_ostringstream&& rhs);\n    void swap(basic_ostringstream& rhs);\n\n    // 27.8.3.3 Members:\n    basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;\n    basic_string<char_type, traits_type, allocator_type> str() const;\n    void str(const basic_string<char_type, traits_type, allocator_type>& s);\n};\n\ntemplate <class charT, class traits, class Allocator>\n  void swap(basic_ostringstream<charT, traits, Allocator>& x,\n            basic_ostringstream<charT, traits, Allocator>& y);\n\ntypedef basic_ostringstream<char>    ostringstream;\ntypedef basic_ostringstream<wchar_t> wostringstream;\n\ntemplate <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\nclass basic_stringstream\n    : public basic_iostream<charT, traits>\n{\npublic:\n    // types:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    typedef Allocator                      allocator_type;\n\n    // constructors/destructor\n    explicit basic_stringstream(ios_base::openmode which = ios_base::out|ios_base::in);\n    explicit basic_stringstream(const basic_string<char_type, traits_type, allocator_type>& str,\n                                ios_base::openmode which = ios_base::out|ios_base::in);\n    basic_stringstream(basic_stringstream&& rhs);\n\n    // 27.8.5.1 Assign/swap:\n    basic_stringstream& operator=(basic_stringstream&& rhs);\n    void swap(basic_stringstream& rhs);\n\n    // Members:\n    basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;\n    basic_string<char_type, traits_type, allocator_type> str() const;\n    void str(const basic_string<char_type, traits_type, allocator_type>& str);\n};\n\ntemplate <class charT, class traits, class Allocator>\n  void swap(basic_stringstream<charT, traits, Allocator>& x,\n            basic_stringstream<charT, traits, Allocator>& y);\n\ntypedef basic_stringstream<char>    stringstream;\ntypedef basic_stringstream<wchar_t> wstringstream;\n\n}  // std\n\n*/\n\n#include <__config>\n#include <ostream>\n#include <istream>\n#include <string>\n\n#include <__undef_min_max>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\n// basic_stringbuf\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nclass _LIBCPP_TEMPLATE_VIS basic_stringbuf\n    : public basic_streambuf<_CharT, _Traits>\n{\npublic:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    typedef _Allocator                     allocator_type;\n\n    typedef basic_string<char_type, traits_type, allocator_type> string_type;\n\nprivate:\n\n    string_type __str_;\n    mutable char_type* __hm_;\n    ios_base::openmode __mode_;\n\npublic:\n    // 27.8.1.1 Constructors:\n    inline _LIBCPP_INLINE_VISIBILITY\n    explicit basic_stringbuf(ios_base::openmode __wch = ios_base::in | ios_base::out);\n    inline _LIBCPP_INLINE_VISIBILITY\n    explicit basic_stringbuf(const string_type& __s,\n                             ios_base::openmode __wch = ios_base::in | ios_base::out);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    basic_stringbuf(basic_stringbuf&& __rhs);\n#endif\n\n    // 27.8.1.2 Assign and swap:\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    basic_stringbuf& operator=(basic_stringbuf&& __rhs);\n#endif\n    void swap(basic_stringbuf& __rhs);\n\n    // 27.8.1.3 Get and set:\n    string_type str() const;\n    void str(const string_type& __s);\n\nprotected:\n    // 27.8.1.4 Overridden virtual functions:\n    virtual int_type underflow();\n    virtual int_type pbackfail(int_type __c = traits_type::eof());\n    virtual int_type overflow (int_type __c = traits_type::eof());\n    virtual pos_type seekoff(off_type __off, ios_base::seekdir __way,\n                             ios_base::openmode __wch = ios_base::in | ios_base::out);\n    inline _LIBCPP_INLINE_VISIBILITY\n    virtual pos_type seekpos(pos_type __sp,\n                             ios_base::openmode __wch = ios_base::in | ios_base::out);\n};\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringbuf<_CharT, _Traits, _Allocator>::basic_stringbuf(ios_base::openmode __wch)\n    : __hm_(0),\n      __mode_(__wch)\n{\n    str(string_type());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringbuf<_CharT, _Traits, _Allocator>::basic_stringbuf(const string_type& __s,\n                             ios_base::openmode __wch)\n    : __hm_(0),\n      __mode_(__wch)\n{\n    str(__s);\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringbuf<_CharT, _Traits, _Allocator>::basic_stringbuf(basic_stringbuf&& __rhs)\n    : __mode_(__rhs.__mode_)\n{\n    char_type* __p = const_cast<char_type*>(__rhs.__str_.data());\n    ptrdiff_t __binp = -1;\n    ptrdiff_t __ninp = -1;\n    ptrdiff_t __einp = -1;\n    if (__rhs.eback() != nullptr)\n    {\n        __binp = __rhs.eback() - __p;\n        __ninp = __rhs.gptr() - __p;\n        __einp = __rhs.egptr() - __p;\n    }\n    ptrdiff_t __bout = -1;\n    ptrdiff_t __nout = -1;\n    ptrdiff_t __eout = -1;\n    if (__rhs.pbase() != nullptr)\n    {\n        __bout = __rhs.pbase() - __p;\n        __nout = __rhs.pptr() - __p;\n        __eout = __rhs.epptr() - __p;\n    }\n    ptrdiff_t __hm = __rhs.__hm_ == nullptr ? -1 : __rhs.__hm_ - __p;\n    __str_ = _VSTD::move(__rhs.__str_);\n    __p = const_cast<char_type*>(__str_.data());\n    if (__binp != -1)\n        this->setg(__p + __binp, __p + __ninp, __p + __einp);\n    if (__bout != -1)\n    {\n        this->setp(__p + __bout, __p + __eout);\n        this->pbump(__nout);\n    }\n    __hm_ = __hm == -1 ? nullptr : __p + __hm;\n    __p = const_cast<char_type*>(__rhs.__str_.data());\n    __rhs.setg(__p, __p, __p);\n    __rhs.setp(__p, __p);\n    __rhs.__hm_ = __p;\n    this->pubimbue(__rhs.getloc());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringbuf<_CharT, _Traits, _Allocator>&\nbasic_stringbuf<_CharT, _Traits, _Allocator>::operator=(basic_stringbuf&& __rhs)\n{\n    char_type* __p = const_cast<char_type*>(__rhs.__str_.data());\n    ptrdiff_t __binp = -1;\n    ptrdiff_t __ninp = -1;\n    ptrdiff_t __einp = -1;\n    if (__rhs.eback() != nullptr)\n    {\n        __binp = __rhs.eback() - __p;\n        __ninp = __rhs.gptr() - __p;\n        __einp = __rhs.egptr() - __p;\n    }\n    ptrdiff_t __bout = -1;\n    ptrdiff_t __nout = -1;\n    ptrdiff_t __eout = -1;\n    if (__rhs.pbase() != nullptr)\n    {\n        __bout = __rhs.pbase() - __p;\n        __nout = __rhs.pptr() - __p;\n        __eout = __rhs.epptr() - __p;\n    }\n    ptrdiff_t __hm = __rhs.__hm_ == nullptr ? -1 : __rhs.__hm_ - __p;\n    __str_ = _VSTD::move(__rhs.__str_);\n    __p = const_cast<char_type*>(__str_.data());\n    if (__binp != -1)\n        this->setg(__p + __binp, __p + __ninp, __p + __einp);\n    else\n        this->setg(nullptr, nullptr, nullptr);\n    if (__bout != -1)\n    {\n        this->setp(__p + __bout, __p + __eout);\n        this->pbump(__nout);\n    }\n    else\n        this->setp(nullptr, nullptr);\n\n    __hm_ = __hm == -1 ? nullptr : __p + __hm;\n    __mode_ = __rhs.__mode_;\n    __p = const_cast<char_type*>(__rhs.__str_.data());\n    __rhs.setg(__p, __p, __p);\n    __rhs.setp(__p, __p);\n    __rhs.__hm_ = __p;\n    this->pubimbue(__rhs.getloc());\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_stringbuf<_CharT, _Traits, _Allocator>::swap(basic_stringbuf& __rhs)\n{\n    char_type* __p = const_cast<char_type*>(__rhs.__str_.data());\n    ptrdiff_t __rbinp = -1;\n    ptrdiff_t __rninp = -1;\n    ptrdiff_t __reinp = -1;\n    if (__rhs.eback() != nullptr)\n    {\n        __rbinp = __rhs.eback() - __p;\n        __rninp = __rhs.gptr() - __p;\n        __reinp = __rhs.egptr() - __p;\n    }\n    ptrdiff_t __rbout = -1;\n    ptrdiff_t __rnout = -1;\n    ptrdiff_t __reout = -1;\n    if (__rhs.pbase() != nullptr)\n    {\n        __rbout = __rhs.pbase() - __p;\n        __rnout = __rhs.pptr() - __p;\n        __reout = __rhs.epptr() - __p;\n    }\n    ptrdiff_t __rhm = __rhs.__hm_ == nullptr ? -1 : __rhs.__hm_ - __p;\n    __p = const_cast<char_type*>(__str_.data());\n    ptrdiff_t __lbinp = -1;\n    ptrdiff_t __lninp = -1;\n    ptrdiff_t __leinp = -1;\n    if (this->eback() != nullptr)\n    {\n        __lbinp = this->eback() - __p;\n        __lninp = this->gptr() - __p;\n        __leinp = this->egptr() - __p;\n    }\n    ptrdiff_t __lbout = -1;\n    ptrdiff_t __lnout = -1;\n    ptrdiff_t __leout = -1;\n    if (this->pbase() != nullptr)\n    {\n        __lbout = this->pbase() - __p;\n        __lnout = this->pptr() - __p;\n        __leout = this->epptr() - __p;\n    }\n    ptrdiff_t __lhm = __hm_ == nullptr ? -1 : __hm_ - __p;\n    _VSTD::swap(__mode_, __rhs.__mode_);\n    __str_.swap(__rhs.__str_);\n    __p = const_cast<char_type*>(__str_.data());\n    if (__rbinp != -1)\n        this->setg(__p + __rbinp, __p + __rninp, __p + __reinp);\n    else\n        this->setg(nullptr, nullptr, nullptr);\n    if (__rbout != -1)\n    {\n        this->setp(__p + __rbout, __p + __reout);\n        this->pbump(__rnout);\n    }\n    else\n        this->setp(nullptr, nullptr);\n    __hm_ = __rhm == -1 ? nullptr : __p + __rhm;\n    __p = const_cast<char_type*>(__rhs.__str_.data());\n    if (__lbinp != -1)\n        __rhs.setg(__p + __lbinp, __p + __lninp, __p + __leinp);\n    else\n        __rhs.setg(nullptr, nullptr, nullptr);\n    if (__lbout != -1)\n    {\n        __rhs.setp(__p + __lbout, __p + __leout);\n        __rhs.pbump(__lnout);\n    }\n    else\n        __rhs.setp(nullptr, nullptr);\n    __rhs.__hm_ = __lhm == -1 ? nullptr : __p + __lhm;\n    locale __tl = __rhs.getloc();\n    __rhs.pubimbue(this->getloc());\n    this->pubimbue(__tl);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,\n     basic_stringbuf<_CharT, _Traits, _Allocator>& __y)\n{\n    __x.swap(__y);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\nbasic_stringbuf<_CharT, _Traits, _Allocator>::str() const\n{\n    if (__mode_ & ios_base::out)\n    {\n        if (__hm_ < this->pptr())\n            __hm_ = this->pptr();\n        return string_type(this->pbase(), __hm_, __str_.get_allocator());\n    }\n    else if (__mode_ & ios_base::in)\n        return string_type(this->eback(), this->egptr(), __str_.get_allocator());\n    return string_type(__str_.get_allocator());\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_stringbuf<_CharT, _Traits, _Allocator>::str(const string_type& __s)\n{\n    __str_ = __s;\n    __hm_ = 0;\n    if (__mode_ & ios_base::in)\n    {\n        __hm_ = const_cast<char_type*>(__str_.data()) + __str_.size();\n        this->setg(const_cast<char_type*>(__str_.data()),\n                   const_cast<char_type*>(__str_.data()),\n                   __hm_);\n    }\n    if (__mode_ & ios_base::out)\n    {\n        typename string_type::size_type __sz = __str_.size();\n        __hm_ = const_cast<char_type*>(__str_.data()) + __sz;\n        __str_.resize(__str_.capacity());\n        this->setp(const_cast<char_type*>(__str_.data()),\n                   const_cast<char_type*>(__str_.data()) + __str_.size());\n        if (__mode_ & (ios_base::app | ios_base::ate))\n            this->pbump(__sz);\n    }\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_stringbuf<_CharT, _Traits, _Allocator>::int_type\nbasic_stringbuf<_CharT, _Traits, _Allocator>::underflow()\n{\n    if (__hm_ < this->pptr())\n        __hm_ = this->pptr();\n    if (__mode_ & ios_base::in)\n    {\n        if (this->egptr() < __hm_)\n            this->setg(this->eback(), this->gptr(), __hm_);\n        if (this->gptr() < this->egptr())\n            return traits_type::to_int_type(*this->gptr());\n    }\n    return traits_type::eof();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_stringbuf<_CharT, _Traits, _Allocator>::int_type\nbasic_stringbuf<_CharT, _Traits, _Allocator>::pbackfail(int_type __c)\n{\n    if (__hm_ < this->pptr())\n        __hm_ = this->pptr();\n    if (this->eback() < this->gptr())\n    {\n        if (traits_type::eq_int_type(__c, traits_type::eof()))\n        {\n            this->setg(this->eback(), this->gptr()-1, __hm_);\n            return traits_type::not_eof(__c);\n        }\n        if ((__mode_ & ios_base::out) ||\n            traits_type::eq(traits_type::to_char_type(__c), this->gptr()[-1]))\n        {\n            this->setg(this->eback(), this->gptr()-1, __hm_);\n            *this->gptr() = traits_type::to_char_type(__c);\n            return __c;\n        }\n    }\n    return traits_type::eof();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_stringbuf<_CharT, _Traits, _Allocator>::int_type\nbasic_stringbuf<_CharT, _Traits, _Allocator>::overflow(int_type __c)\n{\n    if (!traits_type::eq_int_type(__c, traits_type::eof()))\n    {\n        ptrdiff_t __ninp = this->gptr()  - this->eback();\n        if (this->pptr() == this->epptr())\n        {\n            if (!(__mode_ & ios_base::out))\n                return traits_type::eof();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n            try\n            {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n                ptrdiff_t __nout = this->pptr()  - this->pbase();\n                ptrdiff_t __hm = __hm_ - this->pbase();\n                __str_.push_back(char_type());\n                __str_.resize(__str_.capacity());\n                char_type* __p = const_cast<char_type*>(__str_.data());\n                this->setp(__p, __p + __str_.size());\n                this->pbump(__nout);\n                __hm_ = this->pbase() + __hm;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n            }\n            catch (...)\n            {\n                return traits_type::eof();\n            }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        }\n        __hm_ = _VSTD::max(this->pptr() + 1, __hm_);\n        if (__mode_ & ios_base::in)\n        {\n            char_type* __p = const_cast<char_type*>(__str_.data());\n            this->setg(__p, __p + __ninp, __hm_);\n        }\n        return this->sputc(__c);\n    }\n    return traits_type::not_eof(__c);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_stringbuf<_CharT, _Traits, _Allocator>::pos_type\nbasic_stringbuf<_CharT, _Traits, _Allocator>::seekoff(off_type __off,\n                                                      ios_base::seekdir __way,\n                                                      ios_base::openmode __wch)\n{\n    if (__hm_ < this->pptr())\n        __hm_ = this->pptr();\n    if ((__wch & (ios_base::in | ios_base::out)) == 0)\n        return pos_type(-1);\n    if ((__wch & (ios_base::in | ios_base::out)) == (ios_base::in | ios_base::out)\n        && __way == ios_base::cur)\n        return pos_type(-1);\n    off_type __noff;\n    switch (__way)\n    {\n    case ios_base::beg:\n        __noff = 0;\n        break;\n    case ios_base::cur:\n        if (__wch & ios_base::in)\n            __noff = this->gptr() - this->eback();\n        else\n            __noff = this->pptr() - this->pbase();\n        break;\n    case ios_base::end:\n        __noff = __hm_ - __str_.data();\n        break;\n    default:\n        return pos_type(-1);\n    }\n    __noff += __off;\n    if (__noff < 0 || __hm_ - __str_.data() < __noff)\n        return pos_type(-1);\n    if (__noff != 0)\n    {\n        if ((__wch & ios_base::in) && this->gptr() == 0)\n            return pos_type(-1);\n        if ((__wch & ios_base::out) && this->pptr() == 0)\n            return pos_type(-1);\n    }\n    if (__wch & ios_base::in)\n        this->setg(this->eback(), this->eback() + __noff, __hm_);\n    if (__wch & ios_base::out)\n    {\n        this->setp(this->pbase(), this->epptr());\n        this->pbump(__noff);\n    }\n    return pos_type(__noff);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ntypename basic_stringbuf<_CharT, _Traits, _Allocator>::pos_type\nbasic_stringbuf<_CharT, _Traits, _Allocator>::seekpos(pos_type __sp,\n                                                      ios_base::openmode __wch)\n{\n    return seekoff(__sp, ios_base::beg, __wch);\n}\n\n// basic_istringstream\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nclass _LIBCPP_TEMPLATE_VIS basic_istringstream\n    : public basic_istream<_CharT, _Traits>\n{\npublic:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    typedef _Allocator                     allocator_type;\n\n    typedef basic_string<char_type, traits_type, allocator_type> string_type;\n\nprivate:\n    basic_stringbuf<char_type, traits_type, allocator_type> __sb_;\n\npublic:\n    // 27.8.2.1 Constructors:\n    inline _LIBCPP_INLINE_VISIBILITY\n    explicit basic_istringstream(ios_base::openmode __wch = ios_base::in);\n    inline _LIBCPP_INLINE_VISIBILITY\n    explicit basic_istringstream(const string_type& __s,\n                                 ios_base::openmode __wch = ios_base::in);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_istringstream(basic_istringstream&& __rhs);\n\n    // 27.8.2.2 Assign and swap:\n    basic_istringstream& operator=(basic_istringstream&& __rhs);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    void swap(basic_istringstream& __rhs);\n\n    // 27.8.2.3 Members:\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;\n    inline _LIBCPP_INLINE_VISIBILITY\n    string_type str() const;\n    inline _LIBCPP_INLINE_VISIBILITY\n    void str(const string_type& __s);\n};\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_istringstream<_CharT, _Traits, _Allocator>::basic_istringstream(ios_base::openmode __wch)\n    : basic_istream<_CharT, _Traits>(&__sb_),\n      __sb_(__wch | ios_base::in)\n{\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_istringstream<_CharT, _Traits, _Allocator>::basic_istringstream(const string_type& __s,\n                                                                      ios_base::openmode __wch)\n    : basic_istream<_CharT, _Traits>(&__sb_),\n      __sb_(__s, __wch | ios_base::in)\n{\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_istringstream<_CharT, _Traits, _Allocator>::basic_istringstream(basic_istringstream&& __rhs)\n    : basic_istream<_CharT, _Traits>(_VSTD::move(__rhs)),\n      __sb_(_VSTD::move(__rhs.__sb_))\n{\n    basic_istream<_CharT, _Traits>::set_rdbuf(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_istringstream<_CharT, _Traits, _Allocator>&\nbasic_istringstream<_CharT, _Traits, _Allocator>::operator=(basic_istringstream&& __rhs)\n{\n    basic_istream<char_type, traits_type>::operator=(_VSTD::move(__rhs));\n    __sb_ = _VSTD::move(__rhs.__sb_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid basic_istringstream<_CharT, _Traits, _Allocator>::swap(basic_istringstream& __rhs)\n{\n    basic_istream<char_type, traits_type>::swap(__rhs);\n    __sb_.swap(__rhs.__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_istringstream<_CharT, _Traits, _Allocator>& __x,\n     basic_istringstream<_CharT, _Traits, _Allocator>& __y)\n{\n    __x.swap(__y);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringbuf<_CharT, _Traits, _Allocator>*\nbasic_istringstream<_CharT, _Traits, _Allocator>::rdbuf() const\n{\n    return const_cast<basic_stringbuf<char_type, traits_type, allocator_type>*>(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\nbasic_istringstream<_CharT, _Traits, _Allocator>::str() const\n{\n    return __sb_.str();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid basic_istringstream<_CharT, _Traits, _Allocator>::str(const string_type& __s)\n{\n    __sb_.str(__s);\n}\n\n// basic_ostringstream\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nclass _LIBCPP_TEMPLATE_VIS basic_ostringstream\n    : public basic_ostream<_CharT, _Traits>\n{\npublic:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    typedef _Allocator                     allocator_type;\n\n    typedef basic_string<char_type, traits_type, allocator_type> string_type;\n\nprivate:\n    basic_stringbuf<char_type, traits_type, allocator_type> __sb_;\n\npublic:\n    // 27.8.2.1 Constructors:\n    inline _LIBCPP_INLINE_VISIBILITY\n    explicit basic_ostringstream(ios_base::openmode __wch = ios_base::out);\n    inline _LIBCPP_INLINE_VISIBILITY\n    explicit basic_ostringstream(const string_type& __s,\n                                 ios_base::openmode __wch = ios_base::out);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_ostringstream(basic_ostringstream&& __rhs);\n\n    // 27.8.2.2 Assign and swap:\n    basic_ostringstream& operator=(basic_ostringstream&& __rhs);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    void swap(basic_ostringstream& __rhs);\n\n    // 27.8.2.3 Members:\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;\n    inline _LIBCPP_INLINE_VISIBILITY\n    string_type str() const;\n    inline _LIBCPP_INLINE_VISIBILITY\n    void str(const string_type& __s);\n};\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_ostringstream<_CharT, _Traits, _Allocator>::basic_ostringstream(ios_base::openmode __wch)\n    : basic_ostream<_CharT, _Traits>(&__sb_),\n      __sb_(__wch | ios_base::out)\n{\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_ostringstream<_CharT, _Traits, _Allocator>::basic_ostringstream(const string_type& __s,\n                                                                      ios_base::openmode __wch)\n    : basic_ostream<_CharT, _Traits>(&__sb_),\n      __sb_(__s, __wch | ios_base::out)\n{\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_ostringstream<_CharT, _Traits, _Allocator>::basic_ostringstream(basic_ostringstream&& __rhs)\n    : basic_ostream<_CharT, _Traits>(_VSTD::move(__rhs)),\n      __sb_(_VSTD::move(__rhs.__sb_))\n{\n    basic_ostream<_CharT, _Traits>::set_rdbuf(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_ostringstream<_CharT, _Traits, _Allocator>&\nbasic_ostringstream<_CharT, _Traits, _Allocator>::operator=(basic_ostringstream&& __rhs)\n{\n    basic_ostream<char_type, traits_type>::operator=(_VSTD::move(__rhs));\n    __sb_ = _VSTD::move(__rhs.__sb_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_ostringstream<_CharT, _Traits, _Allocator>::swap(basic_ostringstream& __rhs)\n{\n    basic_ostream<char_type, traits_type>::swap(__rhs);\n    __sb_.swap(__rhs.__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_ostringstream<_CharT, _Traits, _Allocator>& __x,\n     basic_ostringstream<_CharT, _Traits, _Allocator>& __y)\n{\n    __x.swap(__y);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringbuf<_CharT, _Traits, _Allocator>*\nbasic_ostringstream<_CharT, _Traits, _Allocator>::rdbuf() const\n{\n    return const_cast<basic_stringbuf<char_type, traits_type, allocator_type>*>(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\nbasic_ostringstream<_CharT, _Traits, _Allocator>::str() const\n{\n    return __sb_.str();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_ostringstream<_CharT, _Traits, _Allocator>::str(const string_type& __s)\n{\n    __sb_.str(__s);\n}\n\n// basic_stringstream\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nclass _LIBCPP_TEMPLATE_VIS basic_stringstream\n    : public basic_iostream<_CharT, _Traits>\n{\npublic:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n    typedef _Allocator                     allocator_type;\n\n    typedef basic_string<char_type, traits_type, allocator_type> string_type;\n\nprivate:\n    basic_stringbuf<char_type, traits_type, allocator_type> __sb_;\n\npublic:\n    // 27.8.2.1 Constructors:\n    inline _LIBCPP_INLINE_VISIBILITY\n    explicit basic_stringstream(ios_base::openmode __wch = ios_base::in | ios_base::out);\n    inline _LIBCPP_INLINE_VISIBILITY\n    explicit basic_stringstream(const string_type& __s,\n                                ios_base::openmode __wch = ios_base::in | ios_base::out);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_stringstream(basic_stringstream&& __rhs);\n\n    // 27.8.2.2 Assign and swap:\n    basic_stringstream& operator=(basic_stringstream&& __rhs);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    void swap(basic_stringstream& __rhs);\n\n    // 27.8.2.3 Members:\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;\n    inline _LIBCPP_INLINE_VISIBILITY\n    string_type str() const;\n    inline _LIBCPP_INLINE_VISIBILITY\n    void str(const string_type& __s);\n};\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringstream<_CharT, _Traits, _Allocator>::basic_stringstream(ios_base::openmode __wch)\n    : basic_iostream<_CharT, _Traits>(&__sb_),\n      __sb_(__wch)\n{\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringstream<_CharT, _Traits, _Allocator>::basic_stringstream(const string_type& __s,\n                                                                    ios_base::openmode __wch)\n    : basic_iostream<_CharT, _Traits>(&__sb_),\n      __sb_(__s, __wch)\n{\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringstream<_CharT, _Traits, _Allocator>::basic_stringstream(basic_stringstream&& __rhs)\n    : basic_iostream<_CharT, _Traits>(_VSTD::move(__rhs)),\n      __sb_(_VSTD::move(__rhs.__sb_))\n{\n    basic_istream<_CharT, _Traits>::set_rdbuf(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringstream<_CharT, _Traits, _Allocator>&\nbasic_stringstream<_CharT, _Traits, _Allocator>::operator=(basic_stringstream&& __rhs)\n{\n    basic_iostream<char_type, traits_type>::operator=(_VSTD::move(__rhs));\n    __sb_ = _VSTD::move(__rhs.__sb_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_stringstream<_CharT, _Traits, _Allocator>::swap(basic_stringstream& __rhs)\n{\n    basic_iostream<char_type, traits_type>::swap(__rhs);\n    __sb_.swap(__rhs.__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,\n     basic_stringstream<_CharT, _Traits, _Allocator>& __y)\n{\n    __x.swap(__y);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_stringbuf<_CharT, _Traits, _Allocator>*\nbasic_stringstream<_CharT, _Traits, _Allocator>::rdbuf() const\n{\n    return const_cast<basic_stringbuf<char_type, traits_type, allocator_type>*>(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbasic_string<_CharT, _Traits, _Allocator>\nbasic_stringstream<_CharT, _Traits, _Allocator>::str() const\n{\n    return __sb_.str();\n}\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nvoid\nbasic_stringstream<_CharT, _Traits, _Allocator>::str(const string_type& __s)\n{\n    __sb_.str(__s);\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_SSTREAM\n","// -*- C++ -*-\n//===--------------------------- istream ----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_ISTREAM\n#define _LIBCPP_ISTREAM\n\n/*\n    istream synopsis\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass basic_istream\n    : virtual public basic_ios<charT,traits>\n{\npublic:\n    // types (inherited from basic_ios (27.5.4)):\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    // 27.7.1.1.1 Constructor/destructor:\n    explicit basic_istream(basic_streambuf<char_type, traits_type>* sb);\n    basic_istream(basic_istream&& rhs);\n    virtual ~basic_istream();\n\n    // 27.7.1.1.2 Assign/swap:\n    basic_istream& operator=(basic_istream&& rhs);\n    void swap(basic_istream& rhs);\n\n    // 27.7.1.1.3 Prefix/suffix:\n    class sentry;\n\n    // 27.7.1.2 Formatted input:\n    basic_istream& operator>>(basic_istream& (*pf)(basic_istream&));\n    basic_istream& operator>>(basic_ios<char_type, traits_type>&\n                              (*pf)(basic_ios<char_type, traits_type>&));\n    basic_istream& operator>>(ios_base& (*pf)(ios_base&));\n    basic_istream& operator>>(basic_streambuf<char_type, traits_type>* sb);\n    basic_istream& operator>>(bool& n);\n    basic_istream& operator>>(short& n);\n    basic_istream& operator>>(unsigned short& n);\n    basic_istream& operator>>(int& n);\n    basic_istream& operator>>(unsigned int& n);\n    basic_istream& operator>>(long& n);\n    basic_istream& operator>>(unsigned long& n);\n    basic_istream& operator>>(long long& n);\n    basic_istream& operator>>(unsigned long long& n);\n    basic_istream& operator>>(float& f);\n    basic_istream& operator>>(double& f);\n    basic_istream& operator>>(long double& f);\n    basic_istream& operator>>(void*& p);\n\n    // 27.7.1.3 Unformatted input:\n    streamsize gcount() const;\n    int_type get();\n    basic_istream& get(char_type& c);\n    basic_istream& get(char_type* s, streamsize n);\n    basic_istream& get(char_type* s, streamsize n, char_type delim);\n    basic_istream& get(basic_streambuf<char_type,traits_type>& sb);\n    basic_istream& get(basic_streambuf<char_type,traits_type>& sb, char_type delim);\n\n    basic_istream& getline(char_type* s, streamsize n);\n    basic_istream& getline(char_type* s, streamsize n, char_type delim);\n\n    basic_istream& ignore(streamsize n = 1, int_type delim = traits_type::eof());\n    int_type peek();\n    basic_istream& read (char_type* s, streamsize n);\n    streamsize readsome(char_type* s, streamsize n);\n\n    basic_istream& putback(char_type c);\n    basic_istream& unget();\n    int sync();\n\n    pos_type tellg();\n    basic_istream& seekg(pos_type);\n    basic_istream& seekg(off_type, ios_base::seekdir);\nprotected:\n    basic_istream(const basic_istream& rhs) = delete;\n    basic_istream(basic_istream&& rhs);\n    // 27.7.2.1.2 Assign/swap:\n    basic_istream& operator=(const basic_istream& rhs) = delete;\n    basic_istream& operator=(basic_istream&& rhs);\n    void swap(basic_istream& rhs);\n};\n\n// 27.7.1.2.3 character extraction templates:\ntemplate<class charT, class traits>\n  basic_istream<charT,traits>& operator>>(basic_istream<charT,traits>&, charT&);\n\ntemplate<class traits>\n  basic_istream<char,traits>& operator>>(basic_istream<char,traits>&, unsigned char&);\n\ntemplate<class traits>\n  basic_istream<char,traits>& operator>>(basic_istream<char,traits>&, signed char&);\n\ntemplate<class charT, class traits>\n  basic_istream<charT,traits>& operator>>(basic_istream<charT,traits>&, charT*);\n\ntemplate<class traits>\n  basic_istream<char,traits>& operator>>(basic_istream<char,traits>&, unsigned char*);\n\ntemplate<class traits>\n  basic_istream<char,traits>& operator>>(basic_istream<char,traits>&, signed char*);\n\ntemplate <class charT, class traits>\n  void\n  swap(basic_istream<charT, traits>& x, basic_istream<charT, traits>& y);\n\ntypedef basic_istream<char> istream;\ntypedef basic_istream<wchar_t> wistream;\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass basic_iostream :\n    public basic_istream<charT,traits>,\n    public basic_ostream<charT,traits>\n{\npublic:\n    // types:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    // constructor/destructor\n    explicit basic_iostream(basic_streambuf<char_type, traits_type>* sb);\n    basic_iostream(basic_iostream&& rhs);\n    virtual ~basic_iostream();\n\n    // assign/swap\n    basic_iostream& operator=(basic_iostream&& rhs);\n    void swap(basic_iostream& rhs);\n};\n\ntemplate <class charT, class traits>\n  void\n  swap(basic_iostream<charT, traits>& x, basic_iostream<charT, traits>& y);\n\ntypedef basic_iostream<char> iostream;\ntypedef basic_iostream<wchar_t> wiostream;\n\ntemplate <class charT, class traits>\n  basic_istream<charT,traits>&\n  ws(basic_istream<charT,traits>& is);\n\ntemplate <class charT, class traits, class T>\n  basic_istream<charT, traits>&\n  operator>>(basic_istream<charT, traits>&& is, T& x);\n\n}  // std\n\n*/\n\n#include <__config>\n#include <ostream>\n\n#include <__undef_min_max>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_istream\n    : virtual public basic_ios<_CharT, _Traits>\n{\n    streamsize __gc_;\npublic:\n    // types (inherited from basic_ios (27.5.4)):\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    // 27.7.1.1.1 Constructor/destructor:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    explicit basic_istream(basic_streambuf<char_type, traits_type>* __sb) : __gc_(0)\n    { this->init(__sb); }\n    virtual ~basic_istream();\nprotected:\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_istream(basic_istream&& __rhs);\n#endif\n    // 27.7.1.1.2 Assign/swap:\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_istream& operator=(basic_istream&& __rhs);\n#endif\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void swap(basic_istream& __rhs) {\n      _VSTD::swap(__gc_, __rhs.__gc_);\n      basic_ios<char_type, traits_type>::swap(__rhs);\n    }\n\n#ifndef _LIBCPP_CXX03_LANG\n    basic_istream           (const basic_istream& __rhs) = delete;\n    basic_istream& operator=(const basic_istream& __rhs) = delete;\n#endif\npublic:\n\n    // 27.7.1.1.3 Prefix/suffix:\n    class _LIBCPP_TEMPLATE_VIS sentry;\n\n    // 27.7.1.2 Formatted input:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_istream& operator>>(basic_istream& (*__pf)(basic_istream&))\n    { return __pf(*this); }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_istream& operator>>(basic_ios<char_type, traits_type>&\n                              (*__pf)(basic_ios<char_type, traits_type>&))\n    { __pf(*this); return *this; }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_istream& operator>>(ios_base& (*__pf)(ios_base&))\n    { __pf(*this); return *this; }\n\n    basic_istream& operator>>(basic_streambuf<char_type, traits_type>* __sb);\n    basic_istream& operator>>(bool& __n);\n    basic_istream& operator>>(short& __n);\n    basic_istream& operator>>(unsigned short& __n);\n    basic_istream& operator>>(int& __n);\n    basic_istream& operator>>(unsigned int& __n);\n    basic_istream& operator>>(long& __n);\n    basic_istream& operator>>(unsigned long& __n);\n    basic_istream& operator>>(long long& __n);\n    basic_istream& operator>>(unsigned long long& __n);\n    basic_istream& operator>>(float& __f);\n    basic_istream& operator>>(double& __f);\n    basic_istream& operator>>(long double& __f);\n    basic_istream& operator>>(void*& __p);\n\n    // 27.7.1.3 Unformatted input:\n    _LIBCPP_INLINE_VISIBILITY\n    streamsize gcount() const {return __gc_;}\n    int_type get();\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_istream& get(char_type& __c) {\n      int_type __ch = get();\n      if (__ch != traits_type::eof())\n        __c = traits_type::to_char_type(__ch);\n      return *this;\n    }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_istream& get(char_type* __s, streamsize __n)\n    { return get(__s, __n, this->widen('\\n')); }\n\n    basic_istream& get(char_type* __s, streamsize __n, char_type __dlm);\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_istream& get(basic_streambuf<char_type, traits_type>& __sb)\n    { return get(__sb, this->widen('\\n')); }\n\n    basic_istream& get(basic_streambuf<char_type, traits_type>& __sb, char_type __dlm);\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_istream& getline(char_type* __s, streamsize __n)\n    { return getline(__s, __n, this->widen('\\n')); }\n\n    basic_istream& getline(char_type* __s, streamsize __n, char_type __dlm);\n\n    basic_istream& ignore(streamsize __n = 1, int_type __dlm = traits_type::eof());\n    int_type peek();\n    basic_istream& read (char_type* __s, streamsize __n);\n    streamsize readsome(char_type* __s, streamsize __n);\n\n    basic_istream& putback(char_type __c);\n    basic_istream& unget();\n    int sync();\n\n    pos_type tellg();\n    basic_istream& seekg(pos_type __pos);\n    basic_istream& seekg(off_type __off, ios_base::seekdir __dir);\n};\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_istream<_CharT, _Traits>::sentry\n{\n    bool __ok_;\n\n    sentry(const sentry&); // = delete;\n    sentry& operator=(const sentry&); // = delete;\n\npublic:\n    explicit sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);\n//    ~sentry() = default;\n\n    _LIBCPP_INLINE_VISIBILITY\n        _LIBCPP_EXPLICIT\n        operator bool() const {return __ok_;}\n};\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>::sentry::sentry(basic_istream<_CharT, _Traits>& __is,\n                                               bool __noskipws)\n    : __ok_(false)\n{\n    if (__is.good())\n    {\n        if (__is.tie())\n            __is.tie()->flush();\n        if (!__noskipws && (__is.flags() & ios_base::skipws))\n        {\n            typedef istreambuf_iterator<_CharT, _Traits> _Ip;\n            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());\n            _Ip __i(__is);\n            _Ip __eof;\n            for (; __i != __eof; ++__i)\n                if (!__ct.is(__ct.space, *__i))\n                    break;\n            if (__i == __eof)\n                __is.setstate(ios_base::failbit | ios_base::eofbit);\n        }\n        __ok_ = __is.good();\n    }\n    else\n        __is.setstate(ios_base::failbit);\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>::basic_istream(basic_istream&& __rhs)\n    : __gc_(__rhs.__gc_)\n{\n    __rhs.__gc_ = 0;\n    this->move(__rhs);\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator=(basic_istream&& __rhs)\n{\n    swap(__rhs);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>::~basic_istream()\n{\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(unsigned short& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(unsigned int& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(long& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(unsigned long& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(long long& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(unsigned long long& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(float& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(double& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(long double& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(bool& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(void*& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __n);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(short& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            long __temp;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __temp);\n            if (__temp < numeric_limits<short>::min())\n            {\n                __err |= ios_base::failbit;\n                __n = numeric_limits<short>::min();\n            }\n            else if (__temp > numeric_limits<short>::max())\n            {\n                __err |= ios_base::failbit;\n                __n = numeric_limits<short>::max();\n            }\n            else\n                __n = static_cast<short>(__temp);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(int& __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef istreambuf_iterator<char_type, traits_type> _Ip;\n            typedef num_get<char_type, _Ip> _Fp;\n            ios_base::iostate __err = ios_base::goodbit;\n            long __temp;\n            use_facet<_Fp>(this->getloc()).get(_Ip(*this), _Ip(), *this, __err, __temp);\n            if (__temp < numeric_limits<int>::min())\n            {\n                __err |= ios_base::failbit;\n                __n = numeric_limits<int>::min();\n            }\n            else if (__temp > numeric_limits<int>::max())\n            {\n                __err |= ios_base::failbit;\n                __n = numeric_limits<int>::max();\n            }\n            else\n                __n = static_cast<int>(__temp);\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\noperator>>(basic_istream<_CharT, _Traits>& __is, _CharT* __s)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_istream<_CharT, _Traits>::sentry __sen(__is);\n        if (__sen)\n        {\n            streamsize __n = __is.width();\n            if (__n <= 0)\n                __n = numeric_limits<streamsize>::max() / sizeof(_CharT) - 1;\n            streamsize __c = 0;\n            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());\n            ios_base::iostate __err = ios_base::goodbit;\n            while (__c < __n-1)\n            {\n                typename _Traits::int_type __i = __is.rdbuf()->sgetc();\n                if (_Traits::eq_int_type(__i, _Traits::eof()))\n                {\n                   __err |= ios_base::eofbit;\n                   break;\n                }\n                _CharT __ch = _Traits::to_char_type(__i);\n                if (__ct.is(__ct.space, __ch))\n                    break;\n                *__s++ = __ch;\n                ++__c;\n                 __is.rdbuf()->sbumpc();\n            }\n            *__s = _CharT();\n            __is.width(0);\n            if (__c == 0)\n               __err |= ios_base::failbit;\n            __is.setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __is.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __is;\n}\n\ntemplate<class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<char, _Traits>&\noperator>>(basic_istream<char, _Traits>& __is, unsigned char* __s)\n{\n    return __is >> (char*)__s;\n}\n\ntemplate<class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<char, _Traits>&\noperator>>(basic_istream<char, _Traits>& __is, signed char* __s)\n{\n    return __is >> (char*)__s;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\noperator>>(basic_istream<_CharT, _Traits>& __is, _CharT& __c)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_istream<_CharT, _Traits>::sentry __sen(__is);\n        if (__sen)\n        {\n            typename _Traits::int_type __i = __is.rdbuf()->sbumpc();\n            if (_Traits::eq_int_type(__i, _Traits::eof()))\n                __is.setstate(ios_base::eofbit | ios_base::failbit);\n            else\n                __c = _Traits::to_char_type(__i);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __is.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __is;\n}\n\ntemplate<class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<char, _Traits>&\noperator>>(basic_istream<char, _Traits>& __is, unsigned char& __c)\n{\n    return __is >> (char&)__c;\n}\n\ntemplate<class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<char, _Traits>&\noperator>>(basic_istream<char, _Traits>& __is, signed char& __c)\n{\n    return __is >> (char&)__c;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::operator>>(basic_streambuf<char_type, traits_type>* __sb)\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this, true);\n        if (__s)\n        {\n            if (__sb)\n            {\n#ifndef _LIBCPP_NO_EXCEPTIONS\n                try\n                {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n                    ios_base::iostate __err = ios_base::goodbit;\n                    while (true)\n                    {\n                        typename traits_type::int_type __i = this->rdbuf()->sgetc();\n                        if (traits_type::eq_int_type(__i, _Traits::eof()))\n                        {\n                           __err |= ios_base::eofbit;\n                           break;\n                        }\n                        if (traits_type::eq_int_type(\n                                __sb->sputc(traits_type::to_char_type(__i)),\n                                traits_type::eof()))\n                            break;\n                        ++__gc_;\n                        this->rdbuf()->sbumpc();\n                    }\n                    if (__gc_ == 0)\n                       __err |= ios_base::failbit;\n                    this->setstate(__err);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n                }\n                catch (...)\n                {\n                    if (__gc_ == 0)\n                        this->__set_failbit_and_consider_rethrow();\n                }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            }\n            else\n                this->setstate(ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\ntypename basic_istream<_CharT, _Traits>::int_type\nbasic_istream<_CharT, _Traits>::get()\n{\n    __gc_ = 0;\n    int_type __r = traits_type::eof();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this, true);\n        if (__s)\n        {\n            __r = this->rdbuf()->sbumpc();\n            if (traits_type::eq_int_type(__r, traits_type::eof()))\n               this->setstate(ios_base::failbit | ios_base::eofbit);\n            else\n                __gc_ = 1;\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __r;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::get(char_type* __s, streamsize __n, char_type __dlm)\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            if (__n > 0)\n            {\n                ios_base::iostate __err = ios_base::goodbit;\n                while (__gc_ < __n-1)\n                {\n                    int_type __i = this->rdbuf()->sgetc();\n                    if (traits_type::eq_int_type(__i, traits_type::eof()))\n                    {\n                       __err |= ios_base::eofbit;\n                       break;\n                    }\n                    char_type __ch = traits_type::to_char_type(__i);\n                    if (traits_type::eq(__ch, __dlm))\n                        break;\n                    *__s++ = __ch;\n                    ++__gc_;\n                     this->rdbuf()->sbumpc();\n                }\n                *__s = char_type();\n                if (__gc_ == 0)\n                   __err |= ios_base::failbit;\n                this->setstate(__err);\n            }\n            else\n                this->setstate(ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::get(basic_streambuf<char_type, traits_type>& __sb,\n                                    char_type __dlm)\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            ios_base::iostate __err = ios_base::goodbit;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n            try\n            {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n                while (true)\n                {\n                    typename traits_type::int_type __i = this->rdbuf()->sgetc();\n                    if (traits_type::eq_int_type(__i, traits_type::eof()))\n                    {\n                       __err |= ios_base::eofbit;\n                       break;\n                    }\n                    char_type __ch = traits_type::to_char_type(__i);\n                    if (traits_type::eq(__ch, __dlm))\n                        break;\n                    if (traits_type::eq_int_type(__sb.sputc(__ch), traits_type::eof()))\n                        break;\n                    ++__gc_;\n                    this->rdbuf()->sbumpc();\n                }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n            }\n            catch (...)\n            {\n            }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            if (__gc_ == 0)\n               __err |= ios_base::failbit;\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::getline(char_type* __s, streamsize __n, char_type __dlm)\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            ios_base::iostate __err = ios_base::goodbit;\n            while (true)\n            {\n                typename traits_type::int_type __i = this->rdbuf()->sgetc();\n                if (traits_type::eq_int_type(__i, traits_type::eof()))\n                {\n                   __err |= ios_base::eofbit;\n                   break;\n                }\n                char_type __ch = traits_type::to_char_type(__i);\n                if (traits_type::eq(__ch, __dlm))\n                {\n                    this->rdbuf()->sbumpc();\n                    ++__gc_;\n                    break;\n                }\n                if (__gc_ >= __n-1)\n                {\n                    __err |= ios_base::failbit;\n                    break;\n                }\n                *__s++ = __ch;\n                this->rdbuf()->sbumpc();\n                ++__gc_;\n            }\n            if (__n > 0)\n                *__s = char_type();\n            if (__gc_ == 0)\n               __err |= ios_base::failbit;\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::ignore(streamsize __n, int_type __dlm)\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            ios_base::iostate __err = ios_base::goodbit;\n            if (__n == numeric_limits<streamsize>::max())\n            {\n                while (true)\n                {\n                    typename traits_type::int_type __i = this->rdbuf()->sbumpc();\n                    if (traits_type::eq_int_type(__i, traits_type::eof()))\n                    {\n                       __err |= ios_base::eofbit;\n                       break;\n                    }\n                    ++__gc_;\n                    if (traits_type::eq_int_type(__i, __dlm))\n                        break;\n                }\n            }\n            else\n            {\n                while (__gc_ < __n)\n                {\n                    typename traits_type::int_type __i = this->rdbuf()->sbumpc();\n                    if (traits_type::eq_int_type(__i, traits_type::eof()))\n                    {\n                       __err |= ios_base::eofbit;\n                       break;\n                    }\n                    ++__gc_;\n                    if (traits_type::eq_int_type(__i, __dlm))\n                        break;\n                }\n            }\n            this->setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\ntypename basic_istream<_CharT, _Traits>::int_type\nbasic_istream<_CharT, _Traits>::peek()\n{\n    __gc_ = 0;\n    int_type __r = traits_type::eof();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            __r = this->rdbuf()->sgetc();\n            if (traits_type::eq_int_type(__r, traits_type::eof()))\n                this->setstate(ios_base::eofbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __r;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::read(char_type* __s, streamsize __n)\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            __gc_ = this->rdbuf()->sgetn(__s, __n);\n            if (__gc_ != __n)\n                this->setstate(ios_base::failbit | ios_base::eofbit);\n        }\n        else\n            this->setstate(ios_base::failbit);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nstreamsize\nbasic_istream<_CharT, _Traits>::readsome(char_type* __s, streamsize __n)\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            streamsize __c = this->rdbuf()->in_avail();\n            switch (__c)\n            {\n            case -1:\n                this->setstate(ios_base::eofbit);\n                break;\n            case 0:\n                break;\n            default:\n                read(__s, _VSTD::min(__c, __n));\n                break;\n            }\n        }\n        else\n            this->setstate(ios_base::failbit);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __gc_;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::putback(char_type __c)\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        this->clear(this->rdstate() & ~ios_base::eofbit);\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            if (this->rdbuf() == 0 || this->rdbuf()->sputbackc(__c) == traits_type::eof())\n                this->setstate(ios_base::badbit);\n        }\n        else\n            this->setstate(ios_base::failbit);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::unget()\n{\n    __gc_ = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        this->clear(this->rdstate() & ~ios_base::eofbit);\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            if (this->rdbuf() == 0 || this->rdbuf()->sungetc() == traits_type::eof())\n                this->setstate(ios_base::badbit);\n        }\n        else\n            this->setstate(ios_base::failbit);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nint\nbasic_istream<_CharT, _Traits>::sync()\n{\n    int __r = 0;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            if (this->rdbuf() == 0)\n                return -1;\n            if (this->rdbuf()->pubsync() == -1)\n            {\n                this->setstate(ios_base::badbit);\n                return -1;\n            }\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __r;\n}\n\ntemplate<class _CharT, class _Traits>\ntypename basic_istream<_CharT, _Traits>::pos_type\nbasic_istream<_CharT, _Traits>::tellg()\n{\n    pos_type __r(-1);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this, true);\n        if (__sen)\n            __r = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __r;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::seekg(pos_type __pos)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        this->clear(this->rdstate() & ~ios_base::eofbit);\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            if (this->rdbuf()->pubseekpos(__pos, ios_base::in) == pos_type(-1))\n                this->setstate(ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nbasic_istream<_CharT, _Traits>::seekg(off_type __off, ios_base::seekdir __dir)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        this->clear(this->rdstate() & ~ios_base::eofbit);\n        sentry __sen(*this, true);\n        if (__sen)\n        {\n            if (this->rdbuf()->pubseekoff(__off, __dir, ios_base::in) == pos_type(-1))\n                this->setstate(ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_istream<_CharT, _Traits>&\nws(basic_istream<_CharT, _Traits>& __is)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_istream<_CharT, _Traits>::sentry __sen(__is, true);\n        if (__sen)\n        {\n            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());\n            while (true)\n            {\n                typename _Traits::int_type __i = __is.rdbuf()->sgetc();\n                if (_Traits::eq_int_type(__i, _Traits::eof()))\n                {\n                   __is.setstate(ios_base::eofbit);\n                   break;\n                }\n                if (!__ct.is(__ct.space, _Traits::to_char_type(__i)))\n                    break;\n                __is.rdbuf()->sbumpc();\n            }\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __is.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __is;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<_CharT, _Traits>&\noperator>>(basic_istream<_CharT, _Traits>&& __is, _Tp&& __x)\n{\n    __is >> _VSTD::forward<_Tp>(__x);\n    return __is;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_iostream\n    : public basic_istream<_CharT, _Traits>,\n      public basic_ostream<_CharT, _Traits>\n{\npublic:\n    // types:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    // constructor/destructor\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    explicit basic_iostream(basic_streambuf<char_type, traits_type>* __sb)\n      : basic_istream<_CharT, _Traits>(__sb)\n    {}\n\n    virtual ~basic_iostream();\nprotected:\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_iostream(basic_iostream&& __rhs);\n#endif\n\n    // assign/swap\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_iostream& operator=(basic_iostream&& __rhs);\n#endif\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void swap(basic_iostream& __rhs)\n    { basic_istream<char_type, traits_type>::swap(__rhs); }\npublic:\n};\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nbasic_iostream<_CharT, _Traits>::basic_iostream(basic_iostream&& __rhs)\n    : basic_istream<_CharT, _Traits>(_VSTD::move(__rhs))\n{\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_iostream<_CharT, _Traits>&\nbasic_iostream<_CharT, _Traits>::operator=(basic_iostream&& __rhs)\n{\n    swap(__rhs);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nbasic_iostream<_CharT, _Traits>::~basic_iostream()\n{\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_istream<_CharT, _Traits>&\noperator>>(basic_istream<_CharT, _Traits>& __is,\n           basic_string<_CharT, _Traits, _Allocator>& __str)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_istream<_CharT, _Traits>::sentry __sen(__is);\n        if (__sen)\n        {\n            __str.clear();\n            streamsize __n = __is.width();\n            if (__n <= 0)\n                __n = __str.max_size();\n            if (__n <= 0)\n                __n = numeric_limits<streamsize>::max();\n            streamsize __c = 0;\n            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());\n            ios_base::iostate __err = ios_base::goodbit;\n            while (__c < __n)\n            {\n                typename _Traits::int_type __i = __is.rdbuf()->sgetc();\n                if (_Traits::eq_int_type(__i, _Traits::eof()))\n                {\n                   __err |= ios_base::eofbit;\n                   break;\n                }\n                _CharT __ch = _Traits::to_char_type(__i);\n                if (__ct.is(__ct.space, __ch))\n                    break;\n                __str.push_back(__ch);\n                ++__c;\n                 __is.rdbuf()->sbumpc();\n            }\n            __is.width(0);\n            if (__c == 0)\n               __err |= ios_base::failbit;\n            __is.setstate(__err);\n        }\n        else\n            __is.setstate(ios_base::failbit);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __is.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __is;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_istream<_CharT, _Traits>&\ngetline(basic_istream<_CharT, _Traits>& __is,\n        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_istream<_CharT, _Traits>::sentry __sen(__is, true);\n        if (__sen)\n        {\n            __str.clear();\n            ios_base::iostate __err = ios_base::goodbit;\n            streamsize __extr = 0;\n            while (true)\n            {\n                typename _Traits::int_type __i = __is.rdbuf()->sbumpc();\n                if (_Traits::eq_int_type(__i, _Traits::eof()))\n                {\n                   __err |= ios_base::eofbit;\n                   break;\n                }\n                ++__extr;\n                _CharT __ch = _Traits::to_char_type(__i);\n                if (_Traits::eq(__ch, __dlm))\n                    break;\n                __str.push_back(__ch);\n                if (__str.size() == __str.max_size())\n                {\n                    __err |= ios_base::failbit;\n                    break;\n                }\n            }\n            if (__extr == 0)\n               __err |= ios_base::failbit;\n            __is.setstate(__err);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __is.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __is;\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<_CharT, _Traits>&\ngetline(basic_istream<_CharT, _Traits>& __is,\n        basic_string<_CharT, _Traits, _Allocator>& __str)\n{\n    return getline(__is, __str, __is.widen('\\n'));\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<_CharT, _Traits>&\ngetline(basic_istream<_CharT, _Traits>&& __is,\n        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm)\n{\n    return getline(__is, __str, __dlm);\n}\n\ntemplate<class _CharT, class _Traits, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_istream<_CharT, _Traits>&\ngetline(basic_istream<_CharT, _Traits>&& __is,\n        basic_string<_CharT, _Traits, _Allocator>& __str)\n{\n    return getline(__is, __str, __is.widen('\\n'));\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits, size_t _Size>\nbasic_istream<_CharT, _Traits>&\noperator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Size>& __x)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_istream<_CharT, _Traits>::sentry __sen(__is);\n        if (__sen)\n        {\n            basic_string<_CharT, _Traits> __str;\n            const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__is.getloc());\n            size_t __c = 0;\n            ios_base::iostate __err = ios_base::goodbit;\n            _CharT __zero = __ct.widen('0');\n            _CharT __one = __ct.widen('1');\n            while (__c < _Size)\n            {\n                typename _Traits::int_type __i = __is.rdbuf()->sgetc();\n                if (_Traits::eq_int_type(__i, _Traits::eof()))\n                {\n                   __err |= ios_base::eofbit;\n                   break;\n                }\n                _CharT __ch = _Traits::to_char_type(__i);\n                if (!_Traits::eq(__ch, __zero) && !_Traits::eq(__ch, __one))\n                    break;\n                __str.push_back(__ch);\n                ++__c;\n                 __is.rdbuf()->sbumpc();\n            }\n            __x = bitset<_Size>(__str);\n            if (__c == 0)\n               __err |= ios_base::failbit;\n            __is.setstate(__err);\n        }\n        else\n            __is.setstate(ios_base::failbit);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __is.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __is;\n}\n\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_istream<char>)\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_istream<wchar_t>)\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_iostream<char>)\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_ISTREAM\n","// -*- C++ -*-\n//===---------------------------- ios -------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_IOS\n#define _LIBCPP_IOS\n\n/*\n    ios synopsis\n\n#include <iosfwd>\n\nnamespace std\n{\n\ntypedef OFF_T streamoff;\ntypedef SZ_T streamsize;\ntemplate <class stateT> class fpos;\n\nclass ios_base\n{\npublic:\n    class failure;\n\n    typedef T1 fmtflags;\n    static constexpr fmtflags boolalpha;\n    static constexpr fmtflags dec;\n    static constexpr fmtflags fixed;\n    static constexpr fmtflags hex;\n    static constexpr fmtflags internal;\n    static constexpr fmtflags left;\n    static constexpr fmtflags oct;\n    static constexpr fmtflags right;\n    static constexpr fmtflags scientific;\n    static constexpr fmtflags showbase;\n    static constexpr fmtflags showpoint;\n    static constexpr fmtflags showpos;\n    static constexpr fmtflags skipws;\n    static constexpr fmtflags unitbuf;\n    static constexpr fmtflags uppercase;\n    static constexpr fmtflags adjustfield;\n    static constexpr fmtflags basefield;\n    static constexpr fmtflags floatfield;\n\n    typedef T2 iostate;\n    static constexpr iostate badbit;\n    static constexpr iostate eofbit;\n    static constexpr iostate failbit;\n    static constexpr iostate goodbit;\n\n    typedef T3 openmode;\n    static constexpr openmode app;\n    static constexpr openmode ate;\n    static constexpr openmode binary;\n    static constexpr openmode in;\n    static constexpr openmode out;\n    static constexpr openmode trunc;\n\n    typedef T4 seekdir;\n    static constexpr seekdir beg;\n    static constexpr seekdir cur;\n    static constexpr seekdir end;\n\n    class Init;\n\n    // 27.5.2.2 fmtflags state:\n    fmtflags flags() const;\n    fmtflags flags(fmtflags fmtfl);\n    fmtflags setf(fmtflags fmtfl);\n    fmtflags setf(fmtflags fmtfl, fmtflags mask);\n    void unsetf(fmtflags mask);\n\n    streamsize precision() const;\n    streamsize precision(streamsize prec);\n    streamsize width() const;\n    streamsize width(streamsize wide);\n\n    // 27.5.2.3 locales:\n    locale imbue(const locale& loc);\n    locale getloc() const;\n\n    // 27.5.2.5 storage:\n    static int xalloc();\n    long& iword(int index);\n    void*& pword(int index);\n\n    // destructor\n    virtual ~ios_base();\n\n    // 27.5.2.6 callbacks;\n    enum event { erase_event, imbue_event, copyfmt_event };\n    typedef void (*event_callback)(event, ios_base&, int index);\n    void register_callback(event_callback fn, int index);\n\n    ios_base(const ios_base&) = delete;\n    ios_base& operator=(const ios_base&) = delete;\n\n    static bool sync_with_stdio(bool sync = true);\n\nprotected:\n    ios_base();\n};\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass basic_ios\n    : public ios_base\n{\npublic:\n    // types:\n    typedef charT char_type;\n    typedef typename traits::int_type int_type;  // removed in C++17\n    typedef typename traits::pos_type pos_type;  // removed in C++17\n    typedef typename traits::off_type off_type;  // removed in C++17\n    typedef traits traits_type;\n\n    operator unspecified-bool-type() const;\n    bool operator!() const;\n    iostate rdstate() const;\n    void clear(iostate state = goodbit);\n    void setstate(iostate state);\n    bool good() const;\n    bool eof() const;\n    bool fail() const;\n    bool bad() const;\n\n    iostate exceptions() const;\n    void exceptions(iostate except);\n\n    // 27.5.4.1 Constructor/destructor:\n    explicit basic_ios(basic_streambuf<charT,traits>* sb);\n    virtual ~basic_ios();\n\n    // 27.5.4.2 Members:\n    basic_ostream<charT,traits>* tie() const;\n    basic_ostream<charT,traits>* tie(basic_ostream<charT,traits>* tiestr);\n\n    basic_streambuf<charT,traits>* rdbuf() const;\n    basic_streambuf<charT,traits>* rdbuf(basic_streambuf<charT,traits>* sb);\n\n    basic_ios& copyfmt(const basic_ios& rhs);\n\n    char_type fill() const;\n    char_type fill(char_type ch);\n\n    locale imbue(const locale& loc);\n\n    char narrow(char_type c, char dfault) const;\n    char_type widen(char c) const;\n\n    basic_ios(const basic_ios& ) = delete;\n    basic_ios& operator=(const basic_ios&) = delete;\n\nprotected:\n    basic_ios();\n    void init(basic_streambuf<charT,traits>* sb);\n    void move(basic_ios& rhs);\n    void swap(basic_ios& rhs) noexcept;\n    void set_rdbuf(basic_streambuf<charT, traits>* sb);\n};\n\n// 27.5.5, manipulators:\nios_base& boolalpha (ios_base& str);\nios_base& noboolalpha(ios_base& str);\nios_base& showbase (ios_base& str);\nios_base& noshowbase (ios_base& str);\nios_base& showpoint (ios_base& str);\nios_base& noshowpoint(ios_base& str);\nios_base& showpos (ios_base& str);\nios_base& noshowpos (ios_base& str);\nios_base& skipws (ios_base& str);\nios_base& noskipws (ios_base& str);\nios_base& uppercase (ios_base& str);\nios_base& nouppercase(ios_base& str);\nios_base& unitbuf (ios_base& str);\nios_base& nounitbuf (ios_base& str);\n\n// 27.5.5.2 adjustfield:\nios_base& internal (ios_base& str);\nios_base& left (ios_base& str);\nios_base& right (ios_base& str);\n\n// 27.5.5.3 basefield:\nios_base& dec (ios_base& str);\nios_base& hex (ios_base& str);\nios_base& oct (ios_base& str);\n\n// 27.5.5.4 floatfield:\nios_base& fixed (ios_base& str);\nios_base& scientific (ios_base& str);\nios_base& hexfloat (ios_base& str);\nios_base& defaultfloat(ios_base& str);\n\n// 27.5.5.5 error reporting:\nenum class io_errc\n{\n    stream = 1\n};\n\nconcept_map ErrorCodeEnum<io_errc> { };\nerror_code make_error_code(io_errc e) noexcept; \nerror_condition make_error_condition(io_errc e) noexcept; \nstorage-class-specifier const error_category& iostream_category() noexcept;\n\n}  // std\n\n*/\n\n#include <__config>\n#include <iosfwd>\n#include <__locale>\n#include <system_error>\n\n#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)\n#include <atomic>     // for __xindex_\n#endif\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntypedef ptrdiff_t streamsize;\n\nclass _LIBCPP_TYPE_VIS ios_base\n{\npublic:\n    class _LIBCPP_EXCEPTION_ABI failure;\n\n    typedef unsigned int fmtflags;\n    static const fmtflags boolalpha   = 0x0001;\n    static const fmtflags dec         = 0x0002;\n    static const fmtflags fixed       = 0x0004;\n    static const fmtflags hex         = 0x0008;\n    static const fmtflags internal    = 0x0010;\n    static const fmtflags left        = 0x0020;\n    static const fmtflags oct         = 0x0040;\n    static const fmtflags right       = 0x0080;\n    static const fmtflags scientific  = 0x0100;\n    static const fmtflags showbase    = 0x0200;\n    static const fmtflags showpoint   = 0x0400;\n    static const fmtflags showpos     = 0x0800;\n    static const fmtflags skipws      = 0x1000;\n    static const fmtflags unitbuf     = 0x2000;\n    static const fmtflags uppercase   = 0x4000;\n    static const fmtflags adjustfield = left | right | internal;\n    static const fmtflags basefield   = dec | oct | hex;\n    static const fmtflags floatfield  = scientific | fixed;\n\n    typedef unsigned int iostate;\n    static const iostate badbit  = 0x1;\n    static const iostate eofbit  = 0x2;\n    static const iostate failbit = 0x4;\n    static const iostate goodbit = 0x0;\n\n    typedef unsigned int openmode;\n    static const openmode app    = 0x01;\n    static const openmode ate    = 0x02;\n    static const openmode binary = 0x04;\n    static const openmode in     = 0x08;\n    static const openmode out    = 0x10;\n    static const openmode trunc  = 0x20;\n\n    enum seekdir {beg, cur, end};\n\n#if _LIBCPP_STD_VER <= 14\n    typedef iostate      io_state;\n    typedef openmode     open_mode;\n    typedef seekdir      seek_dir;\n\n    typedef _VSTD::streamoff streamoff;\n    typedef _VSTD::streampos streampos;\n#endif\n\n    class _LIBCPP_TYPE_VIS Init;\n\n    // 27.5.2.2 fmtflags state:\n    _LIBCPP_INLINE_VISIBILITY fmtflags flags() const;\n    _LIBCPP_INLINE_VISIBILITY fmtflags flags(fmtflags __fmtfl);\n    _LIBCPP_INLINE_VISIBILITY fmtflags setf(fmtflags __fmtfl);\n    _LIBCPP_INLINE_VISIBILITY fmtflags setf(fmtflags __fmtfl, fmtflags __mask);\n    _LIBCPP_INLINE_VISIBILITY void unsetf(fmtflags __mask);\n\n    _LIBCPP_INLINE_VISIBILITY streamsize precision() const;\n    _LIBCPP_INLINE_VISIBILITY streamsize precision(streamsize __prec);\n    _LIBCPP_INLINE_VISIBILITY streamsize width() const;\n    _LIBCPP_INLINE_VISIBILITY streamsize width(streamsize __wide);\n\n    // 27.5.2.3 locales:\n    locale imbue(const locale& __loc);\n    locale getloc() const;\n\n    // 27.5.2.5 storage:\n    static int xalloc();\n    long& iword(int __index);\n    void*& pword(int __index);\n\n    // destructor\n    virtual ~ios_base();\n\n    // 27.5.2.6 callbacks;\n    enum event { erase_event, imbue_event, copyfmt_event };\n    typedef void (*event_callback)(event, ios_base&, int __index);\n    void register_callback(event_callback __fn, int __index);\n\nprivate:\n    ios_base(const ios_base&); // = delete;\n    ios_base& operator=(const ios_base&); // = delete;\n\npublic:\n    static bool sync_with_stdio(bool __sync = true);\n\n    _LIBCPP_INLINE_VISIBILITY iostate rdstate() const;\n    void clear(iostate __state = goodbit);\n    _LIBCPP_INLINE_VISIBILITY void setstate(iostate __state);\n\n    _LIBCPP_INLINE_VISIBILITY bool good() const;\n    _LIBCPP_INLINE_VISIBILITY bool eof() const;\n    _LIBCPP_INLINE_VISIBILITY bool fail() const;\n    _LIBCPP_INLINE_VISIBILITY bool bad() const;\n\n    _LIBCPP_INLINE_VISIBILITY iostate exceptions() const;\n    _LIBCPP_INLINE_VISIBILITY void exceptions(iostate __iostate);\n\n    void __set_badbit_and_consider_rethrow();\n    void __set_failbit_and_consider_rethrow();\n\nprotected:\n    _LIBCPP_INLINE_VISIBILITY\n    ios_base() {// purposefully does no initialization\n               }\n\n    void init(void* __sb);\n    _LIBCPP_ALWAYS_INLINE void* rdbuf() const {return __rdbuf_;}\n\n    _LIBCPP_ALWAYS_INLINE\n    void rdbuf(void* __sb)\n    {\n        __rdbuf_ = __sb;\n        clear();\n    }\n\n    void __call_callbacks(event);\n    void copyfmt(const ios_base&);\n    void move(ios_base&);\n    void swap(ios_base&) _NOEXCEPT;\n\n    _LIBCPP_ALWAYS_INLINE\n    void set_rdbuf(void* __sb)\n    {\n        __rdbuf_ = __sb;\n    }\n\nprivate:\n    // All data members must be scalars\n    fmtflags        __fmtflags_;\n    streamsize      __precision_;\n    streamsize      __width_;\n    iostate         __rdstate_;\n    iostate         __exceptions_;\n    void*           __rdbuf_;\n    void*           __loc_;\n    event_callback* __fn_;\n    int*            __index_;\n    size_t          __event_size_;\n    size_t          __event_cap_;\n// TODO(EricWF): Enable this for both Clang and GCC. Currently it is only\n// enabled with clang.\n#if defined(_LIBCPP_HAS_C_ATOMIC_IMP) && !defined(_LIBCPP_HAS_NO_THREADS)\n    static atomic<int> __xindex_;\n#else\n    static int      __xindex_;\n#endif\n    long*           __iarray_;\n    size_t          __iarray_size_;\n    size_t          __iarray_cap_;\n    void**          __parray_;\n    size_t          __parray_size_;\n    size_t          __parray_cap_;\n};\n\n//enum class io_errc\n_LIBCPP_DECLARE_STRONG_ENUM(io_errc)\n{\n    stream = 1\n};\n_LIBCPP_DECLARE_STRONG_ENUM_EPILOG(io_errc)\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS is_error_code_enum<io_errc> : public true_type { };\n\n#ifdef _LIBCPP_HAS_NO_STRONG_ENUMS\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS is_error_code_enum<io_errc::__lx> : public true_type { };\n#endif\n\n_LIBCPP_FUNC_VIS\nconst error_category& iostream_category() _NOEXCEPT;\n\ninline _LIBCPP_INLINE_VISIBILITY\nerror_code\nmake_error_code(io_errc __e) _NOEXCEPT\n{\n    return error_code(static_cast<int>(__e), iostream_category());\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nerror_condition\nmake_error_condition(io_errc __e) _NOEXCEPT\n{\n    return error_condition(static_cast<int>(__e), iostream_category());\n}\n\nclass _LIBCPP_EXCEPTION_ABI ios_base::failure\n    : public system_error\n{\npublic:\n    explicit failure(const string& __msg, const error_code& __ec = io_errc::stream);\n    explicit failure(const char* __msg, const error_code& __ec = io_errc::stream);\n    virtual ~failure() throw();\n};\n\nclass _LIBCPP_TYPE_VIS ios_base::Init\n{\npublic:\n    Init();\n    ~Init();\n};\n\n// fmtflags\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base::fmtflags\nios_base::flags() const\n{\n    return __fmtflags_;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base::fmtflags\nios_base::flags(fmtflags __fmtfl)\n{\n    fmtflags __r = __fmtflags_;\n    __fmtflags_ = __fmtfl;\n    return __r;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base::fmtflags\nios_base::setf(fmtflags __fmtfl)\n{\n    fmtflags __r = __fmtflags_;\n    __fmtflags_ |= __fmtfl;\n    return __r;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nios_base::unsetf(fmtflags __mask)\n{\n    __fmtflags_ &= ~__mask;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base::fmtflags\nios_base::setf(fmtflags __fmtfl, fmtflags __mask)\n{\n    fmtflags __r = __fmtflags_;\n    unsetf(__mask);\n    __fmtflags_ |= __fmtfl & __mask;\n    return __r;\n}\n\n// precision\n\ninline _LIBCPP_INLINE_VISIBILITY\nstreamsize\nios_base::precision() const\n{\n    return __precision_;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nstreamsize\nios_base::precision(streamsize __prec)\n{\n    streamsize __r = __precision_;\n    __precision_ = __prec;\n    return __r;\n}\n\n// width\n\ninline _LIBCPP_INLINE_VISIBILITY\nstreamsize\nios_base::width() const\n{\n    return __width_;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nstreamsize\nios_base::width(streamsize __wide)\n{\n    streamsize __r = __width_;\n    __width_ = __wide;\n    return __r;\n}\n\n// iostate\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base::iostate\nios_base::rdstate() const\n{\n    return __rdstate_;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nios_base::setstate(iostate __state)\n{\n    clear(__rdstate_ | __state);\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nios_base::good() const\n{\n    return __rdstate_ == 0;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nios_base::eof() const\n{\n    return (__rdstate_ & eofbit) != 0;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nios_base::fail() const\n{\n    return (__rdstate_ & (failbit | badbit)) != 0;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nios_base::bad() const\n{\n    return (__rdstate_ & badbit) != 0;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base::iostate\nios_base::exceptions() const\n{\n    return __exceptions_;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nios_base::exceptions(iostate __iostate)\n{\n    __exceptions_ = __iostate;\n    clear(__rdstate_);\n}\n\n#if defined(_LIBCPP_CXX03_LANG)\nstruct _LIBCPP_TYPE_VIS __cxx03_bool {\n  typedef void (__cxx03_bool::*__bool_type)();\n  void __true_value() {}\n};\n#endif\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_ios\n    : public ios_base\n{\npublic:\n    // types:\n    typedef _CharT char_type;\n    typedef _Traits traits_type;\n\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n#if defined(_LIBCPP_CXX03_LANG)\n    _LIBCPP_ALWAYS_INLINE\n    operator __cxx03_bool::__bool_type() const {\n        return !fail() ? &__cxx03_bool::__true_value : nullptr;\n    }\n#else\n    _LIBCPP_ALWAYS_INLINE\n    _LIBCPP_EXPLICIT operator bool() const {return !fail();}\n#endif\n\n    _LIBCPP_ALWAYS_INLINE bool operator!() const    {return  fail();}\n    _LIBCPP_ALWAYS_INLINE iostate rdstate() const   {return ios_base::rdstate();}\n    _LIBCPP_ALWAYS_INLINE void clear(iostate __state = goodbit) {ios_base::clear(__state);}\n    _LIBCPP_ALWAYS_INLINE void setstate(iostate __state) {ios_base::setstate(__state);}\n    _LIBCPP_ALWAYS_INLINE bool good() const {return ios_base::good();}\n    _LIBCPP_ALWAYS_INLINE bool eof() const  {return ios_base::eof();}\n    _LIBCPP_ALWAYS_INLINE bool fail() const {return ios_base::fail();}\n    _LIBCPP_ALWAYS_INLINE bool bad() const  {return ios_base::bad();}\n\n    _LIBCPP_ALWAYS_INLINE iostate exceptions() const {return ios_base::exceptions();}\n    _LIBCPP_ALWAYS_INLINE void exceptions(iostate __iostate) {ios_base::exceptions(__iostate);}\n\n    // 27.5.4.1 Constructor/destructor:\n    _LIBCPP_INLINE_VISIBILITY\n    explicit basic_ios(basic_streambuf<char_type,traits_type>* __sb);\n    virtual ~basic_ios();\n\n    // 27.5.4.2 Members:\n    _LIBCPP_INLINE_VISIBILITY \n    basic_ostream<char_type, traits_type>* tie() const;\n    _LIBCPP_INLINE_VISIBILITY \n    basic_ostream<char_type, traits_type>* tie(basic_ostream<char_type, traits_type>* __tiestr);\n\n    _LIBCPP_INLINE_VISIBILITY \n    basic_streambuf<char_type, traits_type>* rdbuf() const;\n    _LIBCPP_INLINE_VISIBILITY \n    basic_streambuf<char_type, traits_type>* rdbuf(basic_streambuf<char_type, traits_type>* __sb);\n\n    basic_ios& copyfmt(const basic_ios& __rhs);\n\n    _LIBCPP_INLINE_VISIBILITY \n    char_type fill() const;\n    _LIBCPP_INLINE_VISIBILITY \n    char_type fill(char_type __ch);\n\n    _LIBCPP_INLINE_VISIBILITY \n    locale imbue(const locale& __loc);\n\n    _LIBCPP_INLINE_VISIBILITY \n    char narrow(char_type __c, char __dfault) const;\n    _LIBCPP_INLINE_VISIBILITY \n    char_type widen(char __c) const;\n\nprotected:\n    _LIBCPP_ALWAYS_INLINE\n    basic_ios() {// purposefully does no initialization\n                }\n    _LIBCPP_INLINE_VISIBILITY \n    void init(basic_streambuf<char_type, traits_type>* __sb);\n\n    _LIBCPP_INLINE_VISIBILITY \n    void move(basic_ios& __rhs);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_ALWAYS_INLINE\n    void move(basic_ios&& __rhs) {move(__rhs);}\n#endif\n    _LIBCPP_INLINE_VISIBILITY \n    void swap(basic_ios& __rhs) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY \n    void set_rdbuf(basic_streambuf<char_type, traits_type>* __sb);\nprivate:\n    basic_ostream<char_type, traits_type>* __tie_;\n     mutable int_type __fill_;\n};\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ios<_CharT, _Traits>::basic_ios(basic_streambuf<char_type,traits_type>* __sb)\n{\n    init(__sb);\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ios<_CharT, _Traits>::~basic_ios()\n{\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_ios<_CharT, _Traits>::init(basic_streambuf<char_type, traits_type>* __sb)\n{\n    ios_base::init(__sb);\n    __tie_ = 0;\n    __fill_ = traits_type::eof();\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ostream<_CharT, _Traits>*\nbasic_ios<_CharT, _Traits>::tie() const\n{\n    return __tie_;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ostream<_CharT, _Traits>*\nbasic_ios<_CharT, _Traits>::tie(basic_ostream<char_type, traits_type>* __tiestr)\n{\n    basic_ostream<char_type, traits_type>* __r = __tie_;\n    __tie_ = __tiestr;\n    return __r;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_streambuf<_CharT, _Traits>*\nbasic_ios<_CharT, _Traits>::rdbuf() const\n{\n    return static_cast<basic_streambuf<char_type, traits_type>*>(ios_base::rdbuf());\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_streambuf<_CharT, _Traits>*\nbasic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<char_type, traits_type>* __sb)\n{\n    basic_streambuf<char_type, traits_type>* __r = rdbuf();\n    ios_base::rdbuf(__sb);\n    return __r;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nlocale\nbasic_ios<_CharT, _Traits>::imbue(const locale& __loc)\n{\n    locale __r = getloc();\n    ios_base::imbue(__loc);\n    if (rdbuf())\n        rdbuf()->pubimbue(__loc);\n    return __r;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nchar\nbasic_ios<_CharT, _Traits>::narrow(char_type __c, char __dfault) const\n{\n    return use_facet<ctype<char_type> >(getloc()).narrow(__c, __dfault);\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\n_CharT\nbasic_ios<_CharT, _Traits>::widen(char __c) const\n{\n    return use_facet<ctype<char_type> >(getloc()).widen(__c);\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\n_CharT\nbasic_ios<_CharT, _Traits>::fill() const\n{\n    if (traits_type::eq_int_type(traits_type::eof(), __fill_))\n        __fill_ = widen(' ');\n    return __fill_;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\n_CharT\nbasic_ios<_CharT, _Traits>::fill(char_type __ch)\n{\n    char_type __r = __fill_;\n    __fill_ = __ch;\n    return __r;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ios<_CharT, _Traits>&\nbasic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)\n{\n    if (this != &__rhs)\n    {\n        __call_callbacks(erase_event);\n        ios_base::copyfmt(__rhs);\n        __tie_ = __rhs.__tie_;\n        __fill_ = __rhs.__fill_;\n        __call_callbacks(copyfmt_event);\n        exceptions(__rhs.exceptions());\n    }\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_ios<_CharT, _Traits>::move(basic_ios& __rhs)\n{\n    ios_base::move(__rhs);\n    __tie_ = __rhs.__tie_;\n    __rhs.__tie_ = 0;\n    __fill_ = __rhs.__fill_;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_ios<_CharT, _Traits>::swap(basic_ios& __rhs) _NOEXCEPT\n{\n    ios_base::swap(__rhs);\n    _VSTD::swap(__tie_, __rhs.__tie_);\n    _VSTD::swap(__fill_, __rhs.__fill_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nbasic_ios<_CharT, _Traits>::set_rdbuf(basic_streambuf<char_type, traits_type>* __sb)\n{\n    ios_base::set_rdbuf(__sb);\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nboolalpha(ios_base& __str)\n{\n    __str.setf(ios_base::boolalpha);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nnoboolalpha(ios_base& __str)\n{\n    __str.unsetf(ios_base::boolalpha);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nshowbase(ios_base& __str)\n{\n    __str.setf(ios_base::showbase);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nnoshowbase(ios_base& __str)\n{\n    __str.unsetf(ios_base::showbase);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nshowpoint(ios_base& __str)\n{\n    __str.setf(ios_base::showpoint);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nnoshowpoint(ios_base& __str)\n{\n    __str.unsetf(ios_base::showpoint);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nshowpos(ios_base& __str)\n{\n    __str.setf(ios_base::showpos);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nnoshowpos(ios_base& __str)\n{\n    __str.unsetf(ios_base::showpos);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nskipws(ios_base& __str)\n{\n    __str.setf(ios_base::skipws);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nnoskipws(ios_base& __str)\n{\n    __str.unsetf(ios_base::skipws);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nuppercase(ios_base& __str)\n{\n    __str.setf(ios_base::uppercase);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nnouppercase(ios_base& __str)\n{\n    __str.unsetf(ios_base::uppercase);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nunitbuf(ios_base& __str)\n{\n    __str.setf(ios_base::unitbuf);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nnounitbuf(ios_base& __str)\n{\n    __str.unsetf(ios_base::unitbuf);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\ninternal(ios_base& __str)\n{\n    __str.setf(ios_base::internal, ios_base::adjustfield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nleft(ios_base& __str)\n{\n    __str.setf(ios_base::left, ios_base::adjustfield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nright(ios_base& __str)\n{\n    __str.setf(ios_base::right, ios_base::adjustfield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\ndec(ios_base& __str)\n{\n    __str.setf(ios_base::dec, ios_base::basefield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nhex(ios_base& __str)\n{\n    __str.setf(ios_base::hex, ios_base::basefield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\noct(ios_base& __str)\n{\n    __str.setf(ios_base::oct, ios_base::basefield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nfixed(ios_base& __str)\n{\n    __str.setf(ios_base::fixed, ios_base::floatfield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nscientific(ios_base& __str)\n{\n    __str.setf(ios_base::scientific, ios_base::floatfield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\nhexfloat(ios_base& __str)\n{\n    __str.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);\n    return __str;\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nios_base&\ndefaultfloat(ios_base& __str)\n{\n    __str.unsetf(ios_base::floatfield);\n    return __str;\n}\n\ntemplate <class _CharT, class _Traits>\nclass __save_flags\n{\n    typedef basic_ios<_CharT, _Traits> __stream_type;\n    typedef typename __stream_type::fmtflags fmtflags;\n\n    __stream_type& __stream_;\n    fmtflags       __fmtflags_;\n    _CharT         __fill_;\n\n    __save_flags(const __save_flags&);\n    __save_flags& operator=(const __save_flags&);\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __save_flags(__stream_type& __stream)\n        : __stream_(__stream),\n          __fmtflags_(__stream.flags()),\n          __fill_(__stream.fill())\n        {}\n    _LIBCPP_INLINE_VISIBILITY\n    ~__save_flags()\n    {\n        __stream_.flags(__fmtflags_);\n        __stream_.fill(__fill_);\n    }\n};\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_IOS\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2017\n *\n *  @file assert.h\n *  @brief A more dynamic replacement for standard library asserts.\n *  @note Status: RELEASE\n *\n *  A replacement for the system-level assert.h, called \"emp_assert\"\n *  Added functionality:\n *   - If compiled with Emscripten, will provide pop-up alerts in a web browser.\n *   - emp_assert can take additional arguments.  If the assert is triggered, those extra\n *     arguments will be evaluated and printed.\n *   - if NDEBUG -or- EMP_NDEBUG is defined, the expression in emp_assert() is not evaluated.\n *   - if EMP_TDEBUG is defined, emp_assert() goes into test mode and records failures, but\n *     does not abort.  (useful for unit tests of asserts)\n *\n *  Example:\n *\n *     int a = 6;\n *     emp_assert(a==5, a);\n *\n *  When compiled in debug mode (i.e. without the -DNDEBUG flag), this will trigger an assertion\n *  error and print the value of a.\n *\n *\n *  @todo: Add emp_assert_warning() for non-terminating assert.  Should be able to disable with\n *         a command-line option (-DEMP_NO_WARNINGS)\n */\n\n#ifndef EMP_ASSERT_H\n#define EMP_ASSERT_H\n\n#include <iostream>\n#include <string>\n#include <sstream>\n\n#include \"macros.h\"\n\n/// @cond DEFINES\n\n/// If we are in emscripten, make sure to include the header.\n#ifdef EMSCRIPTEN\n#include <emscripten.h>\n#endif\n\n/// NDEBUG and TDEBUG should trigger their EMP equivilents.\n#ifdef NDEBUG\n#define EMP_NDEBUG\n#endif\n\n#ifdef TDEBUG\n#define EMP_TDEBUG\n#endif\n\n\n/// Helper macros used throughout...\n#define emp_assert_TO_PAIR(X) EMP_STRINGIFY(X) , X\n\n/// Turn off all asserts in EMP_NDEBUG\n#ifdef EMP_NDEBUG\nnamespace emp {\n  constexpr bool assert_on = false;\n}\n\n// GROUP 1:   --- Debug OFF ---\n\n/// Ideally, this assert should use the expression (to prevent compiler error), but should not\n/// generate any assembly code.  For now, just make it blank (other options commented out)\n#define emp_assert(...)\n// #define emp_assert(EXPR) ((void) sizeof(EXPR) )\n// #define emp_assert(EXPR, ...) { constexpr bool __emp_assert_tmp = false && (EXPR); (void) __emp_assert_tmp; }\n\n// Asserts to check only when in Emscripten should also be disabled.\n#define emp_emscripten_assert(...)\n\n\n// GROUP 2:   --- Unit Testing ON ---\n#elif defined(EMP_TDEBUG)           // EMP_NDEBUG not set, but EMP_TDEBUG is!\n\nnamespace emp {\n  constexpr bool assert_on = true;\n  struct AssertFailInfo {\n    std::string filename;\n    int line_num;\n    std::string error;\n  };\n  AssertFailInfo assert_fail_info;\n  bool assert_last_fail = false;\n\n  template <typename... EXTRA>\n  bool assert_trigger(std::string filename, size_t line, std::string expr) {\n    emp::assert_fail_info.filename = __FILE__;\n    emp::assert_fail_info.line_num = __LINE__;\n    emp::assert_fail_info.error = expr;\n    emp::assert_last_fail = true;\n\n    return true;\n  }\n\n  void assert_clear() { emp::assert_last_fail = false; }\n}\n\n// Unit Testing ON\n\n#define emp_assert(...)                                                                       \\\n  do {                                                                                        \\\n    !(EMP_GET_ARG_1(__VA_ARGS__, ~)) &&                                                       \\\n    emp::assert_trigger(__FILE__, __LINE__, EMP_STRINGIFY( EMP_GET_ARG_1(__VA_ARGS__, ~) ));  \\\n  } while(0)\n\n// Unit-testing asserts to check only when in Emscripten should depend on if we are in Emscripten\n#ifdef EMSCRIPTEN\n#define emp_emscripten_assert(...) emp_assert(__VA_ARGS__)\n#else\n#define emp_emscripten_assert(...)\n#endif\n\n\n// GROUP 3:   --- Emscripten debug ON ---\n#elif EMSCRIPTEN  // Neither EMP_NDEBUG nor EMP_TDEBUG set, but compiling with Emscripten\n\nnamespace emp {\n  constexpr bool assert_on = true;\n  static int TripAssert() {\n    static int trip_count = 0;\n    return ++trip_count;\n  }\n\n  /// Base case for assert_print...\n  void assert_print(std::stringstream &) { ; }\n\n  /// Print out information about the next variable and recurse...\n  template <typename T, typename... EXTRA>\n  void assert_print(std::stringstream & ss, std::string name, T && val, EXTRA &&... extra) {\n    ss << name << \": [\" << val << \"]\" << std::endl;\n    assert_print(ss, std::forward<EXTRA>(extra)...);\n  }\n\n  template <typename IGNORE, typename... EXTRA>\n  bool assert_trigger(std::string filename, size_t line, std::string expr, IGNORE, EXTRA &&... extra) {\n    std::stringstream ss;\n    ss << \"Assert Error (In \" << filename << \" line \" << line << \"): \" << expr << '\\n';\n    assert_print(ss, std::forward<EXTRA>(extra)...);\n    if (emp::TripAssert() <= 3) {\n      EM_ASM_ARGS({ msg = Pointer_stringify($0); alert(msg); }, ss.str().c_str());\n    }\n\n    // Print the current state of the stack.\n    EM_ASM( console.log('Callstack:\\n' + stackTrace()); );\n    return true;\n  }\n}\n\n// Debug; Emscripten ON\n\n#define emp_assert(...)                                                                       \\\n  do {                                                                                        \\\n    !(EMP_GET_ARG_1(__VA_ARGS__, ~)) &&                                                       \\\n    emp::assert_trigger(__FILE__, __LINE__, EMP_WRAP_ARGS(emp_assert_TO_PAIR, __VA_ARGS__) ); \\\n  } while(0)\n\n// Emscripten asserts should be on since we are in Emscripten\n#define emp_emscripten_assert(...) emp_assert(__VA_ARGS__)\n\n\n// GROUP 3:   --- Debug ON, but Emscripten OFF ---\n#else\n\nnamespace emp {\n  constexpr bool assert_on = true;\n\n  /// Base case for assert_print...\n  void assert_print() { ; }\n\n  /// Print out information about the next variable and recurse...\n  template <typename T, typename... EXTRA>\n  void assert_print(std::string name, T && val, EXTRA &&... extra) {\n    std::cerr << name << \": [\" << val << \"]\" << std::endl;\n    assert_print(std::forward<EXTRA>(extra)...);\n  }\n\n  template <typename IGNORE, typename... EXTRA>\n  bool assert_trigger(std::string filename, size_t line, std::string expr, IGNORE, EXTRA &&... extra) {\n    std::cerr << \"Assert Error (In \" << filename << \" line \" << line\n              <<  \"): \" << expr << std::endl;\n    assert_print(std::forward<EXTRA>(extra)...);\n    return true;\n  }\n}\n\n/// @endcond\n\n// Debug; Not Emscripten\n\n/// Require a specified condition to be true.  If it is false, immediately halt execution.\n/// Note: If NDEBUG is defined, emp_assert() will not do anything.\n#define emp_assert(...)                                                                          \\\n  do {                                                                                           \\\n    !(EMP_GET_ARG_1(__VA_ARGS__, ~)) &&                                                          \\\n    emp::assert_trigger(__FILE__, __LINE__, EMP_WRAP_ARGS(emp_assert_TO_PAIR, __VA_ARGS__) ) &&  \\\n    (abort(), false);                                                                            \\\n  } while(0)\n\n// Emscripten-only asserts should be disabled since we are not in Emscripten\n/// Require a specified condition to be true if this program was compiled to Javascript with Emscripten.\n/// Note: If NDEBUG is defined, emp_emscripten_assert() will not do anything.\n#define emp_emscripten_assert(...) emp_assert(__VA_ARGS__)\n\n/// @cond DEFINES\n\n#endif // NDEBUG\n\n\n#endif // Include guard\n\n/// @endcond\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  Font.h\n *  @brief Maintains basic information about a font to be used in HTML.\n */\n\n\n#ifndef EMP_FONT_H\n#define EMP_FONT_H\n\n#include <string>\n#include <sstream>\n\n#include \"color_map.h\"\n#include \"Style.h\"\n\nnamespace emp {\nnamespace web {\n\n  /// Maintain information about an HTML font.\n  class Font {\n  protected:\n    std::string family;     ///< Font family to use.\n    int size;               ///< Font size (in px) to use.\n    std::string color;      ///< Font color.\n    std::string line_color; ///< Color of lines through the text (underline, linethrough, etc.)\n\n    bool is_bold;           ///< Is this font bold?\n    bool is_italic;         ///< Is this font itaic?\n    bool is_smallcaps;      ///< Should this test be in small caps?\n    bool is_underlined;     ///< Should this text be underlined?\n    bool is_overlined;      ///< Should this text have a line above it?\n    bool is_linethrough;    ///< Should this text have a line through it?\n    bool is_wavy_line;      ///< Should lines be made wavy?\n\n  public:\n    Font(const Font &) = default;\n    Font(Font &&) = default;\n    Font(const std::string & _family=\"Helvetica\", int _size=15,\n\t       const std::string & _color=\"black\", bool _bold=false, bool _italic=false)\n      : family(_family), size(_size), color(_color)\n      , is_bold(_bold), is_italic(_italic), is_smallcaps(false)\n      , is_underlined(false), is_overlined(false), is_linethrough(false), is_wavy_line(false)  { ; }\n    Font(int _size, const std::string & _color=\"black\", bool _bold=false, bool _italic=false)\n      : Font(\"Helvetica\", _size, _color, _bold, _italic)  { ; }\n    ~Font() { ; }\n\n    Font & operator=(const Font &) = default;\n    Font & operator=(Font &&) = default;\n\n    const std::string & GetFamily() const { return family; }\n    int GetSize() const { return size; }\n    const std::string & GetColor() const { return color; }\n    const std::string & GetLineColor() const { return line_color; }\n    bool IsBold() const { return is_bold; }\n    bool IsItalic() const { return is_italic; }\n    bool IsSmallcaps() const { return is_smallcaps; }\n    bool IsUnderlined() const { return is_underlined; }\n    bool IsOverlined() const { return is_overlined; }\n    bool IsStrikethrough() const { return is_linethrough; }\n    bool IsWavyLine() const { return is_wavy_line; }\n    bool HasLine() const { return is_underlined || is_overlined || is_linethrough; }\n\n    Font & SetFamily(const std::string & _family) { family = _family; return *this; }\n    Font & SetSize(int _size) { size = _size; return *this; }\n    Font & SetColor(const std::string & _color) { color = _color; return *this; }\n    Font & SetLineColor(const std::string & _color) { line_color = _color; return *this; }\n    Font & SetBold(bool _in=true) { is_bold = _in; return *this; }\n    Font & SetItalic(bool _in=true) { is_italic = _in; return *this; }\n    Font & SetSmallcaps(bool _in=true) { is_smallcaps = _in; return *this; }\n    Font & SetUnderlined(bool _in = true) { is_underlined = _in; return *this; }\n    Font & SetOverlined(bool _in = true) { is_overlined = _in; return *this; }\n    Font & SetStrikethrough(bool _in = true) { is_linethrough = _in; return *this; }\n    Font & SetWavyLine(bool _in = true) { is_wavy_line = _in; return *this; }\n\n    /// Take a Style object an fill it out based on this font information.\n    void ConfigStyle(Style & style) const {\n      style.Set(\"color\", color);\n      style.Set(\"font-family\", family);\n      style.Set(\"font-size\", to_string(size,\"px\"));\n      if (is_bold) style.Set(\"font-weight\", \"bold\");\n      if (is_italic) style.Set(\"font-style\", \"italic\");\n      if (is_smallcaps) style.Set(\"font-variant\", \"small-caps\");\n      if (HasLine()) {\n        std::string decoration(\"\");\n        if (is_underlined) decoration += \" underline\";\n        if (is_overlined) decoration += \" overline\";\n        if (is_linethrough) decoration += \" line-through\";\n        if (line_color != \"\") { decoration += \" \"; decoration += line_color; }\n        if (is_wavy_line) decoration += \" wavy\";\n        style.Set(\"text-decoration\", decoration);\n      }\n    }\n\n    Style AsStyle() const {\n      Style style;\n      ConfigStyle(style);\n      return style;\n    }\n\n    std::string GetHTMLStart() {\n      std::stringstream ss;\n      ss << \"<span style=\\\"color:\" << color\n         << \"; font-family:\" << family\n         << \"; font-size:\" << size;\n      if (is_bold) ss << \"; font-weight:bold\";\n      if (is_italic) ss << \"; font-style:italic\";\n      if (is_smallcaps) ss << \"; font-variant:small-caps\";\n      if (HasLine()) {\n        ss << \"; text-decoration:\";\n        if (is_underlined) ss << \" underline\";\n        if (is_overlined) ss << \" overline\";\n        if (is_linethrough) ss << \" line-through\";\n        if (line_color != \"\") ss << \" \" << line_color;\n        if (is_wavy_line) ss << \" wavy\";\n      }\n      ss << \"\\\">\";\n      return ss.str();\n    }\n    std::string GetHTMLEnd() { return \"</span>\"; }\n\n    bool operator==(const Font & _in) const {\n      return (family == _in.family)\n        && (size == _in.size)\n        && (color == _in.color)\n        && (line_color == _in.line_color)\n        && (is_bold == _in.is_bold)\n        && (is_italic == _in.is_italic)\n        && (is_smallcaps == _in.is_smallcaps)\n        && (is_underlined == _in.is_underlined)\n        && (is_overlined == _in.is_overlined)\n        && (is_linethrough == _in.is_linethrough)\n        && (is_wavy_line == _in.is_wavy_line)\n        ;\n    }\n    bool operator!=(const Font & _in) const { return !operator==(_in); }\n  };\n\n}\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2018\n *\n *  @file string_utils.h\n *  @brief Simple functions to manipulate strings.\n *  @note Status: RELEASE\n */\n\n\n#ifndef EMP_STRING_UTILS_H\n#define EMP_STRING_UTILS_H\n\n#include <functional>\n#include <initializer_list>\n#include <iostream>\n#include <sstream>\n#include <string>\n\n#include \"../base/vector.h\"\n#include \"../meta/reflection.h\"\n\nnamespace emp {\n\n  /// Return a const reference to an empty string.  This function is useful to implement other\n  /// functions that need to return a const reference for efficiency, but also need a null response.\n\n  static inline const std::string & empty_string() {\n    static std::string empty = \"\";\n    return empty;\n  }\n\n\n  /// Convert a single chararcter to one that uses a proper escape sequence (in a string) if needed.\n  static inline std::string to_escaped_string(char value) {\n    // Start by quickly returning a string if it's easy.\n    std::stringstream ss;\n    if ( (value >= 40 && value < 91) || (value > 96 && value < 127)) {\n      ss << value;\n      return ss.str();\n    }\n    switch (value) {\n    case '\\0': return \"\\\\0\";\n    case 1: return \"\\\\001\";\n    case 2: return \"\\\\002\";\n    case 3: return \"\\\\003\";\n    case 4: return \"\\\\004\";\n    case 5: return \"\\\\005\";\n    case 6: return \"\\\\006\";\n    case '\\a': return \"\\\\a\";  // case  7 (audible bell)\n    case '\\b': return \"\\\\b\";  // case  8 (backspace)\n    case '\\t': return \"\\\\t\";  // case  9 (tab)\n    case '\\n': return \"\\\\n\";  // case 10 (newline)\n    case '\\v': return \"\\\\v\";  // case 11 (vertical tab)\n    case '\\f': return \"\\\\f\";  // case 12 (form feed - new page)\n    case '\\r': return \"\\\\r\";  // case 13 (carriage return)\n    case 14: return \"\\\\016\";\n    case 15: return \"\\\\017\";\n    case 16: return \"\\\\020\";\n    case 17: return \"\\\\021\";\n    case 18: return \"\\\\022\";\n    case 19: return \"\\\\023\";\n    case 20: return \"\\\\024\";\n    case 21: return \"\\\\025\";\n    case 22: return \"\\\\026\";\n    case 23: return \"\\\\027\";\n    case 24: return \"\\\\030\";\n    case 25: return \"\\\\031\";\n    case 26: return \"\\\\032\";\n    case 27: return \"\\\\033\";  // case 27 (ESC), sometimes \\e\n    case 28: return \"\\\\034\";\n    case 29: return \"\\\\035\";\n    case 30: return \"\\\\036\";\n    case 31: return \"\\\\037\";\n\n    case '\\\"': return \"\\\\\\\"\";  // case 34\n    case '\\'': return \"\\\\\\'\";  // case 39\n    case '\\\\': return \"\\\\\\\\\";  // case 92\n    case 127: return \"\\\\177\";  // (delete)\n\n    // case '\\?': return \"\\\\\\?\";\n    default:\n      ss << value;\n      return ss.str();\n    };\n  }\n\n  /// Convert a full string to one that uses proper escape sequences, as needed.\n  static inline std::string to_escaped_string(const std::string & value) {\n    std::stringstream ss;\n    for (char c : value) { ss << to_escaped_string(c); }\n    return ss.str();\n  }\n\n\n  /// Take a value and convert it to a C++-style literal.\n  template <typename LIT_TYPE>\n  inline std::string to_literal(const LIT_TYPE & value) {\n    return std::to_string(value);\n  }\n\n  /// Take a char and convert it to a C++-style literal.\n  static inline std::string to_literal(char value) {\n    std::stringstream ss;\n    ss << \"'\" << to_escaped_string(value) << \"'\";\n    return ss.str();\n  }\n\n  /// Take a string and convert it to a C++-style literal.\n  static inline std::string to_literal(const std::string & value) {\n    // Add quotes to the ends and convert each character.\n    std::stringstream ss;\n    ss << \"\\\"\";\n    for (char c : value) {\n      ss << to_escaped_string(c);\n    }\n    ss << \"\\\"\";\n    return ss.str();\n  }\n\n  /// Convert a string to all uppercase.\n  static inline std::string to_upper(std::string value) {\n    constexpr int char_shift = 'a' - 'A';\n    for (auto & x : value) {\n      if (x >= 'a' && x <= 'z') x = (char) (x - char_shift);\n    }\n    return value;\n  }\n\n  /// Convert a string to all lowercase.\n  static inline std::string to_lower(std::string value) {\n    constexpr int char_shift = 'a' - 'A';\n    for (auto & x : value) {\n      if (x >= 'A' && x <= 'Z') x = (char) (x + char_shift);\n    }\n    return value;\n  }\n\n  // Convert an integer to a roman numeral string.\n  static inline std::string to_roman_numeral(int val, const std::string & prefix=\"\") {\n    std::string ret_string(prefix);\n    if (val < 0) ret_string += to_roman_numeral(-val, \"-\");\n    else if (val > 3999) { ; } // Out of bounds; return a blank;\n    else if (val >= 1000) ret_string += to_roman_numeral(val - 1000, \"M\");\n    else if (val >= 900) ret_string += to_roman_numeral(val - 900, \"CM\");\n    else if (val >= 500) ret_string += to_roman_numeral(val - 500, \"D\");\n    else if (val >= 400) ret_string += to_roman_numeral(val - 400, \"CD\");\n    else if (val >= 100) ret_string += to_roman_numeral(val - 100, \"C\");\n    else if (val >= 90) ret_string += to_roman_numeral(val - 90, \"XC\");\n    else if (val >= 50) ret_string += to_roman_numeral(val - 50, \"L\");\n    else if (val >= 40) ret_string += to_roman_numeral(val - 40, \"XL\");\n    else if (val >= 10) ret_string += to_roman_numeral(val - 10, \"X\");\n    else if (val == 9) ret_string += \"IX\";\n    else if (val >= 5) ret_string += to_roman_numeral(val - 5, \"V\");\n    else if (val == 4) ret_string += \"IV\";\n    else if (val > 0) ret_string += to_roman_numeral(val - 1, \"I\");\n\n    // else we already have it exactly and don't need to return anything.\n    return ret_string;\n  }\n\n\n  /// Determine if a character is whitespace.\n  inline bool is_whitespace(char test_char) {\n    return (test_char == ' ' || test_char == '\\n' || test_char == '\\r' || test_char == '\\t');\n  }\n\n  /// Determine if a character is an uppercase letter.\n  inline bool is_upper_letter(char test_char) {\n    return (test_char >= 'A' && test_char <= 'Z');\n  }\n\n  /// Determine if a character is a lowercase letter.\n  inline bool is_lower_letter(char test_char) {\n    return (test_char >= 'a' && test_char <= 'z');\n  }\n\n  /// Determine if a character is a letter of any kind.\n  inline bool is_letter(char test_char) {\n    return is_upper_letter(test_char) || is_lower_letter(test_char);\n  }\n\n  /// Determine if a character is a digit.\n  inline bool is_digit(char test_char) {\n    return (test_char >= '0' && test_char <= '9');\n  }\n\n  /// Determine if a character is a letter or digit.\n  inline bool is_alphanumeric(char test_char) {\n    return is_letter(test_char) || is_digit(test_char);\n  }\n\n  /// Determine if a character is a letter, digit, or underscore.\n  inline bool is_idchar(char test_char) {\n    return is_alphanumeric(test_char) || test_char == '_';\n  }\n\n  /// Determine if a character is in a set of characters (represented as a string)\n  static inline bool is_one_of(char test_char, const std::string & char_set) {\n    for (char x : char_set) if (test_char == x) return true;\n    return false;\n  }\n\n  /// Determine if a string is composed only of a set of characters (represented as a string)\n  static inline bool is_composed_of(const std::string & test_str, const std::string & char_set) {\n    for (char x : test_str) if (!is_one_of(x, char_set)) return false;\n    return true;\n  }\n\n  /// Determine if there is whitespace anywhere in a string.\n  inline bool has_whitespace(const std::string & test_str) {\n    for (char c : test_str) if (is_whitespace(c)) return true;\n    return false;\n  }\n\n  /// Determine if there are any uppercase letters in a string.\n  inline bool has_upper_letter(const std::string & test_str) {\n    for (char c : test_str) if (is_upper_letter(c)) return true;\n    return false;\n  }\n\n  /// Determine if there are any lowercase letters in a string.\n  inline bool has_lower_letter(const std::string & test_str) {\n    for (char c : test_str) if (is_lower_letter(c)) return true;\n    return false;\n  }\n\n  /// Determine if there are any letters in a string.\n  inline bool has_letter(const std::string & test_str) {\n    for (char c : test_str) if (is_letter(c)) return true;\n    return false;\n  }\n\n  /// Determine if there are any digits in a string.\n  inline bool has_digit(const std::string & test_str) {\n    for (char c : test_str) if (is_digit(c)) return true;\n    return false;\n  }\n\n  /// Determine if there are any letters or digits anywhere in a string.\n  inline bool has_alphanumeric(const std::string & test_str) {\n    for (char c : test_str) if (is_alphanumeric(c)) return true;\n    return false;\n  }\n\n  /// Determine if there are any letters, digit, or underscores anywhere in a string.\n  inline bool has_idchar(const std::string & test_str) {\n    for (char c : test_str) if (is_idchar(c)) return true;\n    return false;\n  }\n\n  /// Determine if a specified set of characters appears anywhere in a string.\n  static inline bool has_one_of(const std::string & test_str, const std::string & char_set) {\n    for (char c : test_str) if (is_one_of(c, char_set)) return true;\n    return false;\n  }\n\n\n  /// If no functions are provided to is_valid(), always return false as base case.\n  inline bool is_valid(char test_char) { return false; }\n\n  /// Determine if a character passes any of the test functions provided.\n  template <typename... FUNS>\n  inline bool is_valid(char test_char, std::function<bool(char)> fun1, FUNS... funs) {\n    return fun1(test_char) || is_valid(test_char, funs...);\n  }\n\n  /// For a string to be valid, each character must pass at least one provided function.\n  template <typename... FUNS>\n  static inline bool is_valid(const std::string & test_str, FUNS... funs) {\n    for (char x : test_str) if ( !is_valid(x, funs...) ) return false;\n    return true;\n  }\n\n\n  /// Pop a segment from the beginning of a string as another string, shortening original.\n  static inline std::string string_pop_fixed(std::string & in_string, std::size_t end_pos, size_t delim_size=0)\n  {\n    std::string out_string = \"\";\n    if (end_pos == 0);                        // Not popping anything!\n    else if (end_pos == std::string::npos) {  // Popping whole string.\n      out_string = in_string;\n      in_string = \"\";\n    }\n    else {\n      out_string = in_string.substr(0, end_pos);  // Copy up to the deliminator for ouput\n      in_string.erase(0, end_pos + delim_size);   // Delete output string AND deliminator\n    }\n\n    return out_string;\n  }\n\n  /// Get a segment from the beginning of a string as another string, leaving original untouched.\n  static inline std::string string_get_range(const std::string & in_string, std::size_t start_pos,\n                                             std::size_t end_pos) {\n    if (end_pos == std::string::npos) end_pos = in_string.size() - start_pos;\n    return in_string.substr(start_pos, end_pos);\n  }\n\n  /// Remove a prefix of the input string (up to a specified delimeter) and return it.  If the\n  /// delimeter is not found, return the entire input string and clear it.\n  inline std::string string_pop(std::string & in_string, const char delim=' ') {\n    return string_pop_fixed(in_string, in_string.find(delim), 1);\n  }\n\n  /// Return a prefix of the input string (up to a specified delimeter), but do not modify it.\n  /// If the delimeter is not found, return the entire input string.\n  inline std::string string_get(const std::string & in_string, const char delim, size_t start_pos=0) {\n    return string_get_range(in_string, start_pos, in_string.find(delim, start_pos));\n  }\n\n  /// Remove a prefix of the input string (up to any of a specified set of delimeters) and\n  /// return it.  If the delimeter is not found, return the entire input string and clear it.\n  inline std::string string_pop(std::string & in_string, const std::string & delim_set) {\n    return string_pop_fixed(in_string, in_string.find_first_of(delim_set), 1);\n  }\n\n  /// Return a prefix of the input string (up to any of a specified set of delimeters), but do not\n  /// modify it. If the delimeter is not found, return the entire input string.\n  inline std::string string_get(const std::string & in_string, const std::string & delim_set, size_t start_pos=0) {\n    return string_get_range(in_string, start_pos, in_string.find_first_of(delim_set, start_pos));\n  }\n\n  /// Remove a prefix of a string, up to the first whitespace, and return it.\n  inline std::string string_pop_word(std::string & in_string) {\n    // Whitespace = ' ' '\\n' '\\r' or '\\t'\n    return string_pop(in_string, \" \\n\\r\\t\");\n  }\n\n  /// Return a prefix of a string, up to the first whitespace (do not modify the original string)\n  inline std::string string_get_word(const std::string & in_string, size_t start_pos=0) {\n    // Whitespace = ' ' '\\n' '\\r' or '\\t'\n    return string_get(in_string, \" \\n\\r\\t\", start_pos);\n  }\n\n  /// Remove a prefix of a string, up to the first newline, and return it.\n  inline std::string string_pop_line(std::string & in_string) {\n    return string_pop(in_string, '\\n');\n  }\n\n  /// Return a prefix of a string, up to the first newline (do not modify the original string)\n  inline std::string string_get_line(const std::string & in_string, size_t start_pos=0) {\n    return string_get(in_string, '\\n', start_pos);\n  }\n\n  /// Remove all whitespace at the beginning of a string.  Return the whitespace removed.\n  inline std::string left_justify(std::string & in_string) {\n    return string_pop_fixed(in_string, in_string.find_first_not_of(\" \\n\\r\\t\"));\n  }\n\n  /// Remove all whitespace at the end of a string.\n  inline void right_justify(std::string & in_string) {\n    // @CAO *very* inefficient at the moment.\n    while (is_whitespace(in_string.back())) in_string.pop_back();\n  }\n\n  /// Remove instances of characters from file.\n  static inline void remove_chars(std::string & in_string, std::string chars) {\n    size_t cur_pos = 0;\n    for (size_t i = 0; i < in_string.size(); i++) {\n      if (is_one_of(in_string[i], chars)) continue;\n      in_string[cur_pos++] = in_string[i];\n    }\n    in_string.resize(cur_pos);\n  }\n\n  /// Every time one or more whitespace characters appear replace them with a single space.\n  static inline void compress_whitespace(std::string & in_string) {\n    const size_t strlen = in_string.size();\n    bool last_whitespace = true;          // Remove whitespace from beginning of line.\n    size_t pos = 0;\n\n    for (size_t i = 0; i < strlen; i++) {\n      if (is_whitespace(in_string[i])) {  // This char is whitespace\n        if (last_whitespace) continue;\n        in_string[pos++] = ' ';\n        last_whitespace = true;\n      }\n      else {  // Not whitespace\n        in_string[pos++] = in_string[i];\n        last_whitespace = false;\n      }\n    }\n\n    if (pos && last_whitespace) pos--;   // If the end of the line is whitespace, remove it.\n\n    in_string.resize(pos);\n  }\n\n  /// Remove all whitespace from anywhere within a string.\n  static inline void remove_whitespace(std::string & in_string) {\n    const size_t strlen = in_string.size();\n    size_t pos = 0;\n\n    for (size_t i = 0; i < strlen; i++) {\n      if (is_whitespace(in_string[i])) continue;\n      in_string[pos++] = in_string[i];\n    }\n\n    in_string.resize(pos);\n  }\n\n  /// Remove all characters from a string except letters, numbers, and whitespace.\n  static inline void remove_punctuation(std::string & in_string) {\n    const size_t strlen = in_string.size();\n    size_t pos = 0;\n\n    for (size_t i = 0; i < strlen; i++) {\n      const char cur_char = in_string[i];\n      if (is_alphanumeric(cur_char) || is_whitespace(cur_char)) {\n        in_string[pos++] = cur_char;\n      }\n    }\n\n    in_string.resize(pos);\n  }\n\n\n  /// Cut up a string based on the provided delimitor; fill them in to the provided vector.\n  static inline void slice(const std::string & in_string, emp::vector<std::string> & out_set,\n                           char delim='\\n') {\n    const size_t test_size = in_string.size();\n\n    // Count produced strings\n    size_t out_count = 0;\n    size_t pos = 0;\n    while (pos < test_size) {\n      while (pos < test_size && in_string[pos] != delim) pos++;\n      pos++; // Skip over deliminator\n      out_count++;  // Increment for each delim plus once at the end (so once if no delims).\n    }\n\n    // And copy over the strings\n    out_set.resize(out_count);\n    pos = 0;\n    size_t string_id = 0;\n    while (pos < test_size) {\n      out_set[string_id] = \"\";\n      while (pos < test_size && in_string[pos] != delim) {\n        out_set[string_id] += in_string[pos];\n        pos++;\n      }\n      pos++;        // Skip over any final deliminator\n      string_id++;  // Move to the next sub-string.\n    }\n\n  }\n\n  /// Slice a string without passing in result vector (may be less efficient).\n  static inline emp::vector<std::string> slice(const std::string & in_string, char delim='\\n') {\n    emp::vector<std::string> result;\n    slice(in_string, result, delim);\n    return result;\n  }\n\n  /// @cond TEMPLATES\n\n  // The next functions are not efficient, but they will take any number of inputs and\n  // dynamically convert them all into a single, concatanated strings or stringstreams.\n\n  namespace internal {\n    inline void append_sstream(std::stringstream & ss) { (void) ss; }\n\n    template <typename TYPE, typename... OTHER_TYPES>\n    static void append_sstream(std::stringstream & ss, TYPE value, OTHER_TYPES... other_values) {\n      ss << value;\n      append_sstream(ss, other_values...);\n    }\n\n    // Give mutliple implmentations of to_string_impl... if we can append quickly, do so!!\n    template <typename T1, typename T2, typename... EXTRA_TYPES>\n    inline std::string to_string_impl(int, T1 val1, T2 val2, EXTRA_TYPES... extra_values) {\n      std::stringstream ss;\n      append_sstream(ss, val1, val2, extra_values...);\n      return ss.str();\n    }\n\n    // If std::to_string knows how to handle the case use it!\n    template <typename T>\n    inline auto to_string_impl(bool, T val) -> decltype(std::to_string(val))\n    { return std::to_string(val); }\n\n    // If there's another single POD entry, we can convert it manually and pass the result back.\n    inline std::string to_string_impl(bool, const std::string & s) { return s; }\n    inline std::string to_string_impl(bool, char c) { return std::string(1,c); }\n    inline std::string to_string_impl(bool, unsigned char c) { return std::string(1,(char)c); }\n    inline std::string to_string_impl(bool, char* str) { return std::string(str); }\n\n    // Operate on std::containers\n    template <typename T>\n    inline typename emp::sfinae_decoy<std::string, typename T::value_type>\n    to_string_impl(bool, T container) {\n      std::stringstream ss;\n      ss << \"[ \";\n      for (const auto & el : container) {\n        ss << to_string_impl(true, el);\n        ss << \" \";\n      }\n      ss << \"]\";\n      return ss.str();\n    }\n  }\n\n  /// @endcond\n\n  /// This function does its very best to convert everything it's to a string. Takes any number\n  /// of arguments and returns a single string containing all of them concatenated. Objects can be\n  /// any normal (POD) data type, container, or anything that can be passed into a stringstream.\n  template <typename... ALL_TYPES>\n  inline std::string to_string(ALL_TYPES &&... all_values) {\n    return internal::to_string_impl(true, std::forward<ALL_TYPES>(all_values)...);\n  }\n\n  /// This function tries to convert a string into any type you're looking for...  You just\n  /// need to specify the out type as the template argument.\n  template <typename T>\n  inline T from_string(const std::string & str) {\n    std::stringstream ss;\n    ss << str;\n    T out_val;\n    ss >> out_val;\n    return out_val;\n  }\n\n  namespace internal {\n    static inline void _from_string(std::stringstream &) { ; }\n\n    template <typename T, typename... Ts>\n    void _from_string(std::stringstream & ss, T & arg1, Ts... extra_args) {\n      ss >> arg1;\n      _from_string(ss, extra_args...);\n    }\n  }\n\n  /// The from_string() function can also take multiple args instead of a return.\n  template <typename... Ts>\n  inline void from_string(const std::string & str, Ts &... args) {\n    std::stringstream ss;\n    ss << str;\n    internal::_from_string(ss, args...);\n  }\n\n  /// The from_strings() function takes a vector of strings and convets them into a vector\n  /// of the appropriate type.\n  template <typename T>\n  inline emp::vector<T> from_strings(const emp::vector<std::string> & string_v) {\n    emp::vector<T> vals(string_v.size());\n    for (size_t i = 0; i < string_v.size(); i++) {\n      vals[i] = from_string<T>(string_v[i]);\n    }\n    return vals;\n  }\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  Style.h\n *  @brief A CSS class for tracking font style, etc.\n */\n\n\n#ifndef EMP_WEB_STYLE_H\n#define EMP_WEB_STYLE_H\n\n\n#ifdef EMSCRIPTEN\n#include <emscripten.h>\n#endif\n\n#include \"../tools/string_utils.h\"\n\n#include <map>\n#include <string>\n\nnamespace emp {\nnamespace web {\n\n  ///  Class to maintain a map of setting names to values that can be easily ported\n  ///  over to JavaScript.  A companial class, Attributes, also exists.\n  class Style {\n  private:\n    std::map<std::string, std::string> settings;  ///< CSS Setting values being tracked.\n\n  public:\n    Style() { ; }\n    Style(const Style &) = default;\n    Style(Style &&) = default;\n    Style & operator=(const Style &) = default;\n    Style & operator=(Style &&) = default;\n\n    /// Return a count of the number of settings that have been set.\n    size_t GetSize() const { return settings.size(); }\n\n    Style & DoSet(const std::string & in_set, const std::string & in_val) {\n      settings[in_set] = in_val;\n      return *this;\n    }\n\n    /// Record that setting \"s\" is set to value \"v\" (converted to string) and return this object.\n    template <typename SET_TYPE>\n    Style & Set(const std::string & s, SET_TYPE v) {\n      return DoSet(s, emp::to_string(v));\n    }\n\n    /// Set all values from in_css here as well.  Return this object.\n    Style & Insert(const Style & in_css) {\n      settings.insert(in_css.settings.begin(), in_css.settings.end());\n      return *this;\n    }\n\n    /// Return true/false based on whether \"setting\" has been given a value in this Style.\n    bool Has(const std::string & setting) const {\n      return settings.find(setting) != settings.end();\n    }\n\n    /// Return the (string) value of \"setting\" that has been recorded in this Style.\n    const std::string & Get(const std::string & setting) const {\n      auto it = settings.find(setting);\n      return (it == settings.end()) ? emp::empty_string() : it->second;\n    }\n\n    const std::map<std::string, std::string> & GetMap() const {\n      return settings;\n    }\n\n    /// Remove all setting values.\n    void Clear() { settings.clear(); }\n\n    /// Remove a specific setting value.\n    void Remove(const std::string & setting) {\n      settings.erase(setting);\n    }\n\n    /// Apply ALL of the style settings to a specified widget.\n    void Apply(const std::string & widget_id) {\n      // Stop immediately if nothing to set.\n      if (settings.size() == 0) return;\n\n      // Find the current object only once.\n#ifdef EMSCRIPTEN\n      EM_ASM_ARGS({\n          var id = Pointer_stringify($0);\n          emp_i.cur_obj = $( '#' + id );\n        }, widget_id.c_str());\n#endif\n\n      for (auto css_pair : settings) {\n        if (css_pair.second == \"\") continue; // Ignore empty entries.\n#ifdef EMSCRIPTEN\n        EM_ASM_ARGS({\n            var name = Pointer_stringify($0);\n            var value = Pointer_stringify($1);\n            emp_i.cur_obj.css( name, value);\n          }, css_pair.first.c_str(), css_pair.second.c_str());\n#else\n        std::cout << \"Setting '\" << widget_id << \"' attribute '\" << css_pair.first\n                  << \"' to '\" << css_pair.second << \"'.\";\n#endif\n      }\n    }\n\n    /// Apply only a SPECIFIC style setting from the setting library.\n    void Apply(const std::string & widget_id, const std::string & setting) {\n      emp_assert(Has(setting));\n\n#ifdef EMSCRIPTEN\n      EM_ASM_ARGS({\n          var id = Pointer_stringify($0);\n          var setting = Pointer_stringify($1);\n          var value = Pointer_stringify($2);\n          $( '#' + id ).css( setting, value);\n        }, widget_id.c_str(), setting.c_str(), settings[setting].c_str());\n#else\n      std::cout << \"Setting '\" << widget_id << \"' attribute '\" << setting\n                << \"' to '\" << settings[setting] << \"'.\";\n#endif\n    }\n\n    /// Apply onlay a SPECIFIC style setting with a specifid value!\n    static void Apply(const std::string & widget_id, const std::string & setting,\n                      const std::string & value) {\n#ifdef EMSCRIPTEN\n      EM_ASM_ARGS({\n          var id = Pointer_stringify($0);\n          var setting = Pointer_stringify($1);\n          var value = Pointer_stringify($2);\n          $( '#' + id ).css( setting, value);\n        }, widget_id.c_str(), setting.c_str(), value.c_str());\n#else\n      std::cout << \"Setting '\" << widget_id << \"' attribute '\" << setting\n                << \"' to '\" << value << \"'.\";\n#endif\n    }\n\n    /// Have any settings be set?\n    operator bool() const { return (bool) settings.size(); }\n  };\n\n\n}\n}\n\n\n#endif\n","// -*- C++ -*-\n//===------------------------- streambuf ----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_STEAMBUF\n#define _LIBCPP_STEAMBUF\n\n/*\n    streambuf synopsis\n\nnamespace std\n{\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass basic_streambuf\n{\npublic:\n    // types:\n    typedef charT char_type;\n    typedef traits traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    virtual ~basic_streambuf();\n\n    // 27.6.2.2.1 locales:\n    locale pubimbue(const locale& loc);\n    locale getloc() const;\n\n    // 27.6.2.2.2 buffer and positioning:\n    basic_streambuf* pubsetbuf(char_type* s, streamsize n);\n    pos_type pubseekoff(off_type off, ios_base::seekdir way,\n                        ios_base::openmode which = ios_base::in | ios_base::out);\n    pos_type pubseekpos(pos_type sp,\n                        ios_base::openmode which = ios_base::in | ios_base::out);\n    int pubsync();\n\n    // Get and put areas:\n    // 27.6.2.2.3 Get area:\n    streamsize in_avail();\n    int_type snextc();\n    int_type sbumpc();\n    int_type sgetc();\n    streamsize sgetn(char_type* s, streamsize n);\n\n    // 27.6.2.2.4 Putback:\n    int_type sputbackc(char_type c);\n    int_type sungetc();\n\n    // 27.6.2.2.5 Put area:\n    int_type sputc(char_type c);\n    streamsize sputn(const char_type* s, streamsize n);\n\nprotected:\n    basic_streambuf();\n    basic_streambuf(const basic_streambuf& rhs);\n    basic_streambuf& operator=(const basic_streambuf& rhs);\n    void swap(basic_streambuf& rhs);\n\n    // 27.6.2.3.2 Get area:\n    char_type* eback() const;\n    char_type* gptr() const;\n    char_type* egptr() const;\n    void gbump(int n);\n    void setg(char_type* gbeg, char_type* gnext, char_type* gend);\n\n    // 27.6.2.3.3 Put area:\n    char_type* pbase() const;\n    char_type* pptr() const;\n    char_type* epptr() const;\n    void pbump(int n);\n    void setp(char_type* pbeg, char_type* pend);\n\n    // 27.6.2.4 virtual functions:\n    // 27.6.2.4.1 Locales:\n    virtual void imbue(const locale& loc);\n\n    // 27.6.2.4.2 Buffer management and positioning:\n    virtual basic_streambuf* setbuf(char_type* s, streamsize n);\n    virtual pos_type seekoff(off_type off, ios_base::seekdir way,\n                             ios_base::openmode which = ios_base::in | ios_base::out);\n    virtual pos_type seekpos(pos_type sp,\n                             ios_base::openmode which = ios_base::in | ios_base::out);\n    virtual int sync();\n\n    // 27.6.2.4.3 Get area:\n    virtual streamsize showmanyc();\n    virtual streamsize xsgetn(char_type* s, streamsize n);\n    virtual int_type underflow();\n    virtual int_type uflow();\n\n    // 27.6.2.4.4 Putback:\n    virtual int_type pbackfail(int_type c = traits_type::eof());\n\n    // 27.6.2.4.5 Put area:\n    virtual streamsize xsputn(const char_type* s, streamsize n);\n    virtual int_type overflow (int_type c = traits_type::eof());\n};\n\n}  // std\n\n*/\n\n#include <__config>\n#include <iosfwd>\n#include <ios>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_streambuf\n{\npublic:\n    // types:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    virtual ~basic_streambuf();\n\n    // 27.6.2.2.1 locales:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    locale pubimbue(const locale& __loc) {\n        imbue(__loc);\n        locale __r = __loc_;\n        __loc_ = __loc;\n        return __r;\n    }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    locale getloc() const { return __loc_; }\n\n    // 27.6.2.2.2 buffer and positioning:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_streambuf* pubsetbuf(char_type* __s, streamsize __n)\n    { return setbuf(__s, __n); }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    pos_type pubseekoff(off_type __off, ios_base::seekdir __way,\n                        ios_base::openmode __which = ios_base::in | ios_base::out)\n    { return seekoff(__off, __way, __which); }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    pos_type pubseekpos(pos_type __sp,\n                        ios_base::openmode __which = ios_base::in | ios_base::out)\n    { return seekpos(__sp, __which); }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    int pubsync() { return sync(); }\n\n    // Get and put areas:\n    // 27.6.2.2.3 Get area:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    streamsize in_avail() {\n        if (__ninp_ < __einp_)\n            return static_cast<streamsize>(__einp_ - __ninp_);\n        return showmanyc();\n    }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    int_type snextc() {\n        if (sbumpc() == traits_type::eof())\n            return traits_type::eof();\n        return sgetc();\n    }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    int_type sbumpc() {\n        if (__ninp_ == __einp_)\n            return uflow();\n        return traits_type::to_int_type(*__ninp_++);\n    }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    int_type sgetc() {\n        if (__ninp_ == __einp_)\n            return underflow();\n        return traits_type::to_int_type(*__ninp_);\n    }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    streamsize sgetn(char_type* __s, streamsize __n)\n    { return xsgetn(__s, __n); }\n\n    // 27.6.2.2.4 Putback:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    int_type sputbackc(char_type __c) {\n        if (__binp_ == __ninp_ || !traits_type::eq(__c, __ninp_[-1]))\n            return pbackfail(traits_type::to_int_type(__c));\n        return traits_type::to_int_type(*--__ninp_);\n    }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    int_type sungetc() {\n        if (__binp_ == __ninp_)\n          return pbackfail();\n        return traits_type::to_int_type(*--__ninp_);\n    }\n\n    // 27.6.2.2.5 Put area:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    int_type sputc(char_type __c) {\n        if (__nout_ == __eout_)\n            return overflow(traits_type::to_int_type(__c));\n        *__nout_++ = __c;\n        return traits_type::to_int_type(__c);\n    }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    streamsize sputn(const char_type* __s, streamsize __n)\n    { return xsputn(__s, __n); }\n\nprotected:\n    basic_streambuf();\n    basic_streambuf(const basic_streambuf& __rhs);\n    basic_streambuf& operator=(const basic_streambuf& __rhs);\n    void swap(basic_streambuf& __rhs);\n\n    // 27.6.2.3.2 Get area:\n    _LIBCPP_ALWAYS_INLINE char_type* eback() const {return __binp_;}\n    _LIBCPP_ALWAYS_INLINE char_type* gptr()  const {return __ninp_;}\n    _LIBCPP_ALWAYS_INLINE char_type* egptr() const {return __einp_;}\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void gbump(int __n) { __ninp_ += __n; }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void setg(char_type* __gbeg, char_type* __gnext, char_type* __gend) {\n        __binp_ = __gbeg;\n        __ninp_ = __gnext;\n        __einp_ = __gend;\n    }\n\n    // 27.6.2.3.3 Put area:\n    _LIBCPP_ALWAYS_INLINE char_type* pbase() const {return __bout_;}\n    _LIBCPP_ALWAYS_INLINE char_type* pptr()  const {return __nout_;}\n    _LIBCPP_ALWAYS_INLINE char_type* epptr() const {return __eout_;}\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void pbump(int __n) { __nout_ += __n; }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void setp(char_type* __pbeg, char_type* __pend) {\n        __bout_ = __nout_ = __pbeg;\n        __eout_ = __pend;\n    }\n\n    // 27.6.2.4 virtual functions:\n    // 27.6.2.4.1 Locales:\n    virtual void imbue(const locale& __loc);\n\n    // 27.6.2.4.2 Buffer management and positioning:\n    virtual basic_streambuf* setbuf(char_type* __s, streamsize __n);\n    virtual pos_type seekoff(off_type __off, ios_base::seekdir __way,\n                             ios_base::openmode __which = ios_base::in | ios_base::out);\n    virtual pos_type seekpos(pos_type __sp,\n                             ios_base::openmode __which = ios_base::in | ios_base::out);\n    virtual int sync();\n\n    // 27.6.2.4.3 Get area:\n    virtual streamsize showmanyc();\n    virtual streamsize xsgetn(char_type* __s, streamsize __n);\n    virtual int_type underflow();\n    virtual int_type uflow();\n\n    // 27.6.2.4.4 Putback:\n    virtual int_type pbackfail(int_type __c = traits_type::eof());\n\n    // 27.6.2.4.5 Put area:\n    virtual streamsize xsputn(const char_type* __s, streamsize __n);\n    virtual int_type overflow(int_type __c = traits_type::eof());\n\nprivate:\n    locale __loc_;\n    char_type* __binp_;\n    char_type* __ninp_;\n    char_type* __einp_;\n    char_type* __bout_;\n    char_type* __nout_;\n    char_type* __eout_;\n};\n\ntemplate <class _CharT, class _Traits>\nbasic_streambuf<_CharT, _Traits>::~basic_streambuf()\n{\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_streambuf<_CharT, _Traits>::basic_streambuf()\n    : __binp_(0),\n      __ninp_(0),\n      __einp_(0),\n      __bout_(0),\n      __nout_(0),\n      __eout_(0)\n{\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_streambuf<_CharT, _Traits>::basic_streambuf(const basic_streambuf& __sb)\n    : __loc_(__sb.__loc_),\n      __binp_(__sb.__binp_),\n      __ninp_(__sb.__ninp_),\n      __einp_(__sb.__einp_),\n      __bout_(__sb.__bout_),\n      __nout_(__sb.__nout_),\n      __eout_(__sb.__eout_)\n{\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_streambuf<_CharT, _Traits>&\nbasic_streambuf<_CharT, _Traits>::operator=(const basic_streambuf& __sb)\n{\n    __loc_ = __sb.__loc_;\n    __binp_ = __sb.__binp_;\n    __ninp_ = __sb.__ninp_;\n    __einp_ = __sb.__einp_;\n    __bout_ = __sb.__bout_;\n    __nout_ = __sb.__nout_;\n    __eout_ = __sb.__eout_;\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_streambuf<_CharT, _Traits>::swap(basic_streambuf& __sb)\n{\n    _VSTD::swap(__loc_, __sb.__loc_);\n    _VSTD::swap(__binp_, __sb.__binp_);\n    _VSTD::swap(__ninp_, __sb.__ninp_);\n    _VSTD::swap(__einp_, __sb.__einp_);\n    _VSTD::swap(__bout_, __sb.__bout_);\n    _VSTD::swap(__nout_, __sb.__nout_);\n    _VSTD::swap(__eout_, __sb.__eout_);\n}\n\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_streambuf<_CharT, _Traits>::imbue(const locale&)\n{\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_streambuf<_CharT, _Traits>*\nbasic_streambuf<_CharT, _Traits>::setbuf(char_type*, streamsize)\n{\n    return this;\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_streambuf<_CharT, _Traits>::pos_type\nbasic_streambuf<_CharT, _Traits>::seekoff(off_type, ios_base::seekdir,\n                                          ios_base::openmode)\n{\n    return pos_type(off_type(-1));\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_streambuf<_CharT, _Traits>::pos_type\nbasic_streambuf<_CharT, _Traits>::seekpos(pos_type, ios_base::openmode)\n{\n    return pos_type(off_type(-1));\n}\n\ntemplate <class _CharT, class _Traits>\nint\nbasic_streambuf<_CharT, _Traits>::sync()\n{\n    return 0;\n}\n\ntemplate <class _CharT, class _Traits>\nstreamsize\nbasic_streambuf<_CharT, _Traits>::showmanyc()\n{\n    return 0;\n}\n\ntemplate <class _CharT, class _Traits>\nstreamsize\nbasic_streambuf<_CharT, _Traits>::xsgetn(char_type* __s, streamsize __n)\n{\n    const int_type __eof = traits_type::eof();\n    int_type __c;\n    streamsize __i = 0;\n    while(__i < __n)\n    {\n        if (__ninp_ < __einp_)\n        {\n            const streamsize __len = _VSTD::min(__einp_ - __ninp_, __n - __i);\n            traits_type::copy(__s, __ninp_, __len);\n            __s +=  __len;\n            __i +=  __len;\n            this->gbump(__len);\n        }\n        else if ((__c = uflow()) != __eof)\n        {\n            *__s = traits_type::to_char_type(__c);\n            ++__s;\n            ++__i;\n        }\n        else\n            break;\n    }\n    return __i;\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_streambuf<_CharT, _Traits>::int_type\nbasic_streambuf<_CharT, _Traits>::underflow()\n{\n    return traits_type::eof();\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_streambuf<_CharT, _Traits>::int_type\nbasic_streambuf<_CharT, _Traits>::uflow()\n{\n    if (underflow() == traits_type::eof())\n        return traits_type::eof();\n    return traits_type::to_int_type(*__ninp_++);\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_streambuf<_CharT, _Traits>::int_type\nbasic_streambuf<_CharT, _Traits>::pbackfail(int_type)\n{\n    return traits_type::eof();\n}\n\ntemplate <class _CharT, class _Traits>\nstreamsize\nbasic_streambuf<_CharT, _Traits>::xsputn(const char_type* __s, streamsize __n)\n{\n    streamsize __i = 0;\n    int_type __eof = traits_type::eof();\n    while( __i < __n)\n    {\n        if (__nout_ >= __eout_)\n        {\n            if (overflow(traits_type::to_int_type(*__s)) == __eof)\n                break;\n            ++__s;\n            ++__i;\n        }\n        else\n        {\n            streamsize __chunk_size = _VSTD::min(__eout_ - __nout_, __n - __i);\n            traits_type::copy(__nout_, __s, __chunk_size);\n            __nout_ += __chunk_size;\n            __s     += __chunk_size;\n            __i     += __chunk_size;\n        }\n    }\n    return __i;\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_streambuf<_CharT, _Traits>::int_type\nbasic_streambuf<_CharT, _Traits>::overflow(int_type)\n{\n    return traits_type::eof();\n}\n\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_streambuf<char>)\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_streambuf<wchar_t>)\n\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_ios<char>)\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_ios<wchar_t>)\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_STEAMBUF\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  Div.h\n *  @note Formerly called Slate.h\n *  @brief Div Widgets maintain an ordered collection of other widgets in an HTML div.\n *\n *  When printed to the web page, these internal widgets are presented in order.\n *\n *  To create a Div:\n *\n *    emp::web::Div my_div(\"name\");\n *\n *  To use a Div:\n *\n *    my_div << \"Add this text!\"\n *           << emp::web::Image(\"my_image.png\")\n *           << \"<br>\";\n *\n *  To register a Div in a Document:\n *\n *    my_doc << my_div;\n *\n *  @todo Should we move all widget_dict info into Document?\n */\n\n#ifndef EMP_WEB_DIV_H\n#define EMP_WEB_DIV_H\n\n\n#include \"Animate.h\"\n#include \"Text.h\"\n#include \"Widget.h\"\n\n#include \"init.h\"\n\nnamespace emp {\nnamespace web {\n\n  class Button;\n  class Canvas;\n  class Image;\n  class Selector;\n  class Div;\n  class Table;\n\n  namespace internal {\n\n    class TableInfo;\n    class DivInfo : public internal::WidgetInfo {\n      friend Div; friend TableInfo;\n    protected:\n      double scroll_top;                              ///< Where should div scroll to? (0.0 to 1.0)\n      emp::vector<Widget> m_children;                 ///< Widgets contained in this one.\n      bool append_ok;                                 ///< Can we add more children?\n      bool text_append;                               ///< Can we append to a current text widget?\n      std::map<std::string, Widget> widget_dict;      ///< By-name lookup for descendent widgets\n      std::map<std::string, web::Animate *> anim_map; ///< Streamline creation of Animate objects.\n\n      DivInfo(const std::string & in_id=\"\")\n        : internal::WidgetInfo(in_id), scroll_top(0.0), append_ok(true), text_append(false)\n        , widget_dict(), anim_map()\n      {\n        emp::Initialize();\n      }\n      DivInfo(const DivInfo &) = delete;              // No copies of INFO allowed\n      DivInfo & operator=(const DivInfo &) = delete;  // No copies of INFO allowed\n      virtual ~DivInfo() {\n        for (auto & p : anim_map) delete p.second;    // Delete this document's animations.\n      }\n\n      std::string GetTypeName() const override { return \"DivInfo\"; }\n\n      bool IsRegistered(const std::string & test_name) const {\n        return (widget_dict.find(test_name) != widget_dict.end());\n      }\n\n      Widget & GetRegistered(const std::string & find_name) {\n        emp_assert(IsRegistered(find_name), find_name, widget_dict.size());\n        return widget_dict[find_name];\n      }\n\n      void Register_recurse(Widget & new_widget) override {\n        emp_assert(IsRegistered(new_widget.GetID()) == false, new_widget.GetID());\n        widget_dict[new_widget.GetID()] = new_widget;     // Track widget by name\n        if (parent) parent->Register_recurse(new_widget); // Also register in parent, if available\n      }\n\n      // Register is used so we can lookup classes by name.\n      void Register(Widget & new_widget) override {\n        Register_recurse(new_widget);          // Register THIS widget here an in ancestors.\n        new_widget->RegisterChildren( this );  // Register CHILD widgets, if any\n      }\n\n      void RegisterChildren(DivInfo * regestrar) override {\n        for (Widget & child : m_children) regestrar->Register(child);\n      }\n\n      void Unregister_recurse(Widget & old_widget) override {\n        emp_assert(IsRegistered(old_widget.GetID()) == true, old_widget.GetID());\n        widget_dict.erase(old_widget.GetID());\n        if (parent) parent->Unregister_recurse(old_widget); // Unregister in parent, if available\n      }\n\n      void Unregister(Widget & old_widget) override {\n        Unregister_recurse(old_widget);          // Unregister this node from all above.\n        old_widget->UnregisterChildren( this );  // Unregister all children, if any.\n        old_widget->parent = nullptr;\n        old_widget.Deactivate(false);\n      }\n\n      void UnregisterChildren(DivInfo * regestrar) override {\n        for (Widget & child : m_children) regestrar->Unregister(child);\n      }\n\n      void ClearChildren() {\n        // Unregister all children and then delete links to them.\n        for (Widget & child : m_children) Unregister(child);\n        m_children.resize(0);\n        if (state == Widget::ACTIVE) ReplaceHTML();\n      }\n\n      void Clear() {\n        ClearChildren();\n        extras.Clear();\n        if (state == Widget::ACTIVE) ReplaceHTML();\n      }\n\n      void AddChild(Widget in) {\n        // If the inserted widget is already active, remove it from its old position.\n        emp_assert(in->parent == nullptr && \"Cannot insert widget if already has parent!\", in->id);\n        emp_assert(in->state != Widget::ACTIVE && \"Cannot insert a stand-alone active widget!\");\n\n        // Setup parent-child relationship\n        m_children.emplace_back(in);\n        in->parent = this;\n        Register(in);\n\n        // If this element (as new parent) is active, anchor widget and activate it!\n        if (state == Widget::ACTIVE) {\n          // Create a span tag to anchor the new widget.\n          EM_ASM_ARGS({\n              parent_id = Pointer_stringify($0);\n              child_id = Pointer_stringify($1);\n              $('#' + parent_id).append('<span id=\"' + child_id + '\"></span>');\n            }, id.c_str(), in.GetID().c_str());\n\n          // Now that the new widget has some place to hook in, activate it!\n          in->DoActivate();\n        }\n      }\n\n      void DoActivate(bool top_level=true) override {\n        for (auto & child : m_children) child->DoActivate(false);\n        internal::WidgetInfo::DoActivate(top_level);\n      }\n\n\n      // Return a text element for appending.  Use the last element unless there are no elements,\n      // the last element is not text, or it is not appendable (instead, build a new one).\n      web::Text & GetTextWidget() {\n        // If the final element is not appendable text, add a new Text widget.\n        if (m_children.size() == 0\n            || m_children.back().IsText() == false\n            || m_children.back().AppendOK() == false\n            || text_append == false)  {\n          AddChild(Text());\n          text_append = true;\n        }\n        return (Text &) m_children.back();\n      }\n\n      bool AppendOK() const override { return append_ok; }\n      void PreventAppend() override { append_ok = false; }\n\n      // Add additional children on to this element.\n      Widget Append(const std::string & text) override {\n        if (!append_ok) return ForwardAppend(text);\n        return GetTextWidget() << text;\n      }\n      Widget Append(const std::function<std::string()> & in_fun) override {\n        if (!append_ok) return ForwardAppend(in_fun);\n        return GetTextWidget() << in_fun;\n      }\n\n      Widget Append(Widget info) override {\n        if (!append_ok) return ForwardAppend(info);\n        AddChild(info);\n        text_append = false;   // A widget is being passed in, so don't all text appends.\n        return info;\n      }\n\n      /// Start a new set of Text with this font (even if one already exists.)\n      Widget Append(const Font & font) override {\n        if (!append_ok) return ForwardAppend(font);\n        Text new_text;          // Build a new text widget for this font.\n        new_text.SetFont(font); // Setup the new text widget with the provided font.\n        AddChild(new_text);     // Add this new text widget to this div.\n        text_append = true;     // Since we added a Text widget with this font, it can be extended.\n        return new_text;\n      }\n\n      // All derived widgets must suply a mechanism for providing associated HTML code.\n      virtual void GetHTML(std::stringstream & HTML) override {\n        HTML.str(\"\");       // Clear the current text.\n\n        // Loop through all children and build a span element for each to replace.\n        HTML << \"<div id=\\'\" << id << \"\\'>\"; // Tag to envelope Div\n        for (Widget & w : m_children) {\n          HTML << \"<span id=\\'\" << w.GetID() << \"'></span>\";  // Span element for current widget.\n        }\n        HTML << \"</div>\";\n      }\n\n\n      void ReplaceHTML() override {\n        // Replace Div's HTML...\n        internal::WidgetInfo::ReplaceHTML();\n\n        // Then replace children.\n        if (state == Widget::ACTIVE) {\n          for (auto & child : m_children) child->ReplaceHTML();\n        }\n\n        if (scroll_top >= 0.0) {\n          EM_ASM_ARGS({\n              var div_id = Pointer_stringify($0);\n              var div_obj = document.getElementById(div_id);\n              if (div_obj == null) alert(div_id);\n              // alert('id=' + div_id + '  top=' + $1 +\n              //       '  height=' + div_obj.scrollHeight);\n              var scroll_top = $1 * div_obj.scrollHeight;\n              div_obj.scrollTop = scroll_top;\n            }, id.c_str(), scroll_top);\n        }\n\n        // @CAO If scrolltop is set, handle scrolling!\n    // float scroll_frac = ((float) (hardware->GetIP() - 3)) / (float) hardware->GetNumInsts();\n    // if (scroll_frac < 0.0) scroll_frac = 0.0;\n\n    // EM_ASM_ARGS({\n    //     var code = Pointer_stringify($0);\n    //     var code_obj = document.getElementById(\"code\");\n    //     code_obj.innerHTML = code;\n    //     code_obj.scrollTop = $1 * code_obj.scrollHeight;\n    //     var cycle_obj = document.getElementById(\"cycle_count\");\n    //     cycle_obj.innerHTML = \"&nbsp;&nbsp;&nbsp;Cycles Used = \" + $2;\n    // }, ss.str().c_str(), scroll_frac, hardware->GetExeCount());\n\n      }\n\n    public:\n      virtual std::string GetType() override { return \"web::DivInfo\"; }\n    };\n  }\n\n  /// A widget to track a div in an HTML file, and all of its contents.\n  class Div : public internal::WidgetFacet<Div> {\n  protected:\n    // Get a properly cast version of indo.\n    internal::DivInfo * Info() { return (internal::DivInfo *) info; }\n    const internal::DivInfo * Info() const { return (internal::DivInfo *) info; }\n\n  public:\n    Div(const std::string & in_name) : WidgetFacet(in_name) {\n      // When a name is provided, create an associated Widget info.\n      info = new internal::DivInfo(in_name);\n    }\n    Div(const Div & in) : WidgetFacet(in) { ; }\n    Div(const Widget & in) : WidgetFacet(in) { emp_assert(in.IsDiv()); }\n    Div() { ; }\n    ~Div() { ; }\n\n    using INFO_TYPE = internal::DivInfo;\n\n    /// Where is the top of the scroll region?\n    double ScrollTop() const { return Info()->scroll_top; }\n\n    /// Set the scroll position.\n    Div & ScrollTop(double in_top) { Info()->scroll_top = in_top; return *this; }\n\n    /// Clear the contents of this div.\n    void Clear() { if (info) Info()->Clear(); }\n\n    /// Remove all child widgets from this div.\n    void ClearChildren() { if (info) Info()->ClearChildren(); }\n\n    /// Determine if a specified widget is internal to this one.\n    bool HasChild(const Widget & test_child) const {\n      if (!info) return false;\n      for (const Widget & c : Info()->m_children) if (c == test_child) return true;\n      return false;\n    }\n\n    /// Remove this widget from the current document.\n    void Deactivate(bool top_level) override {\n      // Deactivate children before this node.\n      for (auto & child : Info()->m_children) child.Deactivate(false);\n      Widget::Deactivate(top_level);\n    }\n\n    /// Get an internal widget to this div, by the specified name.\n    Widget & Find(const std::string & test_name) {\n      emp_assert(info);\n      return Info()->GetRegistered(test_name);\n    }\n\n    /// Get all direct child widgets to this div.\n    emp::vector<Widget> & Children() { return Info()->m_children; }\n\n    /// Shortcut adder for animations.\n    template <class... T> web::Animate & AddAnimation(const std::string & name, T &&... args){\n      web::Animate * new_anim = new web::Animate(std::forward<T>(args)...);\n      emp_assert(Info()->anim_map.find(name) == Info()->anim_map.end());  // Make sure not in map already!\n      Info()->anim_map[name] = new_anim;\n      return *new_anim;\n    }\n\n    // A quick way to retrieve Animate widgets by name.\n    web::Animate & Animate (const std::string & in_id) { return *(Info()->anim_map[in_id]); }\n  };\n\n  // using Slate = Div;    // For backward compatability...\n}\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  Selector.h\n *  @brief Specs for the Selector widget.\n *\n *  A Selector widget provides the user with a pull-down menu.  It can be\n *  examined at any time (via GetSelectID()) or else alerts call a designated\n *  function when a particular option is chosen.\n *\n *     UI::Selector sel(\"sel\");\n *\n *     sel.SetOption(\"Option 1\");\n *     sel.SetOption(\"Option B\", TriggerB) ;\n *     sel.SetOption(\"Option the Third\", [](){ emp::Alert(\"3 chosen!\"} );\n *     sel.SetOption(\"Option IV\");\n *\n *  In this example, the second option will call TriggerB when it is chosen,\n *  while the third option will call the provided lambda function.\n */\n\n#ifndef EMP_WEB_SELECTOR_H\n#define EMP_WEB_SELECTOR_H\n\n\n#include \"../base/vector.h\"\n\n#include \"JSWrap.h\"\n#include \"Widget.h\"\n\nnamespace emp {\nnamespace web {\n\n  class Selector : public internal::WidgetFacet<Selector> {\n    friend class SelectorInfo;\n  protected:\n\n    class SelectorInfo : public internal::WidgetInfo {\n      friend Selector;\n    protected:\n      emp::vector<std::string> options;               ///< What are the options to choose from?\n      emp::vector<std::function<void()> > callbacks;  ///< Which funtion to run for each option?\n      size_t select_id;                               ///< Which index is currently selected?\n\n      bool autofocus;\n      bool disabled;\n\n      size_t callback_id;\n\n      SelectorInfo(const std::string & in_id=\"\")\n        : internal::WidgetInfo(in_id), select_id(0), autofocus(false), disabled(false) { ; }\n      SelectorInfo(const SelectorInfo &) = delete;               // No copies of INFO allowed\n      SelectorInfo & operator=(const SelectorInfo &) = delete;   // No copies of INFO allowed\n      virtual ~SelectorInfo() {\n        if (callback_id) emp::JSDelete(callback_id);             // Delete callback wrapper.\n      }\n\n      std::string GetTypeName() const override { return \"SelectorInfo\"; }\n\n      void SetOption(const std::string & name, const std::function<void()> & cb, size_t id) {\n        // If we need more room for options, increase the array size.\n        if (id >= options.size()) {\n          options.resize(id+1);\n          callbacks.resize(id+1);\n        }\n        options[id] = name;\n        callbacks[id] = cb;\n      }\n      void SetOption(const std::string & name, const std::function<void()> & cb) {\n        SetOption(name, cb, options.size()); // No option id specified, so choose the next one.\n      }\n\n      void DoChange(size_t new_id) {\n        select_id = new_id;\n        if (callbacks[new_id]) callbacks[new_id]();\n      }\n\n      virtual void GetHTML(std::stringstream & HTML) override {\n        HTML << \"<select\";                              // Start the select tag.\n        if (disabled) { HTML << \" disabled=true\"; }     // Check if should be disabled\n        HTML << \" id=\\\"\" << id << \"\\\"\";                 // Indicate ID.\n\n        // Indicate action on change.\n        HTML << \" onchange=\\\"emp.Callback(\" << callback_id << \", this.selectedIndex)\\\">\";\n\n        // List out options\n        for (size_t i = 0; i < options.size(); i++) {\n          HTML << \"<option value=\\\"\" << i << \"\\\"\";\n          if (i == select_id) HTML << \" selected\";\n          HTML << \">\" << options[i] << \"</option>\";\n        }\n        HTML << \"</select>\";\n      }\n\n      void UpdateAutofocus(bool in_af) {\n        autofocus = in_af;\n        if (state == Widget::ACTIVE) ReplaceHTML();\n      }\n      void UpdateDisabled(bool in_dis) {\n        disabled = in_dis;\n        if (state == Widget::ACTIVE) ReplaceHTML();\n      }\n\n    public:\n      virtual std::string GetType() override { return \"web::SelectorInfo\"; }\n    };  // End of SelectorInfo class.\n\n\n    // Get a properly cast version of indo.\n    SelectorInfo * Info() { return (SelectorInfo *) info; }\n    const SelectorInfo * Info() const { return (SelectorInfo *) info; }\n\n    Selector(SelectorInfo * in_info) : WidgetFacet(in_info) { ; }\n\n  public:\n    Selector(const std::string & in_id=\"\") : WidgetFacet(in_id)\n    {\n      info = new SelectorInfo(in_id);\n\n      Info()->select_id = 0;\n      Info()->autofocus = false;\n      Info()->disabled = false;\n\n      SelectorInfo * s_info = Info();\n      Info()->callback_id =\n        JSWrap( std::function<void(size_t)>([s_info](size_t new_id){s_info->DoChange(new_id);}) );\n    }\n    Selector(const Selector & in) : WidgetFacet(in) { ; }\n    Selector(const Widget & in) : WidgetFacet(in) { emp_assert(in.IsSelector()); }\n    virtual ~Selector() { ; }\n\n    using INFO_TYPE = SelectorInfo;\n\n    /// Get the ID of the currently active selection.\n    size_t GetSelectID() const { return Info()->select_id; }\n\n    /// Get the total number of options setup in the selector.\n    size_t GetNumOptions() const { return Info()->options.size(); }\n\n    /// Get the label associated with a specific option ID.\n    const std::string & GetOption(size_t id) const { return Info()->options[id]; }\n\n    /// Determine if the selector has autofocus.\n    bool HasAutofocus() const { return Info()->autofocus; }\n\n    /// Is the selector currently disabled?\n    bool IsDisabled() const { return Info()->disabled; }\n\n    /// Set a specific ID as currently active.\n    Selector & SelectID(size_t id) { Info()->select_id = id; return *this; }\n\n    /// Add a new option to the selector and the function to be called if it is chosen.\n    Selector & SetOption(const std::string & in_option,\n                         const std::function<void()> & in_cb) {\n      Info()->SetOption(in_option, in_cb);\n      return *this;\n    }\n\n    /// Add an option to the selector associated with a specific ID (and the function to be\n    /// called if it is chosen)\n    Selector & SetOption(const std::string & in_option,\n                         const std::function<void()> & in_cb,\n                         size_t opt_id) {\n      Info()->SetOption(in_option, in_cb, opt_id);\n      return *this;\n    }\n\n    /// Set a selector option name, but no function to be called.\n    Selector & SetOption(const std::string & in_option) {\n      return SetOption(in_option, std::function<void()>([](){}));\n    }\n\n    /// Set a specific selection option name, determined by the ID, but no function to call.\n    Selector & SetOption(const std::string & in_option, size_t opt_id) {\n      return SetOption(in_option, std::function<void()>([](){}), opt_id);\n    }\n\n    /// Update autofocus setting.\n    Selector & Autofocus(bool in_af) { Info()->UpdateAutofocus(in_af); return *this; }\n\n    /// Update disabled status.\n    Selector & Disabled(bool in_dis) { Info()->UpdateDisabled(in_dis); return *this; }\n  };\n\n\n}\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  JSWrap.h\n *  @brief Wrap a C++ function and convert it to an integer that can be called from Javascript\n *\n *  To wrap a function, call:\n *\n *     `uint32_t fun_id = emp::JSWrap(FunctionToBeWrapped, \"JS_Function_Name\");``\n *\n *  To manually callback a function from Javascript, first set `emp_i.cb_args` to an array of\n *  function arguments, then call `empCppCallback( fun_id );`   This all happens automatically\n *  if you use the `emp.Callback(fun_id, args...)` function from Javascript.\n *\n *  The JS_Function_Name string is optional, but if you use it, the appropriate function will\n *  be automatically generated in Javascript by JSWrap, in the emp class.\n *\n *  For example, if you have:\n *\n *     `int AddPair(int x, int y) { return x + y; }``\n *\n *  You can wrap it with:\n *\n *     `size_t fun_id = emp::JSWrap(AddPair, \"AddPair\");`\n *\n *  And then in Javascript, you can simply call it as:\n *\n *     `emp.AddPair(4, 5); // will return 9.`\n *\n *\n *  @todo Add a JSWrap that takes an object and method and does the bind automatically.\n *  @todo Build a non-enscripten version; it should still be callable from the C++ side, but\n *        mostly to be able to test programs without Emscripten.\n *\n */\n\n#ifndef EMP_JSWRAP_H\n#define EMP_JSWRAP_H\n\n\n#include <array>\n#include <functional>\n#include <tuple>\n\n#include \"../meta/meta.h\"\n\n#include \"../base/assert.h\"\n#include \"../base/vector.h\"\n\n#include \"../tools/functions.h\"\n#include \"../tools/mem_track.h\"\n#include \"../tools/tuple_struct.h\"\n#include \"../tools/tuple_utils.h\"\n\n#include \"init.h\"\n#include \"js_utils.h\"\n\n#ifdef EMSCRIPTEN\nextern \"C\" {\n  extern int EMP_GetCBArgCount();  // Get the number of arguments associated with a callback.\n}\n#else\n// When NOT in Emscripten, need a stub for this function.\nint EMP_GetCBArgCount() { return -1; }\n#endif\n\nnamespace emp {\n\n  /// Helper functions to individually LOAD ARGUMENTS from JS based on expected type.\n  template <int ARG_ID> static void LoadArg(int16_t & arg_var) {\n    arg_var = (int16_t) EM_ASM_INT({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(int32_t & arg_var) {\n    arg_var = (int32_t) EM_ASM_INT({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(int64_t & arg_var) {\n    arg_var = (int64_t) EM_ASM_DOUBLE({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(uint16_t & arg_var) {\n    arg_var = (uint16_t) EM_ASM_INT({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(uint32_t & arg_var) {\n    arg_var = (uint32_t) EM_ASM_INT({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(uint64_t & arg_var) {\n    arg_var = (uint64_t) EM_ASM_DOUBLE({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(bool & arg_var) {\n    arg_var = (bool) EM_ASM_INT({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(char & arg_var) {\n    arg_var = (char) EM_ASM_INT({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(double & arg_var) {\n    arg_var = EM_ASM_DOUBLE({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(float & arg_var) {\n    arg_var = (float) EM_ASM_DOUBLE({ return emp_i.cb_args[$0]; }, ARG_ID);\n  }\n\n  template <int ARG_ID> static void LoadArg(std::string & arg_var) {\n    char * tmp_var = (char *) EM_ASM_INT({\n        return allocate(intArrayFromString(emp_i.cb_args[$0]), 'i8', ALLOC_STACK);\n      }, ARG_ID);\n    arg_var = tmp_var;   // @CAO Do we need to free the memory in tmp_var?\n  }\n\n  template <int ARG_ID, size_t SIZE, typename T> static void LoadArg(emp::array<T, SIZE> & arg_var){\n    EM_ASM_ARGS({emp_i.__outgoing_array = emp_i.cb_args[$0];}, ARG_ID);\n    pass_array_to_cpp(arg_var);\n  }\n\n  template <int ARG_ID, typename T> static void LoadArg(emp::vector<T> & arg_var){\n    EM_ASM_ARGS({emp_i.__outgoing_array = emp_i.cb_args[$0];}, ARG_ID);\n    pass_vector_to_cpp(arg_var);\n  }\n\n  //Helper functions to load arguments from inside Javascript objects by name.\n  template <int ARG_ID> static void LoadArg(int16_t & arg_var, std::string var) {\n    arg_var = (int16_t) EM_ASM_INT({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(int32_t & arg_var, std::string var) {\n    arg_var = (int32_t) EM_ASM_INT({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(int64_t & arg_var, std::string var) {\n    arg_var = (int64_t) EM_ASM_DOUBLE({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(uint16_t & arg_var, std::string var) {\n    arg_var = (uint16_t) EM_ASM_INT({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(uint32_t & arg_var, std::string var) {\n    arg_var = (uint32_t) EM_ASM_INT({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(uint64_t & arg_var, std::string var) {\n    arg_var = (uint64_t) EM_ASM_DOUBLE({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(bool & arg_var, std::string var) {\n    arg_var = (bool) EM_ASM_INT({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(char & arg_var, std::string var) {\n    arg_var = (char) EM_ASM_INT({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(double & arg_var, std::string var) {\n    arg_var = EM_ASM_DOUBLE({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(float & arg_var, std::string var) {\n    arg_var = (float) EM_ASM_DOUBLE({\n      return emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n  }\n\n  template <int ARG_ID> static void LoadArg(std::string & arg_var, std::string var) {\n    char * tmp_var = (char *) EM_ASM_INT({\n      if (emp_i.curr_obj[Pointer_stringify($0)] == null){\n        emp_i.curr_obj[Pointer_stringify($0)] = \"undefined\";\n      }\n      return allocate(intArrayFromString(emp_i.curr_obj[Pointer_stringify($0)]),\n                      'i8', ALLOC_STACK);\n    }, var.c_str());\n    arg_var = tmp_var;   // Free memory here?\n  }\n\n  template <typename JSON_TYPE, int ARG_ID, int FIELD>\n  struct LoadTuple;\n\n  /// This needs to go before LoadTuple is defined, in case there are nested tuple structs\n  template <int ARG_ID, typename JSON_TYPE> static\n  typename std::enable_if<JSON_TYPE::n_fields != -1, void>::type\n  LoadArg(JSON_TYPE & arg_var, std::string var) {\n    //std::cout << \"Loading \" << var << \" ARGNID: \" << ARG_ID << std::endl;\n    //LoadArg<ARG_ID>(std::get<ARG_ID>(arg_var.emp__tuple_body));\n    EM_ASM_ARGS({\n      emp_i.object_queue.push(emp_i.curr_obj);\n      emp_i.curr_obj = emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n    LoadTuple<JSON_TYPE, ARG_ID, JSON_TYPE::n_fields> load_tuple = LoadTuple<JSON_TYPE, ARG_ID, JSON_TYPE::n_fields>();\n    load_tuple.LoadJSDataArg(arg_var);\n  }\n\n  template <typename JSON_TYPE, int ARG_ID, int FIELD>\n  struct LoadTuple {\n    static void LoadJSDataArg(JSON_TYPE & arg_var) {\n    //std::cout << \"LoadingJS \" << arg_var.var_names[FIELD-1] << \" FIeLd: \" << FIELD-1 << std::endl;\n      LoadArg<ARG_ID>(std::get<FIELD-1>(arg_var.emp__tuple_body), arg_var.var_names[FIELD-1]);\n      LoadTuple<JSON_TYPE, ARG_ID, FIELD-1> load_tuple = LoadTuple<JSON_TYPE, ARG_ID, FIELD-1>();\n      load_tuple.LoadJSDataArg(arg_var);\n    }\n  };\n\n  template <typename JSON_TYPE, int ARG_ID>\n  struct LoadTuple<JSON_TYPE, ARG_ID, 0> {\n    static void LoadJSDataArg(JSON_TYPE & arg_var) {\n        EM_ASM({emp_i.curr_obj = emp_i.object_queue.pop();});\n    }\n  };\n\n\n  template <int ARG_ID, typename JSON_TYPE> static\n  typename std::enable_if<JSON_TYPE::n_fields != -1, void>::type\n  LoadArg(JSON_TYPE & arg_var) {\n    //std::cout << \"Loading ARGNID: \" << ARG_ID << std::endl;\n    EM_ASM_ARGS({\n      emp_i.object_queue = [];\n      emp_i.curr_obj = emp_i.cb_args[$0];\n    }, ARG_ID);\n    LoadTuple<JSON_TYPE, ARG_ID, JSON_TYPE::n_fields> load_tuple = LoadTuple<JSON_TYPE, ARG_ID, JSON_TYPE::n_fields>();\n    load_tuple.LoadJSDataArg(arg_var);\n  }\n\n  // ----- StoreReturn -----\n  // Helper functions to individually store return values to JS\n\n  // static void StoreReturn(const bool & ret_var) {\n  //   EM_ASM_ARGS({ emp_i.cb_return = $0; }, ret_var);\n  // }\n\n  static void StoreReturn(const int & ret_var) {\n    EM_ASM_ARGS({ emp_i.cb_return = $0; }, ret_var);\n  }\n\n  static void StoreReturn(const double & ret_var) {\n    EM_ASM_ARGS({ emp_i.cb_return = $0; }, ret_var);\n  }\n\n  static void StoreReturn(const std::string & ret_var) {\n    EM_ASM_ARGS({ emp_i.cb_return = Pointer_stringify($0); }, ret_var.c_str());\n  }\n\n  template <typename T, size_t N>\n  static void StoreReturn(const emp::array<T, N> & ret_var) {\n    pass_array_to_javascript(ret_var);\n    EM_ASM({ emp_i.cb_return = emp_i.__incoming_array; });\n  }\n\n  /// If the return type has a personalized function to handle the return, use it!\n  template <typename RETURN_TYPE>\n  static emp::sfinae_decoy<void, decltype(&RETURN_TYPE::StoreAsReturn)>\n  StoreReturn(const RETURN_TYPE & ret_var) {\n    ret_var.template StoreAsReturn();\n  }\n\n  /// Helper functions to store values inside JSON objects\n  static void StoreReturn(const int & ret_var, std::string var) {\n    EM_ASM_ARGS({ emp_i.curr_obj[Pointer_stringify($1)] = $0; }, ret_var, var.c_str());\n  }\n\n  static void StoreReturn(const double & ret_var, std::string var) {\n    EM_ASM_ARGS({ emp_i.curr_obj[Pointer_stringify($1)] = $0; }, ret_var, var.c_str());\n  }\n\n  static void StoreReturn(const std::string & ret_var, std::string var) {\n    EM_ASM_ARGS({ emp_i.curr_obj[Pointer_stringify($1)] = Pointer_stringify($0); }\n                                                    , ret_var.c_str(), var.c_str());\n  }\n\n  template <typename T, size_t N>\n  static void StoreReturn(const emp::array<T, N> & ret_var, std::string var) {\n    pass_array_to_javascript(ret_var);\n    EM_ASM_ARGS({ emp_i.curr_obj[Pointer_stringify($0)] = emp_i.__incoming_array;}, var.c_str());\n  }\n\n  template <typename JSON_TYPE, int FIELD>\n  struct StoreTuple;\n\n  // Tuple struct\n  template <typename RETURN_TYPE>\n  static typename std::enable_if<RETURN_TYPE::n_fields != -1, void>::type\n  StoreReturn(const RETURN_TYPE & ret_var) {\n    EM_ASM({\n      emp_i.cb_return = {};\n      emp_i.object_queue = [];\n      emp_i.curr_obj = emp_i.cb_return;\n    });\n\n    StoreTuple<RETURN_TYPE, RETURN_TYPE::n_fields> store_tuple = StoreTuple<RETURN_TYPE, RETURN_TYPE::n_fields>();\n    store_tuple.StoreJSDataArg(ret_var);\n  }\n\n  // Nested tuple struct\n  template <typename RETURN_TYPE>\n  static emp::sfinae_decoy<void, decltype(RETURN_TYPE::n_fields)>\n  StoreReturn(const RETURN_TYPE & ret_var, std::string var) {\n    EM_ASM_ARGS({\n      emp_i.curr_obj[Pointer_stringify($0)] = {};\n      emp_i.object_queue.push(emp_i.curr_obj);\n      emp_i.curr_obj = emp_i.curr_obj[Pointer_stringify($0)];\n    }, var.c_str());\n\n    StoreTuple<RETURN_TYPE, RETURN_TYPE::n_fields> store_tuple = StoreTuple<RETURN_TYPE, RETURN_TYPE::n_fields>();\n    store_tuple.StoreJSDataArg(ret_var);\n  }\n\n  template <typename JSON_TYPE, int FIELD>\n  struct StoreTuple {\n    static void StoreJSDataArg(const JSON_TYPE & ret_var) {\n      StoreReturn(std::get<FIELD-1>(ret_var.emp__tuple_body), ret_var.var_names[FIELD-1]);\n      StoreTuple<JSON_TYPE, FIELD-1> store_tuple = StoreTuple<JSON_TYPE, FIELD-1>();\n      store_tuple.StoreJSDataArg(ret_var);\n    }\n  };\n\n  template <typename JSON_TYPE>\n  struct StoreTuple<JSON_TYPE, 0> {\n    static void StoreJSDataArg(const JSON_TYPE & ret_var) {\n      EM_ASM({emp_i.curr_obj = emp_i.object_queue.pop();});\n    }\n  };\n\n  // The following code is in the \"internal\" namespace since it's used only to implement the\n  // details of the JSWrap function.\n\n  namespace internal {\n\n    template <typename T, int ARG_ID>\n    void LoadArg_impl(emp::sfinae_decoy<bool, decltype(&T::template LoadFromArg<ARG_ID>)>,\n                      T & target) {\n      target.template LoadFromArg<ARG_ID>();\n    }\n    template <typename T, int ARG_ID>\n    void LoadArg_impl(int, T & target) {\n      LoadArg<ARG_ID>(target);\n    }\n\n    // JSWrap_Callback_Base provides a base class for the wrappers around functions.\n    // Specifically, it creates a virtual DoCallback() member function that can be called\n    // to trigger a specific wrapped function.\n\n    class JSWrap_Callback_Base {\n    protected:\n      bool is_disposable;  // Should this callback be deleted automatically after first use?\n\n    public:\n      JSWrap_Callback_Base(bool in_disposable=false) : is_disposable(in_disposable) { ; }\n      virtual ~JSWrap_Callback_Base() { ; }\n\n      bool IsDisposable() const { return is_disposable; }\n      void SetDisposable() { is_disposable = true; }\n\n      // Base class to be called from Javascript (after storing args) to do a callback.\n      virtual void DoCallback() = 0;\n\n\n      // A pair of helper functions that systematically load ALL arguments from JS.\n      template <typename TUPLE_TYPE, int ARGS_LEFT>\n      struct Collect_impl {\n        static void CollectArgs(TUPLE_TYPE & tuple) {\n          LoadArg_impl<typename std::tuple_element<ARGS_LEFT-1,TUPLE_TYPE>::type, ARGS_LEFT-1>( true, std::get<ARGS_LEFT-1>(tuple) );  // Load an arg\n          Collect_impl<TUPLE_TYPE, ARGS_LEFT-1>::CollectArgs(tuple);        // Recurse to next arg\n        }\n      };\n\n      template <typename TUPLE_TYPE>\n      struct Collect_impl<TUPLE_TYPE, 0> {\n        static void CollectArgs(TUPLE_TYPE & tuple) { (void) tuple; } // End load recursion.\n      };\n\n    };\n\n\n    // The derived form of JSWrap_Callback knows the specific argument types of the function\n    // needed, keeps track of the function poninter, and has a tuple in which the arguments\n    // can be loaded before a call is made.\n\n    template <typename RET_TYPE, typename... ARG_TYPES>\n    class JSWrap_Callback : public JSWrap_Callback_Base {\n    private:\n      std::function<RET_TYPE(ARG_TYPES...)> fun;   // Function to be wrapped\n\n    public:\n      JSWrap_Callback(const std::function<RET_TYPE(ARG_TYPES...)> & in_fun, bool disposable=false)\n        : JSWrap_Callback_Base(disposable), fun(in_fun)\n      {\n        EMP_TRACK_CONSTRUCT(JSWrap_Callback);\n      }\n      ~JSWrap_Callback() { EMP_TRACK_DESTRUCT(JSWrap_Callback); }\n\n      // This function is called from Javascript.  Arguments should be collected and then used\n      // to call the target function.\n      void DoCallback() {\n        const int num_args = sizeof...(ARG_TYPES);\n\n        // Make sure that we are returning the correct number of arguments.  If this\n        // assert fails, it means that we've failed to set the correct number of arguments\n        // in emp.cb_args, and need to realign.\n        emp_assert(EMP_GetCBArgCount() < 0 || EMP_GetCBArgCount() >= num_args, EMP_GetCBArgCount(), num_args);\n\n        // Collect the values of the arguments in a tuple\n        using args_t = std::tuple< typename std::decay<ARG_TYPES>::type... >;\n        args_t args;\n        Collect_impl<args_t, num_args>::CollectArgs(args);\n\n        // And finally, do the actual callback.\n\n        RET_TYPE return_val;\n        emp::ApplyTuple([&return_val, this](ARG_TYPES... in_args){\n            return_val = fun(in_args...);\n          }, args);\n\n        // And save the return value for JS.\n        StoreReturn(return_val);\n      }\n    };\n\n    // A specialized version of the class that handles functions with void returns.\n\n    template <typename... ARG_TYPES>\n    class JSWrap_Callback<void, ARG_TYPES...> : public JSWrap_Callback_Base {\n    private:\n      std::function<void(ARG_TYPES...)> fun;   // Function to be wrapped\n\n    public:\n      JSWrap_Callback(const std::function<void(ARG_TYPES...)> & in_fun, bool disposable=false)\n        : JSWrap_Callback_Base(disposable), fun(in_fun)\n      { EMP_TRACK_CONSTRUCT(JSWrap_Callback_VOID); }\n      ~JSWrap_Callback() { EMP_TRACK_DESTRUCT(JSWrap_Callback_VOID); }\n\n\n      // This function is called from Javascript.  Arguments should be collected and then used\n      // to call the target function.\n      void DoCallback() {\n        const int num_args = sizeof...(ARG_TYPES);\n\n        // Make sure that we are returning the correct number of arguments.  If this\n        // assert fails, it means that we've failed to set the correct number of arguments\n        // in emp.cb_args, and need to realign.\n        emp_assert(EMP_GetCBArgCount() < 0 || EMP_GetCBArgCount() >= num_args, EMP_GetCBArgCount(), num_args);\n\n        // Collect the values of the arguments in a tuple\n        using args_t = std::tuple< typename std::decay<ARG_TYPES>::type... >;\n        args_t args;\n        Collect_impl<args_t, num_args>::CollectArgs(args);\n\n        // And finally, do the actual callback.\n        emp::ApplyTuple(fun, args);\n\n        // And save a return value for JS.\n        StoreReturn(0);\n      }\n    };\n\n\n    // The following function returns a static callback array; callback ID's all index into\n    // this array.\n    static emp::vector<JSWrap_Callback_Base *> & CallbackArray() {\n      static emp::vector<JSWrap_Callback_Base *> callback_array(1, nullptr);\n      return callback_array;\n    }\n\n  } // End internal namespace\n\n  // The following JSWrap functions take a target function and return an integer id that\n  // indexes into a callback array.\n\n  // The first version assumes that we already have it enclosed in an std::function, while\n  // the second version assumes we have a raw function pointer and wraps it for us.\n\n  template <typename RET_TYPE, typename... ARG_TYPES>\n  size_t JSWrap(const std::function<RET_TYPE(ARG_TYPES...)> & in_fun,\n                const std::string & fun_name=\"\",\n                bool dispose_on_use=false)\n  {\n    // We should never create disposible functions with names!\n    emp_assert(fun_name == \"\" || dispose_on_use == false);\n\n    auto * new_cb =\n      new emp::internal::JSWrap_Callback<RET_TYPE, ARG_TYPES...>(in_fun, dispose_on_use);\n    auto & callback_array = internal::CallbackArray();\n    size_t out_id = callback_array.size();\n    callback_array.push_back(new_cb);\n\n    if (fun_name != \"\") {\n      EM_ASM_ARGS({\n          var fun_name = Pointer_stringify($1);\n          emp[fun_name] = function() {\n            emp_i.cb_args = [];\n            for (var i = 0; i < arguments.length; i++) {\n              emp_i.cb_args[i] = arguments[i];\n            }\n\n            // Callback to the original function.\n            empCppCallback($0);\n\n            // Return the resulting value\n            return emp_i.cb_return;\n          };\n        }, out_id, fun_name.c_str());\n    }\n\n    return out_id;\n  }\n\n  template <typename RETURN_TYPE, typename... ARG_TYPES>\n  size_t JSWrap( RETURN_TYPE (*in_fun) (ARG_TYPES...),\n                 const std::string & fun_name=\"\", bool dispose_on_use=false )\n  {\n    std::function<RETURN_TYPE(ARG_TYPES...)> fun_ptr(in_fun);\n    return JSWrap(fun_ptr, fun_name, dispose_on_use);\n  }\n\n  /// @endcond\n\n  template <typename FUN_TYPE>\n  size_t JSWrap(const FUN_TYPE & in_fun, const std::string & fun_name=\"\", bool dispose_on_use=false)\n  {\n    return JSWrap(to_function(in_fun), fun_name, dispose_on_use);\n  }\n\n\n  /// If we want a quick, unnammed, disposable function, use JSWrapOnce\n  template <typename FUN_TYPE>\n  size_t JSWrapOnce(FUN_TYPE && in_fun) { return JSWrap(std::forward<FUN_TYPE>(in_fun), \"\", true); }\n\n\n  /// Cleanup a function pointer when finished with it.\n  void JSDelete( size_t fun_id ) {\n    emp_assert(fun_id > 0);  // Make sure this isn't a null pointer!\n    // @CAO -- Should make sure to clean up named functions on JS side if they exist.\n    auto & callback_array = internal::CallbackArray();\n    delete callback_array[fun_id];\n    callback_array[fun_id] = nullptr;\n  }\n\n  /// @cond SIMPLIFY\n}\n\n/// Once you use JSWrap to create an ID, you can call the wrapped function from Javascript\n/// by supplying CPPCallback with the id and all args.\n\nextern \"C\" void empCppCallback(size_t cb_id)\n{\n  // Convert the uint passed in from 32 bits to 64 and THEN convert it to a pointer.\n  auto * cb_obj = emp::internal::CallbackArray()[cb_id];\n\n  // Run DoCallback() on the generic base class type, which is virtual and will call\n  // the correct template automatically.\n  cb_obj->DoCallback();\n\n  // If we have indicated that this callback is single use, delete it now.\n  if (cb_obj->IsDisposable()) {\n    delete cb_obj;\n    emp::internal::CallbackArray()[cb_id] = nullptr;\n  }\n}\n\n/// @endcond\n\n#endif\n","// -*- C++ -*-\n//===------------------------ functional ----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_FUNCTIONAL\n#define _LIBCPP_FUNCTIONAL\n\n/*\n    functional synopsis\n\nnamespace std\n{\n\ntemplate <class Arg, class Result>\nstruct unary_function\n{\n    typedef Arg    argument_type;\n    typedef Result result_type;\n};\n\ntemplate <class Arg1, class Arg2, class Result>\nstruct binary_function\n{\n    typedef Arg1   first_argument_type;\n    typedef Arg2   second_argument_type;\n    typedef Result result_type;\n};\n\ntemplate <class T>\nclass reference_wrapper\n    : public unary_function<T1, R> // if wrapping a unary functor\n    : public binary_function<T1, T2, R> // if wraping a binary functor\n{\npublic:\n    // types\n    typedef T type;\n    typedef see below result_type; // Not always defined\n\n    // construct/copy/destroy\n    reference_wrapper(T&) noexcept;\n    reference_wrapper(T&&) = delete; // do not bind to temps\n    reference_wrapper(const reference_wrapper<T>& x) noexcept;\n\n    // assignment\n    reference_wrapper& operator=(const reference_wrapper<T>& x) noexcept;\n\n    // access\n    operator T& () const noexcept;\n    T& get() const noexcept;\n\n    // invoke\n    template <class... ArgTypes>\n      typename result_of<T&(ArgTypes&&...)>::type\n          operator() (ArgTypes&&...) const;\n};\n\ntemplate <class T> reference_wrapper<T> ref(T& t) noexcept;\ntemplate <class T> void ref(const T&& t) = delete;\ntemplate <class T> reference_wrapper<T> ref(reference_wrapper<T>t) noexcept;\n\ntemplate <class T> reference_wrapper<const T> cref(const T& t) noexcept;\ntemplate <class T> void cref(const T&& t) = delete;\ntemplate <class T> reference_wrapper<const T> cref(reference_wrapper<T> t) noexcept;\n\ntemplate <class T> // <class T=void> in C++14\nstruct plus : binary_function<T, T, T>\n{\n    T operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct minus : binary_function<T, T, T>\n{\n    T operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct multiplies : binary_function<T, T, T>\n{\n    T operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct divides : binary_function<T, T, T>\n{\n    T operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct modulus : binary_function<T, T, T>\n{\n    T operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct negate : unary_function<T, T>\n{\n    T operator()(const T& x) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct equal_to : binary_function<T, T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct not_equal_to : binary_function<T, T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct greater : binary_function<T, T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct less : binary_function<T, T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct greater_equal : binary_function<T, T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct less_equal : binary_function<T, T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct logical_and : binary_function<T, T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct logical_or : binary_function<T, T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct logical_not : unary_function<T, bool>\n{\n    bool operator()(const T& x) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct bit_and : unary_function<T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct bit_or : unary_function<T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T> // <class T=void> in C++14\nstruct bit_xor : unary_function<T, bool>\n{\n    bool operator()(const T& x, const T& y) const;\n};\n\ntemplate <class T=void> // C++14\nstruct bit_xor : unary_function<T, bool>\n{\n    bool operator()(const T& x) const;\n};\n\ntemplate <class Predicate>\nclass unary_negate\n    : public unary_function<typename Predicate::argument_type, bool>\n{\npublic:\n    explicit unary_negate(const Predicate& pred);\n    bool operator()(const typename Predicate::argument_type& x) const;\n};\n\ntemplate <class Predicate> unary_negate<Predicate> not1(const Predicate& pred);\n\ntemplate <class Predicate>\nclass binary_negate\n    : public binary_function<typename Predicate::first_argument_type,\n                             typename Predicate::second_argument_type,\n                             bool>\n{\npublic:\n    explicit binary_negate(const Predicate& pred);\n    bool operator()(const typename Predicate::first_argument_type& x,\n                    const typename Predicate::second_argument_type& y) const;\n};\n\ntemplate <class Predicate> binary_negate<Predicate> not2(const Predicate& pred);\n\ntemplate <class F> unspecified not_fn(F&& f); // C++17\n\ntemplate<class T> struct is_bind_expression;\ntemplate<class T> struct is_placeholder;\n\n    // See C++14 20.9.9, Function object binders\ntemplate <class T> constexpr bool is_bind_expression_v\n  = is_bind_expression<T>::value; // C++17\ntemplate <class T> constexpr int is_placeholder_v\n  = is_placeholder<T>::value; // C++17\n\n\ntemplate<class Fn, class... BoundArgs>\n  unspecified bind(Fn&&, BoundArgs&&...);\ntemplate<class R, class Fn, class... BoundArgs>\n  unspecified bind(Fn&&, BoundArgs&&...);\n\nnamespace placeholders {\n  // M is the implementation-defined number of placeholders\n  extern unspecified _1;\n  extern unspecified _2;\n  .\n  .\n  .\n  extern unspecified _Mp;\n}\n\ntemplate <class Operation>\nclass binder1st\n    : public unary_function<typename Operation::second_argument_type,\n                            typename Operation::result_type>\n{\nprotected:\n    Operation                               op;\n    typename Operation::first_argument_type value;\npublic:\n    binder1st(const Operation& x, const typename Operation::first_argument_type y);\n    typename Operation::result_type operator()(      typename Operation::second_argument_type& x) const;\n    typename Operation::result_type operator()(const typename Operation::second_argument_type& x) const;\n};\n\ntemplate <class Operation, class T>\nbinder1st<Operation> bind1st(const Operation& op, const T& x);\n\ntemplate <class Operation>\nclass binder2nd\n    : public unary_function<typename Operation::first_argument_type,\n                            typename Operation::result_type>\n{\nprotected:\n    Operation                                op;\n    typename Operation::second_argument_type value;\npublic:\n    binder2nd(const Operation& x, const typename Operation::second_argument_type y);\n    typename Operation::result_type operator()(      typename Operation::first_argument_type& x) const;\n    typename Operation::result_type operator()(const typename Operation::first_argument_type& x) const;\n};\n\ntemplate <class Operation, class T>\nbinder2nd<Operation> bind2nd(const Operation& op, const T& x);\n\ntemplate <class Arg, class Result>\nclass pointer_to_unary_function : public unary_function<Arg, Result>\n{\npublic:\n    explicit pointer_to_unary_function(Result (*f)(Arg));\n    Result operator()(Arg x) const;\n};\n\ntemplate <class Arg, class Result>\npointer_to_unary_function<Arg,Result> ptr_fun(Result (*f)(Arg));\n\ntemplate <class Arg1, class Arg2, class Result>\nclass pointer_to_binary_function : public binary_function<Arg1, Arg2, Result>\n{\npublic:\n    explicit pointer_to_binary_function(Result (*f)(Arg1, Arg2));\n    Result operator()(Arg1 x, Arg2 y) const;\n};\n\ntemplate <class Arg1, class Arg2, class Result>\npointer_to_binary_function<Arg1,Arg2,Result> ptr_fun(Result (*f)(Arg1,Arg2));\n\ntemplate<class S, class T>\nclass mem_fun_t : public unary_function<T*, S>\n{\npublic:\n    explicit mem_fun_t(S (T::*p)());\n    S operator()(T* p) const;\n};\n\ntemplate<class S, class T, class A>\nclass mem_fun1_t : public binary_function<T*, A, S>\n{\npublic:\n    explicit mem_fun1_t(S (T::*p)(A));\n    S operator()(T* p, A x) const;\n};\n\ntemplate<class S, class T>          mem_fun_t<S,T>    mem_fun(S (T::*f)());\ntemplate<class S, class T, class A> mem_fun1_t<S,T,A> mem_fun(S (T::*f)(A));\n\ntemplate<class S, class T>\nclass mem_fun_ref_t : public unary_function<T, S>\n{\npublic:\n    explicit mem_fun_ref_t(S (T::*p)());\n    S operator()(T& p) const;\n};\n\ntemplate<class S, class T, class A>\nclass mem_fun1_ref_t : public binary_function<T, A, S>\n{\npublic:\n    explicit mem_fun1_ref_t(S (T::*p)(A));\n    S operator()(T& p, A x) const;\n};\n\ntemplate<class S, class T>          mem_fun_ref_t<S,T>    mem_fun_ref(S (T::*f)());\ntemplate<class S, class T, class A> mem_fun1_ref_t<S,T,A> mem_fun_ref(S (T::*f)(A));\n\ntemplate <class S, class T>\nclass const_mem_fun_t : public unary_function<const T*, S>\n{\npublic:\n    explicit const_mem_fun_t(S (T::*p)() const);\n    S operator()(const T* p) const;\n};\n\ntemplate <class S, class T, class A>\nclass const_mem_fun1_t : public binary_function<const T*, A, S>\n{\npublic:\n    explicit const_mem_fun1_t(S (T::*p)(A) const);\n    S operator()(const T* p, A x) const;\n};\n\ntemplate <class S, class T>          const_mem_fun_t<S,T>    mem_fun(S (T::*f)() const);\ntemplate <class S, class T, class A> const_mem_fun1_t<S,T,A> mem_fun(S (T::*f)(A) const);\n\ntemplate <class S, class T>\nclass const_mem_fun_ref_t : public unary_function<T, S>\n{\npublic:\n    explicit const_mem_fun_ref_t(S (T::*p)() const);\n    S operator()(const T& p) const;\n};\n\ntemplate <class S, class T, class A>\nclass const_mem_fun1_ref_t : public binary_function<T, A, S>\n{\npublic:\n    explicit const_mem_fun1_ref_t(S (T::*p)(A) const);\n    S operator()(const T& p, A x) const;\n};\n\ntemplate <class S, class T>          const_mem_fun_ref_t<S,T>    mem_fun_ref(S (T::*f)() const);\ntemplate <class S, class T, class A> const_mem_fun1_ref_t<S,T,A> mem_fun_ref(S (T::*f)(A) const);\n\ntemplate<class R, class T> unspecified mem_fn(R T::*);\n\nclass bad_function_call\n    : public exception\n{\n};\n\ntemplate<class> class function; // undefined\n\ntemplate<class R, class... ArgTypes>\nclass function<R(ArgTypes...)>\n  : public unary_function<T1, R>      // iff sizeof...(ArgTypes) == 1 and\n                                      // ArgTypes contains T1\n  : public binary_function<T1, T2, R> // iff sizeof...(ArgTypes) == 2 and\n                                      // ArgTypes contains T1 and T2\n{\npublic:\n    typedef R result_type;\n\n    // construct/copy/destroy:\n    function() noexcept;\n    function(nullptr_t) noexcept;\n    function(const function&);\n    function(function&&) noexcept;\n    template<class F>\n      function(F);\n    template<Allocator Alloc>\n      function(allocator_arg_t, const Alloc&) noexcept;            // removed in C++17\n    template<Allocator Alloc>\n      function(allocator_arg_t, const Alloc&, nullptr_t) noexcept; // removed in C++17\n    template<Allocator Alloc>\n      function(allocator_arg_t, const Alloc&, const function&);    // removed in C++17\n    template<Allocator Alloc>\n      function(allocator_arg_t, const Alloc&, function&&);         // removed in C++17\n    template<class F, Allocator Alloc>\n      function(allocator_arg_t, const Alloc&, F);                  // removed in C++17\n\n    function& operator=(const function&);\n    function& operator=(function&&) noexcept;\n    function& operator=(nullptr_t) noexcept;\n    template<class F>\n      function& operator=(F&&);\n    template<class F>\n      function& operator=(reference_wrapper<F>) noexcept;\n\n    ~function();\n\n    // function modifiers:\n    void swap(function&) noexcept;\n    template<class F, class Alloc>\n      void assign(F&&, const Alloc&);                 // Removed in C++17\n\n    // function capacity:\n    explicit operator bool() const noexcept;\n\n    // function invocation:\n    R operator()(ArgTypes...) const;\n\n    // function target access:\n    const std::type_info& target_type() const noexcept;\n    template <typename T>       T* target() noexcept;\n    template <typename T> const T* target() const noexcept;\n};\n\n// Null pointer comparisons:\ntemplate <class R, class ... ArgTypes>\n  bool operator==(const function<R(ArgTypes...)>&, nullptr_t) noexcept;\n\ntemplate <class R, class ... ArgTypes>\n  bool operator==(nullptr_t, const function<R(ArgTypes...)>&) noexcept;\n\ntemplate <class R, class ... ArgTypes>\n  bool operator!=(const function<R(ArgTypes...)>&, nullptr_t) noexcept;\n\ntemplate <class  R, class ... ArgTypes>\n  bool operator!=(nullptr_t, const function<R(ArgTypes...)>&) noexcept;\n\n// specialized algorithms:\ntemplate <class  R, class ... ArgTypes>\n  void swap(function<R(ArgTypes...)>&, function<R(ArgTypes...)>&) noexcept;\n\ntemplate <class T> struct hash;\n\ntemplate <> struct hash<bool>;\ntemplate <> struct hash<char>;\ntemplate <> struct hash<signed char>;\ntemplate <> struct hash<unsigned char>;\ntemplate <> struct hash<char16_t>;\ntemplate <> struct hash<char32_t>;\ntemplate <> struct hash<wchar_t>;\ntemplate <> struct hash<short>;\ntemplate <> struct hash<unsigned short>;\ntemplate <> struct hash<int>;\ntemplate <> struct hash<unsigned int>;\ntemplate <> struct hash<long>;\ntemplate <> struct hash<long long>;\ntemplate <> struct hash<unsigned long>;\ntemplate <> struct hash<unsigned long long>;\n\ntemplate <> struct hash<float>;\ntemplate <> struct hash<double>;\ntemplate <> struct hash<long double>;\n\ntemplate<class T> struct hash<T*>;\n\n}  // std\n\nPOLICY:  For non-variadic implementations, the number of arguments is limited\n         to 3.  It is hoped that the need for non-variadic implementations\n         will be minimal.\n\n*/\n\n#include <__config>\n#include <type_traits>\n#include <typeinfo>\n#include <exception>\n#include <memory>\n#include <tuple>\n\n#include <__functional_base>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS plus : binary_function<_Tp, _Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x + __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS plus<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS minus : binary_function<_Tp, _Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x - __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS minus<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) - _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) - _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) - _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS multiplies : binary_function<_Tp, _Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x * __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS multiplies<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) * _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) * _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) * _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS divides : binary_function<_Tp, _Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x / __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS divides<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) / _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) / _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) / _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS modulus : binary_function<_Tp, _Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x % __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS modulus<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) % _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) % _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) % _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS negate : unary_function<_Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x) const\n        {return -__x;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS negate<void>\n{\n    template <class _Tp>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_Tp&& __x) const\n    _NOEXCEPT_(noexcept(- _VSTD::forward<_Tp>(__x)))\n    -> decltype        (- _VSTD::forward<_Tp>(__x))\n        { return        - _VSTD::forward<_Tp>(__x); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS equal_to : binary_function<_Tp, _Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x == __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS equal_to<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) == _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) == _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) == _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS not_equal_to : binary_function<_Tp, _Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x != __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS not_equal_to<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) != _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) != _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) != _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS greater : binary_function<_Tp, _Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x > __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS greater<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) > _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) > _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) > _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n// less in <__functional_base>\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS greater_equal : binary_function<_Tp, _Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x >= __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS greater_equal<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) >= _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) >= _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) >= _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS less_equal : binary_function<_Tp, _Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x <= __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS less_equal<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) <= _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) <= _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) <= _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS logical_and : binary_function<_Tp, _Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x && __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS logical_and<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) && _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) && _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) && _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS logical_or : binary_function<_Tp, _Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x || __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS logical_or<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) || _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) || _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) || _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS logical_not : unary_function<_Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Tp& __x) const\n        {return !__x;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS logical_not<void>\n{\n    template <class _Tp>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_Tp&& __x) const\n    _NOEXCEPT_(noexcept(!_VSTD::forward<_Tp>(__x)))\n    -> decltype        (!_VSTD::forward<_Tp>(__x))\n        { return        !_VSTD::forward<_Tp>(__x); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS bit_and : binary_function<_Tp, _Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x & __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS bit_and<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) & _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) & _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) & _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS bit_or : binary_function<_Tp, _Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x | __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS bit_or<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) | _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) | _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) | _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS bit_xor : binary_function<_Tp, _Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x ^ __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS bit_xor<void>\n{\n    template <class _T1, class _T2>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) ^ _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) ^ _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) ^ _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\nstruct _LIBCPP_TEMPLATE_VIS bit_not : unary_function<_Tp, _Tp>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    _Tp operator()(const _Tp& __x) const\n        {return ~__x;}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS bit_not<void>\n{\n    template <class _Tp>\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_Tp&& __x) const\n    _NOEXCEPT_(noexcept(~_VSTD::forward<_Tp>(__x)))\n    -> decltype        (~_VSTD::forward<_Tp>(__x))\n        { return        ~_VSTD::forward<_Tp>(__x); }\n    typedef void is_transparent;\n};\n#endif\n\ntemplate <class _Predicate>\nclass _LIBCPP_TEMPLATE_VIS unary_negate\n    : public unary_function<typename _Predicate::argument_type, bool>\n{\n    _Predicate __pred_;\npublic:\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    explicit unary_negate(const _Predicate& __pred)\n        : __pred_(__pred) {}\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const typename _Predicate::argument_type& __x) const\n        {return !__pred_(__x);}\n};\n\ntemplate <class _Predicate>\ninline _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\nunary_negate<_Predicate>\nnot1(const _Predicate& __pred) {return unary_negate<_Predicate>(__pred);}\n\ntemplate <class _Predicate>\nclass _LIBCPP_TEMPLATE_VIS binary_negate\n    : public binary_function<typename _Predicate::first_argument_type,\n                             typename _Predicate::second_argument_type,\n                             bool>\n{\n    _Predicate __pred_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit _LIBCPP_CONSTEXPR_AFTER_CXX11 \n    binary_negate(const _Predicate& __pred) : __pred_(__pred) {}\n\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const typename _Predicate::first_argument_type& __x,\n                    const typename _Predicate::second_argument_type& __y) const\n        {return !__pred_(__x, __y);}\n};\n\ntemplate <class _Predicate>\ninline _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\nbinary_negate<_Predicate>\nnot2(const _Predicate& __pred) {return binary_negate<_Predicate>(__pred);}\n\ntemplate <class __Operation>\nclass _LIBCPP_TEMPLATE_VIS binder1st\n    : public unary_function<typename __Operation::second_argument_type,\n                            typename __Operation::result_type>\n{\nprotected:\n    __Operation                               op;\n    typename __Operation::first_argument_type value;\npublic:\n    _LIBCPP_INLINE_VISIBILITY binder1st(const __Operation& __x,\n                               const typename __Operation::first_argument_type __y)\n        : op(__x), value(__y) {}\n    _LIBCPP_INLINE_VISIBILITY typename __Operation::result_type operator()\n        (typename __Operation::second_argument_type& __x) const\n            {return op(value, __x);}\n    _LIBCPP_INLINE_VISIBILITY typename __Operation::result_type operator()\n        (const typename __Operation::second_argument_type& __x) const\n            {return op(value, __x);}\n};\n\ntemplate <class __Operation, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbinder1st<__Operation>\nbind1st(const __Operation& __op, const _Tp& __x)\n    {return binder1st<__Operation>(__op, __x);}\n\ntemplate <class __Operation>\nclass _LIBCPP_TEMPLATE_VIS binder2nd\n    : public unary_function<typename __Operation::first_argument_type,\n                            typename __Operation::result_type>\n{\nprotected:\n    __Operation                                op;\n    typename __Operation::second_argument_type value;\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    binder2nd(const __Operation& __x, const typename __Operation::second_argument_type __y)\n        : op(__x), value(__y) {}\n    _LIBCPP_INLINE_VISIBILITY typename __Operation::result_type operator()\n        (      typename __Operation::first_argument_type& __x) const\n            {return op(__x, value);}\n    _LIBCPP_INLINE_VISIBILITY typename __Operation::result_type operator()\n        (const typename __Operation::first_argument_type& __x) const\n            {return op(__x, value);}\n};\n\ntemplate <class __Operation, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbinder2nd<__Operation>\nbind2nd(const __Operation& __op, const _Tp& __x)\n    {return binder2nd<__Operation>(__op, __x);}\n\ntemplate <class _Arg, class _Result>\nclass _LIBCPP_TEMPLATE_VIS pointer_to_unary_function\n    : public unary_function<_Arg, _Result>\n{\n    _Result (*__f_)(_Arg);\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit pointer_to_unary_function(_Result (*__f)(_Arg))\n        : __f_(__f) {}\n    _LIBCPP_INLINE_VISIBILITY _Result operator()(_Arg __x) const\n        {return __f_(__x);}\n};\n\ntemplate <class _Arg, class _Result>\ninline _LIBCPP_INLINE_VISIBILITY\npointer_to_unary_function<_Arg,_Result>\nptr_fun(_Result (*__f)(_Arg))\n    {return pointer_to_unary_function<_Arg,_Result>(__f);}\n\ntemplate <class _Arg1, class _Arg2, class _Result>\nclass _LIBCPP_TEMPLATE_VIS pointer_to_binary_function\n    : public binary_function<_Arg1, _Arg2, _Result>\n{\n    _Result (*__f_)(_Arg1, _Arg2);\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit pointer_to_binary_function(_Result (*__f)(_Arg1, _Arg2))\n        : __f_(__f) {}\n    _LIBCPP_INLINE_VISIBILITY _Result operator()(_Arg1 __x, _Arg2 __y) const\n        {return __f_(__x, __y);}\n};\n\ntemplate <class _Arg1, class _Arg2, class _Result>\ninline _LIBCPP_INLINE_VISIBILITY\npointer_to_binary_function<_Arg1,_Arg2,_Result>\nptr_fun(_Result (*__f)(_Arg1,_Arg2))\n    {return pointer_to_binary_function<_Arg1,_Arg2,_Result>(__f);}\n\ntemplate<class _Sp, class _Tp>\nclass _LIBCPP_TEMPLATE_VIS mem_fun_t : public unary_function<_Tp*, _Sp>\n{\n    _Sp (_Tp::*__p_)();\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit mem_fun_t(_Sp (_Tp::*__p)())\n        : __p_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY _Sp operator()(_Tp* __p) const\n        {return (__p->*__p_)();}\n};\n\ntemplate<class _Sp, class _Tp, class _Ap>\nclass _LIBCPP_TEMPLATE_VIS mem_fun1_t : public binary_function<_Tp*, _Ap, _Sp>\n{\n    _Sp (_Tp::*__p_)(_Ap);\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit mem_fun1_t(_Sp (_Tp::*__p)(_Ap))\n        : __p_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY _Sp operator()(_Tp* __p, _Ap __x) const\n        {return (__p->*__p_)(__x);}\n};\n\ntemplate<class _Sp, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nmem_fun_t<_Sp,_Tp>\nmem_fun(_Sp (_Tp::*__f)())\n    {return mem_fun_t<_Sp,_Tp>(__f);}\n\ntemplate<class _Sp, class _Tp, class _Ap>\ninline _LIBCPP_INLINE_VISIBILITY\nmem_fun1_t<_Sp,_Tp,_Ap>\nmem_fun(_Sp (_Tp::*__f)(_Ap))\n    {return mem_fun1_t<_Sp,_Tp,_Ap>(__f);}\n\ntemplate<class _Sp, class _Tp>\nclass _LIBCPP_TEMPLATE_VIS mem_fun_ref_t : public unary_function<_Tp, _Sp>\n{\n    _Sp (_Tp::*__p_)();\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit mem_fun_ref_t(_Sp (_Tp::*__p)())\n        : __p_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY _Sp operator()(_Tp& __p) const\n        {return (__p.*__p_)();}\n};\n\ntemplate<class _Sp, class _Tp, class _Ap>\nclass _LIBCPP_TEMPLATE_VIS mem_fun1_ref_t : public binary_function<_Tp, _Ap, _Sp>\n{\n    _Sp (_Tp::*__p_)(_Ap);\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit mem_fun1_ref_t(_Sp (_Tp::*__p)(_Ap))\n        : __p_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY _Sp operator()(_Tp& __p, _Ap __x) const\n        {return (__p.*__p_)(__x);}\n};\n\ntemplate<class _Sp, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nmem_fun_ref_t<_Sp,_Tp>\nmem_fun_ref(_Sp (_Tp::*__f)())\n    {return mem_fun_ref_t<_Sp,_Tp>(__f);}\n\ntemplate<class _Sp, class _Tp, class _Ap>\ninline _LIBCPP_INLINE_VISIBILITY\nmem_fun1_ref_t<_Sp,_Tp,_Ap>\nmem_fun_ref(_Sp (_Tp::*__f)(_Ap))\n    {return mem_fun1_ref_t<_Sp,_Tp,_Ap>(__f);}\n\ntemplate <class _Sp, class _Tp>\nclass _LIBCPP_TEMPLATE_VIS const_mem_fun_t : public unary_function<const _Tp*, _Sp>\n{\n    _Sp (_Tp::*__p_)() const;\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit const_mem_fun_t(_Sp (_Tp::*__p)() const)\n        : __p_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY _Sp operator()(const _Tp* __p) const\n        {return (__p->*__p_)();}\n};\n\ntemplate <class _Sp, class _Tp, class _Ap>\nclass _LIBCPP_TEMPLATE_VIS const_mem_fun1_t : public binary_function<const _Tp*, _Ap, _Sp>\n{\n    _Sp (_Tp::*__p_)(_Ap) const;\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit const_mem_fun1_t(_Sp (_Tp::*__p)(_Ap) const)\n        : __p_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY _Sp operator()(const _Tp* __p, _Ap __x) const\n        {return (__p->*__p_)(__x);}\n};\n\ntemplate <class _Sp, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nconst_mem_fun_t<_Sp,_Tp>\nmem_fun(_Sp (_Tp::*__f)() const)\n    {return const_mem_fun_t<_Sp,_Tp>(__f);}\n\ntemplate <class _Sp, class _Tp, class _Ap>\ninline _LIBCPP_INLINE_VISIBILITY\nconst_mem_fun1_t<_Sp,_Tp,_Ap>\nmem_fun(_Sp (_Tp::*__f)(_Ap) const)\n    {return const_mem_fun1_t<_Sp,_Tp,_Ap>(__f);}\n\ntemplate <class _Sp, class _Tp>\nclass _LIBCPP_TEMPLATE_VIS const_mem_fun_ref_t : public unary_function<_Tp, _Sp>\n{\n    _Sp (_Tp::*__p_)() const;\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit const_mem_fun_ref_t(_Sp (_Tp::*__p)() const)\n        : __p_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY _Sp operator()(const _Tp& __p) const\n        {return (__p.*__p_)();}\n};\n\ntemplate <class _Sp, class _Tp, class _Ap>\nclass _LIBCPP_TEMPLATE_VIS const_mem_fun1_ref_t\n    : public binary_function<_Tp, _Ap, _Sp>\n{\n    _Sp (_Tp::*__p_)(_Ap) const;\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit const_mem_fun1_ref_t(_Sp (_Tp::*__p)(_Ap) const)\n        : __p_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY _Sp operator()(const _Tp& __p, _Ap __x) const\n        {return (__p.*__p_)(__x);}\n};\n\ntemplate <class _Sp, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nconst_mem_fun_ref_t<_Sp,_Tp>\nmem_fun_ref(_Sp (_Tp::*__f)() const)\n    {return const_mem_fun_ref_t<_Sp,_Tp>(__f);}\n\ntemplate <class _Sp, class _Tp, class _Ap>\ninline _LIBCPP_INLINE_VISIBILITY\nconst_mem_fun1_ref_t<_Sp,_Tp,_Ap>\nmem_fun_ref(_Sp (_Tp::*__f)(_Ap) const)\n    {return const_mem_fun1_ref_t<_Sp,_Tp,_Ap>(__f);}\n\n////////////////////////////////////////////////////////////////////////////////\n//                                MEMFUN\n//==============================================================================\n\ntemplate <class _Tp>\nclass __mem_fn\n    : public __weak_result_type<_Tp>\n{\npublic:\n    // types\n    typedef _Tp type;\nprivate:\n    type __f_;\n\npublic:\n    _LIBCPP_INLINE_VISIBILITY __mem_fn(type __f) _NOEXCEPT : __f_(__f) {}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n    // invoke\n    template <class... _ArgTypes>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return<type, _ArgTypes...>::type\n    operator() (_ArgTypes&&... __args) const {\n        return __invoke(__f_, _VSTD::forward<_ArgTypes>(__args)...);\n    }\n#else\n\n    template <class _A0>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return0<type, _A0>::type\n    operator() (_A0& __a0) const {\n        return __invoke(__f_, __a0);\n    }\n\n    template <class _A0>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return0<type, _A0 const>::type\n    operator() (_A0 const& __a0) const {\n        return __invoke(__f_, __a0);\n    }\n\n    template <class _A0, class _A1>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return1<type, _A0, _A1>::type\n    operator() (_A0& __a0, _A1& __a1) const {\n        return __invoke(__f_, __a0, __a1);\n    }\n\n    template <class _A0, class _A1>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return1<type, _A0 const, _A1>::type\n    operator() (_A0 const& __a0, _A1& __a1) const {\n        return __invoke(__f_, __a0, __a1);\n    }\n\n    template <class _A0, class _A1>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return1<type, _A0, _A1 const>::type\n    operator() (_A0& __a0, _A1 const& __a1) const {\n        return __invoke(__f_, __a0, __a1);\n    }\n\n    template <class _A0, class _A1>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return1<type, _A0 const, _A1 const>::type\n    operator() (_A0 const& __a0, _A1 const& __a1) const {\n        return __invoke(__f_, __a0, __a1);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0, _A1, _A2>::type\n    operator() (_A0& __a0, _A1& __a1, _A2& __a2) const {\n        return __invoke(__f_, __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0 const, _A1, _A2>::type\n    operator() (_A0 const& __a0, _A1& __a1, _A2& __a2) const {\n        return __invoke(__f_, __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0, _A1 const, _A2>::type\n    operator() (_A0& __a0, _A1 const& __a1, _A2& __a2) const {\n        return __invoke(__f_, __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0, _A1, _A2 const>::type\n    operator() (_A0& __a0, _A1& __a1, _A2 const& __a2) const {\n        return __invoke(__f_, __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0 const, _A1 const, _A2>::type\n    operator() (_A0 const& __a0, _A1 const& __a1, _A2& __a2) const {\n        return __invoke(__f_, __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0 const, _A1, _A2 const>::type\n    operator() (_A0 const& __a0, _A1& __a1, _A2 const& __a2) const {\n        return __invoke(__f_, __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0, _A1 const, _A2 const>::type\n    operator() (_A0& __a0, _A1 const& __a1, _A2 const& __a2) const {\n        return __invoke(__f_, __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0 const, _A1 const, _A2 const>::type\n    operator() (_A0 const& __a0, _A1 const& __a1, _A2 const& __a2) const {\n        return __invoke(__f_, __a0, __a1, __a2);\n    }\n#endif\n};\n\ntemplate<class _Rp, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n__mem_fn<_Rp _Tp::*>\nmem_fn(_Rp _Tp::* __pm) _NOEXCEPT\n{\n    return __mem_fn<_Rp _Tp::*>(__pm);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//                                FUNCTION\n//==============================================================================\n\n// bad_function_call\n\nclass _LIBCPP_EXCEPTION_ABI bad_function_call\n    : public exception\n{\n};\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_bad_function_call()\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw bad_function_call();\n#else\n\t_VSTD::abort();\n#endif\n}\n\ntemplate<class _Fp> class _LIBCPP_TEMPLATE_VIS function; // undefined\n\nnamespace __function\n{\n\ntemplate<class _Rp>\nstruct __maybe_derive_from_unary_function\n{\n};\n\ntemplate<class _Rp, class _A1>\nstruct __maybe_derive_from_unary_function<_Rp(_A1)>\n    : public unary_function<_A1, _Rp>\n{\n};\n\ntemplate<class _Rp>\nstruct __maybe_derive_from_binary_function\n{\n};\n\ntemplate<class _Rp, class _A1, class _A2>\nstruct __maybe_derive_from_binary_function<_Rp(_A1, _A2)>\n    : public binary_function<_A1, _A2, _Rp>\n{\n};\n\ntemplate <class _Fp>\n_LIBCPP_INLINE_VISIBILITY\nbool __not_null(_Fp const&) { return true; }\n\ntemplate <class _Fp>\n_LIBCPP_INLINE_VISIBILITY\nbool __not_null(_Fp* __ptr) { return __ptr; }\n\ntemplate <class _Ret, class _Class>\n_LIBCPP_INLINE_VISIBILITY\nbool __not_null(_Ret _Class::*__ptr) { return __ptr; }\n\ntemplate <class _Fp>\n_LIBCPP_INLINE_VISIBILITY\nbool __not_null(function<_Fp> const& __f) { return !!__f; }\n\n} // namespace __function\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\nnamespace __function {\n\ntemplate<class _Fp> class __base;\n\ntemplate<class _Rp, class ..._ArgTypes>\nclass __base<_Rp(_ArgTypes...)>\n{\n    __base(const __base&);\n    __base& operator=(const __base&);\npublic:\n    _LIBCPP_INLINE_VISIBILITY __base() {}\n    _LIBCPP_INLINE_VISIBILITY virtual ~__base() {}\n    virtual __base* __clone() const = 0;\n    virtual void __clone(__base*) const = 0;\n    virtual void destroy() _NOEXCEPT = 0;\n    virtual void destroy_deallocate() _NOEXCEPT = 0;\n    virtual _Rp operator()(_ArgTypes&& ...) = 0;\n#ifndef _LIBCPP_NO_RTTI\n    virtual const void* target(const type_info&) const _NOEXCEPT = 0;\n    virtual const std::type_info& target_type() const _NOEXCEPT = 0;\n#endif  // _LIBCPP_NO_RTTI\n};\n\ntemplate<class _FD, class _Alloc, class _FB> class __func;\n\ntemplate<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>\nclass __func<_Fp, _Alloc, _Rp(_ArgTypes...)>\n    : public  __base<_Rp(_ArgTypes...)>\n{\n    __compressed_pair<_Fp, _Alloc> __f_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __func(_Fp&& __f)\n        : __f_(piecewise_construct, _VSTD::forward_as_tuple(_VSTD::move(__f)),\n                                    _VSTD::forward_as_tuple()) {}\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __func(const _Fp& __f, const _Alloc& __a)\n        : __f_(piecewise_construct, _VSTD::forward_as_tuple(__f),\n                                    _VSTD::forward_as_tuple(__a)) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __func(const _Fp& __f, _Alloc&& __a)\n        : __f_(piecewise_construct, _VSTD::forward_as_tuple(__f),\n                                    _VSTD::forward_as_tuple(_VSTD::move(__a))) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __func(_Fp&& __f, _Alloc&& __a)\n        : __f_(piecewise_construct, _VSTD::forward_as_tuple(_VSTD::move(__f)),\n                                    _VSTD::forward_as_tuple(_VSTD::move(__a))) {}\n    virtual __base<_Rp(_ArgTypes...)>* __clone() const;\n    virtual void __clone(__base<_Rp(_ArgTypes...)>*) const;\n    virtual void destroy() _NOEXCEPT;\n    virtual void destroy_deallocate() _NOEXCEPT;\n    virtual _Rp operator()(_ArgTypes&& ... __arg);\n#ifndef _LIBCPP_NO_RTTI\n    virtual const void* target(const type_info&) const _NOEXCEPT;\n    virtual const std::type_info& target_type() const _NOEXCEPT;\n#endif  // _LIBCPP_NO_RTTI\n};\n\ntemplate<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>\n__base<_Rp(_ArgTypes...)>*\n__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::__clone() const\n{\n    typedef allocator_traits<_Alloc> __alloc_traits;\n    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;\n    _Ap __a(__f_.second());\n    typedef __allocator_destructor<_Ap> _Dp;\n    unique_ptr<__func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));\n    ::new (__hold.get()) __func(__f_.first(), _Alloc(__a));\n    return __hold.release();\n}\n\ntemplate<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>\nvoid\n__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::__clone(__base<_Rp(_ArgTypes...)>* __p) const\n{\n    ::new (__p) __func(__f_.first(), __f_.second());\n}\n\ntemplate<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>\nvoid\n__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::destroy() _NOEXCEPT\n{\n    __f_.~__compressed_pair<_Fp, _Alloc>();\n}\n\ntemplate<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>\nvoid\n__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::destroy_deallocate() _NOEXCEPT\n{\n    typedef allocator_traits<_Alloc> __alloc_traits;\n    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;\n    _Ap __a(__f_.second());\n    __f_.~__compressed_pair<_Fp, _Alloc>();\n    __a.deallocate(this, 1);\n}\n\ntemplate<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>\n_Rp\n__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::operator()(_ArgTypes&& ... __arg)\n{\n    typedef __invoke_void_return_wrapper<_Rp> _Invoker;\n    return _Invoker::__call(__f_.first(), _VSTD::forward<_ArgTypes>(__arg)...);\n}\n\n#ifndef _LIBCPP_NO_RTTI\n\ntemplate<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>\nconst void*\n__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::target(const type_info& __ti) const _NOEXCEPT\n{\n    if (__ti == typeid(_Fp))\n        return &__f_.first();\n    return (const void*)0;\n}\n\ntemplate<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>\nconst std::type_info&\n__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::target_type() const _NOEXCEPT\n{\n    return typeid(_Fp);\n}\n\n#endif  // _LIBCPP_NO_RTTI\n\n}  // __function\n\ntemplate<class _Rp, class ..._ArgTypes>\nclass _LIBCPP_TEMPLATE_VIS function<_Rp(_ArgTypes...)>\n    : public __function::__maybe_derive_from_unary_function<_Rp(_ArgTypes...)>,\n      public __function::__maybe_derive_from_binary_function<_Rp(_ArgTypes...)>\n{\n    typedef __function::__base<_Rp(_ArgTypes...)> __base;\n    typename aligned_storage<3*sizeof(void*)>::type __buf_;\n    __base* __f_;\n\n    _LIBCPP_NO_CFI static __base *__as_base(void *p) {\n      return reinterpret_cast<__base*>(p);\n    }\n\n    template <class _Fp, bool = !is_same<_Fp, function>::value &&\n                                __invokable<_Fp&, _ArgTypes...>::value>\n        struct __callable;\n    template <class _Fp>\n        struct __callable<_Fp, true>\n        {\n            static const bool value = is_same<void, _Rp>::value ||\n                is_convertible<typename __invoke_of<_Fp&, _ArgTypes...>::type,\n                               _Rp>::value;\n        };\n    template <class _Fp>\n        struct __callable<_Fp, false>\n        {\n            static const bool value = false;\n        };\npublic:\n    typedef _Rp result_type;\n\n    // construct/copy/destroy:\n    _LIBCPP_INLINE_VISIBILITY\n    function() _NOEXCEPT : __f_(0) {}\n    _LIBCPP_INLINE_VISIBILITY\n    function(nullptr_t) _NOEXCEPT : __f_(0) {}\n    function(const function&);\n    function(function&&) _NOEXCEPT;\n    template<class _Fp, class = typename enable_if<\n        __callable<_Fp>::value && !is_same<_Fp, function>::value\n    >::type>\n    function(_Fp);\n\n#if _LIBCPP_STD_VER <= 14\n    template<class _Alloc>\n      _LIBCPP_INLINE_VISIBILITY\n      function(allocator_arg_t, const _Alloc&) _NOEXCEPT : __f_(0) {}\n    template<class _Alloc>\n      _LIBCPP_INLINE_VISIBILITY\n      function(allocator_arg_t, const _Alloc&, nullptr_t) _NOEXCEPT : __f_(0) {}\n    template<class _Alloc>\n      function(allocator_arg_t, const _Alloc&, const function&);\n    template<class _Alloc>\n      function(allocator_arg_t, const _Alloc&, function&&);\n    template<class _Fp, class _Alloc, class = typename enable_if<__callable<_Fp>::value>::type>\n      function(allocator_arg_t, const _Alloc& __a, _Fp __f);\n#endif\n\n    function& operator=(const function&);\n    function& operator=(function&&) _NOEXCEPT;\n    function& operator=(nullptr_t) _NOEXCEPT;\n    template<class _Fp>\n      typename enable_if\n      <\n        __callable<typename decay<_Fp>::type>::value &&\n        !is_same<typename remove_reference<_Fp>::type, function>::value,\n        function&\n      >::type\n      operator=(_Fp&&);\n\n    ~function();\n\n    // function modifiers:\n    void swap(function&) _NOEXCEPT;\n\n#if _LIBCPP_STD_VER <= 14\n    template<class _Fp, class _Alloc>\n      _LIBCPP_INLINE_VISIBILITY\n      void assign(_Fp&& __f, const _Alloc& __a)\n        {function(allocator_arg, __a, _VSTD::forward<_Fp>(__f)).swap(*this);}\n#endif\n\n    // function capacity:\n    _LIBCPP_INLINE_VISIBILITY\n        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return __f_;}\n\n    // deleted overloads close possible hole in the type system\n    template<class _R2, class... _ArgTypes2>\n      bool operator==(const function<_R2(_ArgTypes2...)>&) const = delete;\n    template<class _R2, class... _ArgTypes2>\n      bool operator!=(const function<_R2(_ArgTypes2...)>&) const = delete;\npublic:\n    // function invocation:\n    _Rp operator()(_ArgTypes...) const;\n\n#ifndef _LIBCPP_NO_RTTI\n    // function target access:\n    const std::type_info& target_type() const _NOEXCEPT;\n    template <typename _Tp> _Tp* target() _NOEXCEPT;\n    template <typename _Tp> const _Tp* target() const _NOEXCEPT;\n#endif  // _LIBCPP_NO_RTTI\n};\n\ntemplate<class _Rp, class ..._ArgTypes>\nfunction<_Rp(_ArgTypes...)>::function(const function& __f)\n{\n    if (__f.__f_ == 0)\n        __f_ = 0;\n    else if ((void *)__f.__f_ == &__f.__buf_)\n    {\n        __f_ = __as_base(&__buf_);\n        __f.__f_->__clone(__f_);\n    }\n    else\n        __f_ = __f.__f_->__clone();\n}\n\n#if _LIBCPP_STD_VER <= 14\ntemplate<class _Rp, class ..._ArgTypes>\ntemplate <class _Alloc>\nfunction<_Rp(_ArgTypes...)>::function(allocator_arg_t, const _Alloc&,\n                                     const function& __f)\n{\n    if (__f.__f_ == 0)\n        __f_ = 0;\n    else if ((void *)__f.__f_ == &__f.__buf_)\n    {\n        __f_ = __as_base(&__buf_);\n        __f.__f_->__clone(__f_);\n    }\n    else\n        __f_ = __f.__f_->__clone();\n}\n#endif\n\ntemplate<class _Rp, class ..._ArgTypes>\nfunction<_Rp(_ArgTypes...)>::function(function&& __f) _NOEXCEPT\n{\n    if (__f.__f_ == 0)\n        __f_ = 0;\n    else if ((void *)__f.__f_ == &__f.__buf_)\n    {\n        __f_ = __as_base(&__buf_);\n        __f.__f_->__clone(__f_);\n    }\n    else\n    {\n        __f_ = __f.__f_;\n        __f.__f_ = 0;\n    }\n}\n\n#if _LIBCPP_STD_VER <= 14\ntemplate<class _Rp, class ..._ArgTypes>\ntemplate <class _Alloc>\nfunction<_Rp(_ArgTypes...)>::function(allocator_arg_t, const _Alloc&,\n                                     function&& __f)\n{\n    if (__f.__f_ == 0)\n        __f_ = 0;\n    else if ((void *)__f.__f_ == &__f.__buf_)\n    {\n        __f_ = __as_base(&__buf_);\n        __f.__f_->__clone(__f_);\n    }\n    else\n    {\n        __f_ = __f.__f_;\n        __f.__f_ = 0;\n    }\n}\n#endif\n\ntemplate<class _Rp, class ..._ArgTypes>\ntemplate <class _Fp, class>\nfunction<_Rp(_ArgTypes...)>::function(_Fp __f)\n    : __f_(0)\n{\n    if (__function::__not_null(__f))\n    {\n        typedef __function::__func<_Fp, allocator<_Fp>, _Rp(_ArgTypes...)> _FF;\n        if (sizeof(_FF) <= sizeof(__buf_) && is_nothrow_copy_constructible<_Fp>::value)\n        {\n            __f_ = ::new((void*)&__buf_) _FF(_VSTD::move(__f));\n        }\n        else\n        {\n            typedef allocator<_FF> _Ap;\n            _Ap __a;\n            typedef __allocator_destructor<_Ap> _Dp;\n            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));\n            ::new (__hold.get()) _FF(_VSTD::move(__f), allocator<_Fp>(__a));\n            __f_ = __hold.release();\n        }\n    }\n}\n\n#if _LIBCPP_STD_VER <= 14\ntemplate<class _Rp, class ..._ArgTypes>\ntemplate <class _Fp, class _Alloc, class>\nfunction<_Rp(_ArgTypes...)>::function(allocator_arg_t, const _Alloc& __a0, _Fp __f)\n    : __f_(0)\n{\n    typedef allocator_traits<_Alloc> __alloc_traits;\n    if (__function::__not_null(__f))\n    {\n        typedef __function::__func<_Fp, _Alloc, _Rp(_ArgTypes...)> _FF;\n        typedef typename __rebind_alloc_helper<__alloc_traits, _FF>::type _Ap;\n        _Ap __a(__a0);\n        if (sizeof(_FF) <= sizeof(__buf_) && \n            is_nothrow_copy_constructible<_Fp>::value && is_nothrow_copy_constructible<_Ap>::value)\n        {\n            __f_ = ::new((void*)&__buf_) _FF(_VSTD::move(__f), _Alloc(__a));\n        }\n        else\n        {\n            typedef __allocator_destructor<_Ap> _Dp;\n            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));\n            ::new (__hold.get()) _FF(_VSTD::move(__f), _Alloc(__a));\n            __f_ = __hold.release();\n        }\n    }\n}\n#endif\n\ntemplate<class _Rp, class ..._ArgTypes>\nfunction<_Rp(_ArgTypes...)>&\nfunction<_Rp(_ArgTypes...)>::operator=(const function& __f)\n{\n    function(__f).swap(*this);\n    return *this;\n}\n\ntemplate<class _Rp, class ..._ArgTypes>\nfunction<_Rp(_ArgTypes...)>&\nfunction<_Rp(_ArgTypes...)>::operator=(function&& __f) _NOEXCEPT\n{\n    if ((void *)__f_ == &__buf_)\n        __f_->destroy();\n    else if (__f_)\n        __f_->destroy_deallocate();\n    __f_ = 0;\n    if (__f.__f_ == 0)\n        __f_ = 0;\n    else if ((void *)__f.__f_ == &__f.__buf_)\n    {\n        __f_ = __as_base(&__buf_);\n        __f.__f_->__clone(__f_);\n    }\n    else\n    {\n        __f_ = __f.__f_;\n        __f.__f_ = 0;\n    }\n    return *this;\n}\n\ntemplate<class _Rp, class ..._ArgTypes>\nfunction<_Rp(_ArgTypes...)>&\nfunction<_Rp(_ArgTypes...)>::operator=(nullptr_t) _NOEXCEPT\n{\n    if ((void *)__f_ == &__buf_)\n        __f_->destroy();\n    else if (__f_)\n        __f_->destroy_deallocate();\n    __f_ = 0;\n    return *this;\n}\n\ntemplate<class _Rp, class ..._ArgTypes>\ntemplate <class _Fp>\ntypename enable_if\n<\n    function<_Rp(_ArgTypes...)>::template __callable<typename decay<_Fp>::type>::value &&\n    !is_same<typename remove_reference<_Fp>::type, function<_Rp(_ArgTypes...)>>::value,\n    function<_Rp(_ArgTypes...)>&\n>::type\nfunction<_Rp(_ArgTypes...)>::operator=(_Fp&& __f)\n{\n    function(_VSTD::forward<_Fp>(__f)).swap(*this);\n    return *this;\n}\n\ntemplate<class _Rp, class ..._ArgTypes>\nfunction<_Rp(_ArgTypes...)>::~function()\n{\n    if ((void *)__f_ == &__buf_)\n        __f_->destroy();\n    else if (__f_)\n        __f_->destroy_deallocate();\n}\n\ntemplate<class _Rp, class ..._ArgTypes>\nvoid\nfunction<_Rp(_ArgTypes...)>::swap(function& __f) _NOEXCEPT\n{\n    if (_VSTD::addressof(__f) == this)\n      return;\n    if ((void *)__f_ == &__buf_ && (void *)__f.__f_ == &__f.__buf_)\n    {\n        typename aligned_storage<sizeof(__buf_)>::type __tempbuf;\n        __base* __t = __as_base(&__tempbuf);\n        __f_->__clone(__t);\n        __f_->destroy();\n        __f_ = 0;\n        __f.__f_->__clone(__as_base(&__buf_));\n        __f.__f_->destroy();\n        __f.__f_ = 0;\n        __f_ = __as_base(&__buf_);\n        __t->__clone(__as_base(&__f.__buf_));\n        __t->destroy();\n        __f.__f_ = __as_base(&__f.__buf_);\n    }\n    else if ((void *)__f_ == &__buf_)\n    {\n        __f_->__clone(__as_base(&__f.__buf_));\n        __f_->destroy();\n        __f_ = __f.__f_;\n        __f.__f_ = __as_base(&__f.__buf_);\n    }\n    else if ((void *)__f.__f_ == &__f.__buf_)\n    {\n        __f.__f_->__clone(__as_base(&__buf_));\n        __f.__f_->destroy();\n        __f.__f_ = __f_;\n        __f_ = __as_base(&__buf_);\n    }\n    else\n        _VSTD::swap(__f_, __f.__f_);\n}\n\ntemplate<class _Rp, class ..._ArgTypes>\n_Rp\nfunction<_Rp(_ArgTypes...)>::operator()(_ArgTypes... __arg) const\n{\n    if (__f_ == 0)\n        __throw_bad_function_call();\n    return (*__f_)(_VSTD::forward<_ArgTypes>(__arg)...);\n}\n\n#ifndef _LIBCPP_NO_RTTI\n\ntemplate<class _Rp, class ..._ArgTypes>\nconst std::type_info&\nfunction<_Rp(_ArgTypes...)>::target_type() const _NOEXCEPT\n{\n    if (__f_ == 0)\n        return typeid(void);\n    return __f_->target_type();\n}\n\ntemplate<class _Rp, class ..._ArgTypes>\ntemplate <typename _Tp>\n_Tp*\nfunction<_Rp(_ArgTypes...)>::target() _NOEXCEPT\n{\n    if (__f_ == 0)\n        return (_Tp*)0;\n    return (_Tp*)__f_->target(typeid(_Tp));\n}\n\ntemplate<class _Rp, class ..._ArgTypes>\ntemplate <typename _Tp>\nconst _Tp*\nfunction<_Rp(_ArgTypes...)>::target() const _NOEXCEPT\n{\n    if (__f_ == 0)\n        return (const _Tp*)0;\n    return (const _Tp*)__f_->target(typeid(_Tp));\n}\n\n#endif  // _LIBCPP_NO_RTTI\n\ntemplate <class _Rp, class... _ArgTypes>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const function<_Rp(_ArgTypes...)>& __f, nullptr_t) _NOEXCEPT {return !__f;}\n\ntemplate <class _Rp, class... _ArgTypes>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(nullptr_t, const function<_Rp(_ArgTypes...)>& __f) _NOEXCEPT {return !__f;}\n\ntemplate <class _Rp, class... _ArgTypes>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const function<_Rp(_ArgTypes...)>& __f, nullptr_t) _NOEXCEPT {return (bool)__f;}\n\ntemplate <class _Rp, class... _ArgTypes>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(nullptr_t, const function<_Rp(_ArgTypes...)>& __f) _NOEXCEPT {return (bool)__f;}\n\ntemplate <class _Rp, class... _ArgTypes>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(function<_Rp(_ArgTypes...)>& __x, function<_Rp(_ArgTypes...)>& __y) _NOEXCEPT\n{return __x.swap(__y);}\n\n#else // _LIBCPP_HAS_NO_VARIADICS\n\n#include <__functional_03>\n\n#endif\n\n////////////////////////////////////////////////////////////////////////////////\n//                                  BIND\n//==============================================================================\n\ntemplate<class _Tp> struct __is_bind_expression : public false_type {};\ntemplate<class _Tp> struct _LIBCPP_TEMPLATE_VIS is_bind_expression\n    : public __is_bind_expression<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 14\ntemplate <class _Tp>\nconstexpr size_t is_bind_expression_v = is_bind_expression<_Tp>::value;\n#endif\n\ntemplate<class _Tp> struct __is_placeholder : public integral_constant<int, 0> {};\ntemplate<class _Tp> struct _LIBCPP_TEMPLATE_VIS is_placeholder\n    : public __is_placeholder<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 14\ntemplate <class _Tp>\nconstexpr size_t is_placeholder_v = is_placeholder<_Tp>::value;\n#endif\n\nnamespace placeholders\n{\n\ntemplate <int _Np> struct __ph {};\n\n#if defined(_LIBCPP_CXX03_LANG) || defined(_LIBCPP_BUILDING_BIND)\n_LIBCPP_FUNC_VIS extern const __ph<1>   _1;\n_LIBCPP_FUNC_VIS extern const __ph<2>   _2;\n_LIBCPP_FUNC_VIS extern const __ph<3>   _3;\n_LIBCPP_FUNC_VIS extern const __ph<4>   _4;\n_LIBCPP_FUNC_VIS extern const __ph<5>   _5;\n_LIBCPP_FUNC_VIS extern const __ph<6>   _6;\n_LIBCPP_FUNC_VIS extern const __ph<7>   _7;\n_LIBCPP_FUNC_VIS extern const __ph<8>   _8;\n_LIBCPP_FUNC_VIS extern const __ph<9>   _9;\n_LIBCPP_FUNC_VIS extern const __ph<10> _10;\n#else\nconstexpr __ph<1>   _1{};\nconstexpr __ph<2>   _2{};\nconstexpr __ph<3>   _3{};\nconstexpr __ph<4>   _4{};\nconstexpr __ph<5>   _5{};\nconstexpr __ph<6>   _6{};\nconstexpr __ph<7>   _7{};\nconstexpr __ph<8>   _8{};\nconstexpr __ph<9>   _9{};\nconstexpr __ph<10> _10{};\n#endif // defined(_LIBCPP_CXX03_LANG) || defined(_LIBCPP_BUILDING_BIND)\n\n}  // placeholders\n\ntemplate<int _Np>\nstruct __is_placeholder<placeholders::__ph<_Np> >\n    : public integral_constant<int, _Np> {};\n\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp, class _Uj>\ninline _LIBCPP_INLINE_VISIBILITY\n_Tp&\n__mu(reference_wrapper<_Tp> __t, _Uj&)\n{\n    return __t.get();\n}\n\ntemplate <class _Ti, class ..._Uj, size_t ..._Indx>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename __invoke_of<_Ti&, _Uj...>::type\n__mu_expand(_Ti& __ti, tuple<_Uj...>& __uj, __tuple_indices<_Indx...>)\n{\n    return __ti(_VSTD::forward<_Uj>(_VSTD::get<_Indx>(__uj))...);\n}\n\ntemplate <class _Ti, class ..._Uj>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename __lazy_enable_if\n<\n    is_bind_expression<_Ti>::value,\n    __invoke_of<_Ti&, _Uj...>\n>::type\n__mu(_Ti& __ti, tuple<_Uj...>& __uj)\n{\n    typedef typename __make_tuple_indices<sizeof...(_Uj)>::type __indices;\n    return  __mu_expand(__ti, __uj, __indices());\n}\n\ntemplate <bool IsPh, class _Ti, class _Uj>\nstruct __mu_return2 {};\n\ntemplate <class _Ti, class _Uj>\nstruct __mu_return2<true, _Ti, _Uj>\n{\n    typedef typename tuple_element<is_placeholder<_Ti>::value - 1, _Uj>::type type;\n};\n\ntemplate <class _Ti, class _Uj>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    0 < is_placeholder<_Ti>::value,\n    typename __mu_return2<0 < is_placeholder<_Ti>::value, _Ti, _Uj>::type\n>::type\n__mu(_Ti&, _Uj& __uj)\n{\n    const size_t _Indx = is_placeholder<_Ti>::value - 1;\n    return _VSTD::forward<typename tuple_element<_Indx, _Uj>::type>(_VSTD::get<_Indx>(__uj));\n}\n\ntemplate <class _Ti, class _Uj>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    !is_bind_expression<_Ti>::value &&\n    is_placeholder<_Ti>::value == 0 &&\n    !__is_reference_wrapper<_Ti>::value,\n    _Ti&\n>::type\n__mu(_Ti& __ti, _Uj&)\n{\n    return __ti;\n}\n\ntemplate <class _Ti, bool IsReferenceWrapper, bool IsBindEx, bool IsPh,\n          class _TupleUj>\nstruct ____mu_return;\n\ntemplate <bool _Invokable, class _Ti, class ..._Uj>\nstruct ____mu_return_invokable  // false\n{\n    typedef __nat type;\n};\n\ntemplate <class _Ti, class ..._Uj>\nstruct ____mu_return_invokable<true, _Ti, _Uj...>\n{\n    typedef typename __invoke_of<_Ti&, _Uj...>::type type;\n};\n\ntemplate <class _Ti, class ..._Uj>\nstruct ____mu_return<_Ti, false, true, false, tuple<_Uj...> >\n    : public ____mu_return_invokable<__invokable<_Ti&, _Uj...>::value, _Ti, _Uj...>\n{\n};\n\ntemplate <class _Ti, class _TupleUj>\nstruct ____mu_return<_Ti, false, false, true, _TupleUj>\n{\n    typedef typename tuple_element<is_placeholder<_Ti>::value - 1,\n                                   _TupleUj>::type&& type;\n};\n\ntemplate <class _Ti, class _TupleUj>\nstruct ____mu_return<_Ti, true, false, false, _TupleUj>\n{\n    typedef typename _Ti::type& type;\n};\n\ntemplate <class _Ti, class _TupleUj>\nstruct ____mu_return<_Ti, false, false, false, _TupleUj>\n{\n    typedef _Ti& type;\n};\n\ntemplate <class _Ti, class _TupleUj>\nstruct __mu_return\n    : public ____mu_return<_Ti,\n                           __is_reference_wrapper<_Ti>::value,\n                           is_bind_expression<_Ti>::value,\n                           0 < is_placeholder<_Ti>::value &&\n                           is_placeholder<_Ti>::value <= tuple_size<_TupleUj>::value,\n                           _TupleUj>\n{\n};\n\ntemplate <class _Fp, class _BoundArgs, class _TupleUj>\nstruct __is_valid_bind_return\n{\n    static const bool value = false;\n};\n\ntemplate <class _Fp, class ..._BoundArgs, class _TupleUj>\nstruct __is_valid_bind_return<_Fp, tuple<_BoundArgs...>, _TupleUj>\n{\n    static const bool value = __invokable<_Fp,\n                    typename __mu_return<_BoundArgs, _TupleUj>::type...>::value;\n};\n\ntemplate <class _Fp, class ..._BoundArgs, class _TupleUj>\nstruct __is_valid_bind_return<_Fp, const tuple<_BoundArgs...>, _TupleUj>\n{\n    static const bool value = __invokable<_Fp,\n                    typename __mu_return<const _BoundArgs, _TupleUj>::type...>::value;\n};\n\ntemplate <class _Fp, class _BoundArgs, class _TupleUj,\n          bool = __is_valid_bind_return<_Fp, _BoundArgs, _TupleUj>::value>\nstruct __bind_return;\n\ntemplate <class _Fp, class ..._BoundArgs, class _TupleUj>\nstruct __bind_return<_Fp, tuple<_BoundArgs...>, _TupleUj, true>\n{\n    typedef typename __invoke_of\n    <\n        _Fp&,\n        typename __mu_return\n        <\n            _BoundArgs,\n            _TupleUj\n        >::type...\n    >::type type;\n};\n\ntemplate <class _Fp, class ..._BoundArgs, class _TupleUj>\nstruct __bind_return<_Fp, const tuple<_BoundArgs...>, _TupleUj, true>\n{\n    typedef typename __invoke_of\n    <\n        _Fp&,\n        typename __mu_return\n        <\n            const _BoundArgs,\n            _TupleUj\n        >::type...\n    >::type type;\n};\n\ntemplate <class _Fp, class _BoundArgs, size_t ..._Indx, class _Args>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename __bind_return<_Fp, _BoundArgs, _Args>::type\n__apply_functor(_Fp& __f, _BoundArgs& __bound_args, __tuple_indices<_Indx...>,\n                _Args&& __args)\n{\n    return __invoke(__f, __mu(_VSTD::get<_Indx>(__bound_args), __args)...);\n}\n\ntemplate<class _Fp, class ..._BoundArgs>\nclass __bind\n    : public __weak_result_type<typename decay<_Fp>::type>\n{\nprotected:\n    typedef typename decay<_Fp>::type _Fd;\n    typedef tuple<typename decay<_BoundArgs>::type...> _Td;\nprivate:\n    _Fd __f_;\n    _Td __bound_args_;\n\n    typedef typename __make_tuple_indices<sizeof...(_BoundArgs)>::type __indices;\npublic:\n    template <class _Gp, class ..._BA,\n              class = typename enable_if\n                               <\n                                  is_constructible<_Fd, _Gp>::value &&\n                                  !is_same<typename remove_reference<_Gp>::type,\n                                           __bind>::value\n                               >::type>\n      _LIBCPP_INLINE_VISIBILITY\n      explicit __bind(_Gp&& __f, _BA&& ...__bound_args)\n        : __f_(_VSTD::forward<_Gp>(__f)),\n          __bound_args_(_VSTD::forward<_BA>(__bound_args)...) {}\n\n    template <class ..._Args>\n        _LIBCPP_INLINE_VISIBILITY\n        typename __bind_return<_Fd, _Td, tuple<_Args&&...> >::type\n        operator()(_Args&& ...__args)\n        {\n            return __apply_functor(__f_, __bound_args_, __indices(),\n                                  tuple<_Args&&...>(_VSTD::forward<_Args>(__args)...));\n        }\n\n    template <class ..._Args>\n        _LIBCPP_INLINE_VISIBILITY\n        typename __bind_return<const _Fd, const _Td, tuple<_Args&&...> >::type\n        operator()(_Args&& ...__args) const\n        {\n            return __apply_functor(__f_, __bound_args_, __indices(),\n                                   tuple<_Args&&...>(_VSTD::forward<_Args>(__args)...));\n        }\n};\n\ntemplate<class _Fp, class ..._BoundArgs>\nstruct __is_bind_expression<__bind<_Fp, _BoundArgs...> > : public true_type {};\n\ntemplate<class _Rp, class _Fp, class ..._BoundArgs>\nclass __bind_r\n    : public __bind<_Fp, _BoundArgs...>\n{\n    typedef __bind<_Fp, _BoundArgs...> base;\n    typedef typename base::_Fd _Fd;\n    typedef typename base::_Td _Td;\npublic:\n    typedef _Rp result_type;\n\n\n    template <class _Gp, class ..._BA,\n              class = typename enable_if\n                               <\n                                  is_constructible<_Fd, _Gp>::value &&\n                                  !is_same<typename remove_reference<_Gp>::type,\n                                           __bind_r>::value\n                               >::type>\n      _LIBCPP_INLINE_VISIBILITY\n      explicit __bind_r(_Gp&& __f, _BA&& ...__bound_args)\n        : base(_VSTD::forward<_Gp>(__f),\n               _VSTD::forward<_BA>(__bound_args)...) {}\n\n    template <class ..._Args>\n        _LIBCPP_INLINE_VISIBILITY\n        typename enable_if\n        <\n            is_convertible<typename __bind_return<_Fd, _Td, tuple<_Args&&...> >::type,\n                           result_type>::value || is_void<_Rp>::value,\n            result_type\n        >::type\n        operator()(_Args&& ...__args)\n        {\n            typedef __invoke_void_return_wrapper<_Rp> _Invoker;\n            return _Invoker::__call(static_cast<base&>(*this), _VSTD::forward<_Args>(__args)...);\n        }\n\n    template <class ..._Args>\n        _LIBCPP_INLINE_VISIBILITY\n        typename enable_if\n        <\n            is_convertible<typename __bind_return<const _Fd, const _Td, tuple<_Args&&...> >::type,\n                           result_type>::value || is_void<_Rp>::value,\n            result_type\n        >::type\n        operator()(_Args&& ...__args) const\n        {\n            typedef __invoke_void_return_wrapper<_Rp> _Invoker;\n            return _Invoker::__call(static_cast<base const&>(*this), _VSTD::forward<_Args>(__args)...);\n        }\n};\n\ntemplate<class _Rp, class _Fp, class ..._BoundArgs>\nstruct __is_bind_expression<__bind_r<_Rp, _Fp, _BoundArgs...> > : public true_type {};\n\ntemplate<class _Fp, class ..._BoundArgs>\ninline _LIBCPP_INLINE_VISIBILITY\n__bind<_Fp, _BoundArgs...>\nbind(_Fp&& __f, _BoundArgs&&... __bound_args)\n{\n    typedef __bind<_Fp, _BoundArgs...> type;\n    return type(_VSTD::forward<_Fp>(__f), _VSTD::forward<_BoundArgs>(__bound_args)...);\n}\n\ntemplate<class _Rp, class _Fp, class ..._BoundArgs>\ninline _LIBCPP_INLINE_VISIBILITY\n__bind_r<_Rp, _Fp, _BoundArgs...>\nbind(_Fp&& __f, _BoundArgs&&... __bound_args)\n{\n    typedef __bind_r<_Rp, _Fp, _BoundArgs...> type;\n    return type(_VSTD::forward<_Fp>(__f), _VSTD::forward<_BoundArgs>(__bound_args)...);\n}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<bool>\n    : public unary_function<bool, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(bool __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<char>\n    : public unary_function<char, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(char __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<signed char>\n    : public unary_function<signed char, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(signed char __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<unsigned char>\n    : public unary_function<unsigned char, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(unsigned char __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\n#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<char16_t>\n    : public unary_function<char16_t, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(char16_t __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<char32_t>\n    : public unary_function<char32_t, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(char32_t __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\n#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<wchar_t>\n    : public unary_function<wchar_t, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(wchar_t __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<short>\n    : public unary_function<short, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(short __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<unsigned short>\n    : public unary_function<unsigned short, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(unsigned short __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<int>\n    : public unary_function<int, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(int __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<unsigned int>\n    : public unary_function<unsigned int, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(unsigned int __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<long>\n    : public unary_function<long, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(long __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<unsigned long>\n    : public unary_function<unsigned long, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(unsigned long __v) const _NOEXCEPT {return static_cast<size_t>(__v);}\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<long long>\n    : public __scalar_hash<long long>\n{\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<unsigned long long>\n    : public __scalar_hash<unsigned long long>\n{\n};\n\n#ifndef _LIBCPP_HAS_NO_INT128\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<__int128_t>\n    : public __scalar_hash<__int128_t>\n{\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<__uint128_t>\n    : public __scalar_hash<__uint128_t>\n{\n};\n\n#endif\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<float>\n    : public __scalar_hash<float>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(float __v) const _NOEXCEPT\n    {\n        // -0.0 and 0.0 should return same hash\n       if (__v == 0)\n           return 0;\n        return __scalar_hash<float>::operator()(__v);\n    }\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<double>\n    : public __scalar_hash<double>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(double __v) const _NOEXCEPT\n    {\n        // -0.0 and 0.0 should return same hash\n       if (__v == 0)\n           return 0;\n        return __scalar_hash<double>::operator()(__v);\n    }\n};\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS hash<long double>\n    : public __scalar_hash<long double>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(long double __v) const _NOEXCEPT\n    {\n        // -0.0 and 0.0 should return same hash\n        if (__v == 0)\n            return 0;\n#if defined(__i386__)\n        // Zero out padding bits\n        union\n        {\n            long double __t;\n            struct\n            {\n                size_t __a;\n                size_t __b;\n                size_t __c;\n                size_t __d;\n            } __s;\n        } __u;\n        __u.__s.__a = 0;\n        __u.__s.__b = 0;\n        __u.__s.__c = 0;\n        __u.__s.__d = 0;\n        __u.__t = __v;\n        return __u.__s.__a ^ __u.__s.__b ^ __u.__s.__c ^ __u.__s.__d;\n#elif defined(__x86_64__)\n        // Zero out padding bits\n        union\n        {\n            long double __t;\n            struct\n            {\n                size_t __a;\n                size_t __b;\n            } __s;\n        } __u;\n        __u.__s.__a = 0;\n        __u.__s.__b = 0;\n        __u.__t = __v;\n        return __u.__s.__a ^ __u.__s.__b;\n#else\n        return __scalar_hash<long double>::operator()(__v);\n#endif\n    }\n};\n\n#if _LIBCPP_STD_VER > 11\n\ntemplate <class _Tp, bool = is_enum<_Tp>::value>\nstruct _LIBCPP_TEMPLATE_VIS __enum_hash\n    : public unary_function<_Tp, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(_Tp __v) const _NOEXCEPT\n    {\n        typedef typename underlying_type<_Tp>::type type;\n        return hash<type>{}(static_cast<type>(__v));\n    }\n};\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS __enum_hash<_Tp, false> {\n    __enum_hash() = delete;\n    __enum_hash(__enum_hash const&) = delete;\n    __enum_hash& operator=(__enum_hash const&) = delete;\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS hash : public __enum_hash<_Tp>\n{\n};\n#endif\n\n\n#if _LIBCPP_STD_VER > 14\n\n#define __cpp_lib_invoke 201411\n\ntemplate <class _Fn, class ..._Args>\nresult_of_t<_Fn&&(_Args&&...)>\ninvoke(_Fn&& __f, _Args&&... __args)\n    noexcept(noexcept(_VSTD::__invoke(_VSTD::forward<_Fn>(__f), _VSTD::forward<_Args>(__args)...)))\n{\n    return _VSTD::__invoke(_VSTD::forward<_Fn>(__f), _VSTD::forward<_Args>(__args)...);\n}\n\ntemplate <class _DecayFunc>\nclass _LIBCPP_TEMPLATE_VIS __not_fn_imp {\n  _DecayFunc __fd;\n\npublic:\n    __not_fn_imp() = delete;\n\n    template <class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_Args&& ...__args) &\n            noexcept(noexcept(!_VSTD::invoke(__fd, _VSTD::forward<_Args>(__args)...)))\n        -> decltype(          !_VSTD::invoke(__fd, _VSTD::forward<_Args>(__args)...))\n        { return              !_VSTD::invoke(__fd, _VSTD::forward<_Args>(__args)...); }\n\n    template <class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_Args&& ...__args) &&\n            noexcept(noexcept(!_VSTD::invoke(_VSTD::move(__fd), _VSTD::forward<_Args>(__args)...)))\n        -> decltype(          !_VSTD::invoke(_VSTD::move(__fd), _VSTD::forward<_Args>(__args)...))\n        { return              !_VSTD::invoke(_VSTD::move(__fd), _VSTD::forward<_Args>(__args)...); }\n\n    template <class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_Args&& ...__args) const&\n            noexcept(noexcept(!_VSTD::invoke(__fd, _VSTD::forward<_Args>(__args)...)))\n        -> decltype(          !_VSTD::invoke(__fd, _VSTD::forward<_Args>(__args)...))\n        { return              !_VSTD::invoke(__fd, _VSTD::forward<_Args>(__args)...); }\n\n\n    template <class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_Args&& ...__args) const&&\n            noexcept(noexcept(!_VSTD::invoke(_VSTD::move(__fd), _VSTD::forward<_Args>(__args)...)))\n        -> decltype(          !_VSTD::invoke(_VSTD::move(__fd), _VSTD::forward<_Args>(__args)...))\n        { return              !_VSTD::invoke(_VSTD::move(__fd), _VSTD::forward<_Args>(__args)...); }\n\nprivate:\n    template <class _RawFunc,\n              class = enable_if_t<!is_same<decay_t<_RawFunc>, __not_fn_imp>::value>>\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __not_fn_imp(_RawFunc&& __rf)\n        : __fd(_VSTD::forward<_RawFunc>(__rf)) {}\n\n    template <class _RawFunc>\n    friend inline _LIBCPP_INLINE_VISIBILITY\n    __not_fn_imp<decay_t<_RawFunc>> not_fn(_RawFunc&&);\n};\n\ntemplate <class _RawFunc>\ninline _LIBCPP_INLINE_VISIBILITY\n__not_fn_imp<decay_t<_RawFunc>> not_fn(_RawFunc&& __fn) {\n    return __not_fn_imp<decay_t<_RawFunc>>(_VSTD::forward<_RawFunc>(__fn));\n}\n\n#endif\n\n// struct hash<T*> in <memory>\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_FUNCTIONAL\n","// -*- C++ -*-\n//===------------------------------ vector --------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_VECTOR\n#define _LIBCPP_VECTOR\n\n/*\n    vector synopsis\n\nnamespace std\n{\n\ntemplate <class T, class Allocator = allocator<T> >\nclass vector\n{\npublic:\n    typedef T                                        value_type;\n    typedef Allocator                                allocator_type;\n    typedef typename allocator_type::reference       reference;\n    typedef typename allocator_type::const_reference const_reference;\n    typedef implementation-defined                   iterator;\n    typedef implementation-defined                   const_iterator;\n    typedef typename allocator_type::size_type       size_type;\n    typedef typename allocator_type::difference_type difference_type;\n    typedef typename allocator_type::pointer         pointer;\n    typedef typename allocator_type::const_pointer   const_pointer;\n    typedef std::reverse_iterator<iterator>          reverse_iterator;\n    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;\n\n    vector()\n        noexcept(is_nothrow_default_constructible<allocator_type>::value);\n    explicit vector(const allocator_type&);\n    explicit vector(size_type n);\n    explicit vector(size_type n, const allocator_type&); // C++14\n    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());\n    template <class InputIterator>\n        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());\n    vector(const vector& x);\n    vector(vector&& x)\n        noexcept(is_nothrow_move_constructible<allocator_type>::value);\n    vector(initializer_list<value_type> il);\n    vector(initializer_list<value_type> il, const allocator_type& a);\n    ~vector();\n    vector& operator=(const vector& x);\n    vector& operator=(vector&& x)\n        noexcept(\n             allocator_type::propagate_on_container_move_assignment::value ||\n             allocator_type::is_always_equal::value); // C++17\n    vector& operator=(initializer_list<value_type> il);\n    template <class InputIterator>\n        void assign(InputIterator first, InputIterator last);\n    void assign(size_type n, const value_type& u);\n    void assign(initializer_list<value_type> il);\n\n    allocator_type get_allocator() const noexcept;\n\n    iterator               begin() noexcept;\n    const_iterator         begin()   const noexcept;\n    iterator               end() noexcept;\n    const_iterator         end()     const noexcept;\n\n    reverse_iterator       rbegin() noexcept;\n    const_reverse_iterator rbegin()  const noexcept;\n    reverse_iterator       rend() noexcept;\n    const_reverse_iterator rend()    const noexcept;\n\n    const_iterator         cbegin()  const noexcept;\n    const_iterator         cend()    const noexcept;\n    const_reverse_iterator crbegin() const noexcept;\n    const_reverse_iterator crend()   const noexcept;\n\n    size_type size() const noexcept;\n    size_type max_size() const noexcept;\n    size_type capacity() const noexcept;\n    bool empty() const noexcept;\n    void reserve(size_type n);\n    void shrink_to_fit() noexcept;\n\n    reference       operator[](size_type n);\n    const_reference operator[](size_type n) const;\n    reference       at(size_type n);\n    const_reference at(size_type n) const;\n\n    reference       front();\n    const_reference front() const;\n    reference       back();\n    const_reference back() const;\n\n    value_type*       data() noexcept;\n    const value_type* data() const noexcept;\n\n    void push_back(const value_type& x);\n    void push_back(value_type&& x);\n    template <class... Args>\n        reference emplace_back(Args&&... args); // reference in C++17\n    void pop_back();\n\n    template <class... Args> iterator emplace(const_iterator position, Args&&... args);\n    iterator insert(const_iterator position, const value_type& x);\n    iterator insert(const_iterator position, value_type&& x);\n    iterator insert(const_iterator position, size_type n, const value_type& x);\n    template <class InputIterator>\n        iterator insert(const_iterator position, InputIterator first, InputIterator last);\n    iterator insert(const_iterator position, initializer_list<value_type> il);\n\n    iterator erase(const_iterator position);\n    iterator erase(const_iterator first, const_iterator last);\n\n    void clear() noexcept;\n\n    void resize(size_type sz);\n    void resize(size_type sz, const value_type& c);\n\n    void swap(vector&)\n        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||\n                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17\n\n    bool __invariants() const;\n};\n\ntemplate <class Allocator = allocator<T> >\nclass vector<bool, Allocator>\n{\npublic:\n    typedef bool                                     value_type;\n    typedef Allocator                                allocator_type;\n    typedef implementation-defined                   iterator;\n    typedef implementation-defined                   const_iterator;\n    typedef typename allocator_type::size_type       size_type;\n    typedef typename allocator_type::difference_type difference_type;\n    typedef iterator                                 pointer;\n    typedef const_iterator                           const_pointer;\n    typedef std::reverse_iterator<iterator>          reverse_iterator;\n    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;\n\n    class reference\n    {\n    public:\n        reference(const reference&) noexcept;\n        operator bool() const noexcept;\n        reference& operator=(const bool x) noexcept;\n        reference& operator=(const reference& x) noexcept;\n        iterator operator&() const noexcept;\n        void flip() noexcept;\n    };\n\n    class const_reference\n    {\n    public:\n        const_reference(const reference&) noexcept;\n        operator bool() const noexcept;\n        const_iterator operator&() const noexcept;\n    };\n\n    vector()\n        noexcept(is_nothrow_default_constructible<allocator_type>::value);\n    explicit vector(const allocator_type&);\n    explicit vector(size_type n, const allocator_type& a = allocator_type()); // C++14\n    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());\n    template <class InputIterator>\n        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());\n    vector(const vector& x);\n    vector(vector&& x)\n        noexcept(is_nothrow_move_constructible<allocator_type>::value);\n    vector(initializer_list<value_type> il);\n    vector(initializer_list<value_type> il, const allocator_type& a);\n    ~vector();\n    vector& operator=(const vector& x);\n    vector& operator=(vector&& x)\n        noexcept(\n             allocator_type::propagate_on_container_move_assignment::value ||\n             allocator_type::is_always_equal::value); // C++17\n    vector& operator=(initializer_list<value_type> il);\n    template <class InputIterator>\n        void assign(InputIterator first, InputIterator last);\n    void assign(size_type n, const value_type& u);\n    void assign(initializer_list<value_type> il);\n\n    allocator_type get_allocator() const noexcept;\n\n    iterator               begin() noexcept;\n    const_iterator         begin()   const noexcept;\n    iterator               end() noexcept;\n    const_iterator         end()     const noexcept;\n\n    reverse_iterator       rbegin() noexcept;\n    const_reverse_iterator rbegin()  const noexcept;\n    reverse_iterator       rend() noexcept;\n    const_reverse_iterator rend()    const noexcept;\n\n    const_iterator         cbegin()  const noexcept;\n    const_iterator         cend()    const noexcept;\n    const_reverse_iterator crbegin() const noexcept;\n    const_reverse_iterator crend()   const noexcept;\n\n    size_type size() const noexcept;\n    size_type max_size() const noexcept;\n    size_type capacity() const noexcept;\n    bool empty() const noexcept;\n    void reserve(size_type n);\n    void shrink_to_fit() noexcept;\n\n    reference       operator[](size_type n);\n    const_reference operator[](size_type n) const;\n    reference       at(size_type n);\n    const_reference at(size_type n) const;\n\n    reference       front();\n    const_reference front() const;\n    reference       back();\n    const_reference back() const;\n\n    void push_back(const value_type& x);\n    template <class... Args> reference emplace_back(Args&&... args);  // C++14; reference in C++17\n    void pop_back();\n\n    template <class... Args> iterator emplace(const_iterator position, Args&&... args);  // C++14\n    iterator insert(const_iterator position, const value_type& x);\n    iterator insert(const_iterator position, size_type n, const value_type& x);\n    template <class InputIterator>\n        iterator insert(const_iterator position, InputIterator first, InputIterator last);\n    iterator insert(const_iterator position, initializer_list<value_type> il);\n\n    iterator erase(const_iterator position);\n    iterator erase(const_iterator first, const_iterator last);\n\n    void clear() noexcept;\n\n    void resize(size_type sz);\n    void resize(size_type sz, value_type x);\n\n    void swap(vector&)\n        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||\n                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17\n    void flip() noexcept;\n\n    bool __invariants() const;\n};\n\ntemplate <class Allocator> struct hash<std::vector<bool, Allocator>>;\n\ntemplate <class T, class Allocator> bool operator==(const vector<T,Allocator>& x, const vector<T,Allocator>& y);\ntemplate <class T, class Allocator> bool operator< (const vector<T,Allocator>& x, const vector<T,Allocator>& y);\ntemplate <class T, class Allocator> bool operator!=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);\ntemplate <class T, class Allocator> bool operator> (const vector<T,Allocator>& x, const vector<T,Allocator>& y);\ntemplate <class T, class Allocator> bool operator>=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);\ntemplate <class T, class Allocator> bool operator<=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);\n\ntemplate <class T, class Allocator>\nvoid swap(vector<T,Allocator>& x, vector<T,Allocator>& y)\n    noexcept(noexcept(x.swap(y)));\n\n}  // std\n\n*/\n\n#include <__config>\n#include <iosfwd> // for forward declaration of vector\n#include <__bit_reference>\n#include <type_traits>\n#include <climits>\n#include <limits>\n#include <initializer_list>\n#include <memory>\n#include <stdexcept>\n#include <algorithm>\n#include <cstring>\n#include <__split_buffer>\n#include <__functional_base>\n\n#include <__undef_min_max>\n\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <bool>\nclass __vector_base_common\n{\nprotected:\n    _LIBCPP_ALWAYS_INLINE __vector_base_common() {}\n    _LIBCPP_NORETURN void __throw_length_error() const;\n    _LIBCPP_NORETURN void __throw_out_of_range() const;\n};\n\ntemplate <bool __b>\nvoid\n__vector_base_common<__b>::__throw_length_error() const\n{\n    _VSTD::__throw_length_error(\"vector\");\n}\n\ntemplate <bool __b>\nvoid\n__vector_base_common<__b>::__throw_out_of_range() const\n{\n    _VSTD::__throw_out_of_range(\"vector\");\n}\n\n#ifdef _LIBCPP_MSVC\n#pragma warning( push )\n#pragma warning( disable: 4231 )\n#endif // _LIBCPP_MSVC\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __vector_base_common<true>)\n#ifdef _LIBCPP_MSVC\n#pragma warning( pop )\n#endif // _LIBCPP_MSVC\n\ntemplate <class _Tp, class _Allocator>\nclass __vector_base\n    : protected __vector_base_common<true>\n{\nprotected:\n    typedef _Tp                                      value_type;\n    typedef _Allocator                               allocator_type;\n    typedef allocator_traits<allocator_type>         __alloc_traits;\n    typedef value_type&                              reference;\n    typedef const value_type&                        const_reference;\n    typedef typename __alloc_traits::size_type       size_type;\n    typedef typename __alloc_traits::difference_type difference_type;\n    typedef typename __alloc_traits::pointer         pointer;\n    typedef typename __alloc_traits::const_pointer   const_pointer;\n    typedef pointer                                  iterator;\n    typedef const_pointer                            const_iterator;\n\n    pointer                                         __begin_;\n    pointer                                         __end_;\n    __compressed_pair<pointer, allocator_type> __end_cap_;\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type& __alloc() _NOEXCEPT\n        {return __end_cap_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    const allocator_type& __alloc() const _NOEXCEPT\n        {return __end_cap_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    pointer& __end_cap() _NOEXCEPT\n        {return __end_cap_.first();}\n    _LIBCPP_INLINE_VISIBILITY\n    const pointer& __end_cap() const _NOEXCEPT\n        {return __end_cap_.first();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __vector_base()\n        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);\n    _LIBCPP_INLINE_VISIBILITY __vector_base(const allocator_type& __a);\n    ~__vector_base();\n\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT {__destruct_at_end(__begin_);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type capacity() const _NOEXCEPT\n        {return static_cast<size_type>(__end_cap() - __begin_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __destruct_at_end(pointer __new_last) _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const __vector_base& __c)\n        {__copy_assign_alloc(__c, integral_constant<bool,\n                      __alloc_traits::propagate_on_container_copy_assignment::value>());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__vector_base& __c)\n        _NOEXCEPT_(\n            !__alloc_traits::propagate_on_container_move_assignment::value ||\n            is_nothrow_move_assignable<allocator_type>::value)\n        {__move_assign_alloc(__c, integral_constant<bool,\n                      __alloc_traits::propagate_on_container_move_assignment::value>());}\nprivate:\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const __vector_base& __c, true_type)\n        {\n            if (__alloc() != __c.__alloc())\n            {\n                clear();\n                __alloc_traits::deallocate(__alloc(), __begin_, capacity());\n                __begin_ = __end_ = __end_cap() = nullptr;\n            }\n            __alloc() = __c.__alloc();\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const __vector_base&, false_type)\n        {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__vector_base& __c, true_type)\n        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)\n        {\n            __alloc() = _VSTD::move(__c.__alloc());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__vector_base&, false_type)\n        _NOEXCEPT\n        {}\n};\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__vector_base<_Tp, _Allocator>::__destruct_at_end(pointer __new_last) _NOEXCEPT\n{\n    while (__new_last != __end_)\n        __alloc_traits::destroy(__alloc(), _VSTD::__to_raw_pointer(--__end_));\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\n__vector_base<_Tp, _Allocator>::__vector_base()\n        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)\n    : __begin_(nullptr),\n      __end_(nullptr),\n      __end_cap_(nullptr)\n{\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\n__vector_base<_Tp, _Allocator>::__vector_base(const allocator_type& __a)\n    : __begin_(nullptr),\n      __end_(nullptr),\n      __end_cap_(nullptr, __a)\n{\n}\n\ntemplate <class _Tp, class _Allocator>\n__vector_base<_Tp, _Allocator>::~__vector_base()\n{\n    if (__begin_ != nullptr)\n    {\n        clear();\n        __alloc_traits::deallocate(__alloc(), __begin_, capacity());\n    }\n}\n\ntemplate <class _Tp, class _Allocator /* = allocator<_Tp> */>\nclass _LIBCPP_TEMPLATE_VIS vector\n    : private __vector_base<_Tp, _Allocator>\n{\nprivate:\n    typedef __vector_base<_Tp, _Allocator>           __base;\n    typedef allocator<_Tp>                           __default_allocator_type;\npublic:\n    typedef vector                                   __self;\n    typedef _Tp                                      value_type;\n    typedef _Allocator                               allocator_type;\n    typedef typename __base::__alloc_traits          __alloc_traits;\n    typedef typename __base::reference               reference;\n    typedef typename __base::const_reference         const_reference;\n    typedef typename __base::size_type               size_type;\n    typedef typename __base::difference_type         difference_type;\n    typedef typename __base::pointer                 pointer;\n    typedef typename __base::const_pointer           const_pointer;\n    typedef __wrap_iter<pointer>                     iterator;\n    typedef __wrap_iter<const_pointer>               const_iterator;\n    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;\n    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;\n\n    static_assert((is_same<typename allocator_type::value_type, value_type>::value),\n                  \"Allocator::value_type must be same type as value_type\");\n\n    _LIBCPP_INLINE_VISIBILITY\n    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)\n        {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n            __get_db()->__insert_c(this);\n#endif\n        }\n    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)\n#if _LIBCPP_STD_VER <= 14\n        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)\n#else\n        _NOEXCEPT\n#endif\n        : __base(__a)\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        __get_db()->__insert_c(this);\n#endif\n    }\n    explicit vector(size_type __n);\n#if _LIBCPP_STD_VER > 11\n    explicit vector(size_type __n, const allocator_type& __a);\n#endif\n    vector(size_type __n, const_reference __x);\n    vector(size_type __n, const_reference __x, const allocator_type& __a);\n    template <class _InputIterator>\n        vector(_InputIterator __first,\n               typename enable_if<__is_input_iterator  <_InputIterator>::value &&\n                                 !__is_forward_iterator<_InputIterator>::value &&\n                                 is_constructible<\n                                    value_type,\n                                    typename iterator_traits<_InputIterator>::reference>::value,\n                                 _InputIterator>::type __last);\n    template <class _InputIterator>\n        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,\n               typename enable_if<__is_input_iterator  <_InputIterator>::value &&\n                                 !__is_forward_iterator<_InputIterator>::value &&\n                                 is_constructible<\n                                    value_type,\n                                    typename iterator_traits<_InputIterator>::reference>::value>::type* = 0);\n    template <class _ForwardIterator>\n        vector(_ForwardIterator __first,\n               typename enable_if<__is_forward_iterator<_ForwardIterator>::value &&\n                                 is_constructible<\n                                    value_type,\n                                    typename iterator_traits<_ForwardIterator>::reference>::value,\n                                 _ForwardIterator>::type __last);\n    template <class _ForwardIterator>\n        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,\n               typename enable_if<__is_forward_iterator<_ForwardIterator>::value &&\n                                 is_constructible<\n                                    value_type,\n                                    typename iterator_traits<_ForwardIterator>::reference>::value>::type* = 0);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    vector(initializer_list<value_type> __il);\n    _LIBCPP_INLINE_VISIBILITY\n    vector(initializer_list<value_type> __il, const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    ~vector()\n    {\n        __get_db()->__erase_c(this);\n    }\n#endif\n\n    vector(const vector& __x);\n    vector(const vector& __x, const allocator_type& __a);\n    _LIBCPP_INLINE_VISIBILITY\n    vector& operator=(const vector& __x);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    vector(vector&& __x)\n#if _LIBCPP_STD_VER > 14\n        _NOEXCEPT;\n#else\n        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    vector(vector&& __x, const allocator_type& __a);\n    _LIBCPP_INLINE_VISIBILITY\n    vector& operator=(vector&& __x)\n        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    vector& operator=(initializer_list<value_type> __il)\n        {assign(__il.begin(), __il.end()); return *this;}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    template <class _InputIterator>\n        typename enable_if\n        <\n             __is_input_iterator  <_InputIterator>::value &&\n            !__is_forward_iterator<_InputIterator>::value &&\n            is_constructible<\n                 value_type,\n                 typename iterator_traits<_InputIterator>::reference>::value,\n            void\n        >::type\n        assign(_InputIterator __first, _InputIterator __last);\n    template <class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value &&\n            is_constructible<\n                 value_type,\n                 typename iterator_traits<_ForwardIterator>::reference>::value,\n            void\n        >::type\n        assign(_ForwardIterator __first, _ForwardIterator __last);\n\n    void assign(size_type __n, const_reference __u);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    void assign(initializer_list<value_type> __il)\n        {assign(__il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type get_allocator() const _NOEXCEPT\n        {return this->__alloc();}\n\n    _LIBCPP_INLINE_VISIBILITY iterator               begin() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY const_iterator         begin()   const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY iterator               end() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY const_iterator         end()     const _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    reverse_iterator       rbegin() _NOEXCEPT\n        {return       reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rbegin()  const _NOEXCEPT\n        {return const_reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n    reverse_iterator       rend() _NOEXCEPT\n        {return       reverse_iterator(begin());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rend()    const _NOEXCEPT\n        {return const_reverse_iterator(begin());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator         cbegin()  const _NOEXCEPT\n        {return begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator         cend()    const _NOEXCEPT\n        {return end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crbegin() const _NOEXCEPT\n        {return rbegin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crend()   const _NOEXCEPT\n        {return rend();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type size() const _NOEXCEPT\n        {return static_cast<size_type>(this->__end_ - this->__begin_);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type capacity() const _NOEXCEPT\n        {return __base::capacity();}\n    _LIBCPP_INLINE_VISIBILITY\n    bool empty() const _NOEXCEPT\n        {return this->__begin_ == this->__end_;}\n    size_type max_size() const _NOEXCEPT;\n    void reserve(size_type __n);\n    void shrink_to_fit() _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n);\n    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const;\n    reference       at(size_type __n);\n    const_reference at(size_type __n) const;\n\n    _LIBCPP_INLINE_VISIBILITY reference       front()\n    {\n        _LIBCPP_ASSERT(!empty(), \"front() called for empty vector\");\n        return *this->__begin_;\n    }\n    _LIBCPP_INLINE_VISIBILITY const_reference front() const\n    {\n        _LIBCPP_ASSERT(!empty(), \"front() called for empty vector\");\n        return *this->__begin_;\n    }\n    _LIBCPP_INLINE_VISIBILITY reference       back()\n    {\n        _LIBCPP_ASSERT(!empty(), \"back() called for empty vector\");\n        return *(this->__end_ - 1);\n    }\n    _LIBCPP_INLINE_VISIBILITY const_reference back()  const\n    {\n        _LIBCPP_ASSERT(!empty(), \"back() called for empty vector\");\n        return *(this->__end_ - 1);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    value_type*       data() _NOEXCEPT\n        {return _VSTD::__to_raw_pointer(this->__begin_);}\n    _LIBCPP_INLINE_VISIBILITY\n    const value_type* data() const _NOEXCEPT\n        {return _VSTD::__to_raw_pointer(this->__begin_);}\n\n    _LIBCPP_INLINE_VISIBILITY void push_back(const_reference __x);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY void push_back(value_type&& __x);\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n#if _LIBCPP_STD_VER > 14\n        reference emplace_back(_Args&&... __args);\n#else\n        void      emplace_back(_Args&&... __args);\n#endif\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    void pop_back();\n\n    iterator insert(const_iterator __position, const_reference __x);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    iterator insert(const_iterator __position, value_type&& __x);\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n    template <class... _Args>\n        iterator emplace(const_iterator __position, _Args&&... __args);\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    iterator insert(const_iterator __position, size_type __n, const_reference __x);\n    template <class _InputIterator>\n        typename enable_if\n        <\n             __is_input_iterator  <_InputIterator>::value &&\n            !__is_forward_iterator<_InputIterator>::value &&\n            is_constructible<\n                 value_type,\n                 typename iterator_traits<_InputIterator>::reference>::value,\n            iterator\n        >::type\n        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);\n    template <class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value &&\n            is_constructible<\n                 value_type,\n                 typename iterator_traits<_ForwardIterator>::reference>::value,\n            iterator\n        >::type\n        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __position, initializer_list<value_type> __il)\n        {return insert(__position, __il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);\n    iterator erase(const_iterator __first, const_iterator __last);\n\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT\n    {\n        size_type __old_size = size();\n        __base::clear();\n        __annotate_shrink(__old_size);\n        __invalidate_all_iterators();\n    }\n\n    void resize(size_type __sz);\n    void resize(size_type __sz, const_reference __x);\n\n    void swap(vector&)\n#if _LIBCPP_STD_VER >= 14\n        _NOEXCEPT_DEBUG;\n#else\n        _NOEXCEPT_DEBUG_(!__alloc_traits::propagate_on_container_swap::value ||\n                    __is_nothrow_swappable<allocator_type>::value);\n#endif\n\n    bool __invariants() const;\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\n    bool __dereferenceable(const const_iterator* __i) const;\n    bool __decrementable(const const_iterator* __i) const;\n    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;\n    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\nprivate:\n    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();\n    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(pointer __new_last);\n    void allocate(size_type __n);\n    void deallocate() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY size_type __recommend(size_type __new_size) const;\n    void __construct_at_end(size_type __n);\n    _LIBCPP_INLINE_VISIBILITY\n    void __construct_at_end(size_type __n, const_reference __x);\n    template <class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value,\n            void\n        >::type\n        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n);\n    void __append(size_type __n);\n    void __append(size_type __n, const_reference __x);\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       __make_iter(pointer __p) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator __make_iter(const_pointer __p) const _NOEXCEPT;\n    void __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v);\n    pointer __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p);\n    void __move_range(pointer __from_s, pointer __from_e, pointer __to);\n    void __move_assign(vector& __c, true_type)\n        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);\n    void __move_assign(vector& __c, false_type)\n        _NOEXCEPT_(__alloc_traits::is_always_equal::value);\n    _LIBCPP_INLINE_VISIBILITY\n    void __destruct_at_end(pointer __new_last) _NOEXCEPT\n    {\n        __invalidate_iterators_past(__new_last);\n        size_type __old_size = size();\n        __base::__destruct_at_end(__new_last);\n        __annotate_shrink(__old_size);\n    }\n    template <class _Up>\n        void\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n        __push_back_slow_path(_Up&& __x);\n#else\n        __push_back_slow_path(_Up& __x);\n#endif\n#if !defined(_LIBCPP_HAS_NO_VARIADICS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)\n    template <class... _Args>\n        void\n        __emplace_back_slow_path(_Args&&... __args);\n#endif\n    // The following functions are no-ops outside of AddressSanitizer mode.\n    // We call annotatations only for the default Allocator because other allocators\n    // may not meet the AddressSanitizer alignment constraints.\n    // See the documentation for __sanitizer_annotate_contiguous_container for more details.\n#ifndef _LIBCPP_HAS_NO_ASAN\n    void __annotate_contiguous_container(const void *__beg, const void *__end,\n                                         const void *__old_mid,\n                                         const void *__new_mid) const\n    {\n\n      if (__beg && is_same<allocator_type, __default_allocator_type>::value)\n        __sanitizer_annotate_contiguous_container(__beg, __end, __old_mid, __new_mid);\n    }\n#else\n    _LIBCPP_INLINE_VISIBILITY\n    void __annotate_contiguous_container(const void*, const void*, const void*,\n                                         const void*) const {}\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    void __annotate_new(size_type __current_size) const {\n      __annotate_contiguous_container(data(), data() + capacity(),\n                                      data() + capacity(), data() + __current_size);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __annotate_delete() const {\n      __annotate_contiguous_container(data(), data() + capacity(),\n                                      data() + size(), data() + capacity());\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __annotate_increase(size_type __n) const\n    {\n      __annotate_contiguous_container(data(), data() + capacity(),\n                                      data() + size(), data() + size() + __n);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __annotate_shrink(size_type __old_size) const\n    {\n      __annotate_contiguous_container(data(), data() + capacity(),\n                                      data() + __old_size, data() + size());\n    }\n#ifndef _LIBCPP_HAS_NO_ASAN\n    // The annotation for size increase should happen before the actual increase,\n    // but if an exception is thrown after that the annotation has to be undone.\n    struct __RAII_IncreaseAnnotator {\n      __RAII_IncreaseAnnotator(const vector &__v, size_type __n = 1)\n        : __commit(false), __v(__v), __old_size(__v.size() + __n) {\n        __v.__annotate_increase(__n);\n      }\n      void __done() { __commit = true; }\n      ~__RAII_IncreaseAnnotator() {\n        if (__commit) return;\n        __v.__annotate_shrink(__old_size);\n      }\n      bool __commit;\n      const vector &__v;\n      size_type __old_size;\n    };\n#else\n    struct __RAII_IncreaseAnnotator {\n      _LIBCPP_INLINE_VISIBILITY\n      __RAII_IncreaseAnnotator(const vector &, size_type = 1) {}\n      _LIBCPP_INLINE_VISIBILITY void __done() {}\n    };\n#endif\n\n};\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v)\n{\n    __annotate_delete();\n    __alloc_traits::__construct_backward(this->__alloc(), this->__begin_, this->__end_, __v.__begin_);\n    _VSTD::swap(this->__begin_, __v.__begin_);\n    _VSTD::swap(this->__end_, __v.__end_);\n    _VSTD::swap(this->__end_cap(), __v.__end_cap());\n    __v.__first_ = __v.__begin_;\n    __annotate_new(size());\n    __invalidate_all_iterators();\n}\n\ntemplate <class _Tp, class _Allocator>\ntypename vector<_Tp, _Allocator>::pointer\nvector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p)\n{\n    __annotate_delete();\n    pointer __r = __v.__begin_;\n    __alloc_traits::__construct_backward(this->__alloc(), this->__begin_, __p, __v.__begin_);\n    __alloc_traits::__construct_forward(this->__alloc(), __p, this->__end_, __v.__end_);\n    _VSTD::swap(this->__begin_, __v.__begin_);\n    _VSTD::swap(this->__end_, __v.__end_);\n    _VSTD::swap(this->__end_cap(), __v.__end_cap());\n    __v.__first_ = __v.__begin_;\n    __annotate_new(size());\n    __invalidate_all_iterators();\n    return __r;\n}\n\n//  Allocate space for __n objects\n//  throws length_error if __n > max_size()\n//  throws (probably bad_alloc) if memory run out\n//  Precondition:  __begin_ == __end_ == __end_cap() == 0\n//  Precondition:  __n > 0\n//  Postcondition:  capacity() == __n\n//  Postcondition:  size() == 0\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::allocate(size_type __n)\n{\n    if (__n > max_size())\n        this->__throw_length_error();\n    this->__begin_ = this->__end_ = __alloc_traits::allocate(this->__alloc(), __n);\n    this->__end_cap() = this->__begin_ + __n;\n    __annotate_new(0);\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::deallocate() _NOEXCEPT\n{\n    if (this->__begin_ != nullptr)\n    {\n        clear();\n        __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity());\n        this->__begin_ = this->__end_ = this->__end_cap() = nullptr;\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\ntypename vector<_Tp, _Allocator>::size_type\nvector<_Tp, _Allocator>::max_size() const _NOEXCEPT\n{\n    return _VSTD::min<size_type>(__alloc_traits::max_size(this->__alloc()),\n                                 numeric_limits<difference_type>::max());\n}\n\n//  Precondition:  __new_size > capacity()\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::size_type\nvector<_Tp, _Allocator>::__recommend(size_type __new_size) const\n{\n    const size_type __ms = max_size();\n    if (__new_size > __ms)\n        this->__throw_length_error();\n    const size_type __cap = capacity();\n    if (__cap >= __ms / 2)\n        return __ms;\n    return _VSTD::max<size_type>(2*__cap, __new_size);\n}\n\n//  Default constructs __n objects starting at __end_\n//  throws if construction throws\n//  Precondition:  __n > 0\n//  Precondition:  size() + __n <= capacity()\n//  Postcondition:  size() == size() + __n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::__construct_at_end(size_type __n)\n{\n    allocator_type& __a = this->__alloc();\n    do\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_));\n        ++this->__end_;\n        --__n;\n        __annotator.__done();\n    } while (__n > 0);\n}\n\n//  Copy constructs __n objects starting at __end_ from __x\n//  throws if construction throws\n//  Precondition:  __n > 0\n//  Precondition:  size() + __n <= capacity()\n//  Postcondition:  size() == old size() + __n\n//  Postcondition:  [i] == __x for all i in [size() - __n, __n)\ntemplate <class _Tp, class _Allocator>\ninline\nvoid\nvector<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x)\n{\n    allocator_type& __a = this->__alloc();\n    do\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_), __x);\n        ++this->__end_;\n        --__n;\n        __annotator.__done();\n    } while (__n > 0);\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value,\n    void\n>::type\nvector<_Tp, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n)\n{\n    allocator_type& __a = this->__alloc();\n    __RAII_IncreaseAnnotator __annotator(*this, __n);\n    __alloc_traits::__construct_range_forward(__a, __first, __last, this->__end_);\n    __annotator.__done();\n}\n\n//  Default constructs __n objects starting at __end_\n//  throws if construction throws\n//  Postcondition:  size() == size() + __n\n//  Exception safety: strong.\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::__append(size_type __n)\n{\n    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)\n        this->__construct_at_end(__n);\n    else\n    {\n        allocator_type& __a = this->__alloc();\n        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);\n        __v.__construct_at_end(__n);\n        __swap_out_circular_buffer(__v);\n    }\n}\n\n//  Default constructs __n objects starting at __end_\n//  throws if construction throws\n//  Postcondition:  size() == size() + __n\n//  Exception safety: strong.\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::__append(size_type __n, const_reference __x)\n{\n    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)\n        this->__construct_at_end(__n, __x);\n    else\n    {\n        allocator_type& __a = this->__alloc();\n        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);\n        __v.__construct_at_end(__n, __x);\n        __swap_out_circular_buffer(__v);\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\nvector<_Tp, _Allocator>::vector(size_type __n)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__n);\n    }\n}\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp, class _Allocator>\nvector<_Tp, _Allocator>::vector(size_type __n, const allocator_type& __a)\n    : __base(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__n);\n    }\n}\n#endif\n\ntemplate <class _Tp, class _Allocator>\nvector<_Tp, _Allocator>::vector(size_type __n, const_reference __x)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__n, __x);\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\nvector<_Tp, _Allocator>::vector(size_type __n, const_reference __x, const allocator_type& __a)\n    : __base(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__n, __x);\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _InputIterator>\nvector<_Tp, _Allocator>::vector(_InputIterator __first,\n       typename enable_if<__is_input_iterator  <_InputIterator>::value &&\n                         !__is_forward_iterator<_InputIterator>::value &&\n                         is_constructible<\n                            value_type,\n                            typename iterator_traits<_InputIterator>::reference>::value,\n                          _InputIterator>::type __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    for (; __first != __last; ++__first)\n        push_back(*__first);\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _InputIterator>\nvector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,\n       typename enable_if<__is_input_iterator  <_InputIterator>::value &&\n                         !__is_forward_iterator<_InputIterator>::value &&\n                         is_constructible<\n                            value_type,\n                            typename iterator_traits<_InputIterator>::reference>::value>::type*)\n    : __base(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    for (; __first != __last; ++__first)\n        push_back(*__first);\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _ForwardIterator>\nvector<_Tp, _Allocator>::vector(_ForwardIterator __first,\n                                typename enable_if<__is_forward_iterator<_ForwardIterator>::value &&\n                                is_constructible<\n                                   value_type,\n                                   typename iterator_traits<_ForwardIterator>::reference>::value,\n                                                   _ForwardIterator>::type __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__first, __last, __n);\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _ForwardIterator>\nvector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,\n                                typename enable_if<__is_forward_iterator<_ForwardIterator>::value &&\n                                is_constructible<\n                                   value_type,\n                                   typename iterator_traits<_ForwardIterator>::reference>::value>::type*)\n    : __base(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__first, __last, __n);\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\nvector<_Tp, _Allocator>::vector(const vector& __x)\n    : __base(__alloc_traits::select_on_container_copy_construction(__x.__alloc()))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    size_type __n = __x.size();\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__x.__begin_, __x.__end_, __n);\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\nvector<_Tp, _Allocator>::vector(const vector& __x, const allocator_type& __a)\n    : __base(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    size_type __n = __x.size();\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__x.__begin_, __x.__end_, __n);\n    }\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<_Tp, _Allocator>::vector(vector&& __x)\n#if _LIBCPP_STD_VER > 14\n        _NOEXCEPT\n#else\n        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)\n#endif\n    : __base(_VSTD::move(__x.__alloc()))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n    __get_db()->swap(this, &__x);\n#endif\n    this->__begin_ = __x.__begin_;\n    this->__end_ = __x.__end_;\n    this->__end_cap() = __x.__end_cap();\n    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<_Tp, _Allocator>::vector(vector&& __x, const allocator_type& __a)\n    : __base(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__a == __x.__alloc())\n    {\n        this->__begin_ = __x.__begin_;\n        this->__end_ = __x.__end_;\n        this->__end_cap() = __x.__end_cap();\n        __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        __get_db()->swap(this, &__x);\n#endif\n    }\n    else\n    {\n        typedef move_iterator<iterator> _Ip;\n        assign(_Ip(__x.begin()), _Ip(__x.end()));\n    }\n}\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<_Tp, _Allocator>::vector(initializer_list<value_type> __il)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__il.size() > 0)\n    {\n        allocate(__il.size());\n        __construct_at_end(__il.begin(), __il.end(), __il.size());\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<_Tp, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)\n    : __base(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__il.size() > 0)\n    {\n        allocate(__il.size());\n        __construct_at_end(__il.begin(), __il.end(), __il.size());\n    }\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<_Tp, _Allocator>&\nvector<_Tp, _Allocator>::operator=(vector&& __x)\n    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))\n{\n    __move_assign(__x, integral_constant<bool,\n          __alloc_traits::propagate_on_container_move_assignment::value>());\n    return *this;\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::__move_assign(vector& __c, false_type)\n    _NOEXCEPT_(__alloc_traits::is_always_equal::value)\n{\n    if (__base::__alloc() != __c.__alloc())\n    {\n        typedef move_iterator<iterator> _Ip;\n        assign(_Ip(__c.begin()), _Ip(__c.end()));\n    }\n    else\n        __move_assign(__c, true_type());\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::__move_assign(vector& __c, true_type)\n    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)\n{\n    deallocate();\n    __base::__move_assign_alloc(__c); // this can throw\n    this->__begin_ = __c.__begin_;\n    this->__end_ = __c.__end_;\n    this->__end_cap() = __c.__end_cap();\n    __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->swap(this, &__c);\n#endif\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<_Tp, _Allocator>&\nvector<_Tp, _Allocator>::operator=(const vector& __x)\n{\n    if (this != &__x)\n    {\n        __base::__copy_assign_alloc(__x);\n        assign(__x.__begin_, __x.__end_);\n    }\n    return *this;\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _InputIterator>\ntypename enable_if\n<\n     __is_input_iterator  <_InputIterator>::value &&\n    !__is_forward_iterator<_InputIterator>::value &&\n    is_constructible<\n       _Tp,\n       typename iterator_traits<_InputIterator>::reference>::value,\n    void\n>::type\nvector<_Tp, _Allocator>::assign(_InputIterator __first, _InputIterator __last)\n{\n    clear();\n    for (; __first != __last; ++__first)\n        push_back(*__first);\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value &&\n    is_constructible<\n       _Tp,\n       typename iterator_traits<_ForwardIterator>::reference>::value,\n    void\n>::type\nvector<_Tp, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)\n{\n    size_type __new_size = static_cast<size_type>(_VSTD::distance(__first, __last));\n    if (__new_size <= capacity())\n    {\n        _ForwardIterator __mid = __last;\n        bool __growing = false;\n        if (__new_size > size())\n        {\n            __growing = true;\n            __mid =  __first;\n            _VSTD::advance(__mid, size());\n        }\n        pointer __m = _VSTD::copy(__first, __mid, this->__begin_);\n        if (__growing)\n            __construct_at_end(__mid, __last, __new_size - size());\n        else\n            this->__destruct_at_end(__m);\n    }\n    else\n    {\n        deallocate();\n        allocate(__recommend(__new_size));\n        __construct_at_end(__first, __last, __new_size);\n    }\n    __invalidate_all_iterators();\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::assign(size_type __n, const_reference __u)\n{\n    if (__n <= capacity())\n    {\n        size_type __s = size();\n        _VSTD::fill_n(this->__begin_, _VSTD::min(__n, __s), __u);\n        if (__n > __s)\n            __construct_at_end(__n - __s, __u);\n        else\n            this->__destruct_at_end(this->__begin_ + __n);\n    }\n    else\n    {\n        deallocate();\n        allocate(__recommend(static_cast<size_type>(__n)));\n        __construct_at_end(__n, __u);\n    }\n    __invalidate_all_iterators();\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::__make_iter(pointer __p) _NOEXCEPT\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return iterator(this, __p);\n#else\n    return iterator(__p);\n#endif\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::const_iterator\nvector<_Tp, _Allocator>::__make_iter(const_pointer __p) const _NOEXCEPT\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return const_iterator(this, __p);\n#else\n    return const_iterator(__p);\n#endif\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::begin() _NOEXCEPT\n{\n    return __make_iter(this->__begin_);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::const_iterator\nvector<_Tp, _Allocator>::begin() const _NOEXCEPT\n{\n    return __make_iter(this->__begin_);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::end() _NOEXCEPT\n{\n    return __make_iter(this->__end_);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::const_iterator\nvector<_Tp, _Allocator>::end() const _NOEXCEPT\n{\n    return __make_iter(this->__end_);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::reference\nvector<_Tp, _Allocator>::operator[](size_type __n)\n{\n    _LIBCPP_ASSERT(__n < size(), \"vector[] index out of bounds\");\n    return this->__begin_[__n];\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::const_reference\nvector<_Tp, _Allocator>::operator[](size_type __n) const\n{\n    _LIBCPP_ASSERT(__n < size(), \"vector[] index out of bounds\");\n    return this->__begin_[__n];\n}\n\ntemplate <class _Tp, class _Allocator>\ntypename vector<_Tp, _Allocator>::reference\nvector<_Tp, _Allocator>::at(size_type __n)\n{\n    if (__n >= size())\n        this->__throw_out_of_range();\n    return this->__begin_[__n];\n}\n\ntemplate <class _Tp, class _Allocator>\ntypename vector<_Tp, _Allocator>::const_reference\nvector<_Tp, _Allocator>::at(size_type __n) const\n{\n    if (__n >= size())\n        this->__throw_out_of_range();\n    return this->__begin_[__n];\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::reserve(size_type __n)\n{\n    if (__n > capacity())\n    {\n        allocator_type& __a = this->__alloc();\n        __split_buffer<value_type, allocator_type&> __v(__n, size(), __a);\n        __swap_out_circular_buffer(__v);\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::shrink_to_fit() _NOEXCEPT\n{\n    if (capacity() > size())\n    {\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            allocator_type& __a = this->__alloc();\n            __split_buffer<value_type, allocator_type&> __v(size(), size(), __a);\n            __swap_out_circular_buffer(__v);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _Up>\nvoid\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\nvector<_Tp, _Allocator>::__push_back_slow_path(_Up&& __x)\n#else\nvector<_Tp, _Allocator>::__push_back_slow_path(_Up& __x)\n#endif\n{\n    allocator_type& __a = this->__alloc();\n    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);\n    // __v.push_back(_VSTD::forward<_Up>(__x));\n    __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(__v.__end_), _VSTD::forward<_Up>(__x));\n    __v.__end_++;\n    __swap_out_circular_buffer(__v);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nvector<_Tp, _Allocator>::push_back(const_reference __x)\n{\n    if (this->__end_ != this->__end_cap())\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        __alloc_traits::construct(this->__alloc(),\n                                  _VSTD::__to_raw_pointer(this->__end_), __x);\n        __annotator.__done();\n        ++this->__end_;\n    }\n    else\n        __push_back_slow_path(__x);\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nvector<_Tp, _Allocator>::push_back(value_type&& __x)\n{\n    if (this->__end_ < this->__end_cap())\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        __alloc_traits::construct(this->__alloc(),\n                                  _VSTD::__to_raw_pointer(this->__end_),\n                                  _VSTD::move(__x));\n        __annotator.__done();\n        ++this->__end_;\n    }\n    else\n        __push_back_slow_path(_VSTD::move(__x));\n}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class... _Args>\nvoid\nvector<_Tp, _Allocator>::__emplace_back_slow_path(_Args&&... __args)\n{\n    allocator_type& __a = this->__alloc();\n    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);\n//    __v.emplace_back(_VSTD::forward<_Args>(__args)...);\n    __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(__v.__end_), _VSTD::forward<_Args>(__args)...);\n    __v.__end_++;\n    __swap_out_circular_buffer(__v);\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class... _Args>\ninline\n#if _LIBCPP_STD_VER > 14\ntypename vector<_Tp, _Allocator>::reference\n#else\nvoid\n#endif\nvector<_Tp, _Allocator>::emplace_back(_Args&&... __args)\n{\n    if (this->__end_ < this->__end_cap())\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        __alloc_traits::construct(this->__alloc(),\n                                  _VSTD::__to_raw_pointer(this->__end_),\n                                  _VSTD::forward<_Args>(__args)...);\n        __annotator.__done();\n        ++this->__end_;\n    }\n    else\n        __emplace_back_slow_path(_VSTD::forward<_Args>(__args)...);\n#if _LIBCPP_STD_VER > 14\n    return this->back();\n#endif\n}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\ninline\nvoid\nvector<_Tp, _Allocator>::pop_back()\n{\n    _LIBCPP_ASSERT(!empty(), \"vector::pop_back called for empty vector\");\n    this->__destruct_at_end(this->__end_ - 1);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::erase(const_iterator __position)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,\n        \"vector::erase(iterator) called with an iterator not\"\n        \" referring to this vector\");\n#endif\n    _LIBCPP_ASSERT(__position != end(),\n        \"vector::erase(iterator) called with a non-dereferenceable iterator\");\n    difference_type __ps = __position - cbegin();\n    pointer __p = this->__begin_ + __ps;\n    this->__destruct_at_end(_VSTD::move(__p + 1, this->__end_, __p));\n    this->__invalidate_iterators_past(__p-1);\n    iterator __r = __make_iter(__p);\n    return __r;\n}\n\ntemplate <class _Tp, class _Allocator>\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::erase(const_iterator __first, const_iterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,\n        \"vector::erase(iterator,  iterator) called with an iterator not\"\n        \" referring to this vector\");\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__last) == this,\n        \"vector::erase(iterator,  iterator) called with an iterator not\"\n        \" referring to this vector\");\n#endif\n    _LIBCPP_ASSERT(__first <= __last, \"vector::erase(first, last) called with invalid range\");\n    pointer __p = this->__begin_ + (__first - begin());\n    if (__first != __last) {\n        this->__destruct_at_end(_VSTD::move(__p + (__last - __first), this->__end_, __p));\n        this->__invalidate_iterators_past(__p - 1);\n    }\n    iterator __r = __make_iter(__p);\n    return __r;\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::__move_range(pointer __from_s, pointer __from_e, pointer __to)\n{\n    pointer __old_last = this->__end_;\n    difference_type __n = __old_last - __to;\n    for (pointer __i = __from_s + __n; __i < __from_e; ++__i, ++this->__end_)\n        __alloc_traits::construct(this->__alloc(),\n                                  _VSTD::__to_raw_pointer(this->__end_),\n                                  _VSTD::move(*__i));\n    _VSTD::move_backward(__from_s, __from_s + __n, __old_last);\n}\n\ntemplate <class _Tp, class _Allocator>\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::insert(const_iterator __position, const_reference __x)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,\n        \"vector::insert(iterator, x) called with an iterator not\"\n        \" referring to this vector\");\n#endif\n    pointer __p = this->__begin_ + (__position - begin());\n    if (this->__end_ < this->__end_cap())\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        if (__p == this->__end_)\n        {\n            __alloc_traits::construct(this->__alloc(),\n                                      _VSTD::__to_raw_pointer(this->__end_), __x);\n            ++this->__end_;\n        }\n        else\n        {\n            __move_range(__p, this->__end_, __p + 1);\n            const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);\n            if (__p <= __xr && __xr < this->__end_)\n                ++__xr;\n            *__p = *__xr;\n        }\n        __annotator.__done();\n    }\n    else\n    {\n        allocator_type& __a = this->__alloc();\n        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);\n        __v.push_back(__x);\n        __p = __swap_out_circular_buffer(__v, __p);\n    }\n    return __make_iter(__p);\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::insert(const_iterator __position, value_type&& __x)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,\n        \"vector::insert(iterator, x) called with an iterator not\"\n        \" referring to this vector\");\n#endif\n    pointer __p = this->__begin_ + (__position - begin());\n    if (this->__end_ < this->__end_cap())\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        if (__p == this->__end_)\n        {\n            __alloc_traits::construct(this->__alloc(),\n                                      _VSTD::__to_raw_pointer(this->__end_),\n                                      _VSTD::move(__x));\n            ++this->__end_;\n        }\n        else\n        {\n            __move_range(__p, this->__end_, __p + 1);\n            *__p = _VSTD::move(__x);\n        }\n        __annotator.__done();\n    }\n    else\n    {\n        allocator_type& __a = this->__alloc();\n        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);\n        __v.push_back(_VSTD::move(__x));\n        __p = __swap_out_circular_buffer(__v, __p);\n    }\n    return __make_iter(__p);\n}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class... _Args>\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::emplace(const_iterator __position, _Args&&... __args)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,\n        \"vector::emplace(iterator, x) called with an iterator not\"\n        \" referring to this vector\");\n#endif\n    pointer __p = this->__begin_ + (__position - begin());\n    if (this->__end_ < this->__end_cap())\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        if (__p == this->__end_)\n        {\n            __alloc_traits::construct(this->__alloc(),\n                                      _VSTD::__to_raw_pointer(this->__end_),\n                                      _VSTD::forward<_Args>(__args)...);\n            ++this->__end_;\n        }\n        else\n        {\n            __temp_value<value_type, _Allocator> __tmp(this->__alloc(), _VSTD::forward<_Args>(__args)...);\n            __move_range(__p, this->__end_, __p + 1);\n            *__p = _VSTD::move(__tmp.get());\n        }\n        __annotator.__done();\n    }\n    else\n    {\n        allocator_type& __a = this->__alloc();\n        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);\n        __v.emplace_back(_VSTD::forward<_Args>(__args)...);\n        __p = __swap_out_circular_buffer(__v, __p);\n    }\n    return __make_iter(__p);\n}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\ntypename vector<_Tp, _Allocator>::iterator\nvector<_Tp, _Allocator>::insert(const_iterator __position, size_type __n, const_reference __x)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,\n        \"vector::insert(iterator, n, x) called with an iterator not\"\n        \" referring to this vector\");\n#endif\n    pointer __p = this->__begin_ + (__position - begin());\n    if (__n > 0)\n    {\n        if (__n <= static_cast<size_type>(this->__end_cap() - this->__end_))\n        {\n            size_type __old_n = __n;\n            pointer __old_last = this->__end_;\n            if (__n > static_cast<size_type>(this->__end_ - __p))\n            {\n                size_type __cx = __n - (this->__end_ - __p);\n                __construct_at_end(__cx, __x);\n                __n -= __cx;\n            }\n            if (__n > 0)\n            {\n                __RAII_IncreaseAnnotator __annotator(*this, __n);\n                __move_range(__p, __old_last, __p + __old_n);\n                __annotator.__done();\n                const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);\n                if (__p <= __xr && __xr < this->__end_)\n                    __xr += __old_n;\n                _VSTD::fill_n(__p, __n, *__xr);\n            }\n        }\n        else\n        {\n            allocator_type& __a = this->__alloc();\n            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);\n            __v.__construct_at_end(__n, __x);\n            __p = __swap_out_circular_buffer(__v, __p);\n        }\n    }\n    return __make_iter(__p);\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _InputIterator>\ntypename enable_if\n<\n     __is_input_iterator  <_InputIterator>::value &&\n    !__is_forward_iterator<_InputIterator>::value &&\n    is_constructible<\n       _Tp,\n       typename iterator_traits<_InputIterator>::reference>::value,\n    typename vector<_Tp, _Allocator>::iterator\n>::type\nvector<_Tp, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,\n        \"vector::insert(iterator, range) called with an iterator not\"\n        \" referring to this vector\");\n#endif\n    difference_type __off = __position - begin();\n    pointer __p = this->__begin_ + __off;\n    allocator_type& __a = this->__alloc();\n    pointer __old_last = this->__end_;\n    for (; this->__end_ != this->__end_cap() && __first != __last; ++__first)\n    {\n        __RAII_IncreaseAnnotator __annotator(*this);\n        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_),\n                                  *__first);\n        ++this->__end_;\n        __annotator.__done();\n    }\n    __split_buffer<value_type, allocator_type&> __v(__a);\n    if (__first != __last)\n    {\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            __v.__construct_at_end(__first, __last);\n            difference_type __old_size = __old_last - this->__begin_;\n            difference_type __old_p = __p - this->__begin_;\n            reserve(__recommend(size() + __v.size()));\n            __p = this->__begin_ + __old_p;\n            __old_last = this->__begin_ + __old_size;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n            erase(__make_iter(__old_last), end());\n            throw;\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    }\n    __p = _VSTD::rotate(__p, __old_last, this->__end_);\n    insert(__make_iter(__p), make_move_iterator(__v.begin()),\n                                    make_move_iterator(__v.end()));\n    return begin() + __off;\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value &&\n    is_constructible<\n       _Tp,\n       typename iterator_traits<_ForwardIterator>::reference>::value,\n    typename vector<_Tp, _Allocator>::iterator\n>::type\nvector<_Tp, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,\n        \"vector::insert(iterator, range) called with an iterator not\"\n        \" referring to this vector\");\n#endif\n    pointer __p = this->__begin_ + (__position - begin());\n    difference_type __n = _VSTD::distance(__first, __last);\n    if (__n > 0)\n    {\n        if (__n <= this->__end_cap() - this->__end_)\n        {\n            size_type __old_n = __n;\n            pointer __old_last = this->__end_;\n            _ForwardIterator __m = __last;\n            difference_type __dx = this->__end_ - __p;\n            if (__n > __dx)\n            {\n                __m = __first;\n                difference_type __diff = this->__end_ - __p;\n                _VSTD::advance(__m, __diff);\n                __construct_at_end(__m, __last, __n - __diff);\n                __n = __dx;\n            }\n            if (__n > 0)\n            {\n                __RAII_IncreaseAnnotator __annotator(*this, __n);\n                __move_range(__p, __old_last, __p + __old_n);\n                __annotator.__done();\n                _VSTD::copy(__first, __m, __p);\n            }\n        }\n        else\n        {\n            allocator_type& __a = this->__alloc();\n            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);\n            __v.__construct_at_end(__first, __last);\n            __p = __swap_out_circular_buffer(__v, __p);\n        }\n    }\n    return __make_iter(__p);\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::resize(size_type __sz)\n{\n    size_type __cs = size();\n    if (__cs < __sz)\n        this->__append(__sz - __cs);\n    else if (__cs > __sz)\n        this->__destruct_at_end(this->__begin_ + __sz);\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::resize(size_type __sz, const_reference __x)\n{\n    size_type __cs = size();\n    if (__cs < __sz)\n        this->__append(__sz - __cs, __x);\n    else if (__cs > __sz)\n        this->__destruct_at_end(this->__begin_ + __sz);\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\nvector<_Tp, _Allocator>::swap(vector& __x)\n#if _LIBCPP_STD_VER >= 14\n    _NOEXCEPT_DEBUG\n#else\n    _NOEXCEPT_DEBUG_(!__alloc_traits::propagate_on_container_swap::value ||\n                __is_nothrow_swappable<allocator_type>::value)\n#endif\n{\n    _LIBCPP_ASSERT(__alloc_traits::propagate_on_container_swap::value ||\n                   this->__alloc() == __x.__alloc(),\n                   \"vector::swap: Either propagate_on_container_swap must be true\"\n                   \" or the allocators must compare equal\");\n    _VSTD::swap(this->__begin_, __x.__begin_);\n    _VSTD::swap(this->__end_, __x.__end_);\n    _VSTD::swap(this->__end_cap(), __x.__end_cap());\n    __swap_allocator(this->__alloc(), __x.__alloc(), \n        integral_constant<bool,__alloc_traits::propagate_on_container_swap::value>());\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->swap(this, &__x);\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n}\n\ntemplate <class _Tp, class _Allocator>\nbool\nvector<_Tp, _Allocator>::__invariants() const\n{\n    if (this->__begin_ == nullptr)\n    {\n        if (this->__end_ != nullptr || this->__end_cap() != nullptr)\n            return false;\n    }\n    else\n    {\n        if (this->__begin_ > this->__end_)\n            return false;\n        if (this->__begin_ == this->__end_cap())\n            return false;\n        if (this->__end_ > this->__end_cap())\n            return false;\n    }\n    return true;\n}\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\ntemplate <class _Tp, class _Allocator>\nbool\nvector<_Tp, _Allocator>::__dereferenceable(const const_iterator* __i) const\n{\n    return this->__begin_ <= __i->base() && __i->base() < this->__end_;\n}\n\ntemplate <class _Tp, class _Allocator>\nbool\nvector<_Tp, _Allocator>::__decrementable(const const_iterator* __i) const\n{\n    return this->__begin_ < __i->base() && __i->base() <= this->__end_;\n}\n\ntemplate <class _Tp, class _Allocator>\nbool\nvector<_Tp, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const\n{\n    const_pointer __p = __i->base() + __n;\n    return this->__begin_ <= __p && __p <= this->__end_;\n}\n\ntemplate <class _Tp, class _Allocator>\nbool\nvector<_Tp, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const\n{\n    const_pointer __p = __i->base() + __n;\n    return this->__begin_ <= __p && __p < this->__end_;\n}\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nvector<_Tp, _Allocator>::__invalidate_all_iterators()\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__invalidate_all(this);\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n}\n\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nvector<_Tp, _Allocator>::__invalidate_iterators_past(pointer __new_last) {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n  __c_node* __c = __get_db()->__find_c_and_lock(this);\n  for (__i_node** __p = __c->end_; __p != __c->beg_; ) {\n    --__p;\n    const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);\n    if (__i->base() > __new_last) {\n      (*__p)->__c_ = nullptr;\n      if (--__c->end_ != __p)\n        memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));\n    }\n  }\n  __get_db()->unlock();\n#else\n  ((void)__new_last);\n#endif\n}\n\n// vector<bool>\n\ntemplate <class _Allocator> class vector<bool, _Allocator>;\n\ntemplate <class _Allocator> struct hash<vector<bool, _Allocator> >;\n\ntemplate <class _Allocator>\nstruct __has_storage_type<vector<bool, _Allocator> >\n{\n    static const bool value = true;\n};\n\ntemplate <class _Allocator>\nclass _LIBCPP_TEMPLATE_VIS vector<bool, _Allocator>\n    : private __vector_base_common<true>\n{\npublic:\n    typedef vector                                   __self;\n    typedef bool                                     value_type;\n    typedef _Allocator                               allocator_type;\n    typedef allocator_traits<allocator_type>         __alloc_traits;\n    typedef typename __alloc_traits::size_type       size_type;\n    typedef typename __alloc_traits::difference_type difference_type;\n    typedef size_type __storage_type;\n    typedef __bit_iterator<vector, false>            pointer;\n    typedef __bit_iterator<vector, true>             const_pointer;\n    typedef pointer                                  iterator;\n    typedef const_pointer                            const_iterator;\n    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;\n    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;\n\nprivate:\n    typedef typename __rebind_alloc_helper<__alloc_traits, __storage_type>::type __storage_allocator;\n    typedef allocator_traits<__storage_allocator>    __storage_traits;\n    typedef typename __storage_traits::pointer       __storage_pointer;\n    typedef typename __storage_traits::const_pointer __const_storage_pointer;\n\n    __storage_pointer                                      __begin_;\n    size_type                                              __size_;\n    __compressed_pair<size_type, __storage_allocator> __cap_alloc_;\npublic:\n    typedef __bit_reference<vector>                  reference;\n    typedef __bit_const_reference<vector>            const_reference;\nprivate:\n    _LIBCPP_INLINE_VISIBILITY\n    size_type& __cap() _NOEXCEPT\n        {return __cap_alloc_.first();}\n    _LIBCPP_INLINE_VISIBILITY\n    const size_type& __cap() const _NOEXCEPT\n        {return __cap_alloc_.first();}\n    _LIBCPP_INLINE_VISIBILITY\n    __storage_allocator& __alloc() _NOEXCEPT\n        {return __cap_alloc_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    const __storage_allocator& __alloc() const _NOEXCEPT\n        {return __cap_alloc_.second();}\n\n    static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * CHAR_BIT);\n\n    _LIBCPP_INLINE_VISIBILITY\n    static size_type __internal_cap_to_external(size_type __n) _NOEXCEPT\n        {return __n * __bits_per_word;}\n    _LIBCPP_INLINE_VISIBILITY\n    static size_type __external_cap_to_internal(size_type __n) _NOEXCEPT\n        {return (__n - 1) / __bits_per_word + 1;}\n\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);\n\n    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)\n#if _LIBCPP_STD_VER <= 14\n        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);\n#else\n        _NOEXCEPT;\n#endif\n    ~vector();\n    explicit vector(size_type __n);\n#if _LIBCPP_STD_VER > 11\n    explicit vector(size_type __n, const allocator_type& __a);\n#endif\n    vector(size_type __n, const value_type& __v);\n    vector(size_type __n, const value_type& __v, const allocator_type& __a);\n    template <class _InputIterator>\n        vector(_InputIterator __first, _InputIterator __last,\n               typename enable_if<__is_input_iterator  <_InputIterator>::value &&\n                                 !__is_forward_iterator<_InputIterator>::value>::type* = 0);\n    template <class _InputIterator>\n        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,\n               typename enable_if<__is_input_iterator  <_InputIterator>::value &&\n                                 !__is_forward_iterator<_InputIterator>::value>::type* = 0);\n    template <class _ForwardIterator>\n        vector(_ForwardIterator __first, _ForwardIterator __last,\n               typename enable_if<__is_forward_iterator<_ForwardIterator>::value>::type* = 0);\n    template <class _ForwardIterator>\n        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,\n               typename enable_if<__is_forward_iterator<_ForwardIterator>::value>::type* = 0);\n\n    vector(const vector& __v);\n    vector(const vector& __v, const allocator_type& __a);\n    vector& operator=(const vector& __v);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    vector(initializer_list<value_type> __il);\n    vector(initializer_list<value_type> __il, const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    vector(vector&& __v)\n#if _LIBCPP_STD_VER > 14\n        _NOEXCEPT;\n#else\n        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);\n#endif\n    vector(vector&& __v, const allocator_type& __a);\n    _LIBCPP_INLINE_VISIBILITY\n    vector& operator=(vector&& __v)\n        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    vector& operator=(initializer_list<value_type> __il)\n        {assign(__il.begin(), __il.end()); return *this;}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    template <class _InputIterator>\n        typename enable_if\n        <\n            __is_input_iterator<_InputIterator>::value &&\n           !__is_forward_iterator<_InputIterator>::value,\n           void\n        >::type\n        assign(_InputIterator __first, _InputIterator __last);\n    template <class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value,\n           void\n        >::type\n        assign(_ForwardIterator __first, _ForwardIterator __last);\n\n    void assign(size_type __n, const value_type& __x);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    void assign(initializer_list<value_type> __il)\n        {assign(__il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY allocator_type get_allocator() const _NOEXCEPT\n        {return allocator_type(this->__alloc());}\n\n    size_type max_size() const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    size_type capacity() const _NOEXCEPT\n        {return __internal_cap_to_external(__cap());}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type size() const _NOEXCEPT\n        {return __size_;}\n    _LIBCPP_INLINE_VISIBILITY\n    bool empty() const _NOEXCEPT\n        {return __size_ == 0;}\n    void reserve(size_type __n);\n    void shrink_to_fit() _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator begin() _NOEXCEPT\n        {return __make_iter(0);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin() const _NOEXCEPT\n        {return __make_iter(0);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator end() _NOEXCEPT\n        {return __make_iter(__size_);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end()   const _NOEXCEPT\n        {return __make_iter(__size_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    reverse_iterator rbegin() _NOEXCEPT\n        {return       reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rbegin() const _NOEXCEPT\n        {return const_reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n    reverse_iterator rend() _NOEXCEPT\n        {return       reverse_iterator(begin());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rend()   const _NOEXCEPT\n        {return const_reverse_iterator(begin());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator         cbegin()  const _NOEXCEPT\n        {return __make_iter(0);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator         cend()    const _NOEXCEPT\n        {return __make_iter(__size_);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crbegin() const _NOEXCEPT\n        {return rbegin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crend()   const _NOEXCEPT\n        {return rend();}\n\n    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n)       {return __make_ref(__n);}\n    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const {return __make_ref(__n);}\n    reference       at(size_type __n);\n    const_reference at(size_type __n) const;\n\n    _LIBCPP_INLINE_VISIBILITY reference       front()       {return __make_ref(0);}\n    _LIBCPP_INLINE_VISIBILITY const_reference front() const {return __make_ref(0);}\n    _LIBCPP_INLINE_VISIBILITY reference       back()        {return __make_ref(__size_ - 1);}\n    _LIBCPP_INLINE_VISIBILITY const_reference back()  const {return __make_ref(__size_ - 1);}\n\n    void push_back(const value_type& __x);\n#if _LIBCPP_STD_VER > 11\n    template <class... _Args>\n#if _LIBCPP_STD_VER > 14\n    _LIBCPP_INLINE_VISIBILITY reference emplace_back(_Args&&... __args)\n#else\n    _LIBCPP_INLINE_VISIBILITY void      emplace_back(_Args&&... __args)\n#endif\n    {\n        push_back ( value_type ( _VSTD::forward<_Args>(__args)... ));\n#if _LIBCPP_STD_VER > 14\n        return this->back();\n#endif\n    }\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY void pop_back() {--__size_;}\n\n#if _LIBCPP_STD_VER > 11\n    template <class... _Args>\n   _LIBCPP_INLINE_VISIBILITY iterator emplace(const_iterator position, _Args&&... __args)\n        { return insert ( position, value_type ( _VSTD::forward<_Args>(__args)... )); }\n#endif\n\n    iterator insert(const_iterator __position, const value_type& __x);\n    iterator insert(const_iterator __position, size_type __n, const value_type& __x);\n    iterator insert(const_iterator __position, size_type __n, const_reference __x);\n    template <class _InputIterator>\n        typename enable_if\n        <\n             __is_input_iterator  <_InputIterator>::value &&\n            !__is_forward_iterator<_InputIterator>::value,\n            iterator\n        >::type\n        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);\n    template <class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value,\n            iterator\n        >::type\n        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __position, initializer_list<value_type> __il)\n        {return insert(__position, __il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);\n    iterator erase(const_iterator __first, const_iterator __last);\n\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT {__size_ = 0;}\n\n    void swap(vector&)\n#if _LIBCPP_STD_VER >= 14\n        _NOEXCEPT;\n#else\n        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||\n                    __is_nothrow_swappable<allocator_type>::value);\n#endif\n    static void swap(reference __x, reference __y) _NOEXCEPT { _VSTD::swap(__x, __y); }\n\n    void resize(size_type __sz, value_type __x = false);\n    void flip() _NOEXCEPT;\n\n    bool __invariants() const;\n\nprivate:\n    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();\n    void allocate(size_type __n);\n    void deallocate() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    static size_type __align_it(size_type __new_size) _NOEXCEPT\n        {return __new_size + (__bits_per_word-1) & ~((size_type)__bits_per_word-1);};\n    _LIBCPP_INLINE_VISIBILITY  size_type __recommend(size_type __new_size) const;\n    _LIBCPP_INLINE_VISIBILITY void __construct_at_end(size_type __n, bool __x);\n    template <class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value,\n            void\n        >::type\n        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last);\n    void __append(size_type __n, const_reference __x);\n    _LIBCPP_INLINE_VISIBILITY\n    reference __make_ref(size_type __pos) _NOEXCEPT\n        {return reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reference __make_ref(size_type __pos) const _NOEXCEPT\n        {return const_reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __make_iter(size_type __pos) _NOEXCEPT\n        {return iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator __make_iter(size_type __pos) const _NOEXCEPT\n        {return const_iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __const_iterator_cast(const_iterator __p) _NOEXCEPT\n        {return begin() + (__p - cbegin());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const vector& __v)\n        {__copy_assign_alloc(__v, integral_constant<bool,\n                      __storage_traits::propagate_on_container_copy_assignment::value>());}\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const vector& __c, true_type)\n        {\n            if (__alloc() != __c.__alloc())\n                deallocate();\n            __alloc() = __c.__alloc();\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const vector&, false_type)\n        {}\n\n    void __move_assign(vector& __c, false_type);\n    void __move_assign(vector& __c, true_type)\n        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(vector& __c)\n        _NOEXCEPT_(\n            !__storage_traits::propagate_on_container_move_assignment::value ||\n            is_nothrow_move_assignable<allocator_type>::value)\n        {__move_assign_alloc(__c, integral_constant<bool,\n                      __storage_traits::propagate_on_container_move_assignment::value>());}\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(vector& __c, true_type)\n        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)\n        {\n            __alloc() = _VSTD::move(__c.__alloc());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(vector&, false_type)\n        _NOEXCEPT\n        {}\n\n    size_t __hash_code() const _NOEXCEPT;\n\n    friend class __bit_reference<vector>;\n    friend class __bit_const_reference<vector>;\n    friend class __bit_iterator<vector, false>;\n    friend class __bit_iterator<vector, true>;\n    friend struct __bit_array<vector>;\n    friend struct _LIBCPP_TEMPLATE_VIS hash<vector>;\n};\n\ntemplate <class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nvector<bool, _Allocator>::__invalidate_all_iterators()\n{\n}\n\n//  Allocate space for __n objects\n//  throws length_error if __n > max_size()\n//  throws (probably bad_alloc) if memory run out\n//  Precondition:  __begin_ == __end_ == __cap() == 0\n//  Precondition:  __n > 0\n//  Postcondition:  capacity() == __n\n//  Postcondition:  size() == 0\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::allocate(size_type __n)\n{\n    if (__n > max_size())\n        this->__throw_length_error();\n    __n = __external_cap_to_internal(__n);\n    this->__begin_ = __storage_traits::allocate(this->__alloc(), __n);\n    this->__size_ = 0;\n    this->__cap() = __n;\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::deallocate() _NOEXCEPT\n{\n    if (this->__begin_ != nullptr)\n    {\n        __storage_traits::deallocate(this->__alloc(), this->__begin_, __cap());\n        __invalidate_all_iterators();\n        this->__begin_ = nullptr;\n        this->__size_ = this->__cap() = 0;\n    }\n}\n\ntemplate <class _Allocator>\ntypename vector<bool, _Allocator>::size_type\nvector<bool, _Allocator>::max_size() const _NOEXCEPT\n{\n    size_type __amax = __storage_traits::max_size(__alloc());\n    size_type __nmax = numeric_limits<size_type>::max() / 2;  // end() >= begin(), always\n    if (__nmax / __bits_per_word <= __amax)\n        return __nmax;\n    return __internal_cap_to_external(__amax);\n}\n\n//  Precondition:  __new_size > capacity()\ntemplate <class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<bool, _Allocator>::size_type\nvector<bool, _Allocator>::__recommend(size_type __new_size) const\n{\n    const size_type __ms = max_size();\n    if (__new_size > __ms)\n        this->__throw_length_error();\n    const size_type __cap = capacity();\n    if (__cap >= __ms / 2)\n        return __ms;\n    return _VSTD::max(2*__cap, __align_it(__new_size));\n}\n\n//  Default constructs __n objects starting at __end_\n//  Precondition:  __n > 0\n//  Precondition:  size() + __n <= capacity()\n//  Postcondition:  size() == size() + __n\ntemplate <class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nvector<bool, _Allocator>::__construct_at_end(size_type __n, bool __x)\n{\n    size_type __old_size = this->__size_;\n    this->__size_ += __n;\n    _VSTD::fill_n(__make_iter(__old_size), __n, __x);\n}\n\ntemplate <class _Allocator>\ntemplate <class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value,\n    void\n>::type\nvector<bool, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last)\n{\n    size_type __old_size = this->__size_;\n    this->__size_ += _VSTD::distance(__first, __last);\n    _VSTD::copy(__first, __last, __make_iter(__old_size));\n}\n\ntemplate <class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<bool, _Allocator>::vector()\n    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0)\n{\n}\n\ntemplate <class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<bool, _Allocator>::vector(const allocator_type& __a)\n#if _LIBCPP_STD_VER <= 14\n        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)\n#else\n        _NOEXCEPT\n#endif\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, static_cast<__storage_allocator>(__a))\n{\n}\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(size_type __n)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0)\n{\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__n, false);\n    }\n}\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(size_type __n, const allocator_type& __a)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, static_cast<__storage_allocator>(__a))\n{\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__n, false);\n    }\n}\n#endif\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(size_type __n, const value_type& __x)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0)\n{\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__n, __x);\n    }\n}\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, static_cast<__storage_allocator>(__a))\n{\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__n, __x);\n    }\n}\n\ntemplate <class _Allocator>\ntemplate <class _InputIterator>\nvector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last,\n       typename enable_if<__is_input_iterator  <_InputIterator>::value &&\n                         !__is_forward_iterator<_InputIterator>::value>::type*)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        for (; __first != __last; ++__first)\n            push_back(*__first);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        if (__begin_ != nullptr)\n            __storage_traits::deallocate(__alloc(), __begin_, __cap());\n        __invalidate_all_iterators();\n        throw;\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n}\n\ntemplate <class _Allocator>\ntemplate <class _InputIterator>\nvector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,\n       typename enable_if<__is_input_iterator  <_InputIterator>::value &&\n                         !__is_forward_iterator<_InputIterator>::value>::type*)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, static_cast<__storage_allocator>(__a))\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        for (; __first != __last; ++__first)\n            push_back(*__first);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        if (__begin_ != nullptr)\n            __storage_traits::deallocate(__alloc(), __begin_, __cap());\n        __invalidate_all_iterators();\n        throw;\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n}\n\ntemplate <class _Allocator>\ntemplate <class _ForwardIterator>\nvector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last,\n                                typename enable_if<__is_forward_iterator<_ForwardIterator>::value>::type*)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0)\n{\n    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__first, __last);\n    }\n}\n\ntemplate <class _Allocator>\ntemplate <class _ForwardIterator>\nvector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,\n                                typename enable_if<__is_forward_iterator<_ForwardIterator>::value>::type*)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, static_cast<__storage_allocator>(__a))\n{\n    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__first, __last);\n    }\n}\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(initializer_list<value_type> __il)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0)\n{\n    size_type __n = static_cast<size_type>(__il.size());\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__il.begin(), __il.end());\n    }\n}\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, static_cast<__storage_allocator>(__a))\n{\n    size_type __n = static_cast<size_type>(__il.size());\n    if (__n > 0)\n    {\n        allocate(__n);\n        __construct_at_end(__il.begin(), __il.end());\n    }\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::~vector()\n{\n    if (__begin_ != nullptr)\n        __storage_traits::deallocate(__alloc(), __begin_, __cap());\n    __invalidate_all_iterators();\n}\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(const vector& __v)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, __storage_traits::select_on_container_copy_construction(__v.__alloc()))\n{\n    if (__v.size() > 0)\n    {\n        allocate(__v.size());\n        __construct_at_end(__v.begin(), __v.end());\n    }\n}\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(const vector& __v, const allocator_type& __a)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, __a)\n{\n    if (__v.size() > 0)\n    {\n        allocate(__v.size());\n        __construct_at_end(__v.begin(), __v.end());\n    }\n}\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>&\nvector<bool, _Allocator>::operator=(const vector& __v)\n{\n    if (this != &__v)\n    {\n        __copy_assign_alloc(__v);\n        if (__v.__size_)\n        {\n            if (__v.__size_ > capacity())\n            {\n                deallocate();\n                allocate(__v.__size_);\n            }\n            _VSTD::copy(__v.__begin_, __v.__begin_ + __external_cap_to_internal(__v.__size_), __begin_);\n        }\n        __size_ = __v.__size_;\n    }\n    return *this;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<bool, _Allocator>::vector(vector&& __v)\n#if _LIBCPP_STD_VER > 14\n        _NOEXCEPT\n#else\n        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)\n#endif\n    : __begin_(__v.__begin_),\n      __size_(__v.__size_),\n      __cap_alloc_(__v.__cap_alloc_)\n{\n    __v.__begin_ = nullptr;\n    __v.__size_ = 0;\n    __v.__cap() = 0;\n}\n\ntemplate <class _Allocator>\nvector<bool, _Allocator>::vector(vector&& __v, const allocator_type& __a)\n    : __begin_(nullptr),\n      __size_(0),\n      __cap_alloc_(0, __a)\n{\n    if (__a == allocator_type(__v.__alloc()))\n    {\n        this->__begin_ = __v.__begin_;\n        this->__size_ = __v.__size_;\n        this->__cap() = __v.__cap();\n        __v.__begin_ = nullptr;\n        __v.__cap() = __v.__size_ = 0;\n    }\n    else if (__v.size() > 0)\n    {\n        allocate(__v.size());\n        __construct_at_end(__v.begin(), __v.end());\n    }\n}\n\ntemplate <class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvector<bool, _Allocator>&\nvector<bool, _Allocator>::operator=(vector&& __v)\n    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))\n{\n    __move_assign(__v, integral_constant<bool,\n          __storage_traits::propagate_on_container_move_assignment::value>());\n    return *this;\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::__move_assign(vector& __c, false_type)\n{\n    if (__alloc() != __c.__alloc())\n        assign(__c.begin(), __c.end());\n    else\n        __move_assign(__c, true_type());\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::__move_assign(vector& __c, true_type)\n    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)\n{\n    deallocate();\n    __move_assign_alloc(__c);\n    this->__begin_ = __c.__begin_;\n    this->__size_ = __c.__size_;\n    this->__cap() = __c.__cap();\n    __c.__begin_ = nullptr;\n    __c.__cap() = __c.__size_ = 0;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::assign(size_type __n, const value_type& __x)\n{\n    __size_ = 0;\n    if (__n > 0)\n    {\n        size_type __c = capacity();\n        if (__n <= __c)\n            __size_ = __n;\n        else\n        {\n            vector __v(__alloc());\n            __v.reserve(__recommend(__n));\n            __v.__size_ = __n;\n            swap(__v);\n        }\n        _VSTD::fill_n(begin(), __n, __x);\n    }\n  __invalidate_all_iterators();\n}\n\ntemplate <class _Allocator>\ntemplate <class _InputIterator>\ntypename enable_if\n<\n    __is_input_iterator<_InputIterator>::value &&\n   !__is_forward_iterator<_InputIterator>::value,\n   void\n>::type\nvector<bool, _Allocator>::assign(_InputIterator __first, _InputIterator __last)\n{\n    clear();\n    for (; __first != __last; ++__first)\n        push_back(*__first);\n}\n\ntemplate <class _Allocator>\ntemplate <class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value,\n   void\n>::type\nvector<bool, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)\n{\n    clear();\n    difference_type __ns = _VSTD::distance(__first, __last);\n    _LIBCPP_ASSERT(__ns >= 0, \"invalid range specified\");\n    const size_t __n = static_cast<size_type>(__ns);\n    if (__n)\n    {\n        if (__n > capacity())\n        {\n            deallocate();\n            allocate(__n);\n        }\n        __construct_at_end(__first, __last);\n    }\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::reserve(size_type __n)\n{\n    if (__n > capacity())\n    {\n        vector __v(this->__alloc());\n        __v.allocate(__n);\n        __v.__construct_at_end(this->begin(), this->end());\n        swap(__v);\n        __invalidate_all_iterators();\n    }\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::shrink_to_fit() _NOEXCEPT\n{\n    if (__external_cap_to_internal(size()) > __cap())\n    {\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            vector(*this, allocator_type(__alloc())).swap(*this);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    }\n}\n\ntemplate <class _Allocator>\ntypename vector<bool, _Allocator>::reference\nvector<bool, _Allocator>::at(size_type __n)\n{\n    if (__n >= size())\n        this->__throw_out_of_range();\n    return (*this)[__n];\n}\n\ntemplate <class _Allocator>\ntypename vector<bool, _Allocator>::const_reference\nvector<bool, _Allocator>::at(size_type __n) const\n{\n    if (__n >= size())\n        this->__throw_out_of_range();\n    return (*this)[__n];\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::push_back(const value_type& __x)\n{\n    if (this->__size_ == this->capacity())\n        reserve(__recommend(this->__size_ + 1));\n    ++this->__size_;\n    back() = __x;\n}\n\ntemplate <class _Allocator>\ntypename vector<bool, _Allocator>::iterator\nvector<bool, _Allocator>::insert(const_iterator __position, const value_type& __x)\n{\n    iterator __r;\n    if (size() < capacity())\n    {\n        const_iterator __old_end = end();\n        ++__size_;\n        _VSTD::copy_backward(__position, __old_end, end());\n        __r = __const_iterator_cast(__position);\n    }\n    else\n    {\n        vector __v(__alloc());\n        __v.reserve(__recommend(__size_ + 1));\n        __v.__size_ = __size_ + 1;\n        __r = _VSTD::copy(cbegin(), __position, __v.begin());\n        _VSTD::copy_backward(__position, cend(), __v.end());\n        swap(__v);\n    }\n    *__r = __x;\n    return __r;\n}\n\ntemplate <class _Allocator>\ntypename vector<bool, _Allocator>::iterator\nvector<bool, _Allocator>::insert(const_iterator __position, size_type __n, const value_type& __x)\n{\n    iterator __r;\n    size_type __c = capacity();\n    if (__n <= __c && size() <= __c - __n)\n    {\n        const_iterator __old_end = end();\n        __size_ += __n;\n        _VSTD::copy_backward(__position, __old_end, end());\n        __r = __const_iterator_cast(__position);\n    }\n    else\n    {\n        vector __v(__alloc());\n        __v.reserve(__recommend(__size_ + __n));\n        __v.__size_ = __size_ + __n;\n        __r = _VSTD::copy(cbegin(), __position, __v.begin());\n        _VSTD::copy_backward(__position, cend(), __v.end());\n        swap(__v);\n    }\n    _VSTD::fill_n(__r, __n, __x);\n    return __r;\n}\n\ntemplate <class _Allocator>\ntemplate <class _InputIterator>\ntypename enable_if\n<\n     __is_input_iterator  <_InputIterator>::value &&\n    !__is_forward_iterator<_InputIterator>::value,\n    typename vector<bool, _Allocator>::iterator\n>::type\nvector<bool, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)\n{\n    difference_type __off = __position - begin();\n    iterator __p = __const_iterator_cast(__position);\n    iterator __old_end = end();\n    for (; size() != capacity() && __first != __last; ++__first)\n    {\n        ++this->__size_;\n        back() = *__first;\n    }\n    vector __v(__alloc());\n    if (__first != __last)\n    {\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            __v.assign(__first, __last);\n            difference_type __old_size = static_cast<difference_type>(__old_end - begin());\n            difference_type __old_p = __p - begin();\n            reserve(__recommend(size() + __v.size()));\n            __p = begin() + __old_p;\n            __old_end = begin() + __old_size;\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n            erase(__old_end, end());\n            throw;\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    }\n    __p = _VSTD::rotate(__p, __old_end, end());\n    insert(__p, __v.begin(), __v.end());\n    return begin() + __off;\n}\n\ntemplate <class _Allocator>\ntemplate <class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value,\n    typename vector<bool, _Allocator>::iterator\n>::type\nvector<bool, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)\n{\n    const difference_type __n_signed = _VSTD::distance(__first, __last);\n    _LIBCPP_ASSERT(__n_signed >= 0, \"invalid range specified\");\n    const size_type __n = static_cast<size_type>(__n_signed);\n    iterator __r;\n    size_type __c = capacity();\n    if (__n <= __c && size() <= __c - __n)\n    {\n        const_iterator __old_end = end();\n        __size_ += __n;\n        _VSTD::copy_backward(__position, __old_end, end());\n        __r = __const_iterator_cast(__position);\n    }\n    else\n    {\n        vector __v(__alloc());\n        __v.reserve(__recommend(__size_ + __n));\n        __v.__size_ = __size_ + __n;\n        __r = _VSTD::copy(cbegin(), __position, __v.begin());\n        _VSTD::copy_backward(__position, cend(), __v.end());\n        swap(__v);\n    }\n    _VSTD::copy(__first, __last, __r);\n    return __r;\n}\n\ntemplate <class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename vector<bool, _Allocator>::iterator\nvector<bool, _Allocator>::erase(const_iterator __position)\n{\n    iterator __r = __const_iterator_cast(__position);\n    _VSTD::copy(__position + 1, this->cend(), __r);\n    --__size_;\n    return __r;\n}\n\ntemplate <class _Allocator>\ntypename vector<bool, _Allocator>::iterator\nvector<bool, _Allocator>::erase(const_iterator __first, const_iterator __last)\n{\n    iterator __r = __const_iterator_cast(__first);\n    difference_type __d = __last - __first;\n    _VSTD::copy(__last, this->cend(), __r);\n    __size_ -= __d;\n    return __r;\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::swap(vector& __x)\n#if _LIBCPP_STD_VER >= 14\n    _NOEXCEPT\n#else\n    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||\n                __is_nothrow_swappable<allocator_type>::value)\n#endif\n{\n    _VSTD::swap(this->__begin_, __x.__begin_);\n    _VSTD::swap(this->__size_, __x.__size_);\n    _VSTD::swap(this->__cap(), __x.__cap());\n    __swap_allocator(this->__alloc(), __x.__alloc(), \n        integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::resize(size_type __sz, value_type __x)\n{\n    size_type __cs = size();\n    if (__cs < __sz)\n    {\n        iterator __r;\n        size_type __c = capacity();\n        size_type __n = __sz - __cs;\n        if (__n <= __c && __cs <= __c - __n)\n        {\n            __r = end();\n            __size_ += __n;\n        }\n        else\n        {\n            vector __v(__alloc());\n            __v.reserve(__recommend(__size_ + __n));\n            __v.__size_ = __size_ + __n;\n            __r = _VSTD::copy(cbegin(), cend(), __v.begin());\n            swap(__v);\n        }\n        _VSTD::fill_n(__r, __n, __x);\n    }\n    else\n        __size_ = __sz;\n}\n\ntemplate <class _Allocator>\nvoid\nvector<bool, _Allocator>::flip() _NOEXCEPT\n{\n    // do middle whole words\n    size_type __n = __size_;\n    __storage_pointer __p = __begin_;\n    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)\n        *__p = ~*__p;\n    // do last partial word\n    if (__n > 0)\n    {\n        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);\n        __storage_type __b = *__p & __m;\n        *__p &= ~__m;\n        *__p |= ~__b & __m;\n    }\n}\n\ntemplate <class _Allocator>\nbool\nvector<bool, _Allocator>::__invariants() const\n{\n    if (this->__begin_ == nullptr)\n    {\n        if (this->__size_ != 0 || this->__cap() != 0)\n            return false;\n    }\n    else\n    {\n        if (this->__cap() == 0)\n            return false;\n        if (this->__size_ > this->capacity())\n            return false;\n    }\n    return true;\n}\n\ntemplate <class _Allocator>\nsize_t\nvector<bool, _Allocator>::__hash_code() const _NOEXCEPT\n{\n    size_t __h = 0;\n    // do middle whole words\n    size_type __n = __size_;\n    __storage_pointer __p = __begin_;\n    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)\n        __h ^= *__p;\n    // do last partial word\n    if (__n > 0)\n    {\n        const __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);\n        __h ^= *__p & __m;\n    }\n    return __h;\n}\n\ntemplate <class _Allocator>\nstruct _LIBCPP_TEMPLATE_VIS hash<vector<bool, _Allocator> >\n    : public unary_function<vector<bool, _Allocator>, size_t>\n{\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(const vector<bool, _Allocator>& __vec) const _NOEXCEPT\n        {return __vec.__hash_code();}\n};\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)\n{\n    const typename vector<_Tp, _Allocator>::size_type __sz = __x.size();\n    return __sz == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)\n{\n    return !(__x == __y);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator< (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)\n{\n    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator> (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)\n{\n    return __y < __x;\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)\n{\n    return !(__x < __y);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)\n{\n    return !(__y < __x);\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(vector<_Tp, _Allocator>& __x, vector<_Tp, _Allocator>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_VECTOR\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2018\n *\n *  @file vector.h\n *  @brief A drop-in wrapper for std::vector; adds on bounds checking in debug mode.\n *  @note Status: BETA\n *\n *  This class is a drop-in wrapper for std::vector, adding on bounds checking.\n *  If EMP_NDEBUG is set then it reverts back to std::vector.\n *\n *  @todo Debug code: member functions that take iterators should also take emp iterators that verify\n *        whether those iterators are valid.\n */\n\n\n#ifndef EMP_VECTOR_H\n#define EMP_VECTOR_H\n\n#include <initializer_list>\n#include <iterator>\n#include <utility>\n#include <vector>\n\n#include \"assert.h\"\n\n#ifdef EMP_NDEBUG\n\n// Seemlessly translate emp::vector to std::vector\nnamespace emp {\n  template <typename... Ts> using vector = std::vector<Ts...>;\n}\n\n\n#else // #EMP_NDEBUG *not* set\n\nnamespace emp {\n\n  /// Build a debug wrapper emp::vector around std::vector.\n  template <typename T, typename... Ts>\n  class vector : public std::vector<T,Ts...> {\n  private:\n    using this_t = emp::vector<T,Ts...>;\n    using stdv_t = std::vector<T,Ts...>;\n\n    /// Setup a threshold; if we try to make a vector bigger than MAX_SIZE, throw a warning.\n    constexpr static const size_t MAX_SIZE = 2000000001; // 2x10^9 + 1\n\n  public:\n    /// Setup a revision number - iterators must match the revision of their vector.\n    int revision;\n\n    /// Setup an iterator wrapper to make sure that they're not used again after a vector changes.\n    template<typename ITERATOR_T>\n    struct iterator_wrapper : public ITERATOR_T {\n      using this_t = iterator_wrapper<ITERATOR_T>;\n      using wrapped_t = ITERATOR_T;\n      using vec_t = emp::vector<T,Ts...>;\n\n      /// What vector and revision was this iterator created from?\n      const vec_t * v_ptr;\n      int revision;\n\n      // @CAO: For the moment cannot create an emp iterator from a base since we don't know vector to use.\n      // iterator_wrapper(const ITERATOR_T & _in)\n      //   : ITERATOR_T(_in), v_ptr(nullptr), revision(0) { ; }\n      iterator_wrapper(const ITERATOR_T & _in, const vec_t * _v)\n        : ITERATOR_T(_in), v_ptr(_v), revision(_v->revision) { ; }\n      iterator_wrapper(const this_t &) = default;\n      iterator_wrapper(this_t &&) = default;\n      ~iterator_wrapper() { ; }\n\n      // Debug tools to make sure this iterator is okay.\n      bool OK(bool begin_ok=true, bool end_ok=true) const {\n        if (v_ptr == nullptr) return false;                // Invalid vector\n        if (v_ptr->revision == 0) return false;            // Vector has been deleted!\n        if (revision != v_ptr->revision) return false;     // Vector has changed memory!\n        size_t pos = (size_t) (*this - v_ptr->begin());\n        if (pos > v_ptr->size()) return false;             // Iterator out of range.\n        if (!begin_ok && pos == 0) return false;           // Iterator not allowed at beginning.\n        if (!end_ok && pos == v_ptr->size()) return false; // Iterator not allowed at end.\n        return true;\n      }\n\n      this_t & operator=(const this_t &) = default;\n      this_t & operator=(this_t &&) = default;\n\n      operator ITERATOR_T() { return *this; }\n      operator const ITERATOR_T() const { return *this; }\n\n      auto & operator*() {\n        emp_assert(OK(true, false));  // Ensure vector hasn't changed since making iterator.\n        return wrapped_t::operator*();\n      }\n      const auto & operator*() const {\n        emp_assert(OK(true, false));  // Ensure vector hasn't changed since making iterator.\n        return wrapped_t::operator*();\n      }\n\n      auto operator->() {\n        emp_assert(OK(true, false));  // Ensure vector hasn't changed since making iterator.\n        return wrapped_t::operator->();\n      }\n      const auto operator->() const {\n        emp_assert(OK(true, false));  // Ensure vector hasn't changed since making iterator.\n        return wrapped_t::operator->();\n      }\n\n      this_t & operator++() { emp_assert(OK(true,false)); wrapped_t::operator++(); return *this; }\n      this_t operator++(int x) { emp_assert(OK(true,false)); return this_t(wrapped_t::operator++(x), v_ptr); }\n      this_t & operator--() { emp_assert(OK(false,true)); wrapped_t::operator--(); return *this; }\n      this_t operator--(int x) { emp_assert(OK(false,true)); return this_t(wrapped_t::operator--(x), v_ptr); }\n\n      auto operator+(int in) { emp_assert(OK()); return this_t(wrapped_t::operator+(in), v_ptr); }\n      auto operator-(int in) { emp_assert(OK()); return this_t(wrapped_t::operator-(in), v_ptr); }\n      auto operator-(const this_t & in) { emp_assert(OK()); return ((wrapped_t) *this) - (wrapped_t) in; }\n\n      this_t & operator+=(int in) { emp_assert(OK()); wrapped_t::operator+=(in); return *this; }\n      this_t & operator-=(int in) { emp_assert(OK()); wrapped_t::operator-=(in); return *this; }\n      auto & operator[](int offset) { emp_assert(OK()); return wrapped_t::operator[](offset); }\n\n      //bool operator==(const wrapped_t & in) const { emp_assert(OK()); return wrapped_t::operator==(in); }\n      //bool operator!=(const wrapped_t & in) const { emp_assert(OK()); return wrapped_t::operator!=(in); }\n\n      //bool operator< (const wrapped_t & in) const { emp_assert(OK()); return wrapped_t::operator< (in); }\n      //bool operator<=(const wrapped_t & in) const { emp_assert(OK()); return wrapped_t::operator<=(in); }\n      //bool operator> (const wrapped_t & in) const { emp_assert(OK()); return wrapped_t::operator> (in); }\n      //bool operator>=(const wrapped_t & in) const { emp_assert(OK()); return wrapped_t::operator>=(in); }\n    };\n\n    using iterator = iterator_wrapper< typename stdv_t::iterator >;\n    using const_iterator = iterator_wrapper< typename stdv_t::const_iterator >;\n    using reverse_iterator = iterator_wrapper< typename stdv_t::reverse_iterator >;\n    using const_reverse_iterator = iterator_wrapper< typename stdv_t::const_reverse_iterator >;\n    using value_type = T;\n    using size_type = typename stdv_t::size_type;\n    using reference = typename stdv_t::reference;\n    using const_reference = typename stdv_t::const_reference;\n\n    vector() : stdv_t(), revision(1) {};\n    vector(const this_t & _in) : stdv_t(_in), revision(1) {};\n    vector(size_t size) : stdv_t(size), revision(1) { emp_assert(size < MAX_SIZE, size); }\n    vector(size_t size, const T & val) : stdv_t(size, val), revision(1) { emp_assert(size < MAX_SIZE, size); }\n    vector(std::initializer_list<T> in_list) : stdv_t(in_list), revision(1) { ; }\n    vector(const stdv_t & in) : stdv_t(in), revision(1) { ; }         // Emergency fallback conversion.\n    template <typename InputIt>\n    vector(InputIt first, InputIt last) : stdv_t(first, last), revision(1) { ; }\n    ~vector() { revision = 0; } // Clear out revision when vector is deleted.\n\n    size_t size() const { return stdv_t::size(); }\n\n    iterator begin() noexcept { return iterator(stdv_t::begin(), this); }\n    const_iterator begin() const noexcept { return const_iterator(stdv_t::begin(), this); }\n    iterator end() noexcept { return iterator(stdv_t::end(), this); }\n    const_iterator end() const noexcept { return const_iterator(stdv_t::end(), this); }\n\n    // operator stdv_t &() { return v; }\n    // operator const stdv_t &() const { return v; }\n\n    void resize(size_t new_size) {\n      emp_assert(new_size < MAX_SIZE, new_size);\n      stdv_t::resize(new_size);\n      revision++;\n    }\n    void resize(size_t new_size, const T & val) {\n      emp_assert(new_size < MAX_SIZE, new_size);\n      stdv_t::resize(new_size, val);\n      revision++;\n    }\n    this_t & operator=(const this_t &) = default;\n\n    T & operator[](size_t pos) {\n      emp_assert(pos < stdv_t::size(), pos, stdv_t::size());\n      return stdv_t::operator[](pos);\n    }\n\n    const T & operator[](size_t pos) const {\n      emp_assert(pos < stdv_t::size(), pos, stdv_t::size());\n      return stdv_t::operator[](pos);\n    }\n\n    T & back() { emp_assert(stdv_t::size() > 0); return stdv_t::back(); }\n    const T & back() const { emp_assert(stdv_t::size() > 0); return stdv_t::back(); }\n    T & front() { emp_assert(stdv_t::size() > 0); return stdv_t::front(); }\n    const T & front() const { emp_assert(stdv_t::size() > 0); return stdv_t::front(); }\n\n    template <typename... PB_Ts>\n    void push_back(PB_Ts &&... args) {\n      stdv_t::push_back(std::forward<PB_Ts>(args)...);\n      revision++;\n    }\n\n    void pop_back() {\n      emp_assert(stdv_t::size() > 0, stdv_t::size());\n      stdv_t::pop_back();\n      revision++;           // Technically reducing size can cause memory reallocation, but less likely.\n    }\n\n    template <typename... ARGS>\n    iterator insert(ARGS &&... args) {\n      ++revision;\n      return iterator( stdv_t::insert(std::forward<ARGS>(args)...), this );\n    }\n\n    template <typename... ARGS>\n    iterator erase(ARGS &&... args) {\n      ++revision;\n      return iterator( stdv_t::erase(std::forward<ARGS>(args)...), this );\n    }\n\n    template <typename... ARGS>\n    iterator emplace(ARGS &&... args) {\n      ++revision;\n      return iterator( stdv_t::emplace(std::forward<ARGS>(args)...), this );\n    }\n\n    template <typename... ARGS>\n    void emplace_back(ARGS &&... args) {\n      stdv_t::emplace_back(std::forward<ARGS>(args)...);\n      revision++;\n    }\n  };\n\n  /// Build a specialized debug wrapper for emp::vector<bool>\n  template <typename... Ts>\n  class vector<bool, Ts...> : public std::vector<bool,Ts...> {\n  private:\n    using this_t = emp::vector<bool,Ts...>;\n    using stdv_t = std::vector<bool,Ts...>;\n\n    /// Setup a threshold; if we try to make a vector bigger than MAX_SIZE, throw a warning.\n    constexpr static const size_t MAX_SIZE = 2000000001;\n\n  public:\n    using iterator = typename stdv_t::iterator;\n    using const_iterator = typename stdv_t::const_iterator;\n    using value_type = bool;\n    using size_type = typename stdv_t::size_type;\n    using reference = typename stdv_t::reference;\n    using const_reference = typename stdv_t::const_reference;\n\n    vector() : stdv_t() {};\n    vector(const this_t & _in) : stdv_t(_in) {};\n    vector(size_t size) : stdv_t(size) { emp_assert(size < MAX_SIZE, size); }\n    vector(size_t size, bool val) : stdv_t(size, val) { emp_assert(size < MAX_SIZE, size); }\n    vector(std::initializer_list<bool> in_list) : stdv_t(in_list) { ; }\n    vector(const stdv_t & in) : stdv_t(in) { ; }         // Emergency fallback conversion.\n    template <typename InputIt>\n    vector(InputIt first, InputIt last) : stdv_t(first, last){;}\n\n\n    // operator stdv_t &() { return v; }\n    // operator const stdv_t &() const { return v; }\n\n    void resize(size_t new_size) { emp_assert(new_size < MAX_SIZE, new_size); stdv_t::resize(new_size); }\n    void resize(size_t new_size, bool val) {\n      emp_assert(new_size < MAX_SIZE, new_size);\n      stdv_t::resize(new_size, val);\n    }\n    this_t & operator=(const this_t &) = default;\n\n    auto operator[](size_t pos) -> decltype(stdv_t::operator[](pos)) {\n      emp_assert(pos < stdv_t::size(), pos, stdv_t::size());\n      return stdv_t::operator[](pos);\n    }\n\n    bool operator[](size_t pos) const {\n      emp_assert(pos < stdv_t::size(), pos, stdv_t::size());\n      return stdv_t::operator[](pos);\n    }\n\n    auto & back() { emp_assert(stdv_t::size() > 0); return stdv_t::back(); }\n    bool back() const { emp_assert(stdv_t::size() > 0); return stdv_t::back(); }\n    auto & front() { emp_assert(stdv_t::size() > 0); return stdv_t::front(); }\n    bool front() const { emp_assert(stdv_t::size() > 0); return stdv_t::front(); }\n\n    void pop_back() {\n      emp_assert(stdv_t::size() > 0, stdv_t::size());\n      stdv_t::pop_back();\n    }\n  };\n\n}\n\n// A crude, generic printing function for vectors.\ntemplate <typename T, typename... Ts>\nstd::ostream & operator<<(std::ostream & out, const emp::vector<T,Ts...> & v) {\n  for (const T & x : v) out << x << \" \";\n  return out;\n}\n\ntemplate <typename T, typename... Ts>\nstd::istream & operator>>(std::istream & is, emp::vector<T,Ts...> & v) {\n  for (T & x : v) is >> x;\n  return is;\n}\n\n#endif\n\n// namespace emp {\n//   template<typename T, typename... Ts> struct TypeID< emp::vector<T,Ts...> > {\n//     static std::string GetName() {\n//       using simple_vt = emp::vector<T>;\n//       using full_vt = emp::vector<T,Ts...>;\n//       if (std::is_same<simple_vt,full_vt>::value) {\n//         return \"emp::vector<\" + TypeID<T>::GetName() + \">\";\n//       }\n//       return \"emp::vector<\" + TypeID<TypePack<T,Ts...>>::GetTypes() + \">\";\n//     }\n//   };\n// }\n\n#endif\n","// -*- C++ -*-\n//===--------------------------- tuple ------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is distributed under the University of Illinois Open Source\n// License. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_TUPLE\n#define _LIBCPP_TUPLE\n\n/*\n    tuple synopsis\n\nnamespace std\n{\n\ntemplate <class... T>\nclass tuple {\npublic:\n    constexpr tuple();\n    explicit tuple(const T&...);  // constexpr in C++14\n    template <class... U>\n        explicit tuple(U&&...);  // constexpr in C++14\n    tuple(const tuple&) = default;\n    tuple(tuple&&) = default;\n    template <class... U>\n        tuple(const tuple<U...>&);  // constexpr in C++14\n    template <class... U>\n        tuple(tuple<U...>&&);  // constexpr in C++14\n    template <class U1, class U2>\n        tuple(const pair<U1, U2>&); // iff sizeof...(T) == 2 // constexpr in C++14\n    template <class U1, class U2>\n        tuple(pair<U1, U2>&&); // iff sizeof...(T) == 2  // constexpr in C++14\n\n    // allocator-extended constructors\n    template <class Alloc>\n        tuple(allocator_arg_t, const Alloc& a);\n    template <class Alloc>\n        tuple(allocator_arg_t, const Alloc& a, const T&...);\n    template <class Alloc, class... U>\n        tuple(allocator_arg_t, const Alloc& a, U&&...);\n    template <class Alloc>\n        tuple(allocator_arg_t, const Alloc& a, const tuple&);\n    template <class Alloc>\n        tuple(allocator_arg_t, const Alloc& a, tuple&&);\n    template <class Alloc, class... U>\n        tuple(allocator_arg_t, const Alloc& a, const tuple<U...>&);\n    template <class Alloc, class... U>\n        tuple(allocator_arg_t, const Alloc& a, tuple<U...>&&);\n    template <class Alloc, class U1, class U2>\n        tuple(allocator_arg_t, const Alloc& a, const pair<U1, U2>&);\n    template <class Alloc, class U1, class U2>\n        tuple(allocator_arg_t, const Alloc& a, pair<U1, U2>&&);\n\n    tuple& operator=(const tuple&);\n    tuple&\n        operator=(tuple&&) noexcept(AND(is_nothrow_move_assignable<T>::value ...));\n    template <class... U>\n        tuple& operator=(const tuple<U...>&);\n    template <class... U>\n        tuple& operator=(tuple<U...>&&);\n    template <class U1, class U2>\n        tuple& operator=(const pair<U1, U2>&); // iff sizeof...(T) == 2\n    template <class U1, class U2>\n        tuple& operator=(pair<U1, U2>&&); //iffsizeof...(T) == 2\n\n    void swap(tuple&) noexcept(AND(swap(declval<T&>(), declval<T&>())...));\n};\n\nconst unspecified ignore;\n\ntemplate <class... T> tuple<V...>  make_tuple(T&&...); // constexpr in C++14\ntemplate <class... T> tuple<ATypes...> forward_as_tuple(T&&...) noexcept; // constexpr in C++14\ntemplate <class... T> tuple<T&...> tie(T&...) noexcept; // constexpr in C++14\ntemplate <class... Tuples> tuple<CTypes...> tuple_cat(Tuples&&... tpls); // constexpr in C++14\n\n// [tuple.apply], calling a function with a tuple of arguments:\ntemplate <class F, class Tuple>\n  constexpr decltype(auto) apply(F&& f, Tuple&& t); // C++17\ntemplate <class T, class Tuple>\n  constexpr T make_from_tuple(Tuple&& t); // C++17\n\n// 20.4.1.4, tuple helper classes:\ntemplate <class T> class tuple_size; // undefined\ntemplate <class... T> class tuple_size<tuple<T...>>;\ntemplate <class T>\n constexpr size_t tuple_size_v = tuple_size<T>::value; // C++17\ntemplate <size_t I, class T> class tuple_element; // undefined\ntemplate <size_t I, class... T> class tuple_element<I, tuple<T...>>;\ntemplate <size_t I, class T>\n  using tuple_element_t = typename tuple_element <I, T>::type; // C++14\n\n// 20.4.1.5, element access:\ntemplate <size_t I, class... T>\n    typename tuple_element<I, tuple<T...>>::type&\n    get(tuple<T...>&) noexcept; // constexpr in C++14\ntemplate <size_t I, class... T>\n    const typename tuple_element<I, tuple<T...>>::type&\n    get(const tuple<T...>&) noexcept; // constexpr in C++14\ntemplate <size_t I, class... T>\n    typename tuple_element<I, tuple<T...>>::type&&\n    get(tuple<T...>&&) noexcept; // constexpr in C++14\ntemplate <size_t I, class... T>\n    const typename tuple_element<I, tuple<T...>>::type&&\n    get(const tuple<T...>&&) noexcept; // constexpr in C++14\n\ntemplate <class T1, class... T>\n    constexpr T1& get(tuple<T...>&) noexcept;  // C++14\ntemplate <class T1, class... T>\n    constexpr const T1& get(const tuple<T...>&) noexcept;   // C++14\ntemplate <class T1, class... T>\n    constexpr T1&& get(tuple<T...>&&) noexcept;   // C++14\ntemplate <class T1, class... T>\n    constexpr const T1&& get(const tuple<T...>&&) noexcept;   // C++14\n\n// 20.4.1.6, relational operators:\ntemplate<class... T, class... U> bool operator==(const tuple<T...>&, const tuple<U...>&); // constexpr in C++14\ntemplate<class... T, class... U> bool operator<(const tuple<T...>&, const tuple<U...>&);  // constexpr in C++14\ntemplate<class... T, class... U> bool operator!=(const tuple<T...>&, const tuple<U...>&); // constexpr in C++14\ntemplate<class... T, class... U> bool operator>(const tuple<T...>&, const tuple<U...>&);  // constexpr in C++14\ntemplate<class... T, class... U> bool operator<=(const tuple<T...>&, const tuple<U...>&); // constexpr in C++14\ntemplate<class... T, class... U> bool operator>=(const tuple<T...>&, const tuple<U...>&); // constexpr in C++14\n\ntemplate <class... Types, class Alloc>\n  struct uses_allocator<tuple<Types...>, Alloc>;\n\ntemplate <class... Types>\n  void\n  swap(tuple<Types...>& x, tuple<Types...>& y) noexcept(noexcept(x.swap(y)));\n\n}  // std\n\n*/\n\n#include <__config>\n#include <__tuple>\n#include <cstddef>\n#include <type_traits>\n#include <__functional_base>\n#include <utility>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n\n// __tuple_leaf\n\ntemplate <size_t _Ip, class _Hp,\n          bool=is_empty<_Hp>::value && !__libcpp_is_final<_Hp>::value\n         >\nclass __tuple_leaf;\n\ntemplate <size_t _Ip, class _Hp, bool _Ep>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid swap(__tuple_leaf<_Ip, _Hp, _Ep>& __x, __tuple_leaf<_Ip, _Hp, _Ep>& __y)\n    _NOEXCEPT_(__is_nothrow_swappable<_Hp>::value)\n{\n    swap(__x.get(), __y.get());\n}\n\ntemplate <size_t _Ip, class _Hp, bool>\nclass __tuple_leaf\n{\n    _Hp value;\n\n    template <class _Tp>\n    static constexpr bool __can_bind_reference() {\n        using _RawTp = typename remove_reference<_Tp>::type;\n        using _RawHp = typename remove_reference<_Hp>::type;\n        using _CheckLValueArg = integral_constant<bool,\n            is_lvalue_reference<_Tp>::value\n        ||  is_same<_RawTp, reference_wrapper<_RawHp>>::value\n        ||  is_same<_RawTp, reference_wrapper<typename remove_const<_RawHp>::type>>::value\n        >;\n        return  !is_reference<_Hp>::value\n            || (is_lvalue_reference<_Hp>::value && _CheckLValueArg::value)\n            || (is_rvalue_reference<_Hp>::value && !is_lvalue_reference<_Tp>::value);\n    }\n\n    __tuple_leaf& operator=(const __tuple_leaf&);\npublic:\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR __tuple_leaf()\n             _NOEXCEPT_(is_nothrow_default_constructible<_Hp>::value) : value()\n       {static_assert(!is_reference<_Hp>::value,\n              \"Attempted to default construct a reference element in a tuple\");}\n\n    template <class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_leaf(integral_constant<int, 0>, const _Alloc&)\n            : value()\n        {static_assert(!is_reference<_Hp>::value,\n              \"Attempted to default construct a reference element in a tuple\");}\n\n    template <class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a)\n            : value(allocator_arg_t(), __a)\n        {static_assert(!is_reference<_Hp>::value,\n              \"Attempted to default construct a reference element in a tuple\");}\n\n    template <class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a)\n            : value(__a)\n        {static_assert(!is_reference<_Hp>::value,\n              \"Attempted to default construct a reference element in a tuple\");}\n\n    template <class _Tp,\n              class = typename enable_if<\n                  __lazy_and<\n                      __lazy_not<is_same<typename decay<_Tp>::type, __tuple_leaf>>\n                    , is_constructible<_Hp, _Tp>\n                    >::value\n                >::type\n            >\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n        explicit __tuple_leaf(_Tp&& __t) _NOEXCEPT_((is_nothrow_constructible<_Hp, _Tp>::value))\n            : value(_VSTD::forward<_Tp>(__t))\n        {static_assert(__can_bind_reference<_Tp>(),\n       \"Attempted to construct a reference element in a tuple with an rvalue\");}\n\n    template <class _Tp, class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        explicit __tuple_leaf(integral_constant<int, 0>, const _Alloc&, _Tp&& __t)\n            : value(_VSTD::forward<_Tp>(__t))\n        {static_assert(__can_bind_reference<_Tp>(),\n       \"Attempted to construct a reference element in a tuple with an rvalue\");}\n\n    template <class _Tp, class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        explicit __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a, _Tp&& __t)\n            : value(allocator_arg_t(), __a, _VSTD::forward<_Tp>(__t))\n        {static_assert(!is_reference<_Hp>::value,\n            \"Attempted to uses-allocator construct a reference element in a tuple\");}\n\n    template <class _Tp, class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        explicit __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a, _Tp&& __t)\n            : value(_VSTD::forward<_Tp>(__t), __a)\n        {static_assert(!is_reference<_Hp>::value,\n           \"Attempted to uses-allocator construct a reference element in a tuple\");}\n\n    __tuple_leaf(const __tuple_leaf& __t) = default;\n    __tuple_leaf(__tuple_leaf&& __t) = default;\n\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_leaf&\n        operator=(_Tp&& __t) _NOEXCEPT_((is_nothrow_assignable<_Hp&, _Tp>::value))\n        {\n            value = _VSTD::forward<_Tp>(__t);\n            return *this;\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    int swap(__tuple_leaf& __t) _NOEXCEPT_(__is_nothrow_swappable<__tuple_leaf>::value)\n    {\n        _VSTD::swap(*this, __t);\n        return 0;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11       _Hp& get()       _NOEXCEPT {return value;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const _Hp& get() const _NOEXCEPT {return value;}\n};\n\ntemplate <size_t _Ip, class _Hp>\nclass __tuple_leaf<_Ip, _Hp, true>\n    : private _Hp\n{\n\n    __tuple_leaf& operator=(const __tuple_leaf&);\npublic:\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR __tuple_leaf()\n             _NOEXCEPT_(is_nothrow_default_constructible<_Hp>::value) {}\n\n    template <class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_leaf(integral_constant<int, 0>, const _Alloc&) {}\n\n    template <class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a)\n            : _Hp(allocator_arg_t(), __a) {}\n\n    template <class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a)\n            : _Hp(__a) {}\n\n    template <class _Tp,\n              class = typename enable_if<\n                  __lazy_and<\n                        __lazy_not<is_same<typename decay<_Tp>::type, __tuple_leaf>>\n                      , is_constructible<_Hp, _Tp>\n                    >::value\n                >::type\n            >\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n        explicit __tuple_leaf(_Tp&& __t) _NOEXCEPT_((is_nothrow_constructible<_Hp, _Tp>::value))\n            : _Hp(_VSTD::forward<_Tp>(__t)) {}\n\n    template <class _Tp, class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        explicit __tuple_leaf(integral_constant<int, 0>, const _Alloc&, _Tp&& __t)\n            : _Hp(_VSTD::forward<_Tp>(__t)) {}\n\n    template <class _Tp, class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        explicit __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a, _Tp&& __t)\n            : _Hp(allocator_arg_t(), __a, _VSTD::forward<_Tp>(__t)) {}\n\n    template <class _Tp, class _Alloc>\n        _LIBCPP_INLINE_VISIBILITY\n        explicit __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a, _Tp&& __t)\n            : _Hp(_VSTD::forward<_Tp>(__t), __a) {}\n\n    __tuple_leaf(__tuple_leaf const &) = default;\n    __tuple_leaf(__tuple_leaf &&) = default;\n\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_leaf&\n        operator=(_Tp&& __t) _NOEXCEPT_((is_nothrow_assignable<_Hp&, _Tp>::value))\n        {\n            _Hp::operator=(_VSTD::forward<_Tp>(__t));\n            return *this;\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    int\n    swap(__tuple_leaf& __t) _NOEXCEPT_(__is_nothrow_swappable<__tuple_leaf>::value)\n    {\n        _VSTD::swap(*this, __t);\n        return 0;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11       _Hp& get()       _NOEXCEPT {return static_cast<_Hp&>(*this);}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const _Hp& get() const _NOEXCEPT {return static_cast<const _Hp&>(*this);}\n};\n\ntemplate <class ..._Tp>\n_LIBCPP_INLINE_VISIBILITY\nvoid __swallow(_Tp&&...) _NOEXCEPT {}\n\ntemplate <class ..._Tp>\nstruct __lazy_all : __all<_Tp::value...> {};\n\ntemplate <class _Tp>\nstruct __all_default_constructible;\n\ntemplate <class ..._Tp>\nstruct __all_default_constructible<__tuple_types<_Tp...>>\n    : __all<is_default_constructible<_Tp>::value...>\n{ };\n\n// __tuple_impl\n\ntemplate<class _Indx, class ..._Tp> struct __tuple_impl;\n\ntemplate<size_t ..._Indx, class ..._Tp>\nstruct __tuple_impl<__tuple_indices<_Indx...>, _Tp...>\n    : public __tuple_leaf<_Indx, _Tp>...\n{\n    _LIBCPP_INLINE_VISIBILITY\n    _LIBCPP_CONSTEXPR __tuple_impl()\n        _NOEXCEPT_(__all<is_nothrow_default_constructible<_Tp>::value...>::value) {}\n\n    template <size_t ..._Uf, class ..._Tf,\n              size_t ..._Ul, class ..._Tl, class ..._Up>\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n        explicit\n        __tuple_impl(__tuple_indices<_Uf...>, __tuple_types<_Tf...>,\n                     __tuple_indices<_Ul...>, __tuple_types<_Tl...>,\n                     _Up&&... __u)\n                     _NOEXCEPT_((__all<is_nothrow_constructible<_Tf, _Up>::value...>::value &&\n                                 __all<is_nothrow_default_constructible<_Tl>::value...>::value)) :\n            __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))...,\n            __tuple_leaf<_Ul, _Tl>()...\n            {}\n\n    template <class _Alloc, size_t ..._Uf, class ..._Tf,\n              size_t ..._Ul, class ..._Tl, class ..._Up>\n        _LIBCPP_INLINE_VISIBILITY\n        explicit\n        __tuple_impl(allocator_arg_t, const _Alloc& __a,\n                     __tuple_indices<_Uf...>, __tuple_types<_Tf...>,\n                     __tuple_indices<_Ul...>, __tuple_types<_Tl...>,\n                     _Up&&... __u) :\n            __tuple_leaf<_Uf, _Tf>(__uses_alloc_ctor<_Tf, _Alloc, _Up>(), __a,\n            _VSTD::forward<_Up>(__u))...,\n            __tuple_leaf<_Ul, _Tl>(__uses_alloc_ctor<_Tl, _Alloc>(), __a)...\n            {}\n\n    template <class _Tuple,\n              class = typename enable_if\n                      <\n                         __tuple_constructible<_Tuple, tuple<_Tp...> >::value\n                      >::type\n             >\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n        __tuple_impl(_Tuple&& __t) _NOEXCEPT_((__all<is_nothrow_constructible<_Tp, typename tuple_element<_Indx,\n                                       typename __make_tuple_types<_Tuple>::type>::type>::value...>::value))\n            : __tuple_leaf<_Indx, _Tp>(_VSTD::forward<typename tuple_element<_Indx,\n                                       typename __make_tuple_types<_Tuple>::type>::type>(_VSTD::get<_Indx>(__t)))...\n            {}\n\n    template <class _Alloc, class _Tuple,\n              class = typename enable_if\n                      <\n                         __tuple_constructible<_Tuple, tuple<_Tp...> >::value\n                      >::type\n             >\n        _LIBCPP_INLINE_VISIBILITY\n        __tuple_impl(allocator_arg_t, const _Alloc& __a, _Tuple&& __t)\n            : __tuple_leaf<_Indx, _Tp>(__uses_alloc_ctor<_Tp, _Alloc, typename tuple_element<_Indx,\n                                       typename __make_tuple_types<_Tuple>::type>::type>(), __a,\n                                       _VSTD::forward<typename tuple_element<_Indx,\n                                       typename __make_tuple_types<_Tuple>::type>::type>(_VSTD::get<_Indx>(__t)))...\n            {}\n\n    template <class _Tuple>\n        _LIBCPP_INLINE_VISIBILITY\n        typename enable_if\n        <\n            __tuple_assignable<_Tuple, tuple<_Tp...> >::value,\n            __tuple_impl&\n        >::type\n        operator=(_Tuple&& __t) _NOEXCEPT_((__all<is_nothrow_assignable<_Tp&, typename tuple_element<_Indx,\n                                       typename __make_tuple_types<_Tuple>::type>::type>::value...>::value))\n        {\n            __swallow(__tuple_leaf<_Indx, _Tp>::operator=(_VSTD::forward<typename tuple_element<_Indx,\n                                       typename __make_tuple_types<_Tuple>::type>::type>(_VSTD::get<_Indx>(__t)))...);\n            return *this;\n        }\n\n    __tuple_impl(const __tuple_impl&) = default;\n    __tuple_impl(__tuple_impl&&) = default;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tuple_impl&\n    operator=(const __tuple_impl& __t) _NOEXCEPT_((__all<is_nothrow_copy_assignable<_Tp>::value...>::value))\n    {\n        __swallow(__tuple_leaf<_Indx, _Tp>::operator=(static_cast<const __tuple_leaf<_Indx, _Tp>&>(__t).get())...);\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tuple_impl&\n    operator=(__tuple_impl&& __t) _NOEXCEPT_((__all<is_nothrow_move_assignable<_Tp>::value...>::value))\n    {\n        __swallow(__tuple_leaf<_Indx, _Tp>::operator=(_VSTD::forward<_Tp>(static_cast<__tuple_leaf<_Indx, _Tp>&>(__t).get()))...);\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(__tuple_impl& __t)\n        _NOEXCEPT_(__all<__is_nothrow_swappable<_Tp>::value...>::value)\n    {\n        __swallow(__tuple_leaf<_Indx, _Tp>::swap(static_cast<__tuple_leaf<_Indx, _Tp>&>(__t))...);\n    }\n};\n\n\n\ntemplate <class ..._Tp>\nclass _LIBCPP_TEMPLATE_VIS tuple\n{\n    typedef __tuple_impl<typename __make_tuple_indices<sizeof...(_Tp)>::type, _Tp...> base;\n\n    base base_;\n\n#if defined(_LIBCPP_ENABLE_TUPLE_IMPLICIT_REDUCED_ARITY_EXTENSION)\n    static constexpr bool _EnableImplicitReducedArityExtension = true;\n#else\n    static constexpr bool _EnableImplicitReducedArityExtension = false;\n#endif\n\n    template <class ..._Args>\n    struct _PackExpandsToThisTuple : false_type {};\n\n    template <class _Arg>\n    struct _PackExpandsToThisTuple<_Arg>\n        : is_same<typename __uncvref<_Arg>::type, tuple> {};\n\n    template <bool _MaybeEnable, class _Dummy = void>\n    struct _CheckArgsConstructor : __check_tuple_constructor_fail {};\n\n    template <class _Dummy>\n    struct _CheckArgsConstructor<true, _Dummy>\n    {\n        template <class ..._Args>\n        static constexpr bool __enable_default() {\n            return __all<is_default_constructible<_Args>::value...>::value;\n        }\n\n        template <class ..._Args>\n        static constexpr bool __enable_explicit() {\n            return\n                __tuple_constructible<\n                    tuple<_Args...>,\n                    typename __make_tuple_types<tuple,\n                             sizeof...(_Args) < sizeof...(_Tp) ?\n                                 sizeof...(_Args) :\n                                 sizeof...(_Tp)>::type\n                >::value &&\n                !__tuple_convertible<\n                    tuple<_Args...>,\n                    typename __make_tuple_types<tuple,\n                             sizeof...(_Args) < sizeof...(_Tp) ?\n                                 sizeof...(_Args) :\n                                 sizeof...(_Tp)>::type\n                >::value &&\n                __all_default_constructible<\n                    typename __make_tuple_types<tuple, sizeof...(_Tp),\n                             sizeof...(_Args) < sizeof...(_Tp) ?\n                                 sizeof...(_Args) :\n                                 sizeof...(_Tp)>::type\n                >::value;\n        }\n\n        template <class ..._Args>\n        static constexpr bool __enable_implicit() {\n            return\n                __tuple_convertible<\n                    tuple<_Args...>,\n                    typename __make_tuple_types<tuple,\n                             sizeof...(_Args) < sizeof...(_Tp) ?\n                                 sizeof...(_Args) :\n                                 sizeof...(_Tp)>::type\n                >::value &&\n                __all_default_constructible<\n                    typename __make_tuple_types<tuple, sizeof...(_Tp),\n                             sizeof...(_Args) < sizeof...(_Tp) ?\n                                 sizeof...(_Args) :\n                                 sizeof...(_Tp)>::type\n                >::value;\n        }\n    };\n\n    template <bool _MaybeEnable,\n              bool = sizeof...(_Tp) == 1,\n              class _Dummy = void>\n    struct _CheckTupleLikeConstructor : __check_tuple_constructor_fail {};\n\n    template <class _Dummy>\n    struct _CheckTupleLikeConstructor<true, false, _Dummy>\n    {\n        template <class _Tuple>\n        static constexpr bool __enable_implicit() {\n            return __tuple_convertible<_Tuple, tuple>::value;\n        }\n\n        template <class _Tuple>\n        static constexpr bool __enable_explicit() {\n            return __tuple_constructible<_Tuple, tuple>::value\n               && !__tuple_convertible<_Tuple, tuple>::value;\n        }\n    };\n\n    template <class _Dummy>\n    struct _CheckTupleLikeConstructor<true, true, _Dummy>\n    {\n        // This trait is used to disable the tuple-like constructor when\n        // the UTypes... constructor should be selected instead.\n        // See LWG issue #2549.\n        template <class _Tuple>\n        using _PreferTupleLikeConstructor = __lazy_or<\n            // Don't attempt the two checks below if the tuple we are given\n            // has the same type as this tuple.\n            is_same<typename __uncvref<_Tuple>::type, tuple>,\n            __lazy_and<\n                __lazy_not<is_constructible<_Tp..., _Tuple>>,\n                __lazy_not<is_convertible<_Tuple, _Tp...>>\n            >\n        >;\n\n        template <class _Tuple>\n        static constexpr bool __enable_implicit() {\n            return __lazy_and<\n                __tuple_convertible<_Tuple, tuple>,\n                _PreferTupleLikeConstructor<_Tuple>\n            >::value;\n        }\n\n        template <class _Tuple>\n        static constexpr bool __enable_explicit() {\n            return __lazy_and<\n                __tuple_constructible<_Tuple, tuple>,\n                _PreferTupleLikeConstructor<_Tuple>,\n                __lazy_not<__tuple_convertible<_Tuple, tuple>>\n            >::value;\n        }\n    };\n\n    template <size_t _Jp, class ..._Up> friend _LIBCPP_CONSTEXPR_AFTER_CXX11\n        typename tuple_element<_Jp, tuple<_Up...> >::type& get(tuple<_Up...>&) _NOEXCEPT;\n    template <size_t _Jp, class ..._Up> friend _LIBCPP_CONSTEXPR_AFTER_CXX11\n        const typename tuple_element<_Jp, tuple<_Up...> >::type& get(const tuple<_Up...>&) _NOEXCEPT;\n    template <size_t _Jp, class ..._Up> friend _LIBCPP_CONSTEXPR_AFTER_CXX11\n        typename tuple_element<_Jp, tuple<_Up...> >::type&& get(tuple<_Up...>&&) _NOEXCEPT;\n    template <size_t _Jp, class ..._Up> friend _LIBCPP_CONSTEXPR_AFTER_CXX11\n        const typename tuple_element<_Jp, tuple<_Up...> >::type&& get(const tuple<_Up...>&&) _NOEXCEPT;\npublic:\n\n    template <bool _Dummy = true, class = typename enable_if<\n        _CheckArgsConstructor<_Dummy>::template __enable_default<_Tp...>()\n    >::type>\n    _LIBCPP_INLINE_VISIBILITY\n    _LIBCPP_CONSTEXPR tuple()\n        _NOEXCEPT_(__all<is_nothrow_default_constructible<_Tp>::value...>::value) {}\n\n    tuple(tuple const&) = default;\n    tuple(tuple&&) = default;\n\n    template <class _AllocArgT, class _Alloc, bool _Dummy = true, class = typename enable_if<\n        __lazy_and<\n            is_same<allocator_arg_t, _AllocArgT>,\n            __lazy_all<__dependent_type<is_default_constructible<_Tp>, _Dummy>...>\n       >::value\n    >::type>\n    _LIBCPP_INLINE_VISIBILITY\n    tuple(_AllocArgT, _Alloc const& __a)\n      : base_(allocator_arg_t(), __a,\n                    __tuple_indices<>(), __tuple_types<>(),\n                    typename __make_tuple_indices<sizeof...(_Tp), 0>::type(),\n                    __tuple_types<_Tp...>()) {}\n\n    template <bool _Dummy = true,\n              typename enable_if\n                      <\n                         _CheckArgsConstructor<\n                            _Dummy\n                         >::template __enable_implicit<_Tp const&...>(),\n                         bool\n                      >::type = false\n        >\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    tuple(const _Tp& ... __t) _NOEXCEPT_((__all<is_nothrow_copy_constructible<_Tp>::value...>::value))\n        : base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(),\n                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),\n                typename __make_tuple_indices<0>::type(),\n                typename __make_tuple_types<tuple, 0>::type(),\n                __t...\n               ) {}\n\n    template <bool _Dummy = true,\n              typename enable_if\n                      <\n                         _CheckArgsConstructor<\n                            _Dummy\n                         >::template __enable_explicit<_Tp const&...>(),\n                         bool\n                      >::type = false\n        >\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    explicit tuple(const _Tp& ... __t) _NOEXCEPT_((__all<is_nothrow_copy_constructible<_Tp>::value...>::value))\n        : base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(),\n                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),\n                typename __make_tuple_indices<0>::type(),\n                typename __make_tuple_types<tuple, 0>::type(),\n                __t...\n               ) {}\n\n    template <class _Alloc, bool _Dummy = true,\n              typename enable_if\n                      <\n                         _CheckArgsConstructor<\n                            _Dummy\n                         >::template __enable_implicit<_Tp const&...>(),\n                         bool\n                      >::type = false\n        >\n      _LIBCPP_INLINE_VISIBILITY\n      tuple(allocator_arg_t, const _Alloc& __a, const _Tp& ... __t)\n        : base_(allocator_arg_t(), __a,\n                typename __make_tuple_indices<sizeof...(_Tp)>::type(),\n                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),\n                typename __make_tuple_indices<0>::type(),\n                typename __make_tuple_types<tuple, 0>::type(),\n                __t...\n               ) {}\n\n    template <class _Alloc, bool _Dummy = true,\n              typename enable_if\n                      <\n                         _CheckArgsConstructor<\n                            _Dummy\n                         >::template __enable_explicit<_Tp const&...>(),\n                         bool\n                      >::type = false\n        >\n      _LIBCPP_INLINE_VISIBILITY\n      explicit\n      tuple(allocator_arg_t, const _Alloc& __a, const _Tp& ... __t)\n        : base_(allocator_arg_t(), __a,\n                typename __make_tuple_indices<sizeof...(_Tp)>::type(),\n                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),\n                typename __make_tuple_indices<0>::type(),\n                typename __make_tuple_types<tuple, 0>::type(),\n                __t...\n               ) {}\n\n    template <class ..._Up,\n              bool _PackIsTuple = _PackExpandsToThisTuple<_Up...>::value,\n              typename enable_if\n                      <\n                         _CheckArgsConstructor<\n                             sizeof...(_Up) == sizeof...(_Tp)\n                             && !_PackIsTuple\n                         >::template __enable_implicit<_Up...>() ||\n                        _CheckArgsConstructor<\n                            _EnableImplicitReducedArityExtension\n                            && sizeof...(_Up) < sizeof...(_Tp)\n                            && !_PackIsTuple\n                         >::template __enable_implicit<_Up...>(),\n                         bool\n                      >::type = false\n             >\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n        tuple(_Up&&... __u)\n            _NOEXCEPT_((\n                is_nothrow_constructible<base,\n                    typename __make_tuple_indices<sizeof...(_Up)>::type,\n                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type,\n                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type,\n                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type,\n                    _Up...\n                >::value\n            ))\n            : base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),\n                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),\n                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),\n                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),\n                    _VSTD::forward<_Up>(__u)...) {}\n\n    template <class ..._Up,\n              typename enable_if\n                      <\n                         _CheckArgsConstructor<\n                             sizeof...(_Up) <= sizeof...(_Tp)\n                             && !_PackExpandsToThisTuple<_Up...>::value\n                         >::template __enable_explicit<_Up...>() ||\n                         _CheckArgsConstructor<\n                            !_EnableImplicitReducedArityExtension\n                            && sizeof...(_Up) < sizeof...(_Tp)\n                            && !_PackExpandsToThisTuple<_Up...>()\n                         >::template __enable_implicit<_Up...>(),\n                         bool\n                      >::type = false\n             >\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n        explicit\n        tuple(_Up&&... __u)\n            _NOEXCEPT_((\n                is_nothrow_constructible<base,\n                    typename __make_tuple_indices<sizeof...(_Up)>::type,\n                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type,\n                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type,\n                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type,\n                    _Up...\n                >::value\n            ))\n            : base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),\n                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),\n                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),\n                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),\n                    _VSTD::forward<_Up>(__u)...) {}\n\n    template <class _Alloc, class ..._Up,\n              typename enable_if\n                      <\n                         _CheckArgsConstructor<\n                             sizeof...(_Up) == sizeof...(_Tp) &&\n                             !_PackExpandsToThisTuple<_Up...>::value\n                         >::template __enable_implicit<_Up...>(),\n                         bool\n                      >::type = false\n             >\n        _LIBCPP_INLINE_VISIBILITY\n        tuple(allocator_arg_t, const _Alloc& __a, _Up&&... __u)\n            : base_(allocator_arg_t(), __a,\n                    typename __make_tuple_indices<sizeof...(_Up)>::type(),\n                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),\n                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),\n                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),\n                    _VSTD::forward<_Up>(__u)...) {}\n\n    template <class _Alloc, class ..._Up,\n              typename enable_if\n                      <\n                         _CheckArgsConstructor<\n                             sizeof...(_Up) == sizeof...(_Tp) &&\n                             !_PackExpandsToThisTuple<_Up...>::value\n                         >::template __enable_explicit<_Up...>(),\n                         bool\n                      >::type = false\n             >\n        _LIBCPP_INLINE_VISIBILITY\n        explicit\n        tuple(allocator_arg_t, const _Alloc& __a, _Up&&... __u)\n            : base_(allocator_arg_t(), __a,\n                    typename __make_tuple_indices<sizeof...(_Up)>::type(),\n                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),\n                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),\n                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),\n                    _VSTD::forward<_Up>(__u)...) {}\n\n    template <class _Tuple,\n              typename enable_if\n                      <\n                         _CheckTupleLikeConstructor<\n                             __tuple_like_with_size<_Tuple, sizeof...(_Tp)>::value\n                             && !_PackExpandsToThisTuple<_Tuple>::value\n                         >::template __enable_implicit<_Tuple>(),\n                         bool\n                      >::type = false\n             >\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n        tuple(_Tuple&& __t) _NOEXCEPT_((is_nothrow_constructible<base, _Tuple>::value))\n            : base_(_VSTD::forward<_Tuple>(__t)) {}\n\n    template <class _Tuple,\n              typename enable_if\n                      <\n                         _CheckTupleLikeConstructor<\n                             __tuple_like_with_size<_Tuple, sizeof...(_Tp)>::value\n                             && !_PackExpandsToThisTuple<_Tuple>::value\n                         >::template __enable_explicit<_Tuple>(),\n                         bool\n                      >::type = false\n             >\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n        explicit\n        tuple(_Tuple&& __t) _NOEXCEPT_((is_nothrow_constructible<base, _Tuple>::value))\n            : base_(_VSTD::forward<_Tuple>(__t)) {}\n\n    template <class _Alloc, class _Tuple,\n              typename enable_if\n                      <\n                         _CheckTupleLikeConstructor<\n                             __tuple_like_with_size<_Tuple, sizeof...(_Tp)>::value\n                         >::template __enable_implicit<_Tuple>(),\n                         bool\n                      >::type = false\n             >\n        _LIBCPP_INLINE_VISIBILITY\n        tuple(allocator_arg_t, const _Alloc& __a, _Tuple&& __t)\n            : base_(allocator_arg_t(), __a, _VSTD::forward<_Tuple>(__t)) {}\n\n    template <class _Alloc, class _Tuple,\n              typename enable_if\n                      <\n                         _CheckTupleLikeConstructor<\n                             __tuple_like_with_size<_Tuple, sizeof...(_Tp)>::value\n                         >::template __enable_explicit<_Tuple>(),\n                         bool\n                      >::type = false\n             >\n        _LIBCPP_INLINE_VISIBILITY\n        explicit\n        tuple(allocator_arg_t, const _Alloc& __a, _Tuple&& __t)\n            : base_(allocator_arg_t(), __a, _VSTD::forward<_Tuple>(__t)) {}\n\n    using _CanCopyAssign = __all<is_copy_assignable<_Tp>::value...>;\n    using _CanMoveAssign = __all<is_move_assignable<_Tp>::value...>;\n\n    _LIBCPP_INLINE_VISIBILITY\n    tuple& operator=(typename conditional<_CanCopyAssign::value, tuple, __nat>::type const& __t)\n        _NOEXCEPT_((__all<is_nothrow_copy_assignable<_Tp>::value...>::value))\n    {\n        base_.operator=(__t.base_);\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    tuple& operator=(typename conditional<_CanMoveAssign::value, tuple, __nat>::type&& __t)\n        _NOEXCEPT_((__all<is_nothrow_move_assignable<_Tp>::value...>::value))\n    {\n        base_.operator=(static_cast<base&&>(__t.base_));\n        return *this;\n    }\n\n    template <class _Tuple,\n              class = typename enable_if\n                      <\n                         __tuple_assignable<_Tuple, tuple>::value\n                      >::type\n             >\n        _LIBCPP_INLINE_VISIBILITY\n        tuple&\n        operator=(_Tuple&& __t) _NOEXCEPT_((is_nothrow_assignable<base&, _Tuple>::value))\n        {\n            base_.operator=(_VSTD::forward<_Tuple>(__t));\n            return *this;\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(tuple& __t) _NOEXCEPT_(__all<__is_nothrow_swappable<_Tp>::value...>::value)\n        {base_.swap(__t.base_);}\n};\n\ntemplate <>\nclass _LIBCPP_TEMPLATE_VIS tuple<>\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    _LIBCPP_CONSTEXPR tuple() _NOEXCEPT {}\n    template <class _Alloc>\n    _LIBCPP_INLINE_VISIBILITY\n        tuple(allocator_arg_t, const _Alloc&) _NOEXCEPT {}\n    template <class _Alloc>\n    _LIBCPP_INLINE_VISIBILITY\n        tuple(allocator_arg_t, const _Alloc&, const tuple&) _NOEXCEPT {}\n    template <class _Up>\n    _LIBCPP_INLINE_VISIBILITY\n        tuple(array<_Up, 0>) _NOEXCEPT {}\n    template <class _Alloc, class _Up>\n    _LIBCPP_INLINE_VISIBILITY\n        tuple(allocator_arg_t, const _Alloc&, array<_Up, 0>) _NOEXCEPT {}\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(tuple&) _NOEXCEPT {}\n};\n\ntemplate <class ..._Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    __all<__is_swappable<_Tp>::value...>::value,\n    void\n>::type\nswap(tuple<_Tp...>& __t, tuple<_Tp...>& __u)\n                 _NOEXCEPT_(__all<__is_nothrow_swappable<_Tp>::value...>::value)\n    {__t.swap(__u);}\n\n// get\n\ntemplate <size_t _Ip, class ..._Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntypename tuple_element<_Ip, tuple<_Tp...> >::type&\nget(tuple<_Tp...>& __t) _NOEXCEPT\n{\n    typedef typename tuple_element<_Ip, tuple<_Tp...> >::type type;\n    return static_cast<__tuple_leaf<_Ip, type>&>(__t.base_).get();\n}\n\ntemplate <size_t _Ip, class ..._Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nconst typename tuple_element<_Ip, tuple<_Tp...> >::type&\nget(const tuple<_Tp...>& __t) _NOEXCEPT\n{\n    typedef typename tuple_element<_Ip, tuple<_Tp...> >::type type;\n    return static_cast<const __tuple_leaf<_Ip, type>&>(__t.base_).get();\n}\n\ntemplate <size_t _Ip, class ..._Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntypename tuple_element<_Ip, tuple<_Tp...> >::type&&\nget(tuple<_Tp...>&& __t) _NOEXCEPT\n{\n    typedef typename tuple_element<_Ip, tuple<_Tp...> >::type type;\n    return static_cast<type&&>(\n             static_cast<__tuple_leaf<_Ip, type>&&>(__t.base_).get());\n}\n\ntemplate <size_t _Ip, class ..._Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nconst typename tuple_element<_Ip, tuple<_Tp...> >::type&&\nget(const tuple<_Tp...>&& __t) _NOEXCEPT\n{\n    typedef typename tuple_element<_Ip, tuple<_Tp...> >::type type;\n    return static_cast<const type&&>(\n             static_cast<const __tuple_leaf<_Ip, type>&&>(__t.base_).get());\n}\n\n#if _LIBCPP_STD_VER > 11\n\nnamespace __find_detail {\n\nstatic constexpr size_t __not_found = -1;\nstatic constexpr size_t __ambiguous = __not_found - 1;\n\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr size_t __find_idx_return(size_t __curr_i, size_t __res, bool __matches) {\n    return !__matches ? __res :\n        (__res == __not_found ? __curr_i : __ambiguous);\n}\n\ntemplate <size_t _Nx>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr size_t __find_idx(size_t __i, const bool (&__matches)[_Nx]) {\n  return __i == _Nx ? __not_found :\n      __find_idx_return(__i, __find_idx(__i + 1, __matches), __matches[__i]);\n}\n\ntemplate <class _T1, class ..._Args>\nstruct __find_exactly_one_checked {\n  static constexpr bool __matches[] = {is_same<_T1, _Args>::value...};\n    static constexpr size_t value = __find_detail::__find_idx(0, __matches);\n    static_assert (value != __not_found, \"type not found in type list\" );\n    static_assert(value != __ambiguous,\"type occurs more than once in type list\");\n};\n\ntemplate <class _T1>\nstruct __find_exactly_one_checked<_T1> {\n    static_assert(!is_same<_T1, _T1>::value, \"type not in empty type list\");\n};\n\n} // namespace __find_detail;\n\ntemplate <typename _T1, typename... _Args>\nstruct __find_exactly_one_t\n    : public __find_detail::__find_exactly_one_checked<_T1, _Args...> {\n};\n\ntemplate <class _T1, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1& get(tuple<_Args...>& __tup) noexcept\n{\n    return _VSTD::get<__find_exactly_one_t<_T1, _Args...>::value>(__tup);\n}\n\ntemplate <class _T1, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 const& get(tuple<_Args...> const& __tup) noexcept\n{\n    return _VSTD::get<__find_exactly_one_t<_T1, _Args...>::value>(__tup);\n}\n\ntemplate <class _T1, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1&& get(tuple<_Args...>&& __tup) noexcept\n{\n    return _VSTD::get<__find_exactly_one_t<_T1, _Args...>::value>(_VSTD::move(__tup));\n}\n\ntemplate <class _T1, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 const&& get(tuple<_Args...> const&& __tup) noexcept\n{\n    return _VSTD::get<__find_exactly_one_t<_T1, _Args...>::value>(_VSTD::move(__tup));\n}\n\n#endif\n\n// tie\n\ntemplate <class ..._Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntuple<_Tp&...>\ntie(_Tp&... __t) _NOEXCEPT\n{\n    return tuple<_Tp&...>(__t...);\n}\n\ntemplate <class _Up>\nstruct __ignore_t\n{\n    template <class _Tp>\n        _LIBCPP_INLINE_VISIBILITY\n        const __ignore_t& operator=(_Tp&&) const {return *this;}\n};\n\nnamespace { const __ignore_t<unsigned char> ignore = __ignore_t<unsigned char>(); }\n\ntemplate <class _Tp>\nstruct __make_tuple_return_impl\n{\n    typedef _Tp type;\n};\n\ntemplate <class _Tp>\nstruct __make_tuple_return_impl<reference_wrapper<_Tp> >\n{\n    typedef _Tp& type;\n};\n\ntemplate <class _Tp>\nstruct __make_tuple_return\n{\n    typedef typename __make_tuple_return_impl<typename decay<_Tp>::type>::type type;\n};\n\ntemplate <class... _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntuple<typename __make_tuple_return<_Tp>::type...>\nmake_tuple(_Tp&&... __t)\n{\n    return tuple<typename __make_tuple_return<_Tp>::type...>(_VSTD::forward<_Tp>(__t)...);\n}\n\ntemplate <class... _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntuple<_Tp&&...>\nforward_as_tuple(_Tp&&... __t) _NOEXCEPT\n{\n    return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...);\n}\n\ntemplate <size_t _Ip>\nstruct __tuple_equal\n{\n    template <class _Tp, class _Up>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _Tp& __x, const _Up& __y)\n    {\n        return __tuple_equal<_Ip - 1>()(__x, __y) && _VSTD::get<_Ip-1>(__x) == _VSTD::get<_Ip-1>(__y);\n    }\n};\n\ntemplate <>\nstruct __tuple_equal<0>\n{\n    template <class _Tp, class _Up>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _Tp&, const _Up&)\n    {\n        return true;\n    }\n};\n\ntemplate <class ..._Tp, class ..._Up>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator==(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)\n{\n    return __tuple_equal<sizeof...(_Tp)>()(__x, __y);\n}\n\ntemplate <class ..._Tp, class ..._Up>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator!=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)\n{\n    return !(__x == __y);\n}\n\ntemplate <size_t _Ip>\nstruct __tuple_less\n{\n    template <class _Tp, class _Up>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _Tp& __x, const _Up& __y)\n    {\n        const size_t __idx = tuple_size<_Tp>::value - _Ip;\n        if (_VSTD::get<__idx>(__x) < _VSTD::get<__idx>(__y))\n            return true;\n        if (_VSTD::get<__idx>(__y) < _VSTD::get<__idx>(__x))\n            return false;\n        return __tuple_less<_Ip-1>()(__x, __y);\n    }\n};\n\ntemplate <>\nstruct __tuple_less<0>\n{\n    template <class _Tp, class _Up>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _Tp&, const _Up&)\n    {\n        return false;\n    }\n};\n\ntemplate <class ..._Tp, class ..._Up>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator<(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)\n{\n    return __tuple_less<sizeof...(_Tp)>()(__x, __y);\n}\n\ntemplate <class ..._Tp, class ..._Up>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator>(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)\n{\n    return __y < __x;\n}\n\ntemplate <class ..._Tp, class ..._Up>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator>=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)\n{\n    return !(__x < __y);\n}\n\ntemplate <class ..._Tp, class ..._Up>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator<=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)\n{\n    return !(__y < __x);\n}\n\n// tuple_cat\n\ntemplate <class _Tp, class _Up> struct __tuple_cat_type;\n\ntemplate <class ..._Ttypes, class ..._Utypes>\nstruct __tuple_cat_type<tuple<_Ttypes...>, __tuple_types<_Utypes...> >\n{\n    typedef tuple<_Ttypes..., _Utypes...> type;\n};\n\ntemplate <class _ResultTuple, bool _Is_Tuple0TupleLike, class ..._Tuples>\nstruct __tuple_cat_return_1\n{\n};\n\ntemplate <class ..._Types, class _Tuple0>\nstruct __tuple_cat_return_1<tuple<_Types...>, true, _Tuple0>\n{\n    typedef typename __tuple_cat_type<tuple<_Types...>,\n            typename __make_tuple_types<typename remove_reference<_Tuple0>::type>::type>::type\n                                                                           type;\n};\n\ntemplate <class ..._Types, class _Tuple0, class _Tuple1, class ..._Tuples>\nstruct __tuple_cat_return_1<tuple<_Types...>, true, _Tuple0, _Tuple1, _Tuples...>\n    : public __tuple_cat_return_1<\n                 typename __tuple_cat_type<\n                     tuple<_Types...>,\n                     typename __make_tuple_types<typename remove_reference<_Tuple0>::type>::type\n                 >::type,\n                 __tuple_like<typename remove_reference<_Tuple1>::type>::value,\n                 _Tuple1, _Tuples...>\n{\n};\n\ntemplate <class ..._Tuples> struct __tuple_cat_return;\n\ntemplate <class _Tuple0, class ..._Tuples>\nstruct __tuple_cat_return<_Tuple0, _Tuples...>\n    : public __tuple_cat_return_1<tuple<>,\n         __tuple_like<typename remove_reference<_Tuple0>::type>::value, _Tuple0,\n                                                                     _Tuples...>\n{\n};\n\ntemplate <>\nstruct __tuple_cat_return<>\n{\n    typedef tuple<> type;\n};\n\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntuple<>\ntuple_cat()\n{\n    return tuple<>();\n}\n\ntemplate <class _Rp, class _Indices, class _Tuple0, class ..._Tuples>\nstruct __tuple_cat_return_ref_imp;\n\ntemplate <class ..._Types, size_t ..._I0, class _Tuple0>\nstruct __tuple_cat_return_ref_imp<tuple<_Types...>, __tuple_indices<_I0...>, _Tuple0>\n{\n    typedef typename remove_reference<_Tuple0>::type _T0;\n    typedef tuple<_Types..., typename __apply_cv<_Tuple0,\n                          typename tuple_element<_I0, _T0>::type>::type&&...> type;\n};\n\ntemplate <class ..._Types, size_t ..._I0, class _Tuple0, class _Tuple1, class ..._Tuples>\nstruct __tuple_cat_return_ref_imp<tuple<_Types...>, __tuple_indices<_I0...>,\n                                  _Tuple0, _Tuple1, _Tuples...>\n    : public __tuple_cat_return_ref_imp<\n         tuple<_Types..., typename __apply_cv<_Tuple0,\n               typename tuple_element<_I0,\n                  typename remove_reference<_Tuple0>::type>::type>::type&&...>,\n         typename __make_tuple_indices<tuple_size<typename\n                                 remove_reference<_Tuple1>::type>::value>::type,\n         _Tuple1, _Tuples...>\n{\n};\n\ntemplate <class _Tuple0, class ..._Tuples>\nstruct __tuple_cat_return_ref\n    : public __tuple_cat_return_ref_imp<tuple<>,\n               typename __make_tuple_indices<\n                        tuple_size<typename remove_reference<_Tuple0>::type>::value\n               >::type, _Tuple0, _Tuples...>\n{\n};\n\ntemplate <class _Types, class _I0, class _J0>\nstruct __tuple_cat;\n\ntemplate <class ..._Types, size_t ..._I0, size_t ..._J0>\nstruct __tuple_cat<tuple<_Types...>, __tuple_indices<_I0...>, __tuple_indices<_J0...> >\n{\n    template <class _Tuple0>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    typename __tuple_cat_return_ref<tuple<_Types...>&&, _Tuple0&&>::type\n    operator()(tuple<_Types...> __t, _Tuple0&& __t0)\n    {\n        return forward_as_tuple(_VSTD::forward<_Types>(_VSTD::get<_I0>(__t))...,\n                                      _VSTD::get<_J0>(_VSTD::forward<_Tuple0>(__t0))...);\n    }\n\n    template <class _Tuple0, class _Tuple1, class ..._Tuples>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    typename __tuple_cat_return_ref<tuple<_Types...>&&, _Tuple0&&, _Tuple1&&, _Tuples&&...>::type\n    operator()(tuple<_Types...> __t, _Tuple0&& __t0, _Tuple1&& __t1, _Tuples&& ...__tpls)\n    {\n        typedef typename remove_reference<_Tuple0>::type _T0;\n        typedef typename remove_reference<_Tuple1>::type _T1;\n        return __tuple_cat<\n           tuple<_Types..., typename __apply_cv<_Tuple0, typename tuple_element<_J0, _T0>::type>::type&&...>,\n           typename __make_tuple_indices<sizeof ...(_Types) + tuple_size<_T0>::value>::type,\n           typename __make_tuple_indices<tuple_size<_T1>::value>::type>()\n                           (forward_as_tuple(\n                              _VSTD::forward<_Types>(_VSTD::get<_I0>(__t))...,\n                              _VSTD::get<_J0>(_VSTD::forward<_Tuple0>(__t0))...\n                            ),\n                            _VSTD::forward<_Tuple1>(__t1),\n                            _VSTD::forward<_Tuples>(__tpls)...);\n    }\n};\n\ntemplate <class _Tuple0, class... _Tuples>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntypename __tuple_cat_return<_Tuple0, _Tuples...>::type\ntuple_cat(_Tuple0&& __t0, _Tuples&&... __tpls)\n{\n    typedef typename remove_reference<_Tuple0>::type _T0;\n    return __tuple_cat<tuple<>, __tuple_indices<>,\n                  typename __make_tuple_indices<tuple_size<_T0>::value>::type>()\n                  (tuple<>(), _VSTD::forward<_Tuple0>(__t0),\n                                            _VSTD::forward<_Tuples>(__tpls)...);\n}\n\ntemplate <class ..._Tp, class _Alloc>\nstruct _LIBCPP_TEMPLATE_VIS uses_allocator<tuple<_Tp...>, _Alloc>\n    : true_type {};\n\n#endif // _LIBCPP_HAS_NO_VARIADICS\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _T1, class _T2>\ntemplate <class... _Args1, class... _Args2, size_t ..._I1, size_t ..._I2>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_T1, _T2>::pair(piecewise_construct_t,\n                     tuple<_Args1...>& __first_args, tuple<_Args2...>& __second_args,\n                     __tuple_indices<_I1...>, __tuple_indices<_I2...>)\n    :  first(_VSTD::forward<_Args1>(_VSTD::get<_I1>( __first_args))...),\n      second(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)\n{\n}\n#endif // _LIBCPP_CXX03_LANG\n\n#if _LIBCPP_STD_VER > 14\ntemplate <class _Tp>\nconstexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n\n#define _LIBCPP_NOEXCEPT_RETURN(...) noexcept(noexcept(__VA_ARGS__)) { return __VA_ARGS__; }\n\ntemplate <class _Fn, class _Tuple, size_t ..._Id>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr decltype(auto) __apply_tuple_impl(_Fn && __f, _Tuple && __t,\n                                            __tuple_indices<_Id...>)\n_LIBCPP_NOEXCEPT_RETURN(\n    _VSTD::__invoke_constexpr(\n        _VSTD::forward<_Fn>(__f),\n        _VSTD::get<_Id>(_VSTD::forward<_Tuple>(__t))...)\n)\n\ntemplate <class _Fn, class _Tuple>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr decltype(auto) apply(_Fn && __f, _Tuple && __t)\n_LIBCPP_NOEXCEPT_RETURN(\n    _VSTD::__apply_tuple_impl(\n        _VSTD::forward<_Fn>(__f), _VSTD::forward<_Tuple>(__t),\n        typename __make_tuple_indices<tuple_size_v<decay_t<_Tuple>>>::type{})\n)\n\ntemplate <class _Tp, class _Tuple, size_t... _Idx>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _Tp __make_from_tuple_impl(_Tuple&& __t, __tuple_indices<_Idx...>)\n_LIBCPP_NOEXCEPT_RETURN(\n    _Tp(_VSTD::get<_Idx>(_VSTD::forward<_Tuple>(__t))...)\n)\n\ntemplate <class _Tp, class _Tuple>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _Tp make_from_tuple(_Tuple&& __t)\n_LIBCPP_NOEXCEPT_RETURN(\n    _VSTD::__make_from_tuple_impl<_Tp>(_VSTD::forward<_Tuple>(__t),\n        typename __make_tuple_indices<tuple_size_v<decay_t<_Tuple>>>::type{})\n)\n\n#undef _LIBCPP_NOEXCEPT_RETURN\n\n#endif // _LIBCPP_STD_VER > 14\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_TUPLE\n","//  This file is part of Project Name\n//  Copyright (C) Michigan State University, 2017.\n//  Released under the MIT Software license; see doc/LICENSE\n\n#include \"web/web.h\"\n#include \"../MapElitesScopeGP_World.h\"\n\nnamespace UI = emp::web;\nMapElitesGPConfig config;\n\nUI::Document world_display(\"emp_base\");\nUI::Document program_info(\"program_info\");\nUI::Document program_exec(\"program_exec\");\nUI::Document settings(\"settings\");\n\nUI::Selector problem;\nUI::TextArea genome_size;\nUI::TextArea n_test_cases;\nUI::TextArea inst_mut_rate;\nUI::TextArea arg_mut_rate;\n\nUI::Canvas canvas;\n// UI::Div program_info;\nconst double world_width = 800;\nconst double world_height = 800;\n\nMapElitesScopeGPWorld world;\n\nvoid DrawWorldCanvas() {\n  // UI::Canvas canvas = doc.Canvas(\"world_canvas\");\n  canvas.Clear(\"gray\");\n\n  const size_t world_x = world.GetWidth();\n  const size_t world_y = world.GetHeight();\n  const double canvas_x = (double) canvas.GetWidth();\n  const double canvas_y = (double) canvas.GetHeight();\n  std::cout << \"x: \" << world_x << \" y: \" << world_y << std::endl;\n  const double org_x = canvas_x / (double) world_x;\n  const double org_y = canvas_y / (double) world_y;\n  const double org_r = emp::Min(org_x, org_y) / 2.0;\n\n  for (size_t y = 0; y < world_y; y++) {\n    for (size_t x = 0; x < world_x; x++) {\n      const size_t org_id = y * world_x + x;\n      const size_t cur_x = org_x * (0.5 + (double) x);\n      const size_t cur_y = org_y * (0.5 + (double) y);\n      const double fitness = world.CalcFitnessID(org_id);\n      if (fitness == 0.0) {\n        canvas.Rect(x*org_x, y*org_y, org_x, org_y, \"#444444\", \"black\");\n      } else if (fitness < 10) {\n        canvas.Rect(x*org_x, y*org_y, org_x, org_y, \"pink\", \"black\");\n      } else if (fitness < 100) {\n        canvas.Rect(x*org_x, y*org_y, org_x, org_y, \"#EEEE33\", \"black\");  // Pale Yellow\n      } else if (fitness < 1000) {\n        canvas.Rect(x*org_x, y*org_y, org_x, org_y, \"#88FF88\", \"black\");  // Pale green\n      } else if (fitness < 9000) {\n        canvas.Rect(x*org_x, y*org_y, org_x, org_y, \"#00CC00\", \"black\");  // Mid green\n      } else {\n        canvas.Rect(x*org_x, y*org_y, org_x, org_y, \"green\", \"black\");    // Full green\n      }\n    }\n  }\n\n  // Add a plus sign in the middle.\n  // const double mid_x = org_x * world_x / 2.0;\n  // const double mid_y = org_y * world_y / 2.0;\n  // const double plus_bar = org_r * world_x;\n  // canvas.Line(mid_x, mid_y-plus_bar, mid_x, mid_y+plus_bar, \"#8888FF\");\n  // canvas.Line(mid_x-plus_bar, mid_y, mid_x+plus_bar, mid_y, \"#8888FF\");\n\n  // doc.Text(\"ud_text\").Redraw();\n}\n\nvoid ExecuteProgram(emp::AvidaGP & org) {\n  program_exec.Clear();\n  program_exec.SetAttr(\"class\", \"card-body visible\");\n  program_exec << \"<h3 class='card-title'>Program execution</h3>\";\n  std::stringstream ss;\n  std::stringstream temp_ss;\n  ss << \"</h5> <p class='card-text'>\";\n  org.PrintState(temp_ss);\n  ss << emp::text2html(temp_ss.str());\n  ss << \"</p>\";\n  program_exec << ss.str();\n  program_exec << UI::Button( [&org](){ org.SingleProcess(); ExecuteProgram(org); }, \"Step\", \"step_button\").SetAttr(\"class\", \"btn btn-primary\");\n}\n\nvoid CanvasClick(int x, int y) {\n  program_info.Clear();\n  program_info.SetAttr(\"class\", \"card-body\");\n  \n  // std::cout << \"x: \" << in_x << \" y: \" << in_y  <<std::endl;\n  // double x = canvas.GetAdjustedX(in_x);\n  // double y = canvas.GetAdjustedY(in_y);\n\n  // UI::Canvas canvas = doc.Canvas(\"world_canvas\");\n  const double canvas_x = (double) canvas.GetWidth();\n  const double canvas_y = (double) canvas.GetHeight();\n  double px = ((double) x) / canvas_x;\n  double py = ((double) y) / canvas_y;\n\n  const size_t world_x = world.GetWidth();\n  const size_t world_y = world.GetHeight();\n  size_t pos_x = (size_t) (world_x * px);\n  size_t pos_y = (size_t) (world_y * py);\n  std::cout << \"x: \" << x << \" y: \" << y << \"world_x: \" << world_x << \" world_y: \" << world_y << \" canvas_x: \" << canvas_x <<\" canvas_y: \" << canvas_y  << \" px: \" << px <<  \" py: \" << py <<\" pos_x: \" << pos_x << \" pos_y: \" << pos_y <<std::endl;\n  size_t org_id = pos_y * world_x + pos_x;\n  std::stringstream ss;\n  std::stringstream temp_ss;\n  if (world.CalcFitnessID(org_id) > 0.0) {\n    double entropy = world.inst_ent_fun(world.GetOrg(org_id));\n    int scope_count = world.scope_count_fun(world.GetOrg(org_id));\n    ss << \"<h3 class='card-title'>Program information</h3>\";\n    ss << \"<h5 class='card-subtitle mb-2 '>Fitness: \" << world.CalcFitnessID(org_id)/1000.0 << \" Scopes: \" << scope_count << \" Entropy: \" << entropy << \"</h5> <p class='card-text'>\";\n    world[org_id].PrintGenome(temp_ss);\n    ss << emp::text2html(temp_ss.str());\n\n    // program_info << UI::Text() << ss.str();\n    program_info << ss.str();\n    program_info << UI::Button( [org_id](){ \n      world.GetOrg(org_id).ResetHardware();\n      world.GetOrg(org_id).SetInput(0, 1);\n      ExecuteProgram(world.GetOrg(org_id)); \n    }, \"Execute\", \"exec_button\").SetAttr(\"class\", \"btn btn-primary\");\n    program_info << \"</p>\";\n\n  } else {\n    program_info << \"<p class='card-text'>Click on a grid cell to see the program inside<p>\";\n    std::cout << \"No org here\" << std::endl;\n  }\n\n  // emp::Alert(\"Click at (\", pos_x, \",\", pos_y, \") = \", org_id);\n}\n\n\nint main()\n{\n  world_display << \"<h2>Evolving ScopeGP Programs with MAP-Elites</h2>\";\n  program_info.SetAttr(\"class\", \"card-body\");\n  program_info << \"<p class='card-text'>Click on a grid cell to see the program inside<p>\";\n  world.Setup(config);\n\n  program_exec.SetAttr(\"class\", \"card-body invisible\");\n\n  problem.SetOption(\"Square\", [](){config.TESTCASES_FPATH(\"../configs/testcases/examples-squares.csv\"); world.Setup(config);DrawWorldCanvas();});\n  problem.SetOption(\"Count odds\", [](){config.TESTCASES_FPATH(\"../configs/testcases/count-odds.csv\"); world.Setup(config);DrawWorldCanvas();});\n\n  n_test_cases.SetCallback([](const std::string & curr){config.NUM_TEST_CASES(emp::from_string<int>(curr)); world.Setup(config);DrawWorldCanvas();});\n  // genome_size.SetCallback([](const std::string & curr){config.GENOME_SIZE(emp::from_string<int>(curr)); world.Setup(config);DrawWorldCanvas();});\n  inst_mut_rate.SetCallback([](const std::string & curr){config.INST_SUB__PER_INST(emp::from_string<double>(curr)); world.Setup(config);DrawWorldCanvas();});\n  arg_mut_rate.SetCallback([](const std::string & curr){config.ARG_SUB__PER_ARG(emp::from_string<double>(curr)); world.Setup(config);DrawWorldCanvas();});\n\n  settings << \"Problem: \" << problem << \"<br>\";\n  settings << \"Number of test cases: \" << n_test_cases << \"<br>\";\n  // settings << \"Genome length: \" << genome_size << \"<br>\";\n  settings << \"Instruction mutation rate: \" << inst_mut_rate << \"<br>\";\n  settings << \"Argument mutation rate: \" << arg_mut_rate << \"<br>\";\n\n  // Add some Buttons\n  world_display << UI::Button( [](){ emp::RandomSelect(world, 1); DrawWorldCanvas(); }, \"Reproduce\", \"birth_button\").SetAttr(\"class\", \"btn btn-primary\");\n  world_display << UI::Button( [](){ emp::RandomSelect(world, 100); DrawWorldCanvas(); }, \"Reproduce 100\", \"birth_100_button\").SetAttr(\"class\", \"btn btn-primary ml-1\");\n  world_display << UI::Button( [](){ emp::RandomSelect(world, 1000); DrawWorldCanvas(); }, \"Reproduce 1000\", \"birth_1000_button\").SetAttr(\"class\", \"btn btn-primary ml-1\");\n  world_display << UI::Button( [](){ emp::RandomSelect(world, 10000); DrawWorldCanvas(); }, \"Reproduce 10000\", \"birth_10000_button\").SetAttr(\"class\", \"btn btn-primary ml-1\");\n  world_display << \"<br><br>\";\n  \n  canvas = world_display.AddCanvas(world_width, world_height, \"world_canvas\");\n  // program_info = program_display.AddDiv(\"program_info\");\n  // program_info.SetCSS(\"right\", 0);\n  canvas.On(\"click\", CanvasClick);\n  DrawWorldCanvas();\n}\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2017-2018\n *\n *  @file  World.h\n *  @brief Definition of a base class for a World template for use in evolutionary algorithms.\n *\n *  A definition of the emp::World template, linking in specialized file handling, iterators,\n *  and selection techniques for evolutionary computation applications.\n *\n *\n *  @todo Make sure when mutations occure before placement into the population we can control\n *        whether or not they also affect injected organisms.  (Right now they alwyas do!!)\n *  @todo We should Specialize World so that ANOTHER world can be used as an ORG, with proper\n *        delegation to facilitate demes, pools, islands, etc.\n *  @todo We should be able to have any number of systematics managers, based on various type_trait\n *        information a that we want to track.\n *  @todo Add a signal for DoBirth() for when a birth fails.\n *  @todo Add a signal for population Reset() (and possibly Clear?)\n *  @todo Add a feature to maintain population sorted by each phenotypic trait.  This will allow\n *        us to more rapidly find phenotypic neighbors and know the current extremes for each\n *        phenotype.\n */\n\n#ifndef EMP_EVO_WORLD_H\n#define EMP_EVO_WORLD_H\n\n#include <functional>\n#include <map>\n#include <unordered_map>\n\n#include \"../base/Ptr.h\"\n#include \"../base/vector.h\"\n#include \"../control/Signal.h\"\n#include \"../control/SignalControl.h\"\n#include \"../data/DataFile.h\"\n#include \"../data/DataManager.h\"\n#include \"../data/Trait.h\"\n#include \"../meta/reflection.h\"\n#include \"../tools/map_utils.h\"\n#include \"../tools/Random.h\"\n#include \"../tools/Range.h\"\n#include \"../tools/random_utils.h\"\n#include \"../tools/string_utils.h\"\n\n// World-specific includes.\n#include \"Systematics.h\"     // Track relationships among organisms.\n#include \"World_iterator.h\"  // Allow iteration through organisms in a world.\n#include \"World_reflect.h\"   // Handle needed reflection on incoming organism classes.\n#include \"World_select.h\"    // Include all built-in selection functions for World.\n#include \"World_structure.h\" // Include additional function to setup world structure.\n\nnamespace emp {\n\n  ///  @brief Setup a World with a population of organisms that can evolve or deal with ecological effects.\n  ///\n  ///  There are three ways that organisms can enter the population:\n  ///   * InjectAt(org, pos) - place the organism at the specified position in the population.\n  ///   * Inject(org) - place the organism using a default postion (given other settings).\n  ///   * DoBirth(org, parent_pos) - place the organism using current birth settings.\n  ///\n  ///  If the population is in EA mode (with synchronous generations), DoBirth will place offspring in\n  ///  a \"next generation\" placeholder population.  Update() will move orgs into primary population.\n  ///\n  ///  Organisms have a series of functions that are called on them that are chosen:\n  ///\n  ///  FITNESS: Most selection methods require a fitness function to help determine who should be\n  ///           replicated.  Other systems merely use fitness as a measured output.\n  ///   0. If you explicitly set the fitness function using SetFitFun(), it will have priority.\n  ///   1. If the organism type has a \"GetFitness()\" member function, use it!\n  ///   2. If the organism type can be cast to double, use it!\n  ///   3. Start with a fitness function that throws an assert indicating function must be set.\n  ///\n  ///  MUTATIONS: The mutation function deteramines a main source of variation for most evolving\n  ///             systems.\n  ///   0. If you set the mutation function using SetMutFun(), it will have priority.\n  ///   1. Or DoMutations(random) member function.\n  ///   2. Empty, with assert.\n  ///\n  ///  PRINTING: How should organisms be printed to the command line?\n  ///   0. Setting the print function with SetPrintFun() member function.\n  ///   1. Org Print() member function that takes an ostream & argument\n  ///   2. Proper operator<<\n  ///   3. Do not print, just Assert\n  ///\n  ///  GENOMES: Do organisms have a genome separate from their instantiation?  By default, the full\n  ///           organism is returned when a genome is requested, but a GetGenome() member function\n  ///           in the organism type will override this behavior.\n  ///   1. GetGenome member function\n  ///   2. Return org AS genome.\n\n  template <typename ORG>\n  class World {\n    friend class World_iterator< World<ORG> >;\n  public:\n    // --- Publicly available types ---\n    using this_t = World<ORG>;                 ///< Resolved type of this templated class.\n    using org_t = ORG;                         ///< Type of organisms in this world.\n    using value_type = org_t;                  ///< Identical to org_t; vector compatibility.\n    using pop_t = emp::vector<Ptr<ORG>>;       ///< Type for whole populations.\n    using iterator_t = World_iterator<this_t>; ///< Type for this world's iterators.\n    using fit_cache_t = emp::vector<double>;   ///< Type for fitness caches for pops.\n\n    using genome_t = typename emp::find_genome_t<ORG>;   ///< Type of underlying genomes.\n\n    /// Function type for calculating fitness.\n    using fun_calc_fitness_t    = std::function<double(ORG&)>;\n\n    /// Function type for calculating the distance between two organisms.\n    using fun_calc_dist_t       = std::function<double(ORG&,ORG&)>;\n\n    /// Function type for a mutation operator on an organism.\n    using fun_do_mutations_t    = std::function<size_t(ORG&,Random&)>;\n\n    /// Function type for printing an organism's info to an output stream.\n    using fun_print_org_t       = std::function<void(ORG&,std::ostream &)>;\n\n    /// Function type for retrieving a genome from an organism.\n    using fun_get_genome_t      = std::function<const genome_t & (ORG &)>;\n\n    /// Function type for injecting organisms into a world (returns inject position)\n    using fun_find_inject_pos_t = std::function<WorldPosition(Ptr<ORG>)>;\n\n    /// Function type for adding a newly born organism into a world (returns birth position)\n    using fun_find_birth_pos_t  = std::function<WorldPosition(Ptr<ORG>, WorldPosition)>;\n\n    /// Function type for determining picking and killing an organism (returns newly empty position)\n    using fun_kill_org_t        = std::function<WorldPosition()>;\n\n    /// Function type for identifying an organism's random neighbor.\n    using fun_get_neighbor_t    = std::function<WorldPosition(WorldPosition)>;\n\n  protected:\n    // Internal state member variables\n    size_t update;                  ///< How many times has Update() been called?\n    Ptr<Random> random_ptr;         ///< @brief Random object to use.\n    bool random_owner;              ///< Did we create our own random number generator?\n    WorldVector<Ptr<ORG>> pops;     ///< The set of active [0] and \"next\" [1] organisms in population.\n    pop_t & pop;                    ///< A shortcut to pops[0].\n    size_t num_orgs;                ///< How many organisms are actually in the population.\n    fit_cache_t fit_cache;          ///< vector size == 0 when not caching; uncached values == 0.\n\n    // Configuration settings\n    std::string name;               ///< Name of this world (for use in configuration.)\n    bool cache_on;                  ///< Should we be caching fitness values?\n    std::vector<size_t> pop_sizes;  ///< Sizes of population dimensions (eg, 2 vals for grid)\n    emp::TraitSet<ORG> phenotypes;  ///< What phenotypes are we tracking?\n    emp::vector<emp::Ptr<DataFile>> files;    ///< Output files.\n\n    bool is_synchronous;            ///< Does this world have synchronous generations?\n    bool is_space_structured;       ///< Do we have a spatially structured population?\n    bool is_pheno_structured;       ///< Do we have a phenotypically structured population?\n\n    /// Potential data nodes -- these should be activated only if in use.\n    DataManager<double, data::Current, data::Info, data::Range, data::Stats> data_nodes;\n\n    // Configurable functions.                       Function to...\n    fun_calc_fitness_t     fun_calc_fitness;    ///< ...evaluate fitness for provided organism.\n    fun_do_mutations_t     fun_do_mutations;    ///< ...mutate an organism.\n    fun_print_org_t        fun_print_org;       ///< ...print an organism.\n    fun_get_genome_t       fun_get_genome;      ///< ...determine the genome object of an organism.\n    fun_find_inject_pos_t  fun_find_inject_pos; ///< ...find where to inject a new, external organism.\n    fun_find_birth_pos_t   fun_find_birth_pos;  ///< ...find where to add a new offspring organism.\n    fun_kill_org_t         fun_kill_org;        ///< ...kill an organism.\n    fun_get_neighbor_t     fun_get_neighbor;    ///< ...choose a random neighbor \"near\" specified id.\n\n    /// Attributes are a dynamic way to track extra characteristics about a world.\n    std::map<std::string, std::string> attributes;\n\n    /// Phylogeny and line-of-descent data collection.\n    emp::vector<Ptr<SystematicsBase<ORG> >> systematics;\n    std::unordered_map<std::string, int> systematics_labels;\n\n    // == Signals ==\n    SignalControl control;  // Setup the world to control various signals.\n                                                     //   Trigger signal...\n    Signal<void(size_t)>       before_repro_sig;     ///< ...before organism gives birth w/parent position.\n    Signal<void(ORG &)>        offspring_ready_sig;  ///< ...when offspring organism is built.\n    Signal<void(ORG &)>        inject_ready_sig;     ///< ...when outside organism is ready to inject.\n    Signal<void(ORG &,size_t)> before_placement_sig; ///< ...before placing any organism into target cell.\n    Signal<void(size_t)>       on_placement_sig;     ///< ...after any organism is placed into world.\n    Signal<void(size_t)>       on_update_sig;        ///< ...at the beginning of Update()\n    Signal<void(size_t)>       on_death_sig;         ///< ...immediately before any organism dies.\n    Signal<void(WorldPosition,WorldPosition)> on_swap_sig; ///< ...after org positions are swapped\n    Signal<void()>             world_destruct_sig;   ///< ...in the World destructor.\n\n    /// Build a Setup function in world that calls ::Setup() on whatever is passed in IF it exists.\n    EMP_CREATE_OPTIONAL_METHOD(SetupOrg, Setup);\n\n    /// Get the current cached value for the organism at the specified position.\n    double GetCache(size_t id) const { return (id < fit_cache.size()) ? fit_cache[id] : 0.0; }\n\n    /// Clear the cache value at the specified position.\n    void ClearCache(size_t id) { if (id < fit_cache.size()) fit_cache[id] = 0.0; }\n\n  public:\n    /// The World constructor can take two arguments, both optional:\n    /// * a random number generator (either a pointer or reference)\n    /// * a unique name for the world\n    /// If no name is provided, the world remains nameless.\n    /// If no random number generator is provided, gen_random determines if one shold be created.\n    World(std::string _name=\"\", bool gen_random=true)\n      : update(0), random_ptr(nullptr), random_owner(false), pops(), pop(pops[0]), num_orgs(0)\n      , fit_cache()\n      , name(_name), cache_on(false), pop_sizes(1,0), phenotypes(), files()\n      , is_synchronous(false), is_space_structured(false), is_pheno_structured(false)\n      , fun_calc_fitness(), fun_do_mutations(), fun_print_org(), fun_get_genome()\n      , fun_find_inject_pos(), fun_find_birth_pos(), fun_kill_org(), fun_get_neighbor()\n      , attributes(), control()\n      , before_repro_sig(to_string(name,\"::before-repro\"), control)\n      , offspring_ready_sig(to_string(name,\"::offspring-ready\"), control)\n      , inject_ready_sig(to_string(name,\"::inject-ready\"), control)\n      , before_placement_sig(to_string(name,\"::before-placement\"), control)\n      , on_placement_sig(to_string(name,\"::on-placement\"), control)\n      , on_update_sig(to_string(name,\"::on-update\"), control)\n      , on_death_sig(to_string(name,\"::on-death\"), control)\n      , on_swap_sig(to_string(name,\"::on-swap\"), control)\n      , world_destruct_sig(to_string(name,\"::wolrd-destruct\"), control)\n    {\n      if (gen_random) NewRandom();\n      SetDefaultFitFun<this_t, ORG>(*this);\n      SetDefaultMutFun<this_t, ORG>(*this);\n      SetDefaultPrintFun<this_t, ORG>(*this);\n      SetDefaultGetGenomeFun<this_t, ORG>(*this);\n      SetPopStruct_Mixed();  // World default structure is well-mixed.\n    }\n    World(Random & rnd, std::string _name=\"\") : World(_name,false) { random_ptr = &rnd; }\n\n    ~World() {\n      world_destruct_sig.Trigger();\n      Clear();\n      if (random_owner) random_ptr.Delete();\n      for (Ptr<SystematicsBase<ORG> > s : systematics) {\n        s.Delete();\n      }\n      for (auto file : files) {\n        file.Delete();\n      }\n    }\n\n    // --- Accessing Organisms or info ---\n\n    /// How many organisms can fit in the world?\n    size_t GetSize() const { return pop.size(); }\n\n    /// How many organisms are currently in the world?\n    size_t GetNumOrgs() const { return num_orgs; }\n\n    /// What update number is the world currently on? (assumes Update() is being used)\n    size_t GetUpdate() const { return update; }\n\n    /// How many cells wide is the world? (assumes grids are active.)\n    size_t GetWidth() const { return pop_sizes[0]; }\n\n    /// How many cells tall is the world? (assumes grids are active.)\n    size_t GetHeight() const { return pop_sizes[1]; }\n\n    /// Get the full population to analyze externally.\n    const pop_t & GetFullPop() const { return pop; }\n\n    /// What phenotypic traits is the population tracking?\n    const emp::TraitSet<ORG> & GetPhenotypes() const { return phenotypes; }\n\n    /// Add an already-constructed datafile.\n    DataFile & AddDataFile(emp::Ptr<DataFile> file);\n\n    /// Lookup a file by name.\n    DataFile & GetFile(const std::string & filename) {\n      for (emp::Ptr<DataFile> file : files) {\n        if (file->GetFilename() == filename) return *file;\n      }\n      emp_assert(false, \"Trying to lookup a file that does not exist.\", filename);\n    }\n\n    /// Does the specified cell ID have an organism in it?\n    bool IsOccupied(WorldPosition pos) const { return pops.IsValid(pos) && pops(pos); }\n\n    /// Are we currently caching fitness values?\n    bool IsCacheOn() const { return cache_on; }\n\n    /// Are generations being evaluated synchronously?\n    /// (i.e., Update() places all births into the population after removing all current organisms.)\n    bool IsSynchronous() const { return is_synchronous; }\n\n    /// Is there some sort of spatial structure to the population?\n    /// (i.e., are some organisms closer together than others.)\n    bool IsSpaceStructured() const { return is_space_structured; }\n\n    /// Is there some sort of structure to the population based on phenotype?\n    /// (i.e., are phenotypically-similar organisms forced to be closer together?)\n    bool IsPhenoStructured() const { return is_pheno_structured; }\n\n    /// Denote that this World will be treated as having synchronous generations.\n    /// (Note: this function does not change functionality, just indicates what's happening!)\n    this_t & MarkSynchronous(bool in=true) { is_synchronous = in; return *this; }\n\n    /// Denote that the World will have a spatial structure to the organisms.\n    /// (Note: this function does not change functionality, just indicates what's happening!)\n    this_t & MarkSpaceStructured(bool in=true) { is_space_structured = in; return *this; }\n\n    /// Denote that the World will have organisms structured based on phenotype.\n    /// (Note: this function does not change functionality, just indicates what's happening!)\n    this_t & MarkPhenoStructured(bool in=true) { is_pheno_structured = in; return *this; }\n\n    /// Index into a world to obtain a const reference to an organism.  Any manipulations to\n    /// organisms should go through other functions to be tracked appropriately.\n    /// Will trip assert if cell is not occupied.\n    const ORG & operator[](size_t id) const {\n      emp_assert(pop[id] != nullptr, id);  // Should not index to a null organism!\n      return *(pop[id]);\n    }\n\n    /// Retrieve a reference to the organsim as the specified position.\n    /// Same as operator[]; will trip assert if cell is not occupied.\n    ORG & GetOrg(size_t id) {\n      emp_assert(id < pop.size());         // Pop must be large enough.\n      emp_assert(pop[id] != nullptr, id);  // Should not index to a null organism!\n      return *(pop[id]);\n    }\n\n    /// Retrieve a const reference to the organsim as the specified x,y coordinates.\n    /// @CAO: Technically, we should set this up with any number of coordinates.\n    ORG & GetOrg(size_t x, size_t y) { return GetOrg(x+y*GetWidth()); }\n\n    /// Retrive a pointer to the contents of a speciefied cell; will be nullptr if the cell is\n    /// not occupied.\n    const Ptr<ORG> GetOrgPtr(size_t id) const { return pop[id]; }\n\n    /// Retrieve a reference to the organsim as the specified position in the NEXT population.\n    /// Will trip assert if cell is not occupied.\n    ORG & GetNextOrg(size_t id) {\n      emp_assert(id < pops[1].size());         // Next pop must be large enough.\n      emp_assert(pops[1][id] != nullptr, id);  // Should not index to a null organism!\n      return *(pops[1][id]);\n    }\n\n    /// Retrieve the genome corresponding to a specified organism.\n    const genome_t & GetGenome(ORG & org) { return fun_get_genome(org); }\n\n    /// Retrive the genome corresponding to the organism at the specified position.\n    const genome_t & GetGenomeAt(size_t id) { return fun_get_genome(GetOrg(id)); }\n\n    /// Get a systematics manager (which is tracking lineages in the population.)\n    /// @param id - which systematics manager to return? Systematics managers are\n    /// stored in the order they are added to the world.\n    Ptr<SystematicsBase<ORG> > GetSystematics(int id=0) {\n      emp_assert(systematics.size() > 0, \"Cannot get systematics file. No systematics file to track.\");\n      emp_assert(id < (int)systematics.size(), \"Invalid systematics file requested.\", id, systematics.size());\n      return systematics[id];\n    }\n\n    /// Get a systematics manager (which is tracking lineages in the population.)\n    /// @param id - which systematics manager to return? Systematics managers are\n    /// stored in the order they are added to the world.\n    Ptr<SystematicsBase<ORG> > GetSystematics(std::string label) {\n      emp_assert(Has(systematics_labels, label), \"Invalid systematics manager label\");\n\n      return systematics[systematics_labels[label]];\n    }\n\n\n    void RemoveSystematics(int id) {\n      emp_assert(systematics.size() > 0, \"Cannot remove systematics file. No systematics file to track.\");\n      emp_assert(id < systematics.size(), \"Invalid systematics file requested to be removed.\", id, systematics.size());\n\n      systematics[id].Delete();\n      systematics[id] = nullptr;\n\n      for (auto el : systematics_labels) {\n        if (el.second == id) {\n          systematics_labels.erase(el.first);\n        }\n      }\n    }\n\n    void RemoveSystematics(std::string label) {\n      emp_assert(Has(systematics_labels, label), \"Invalid systematics manager label\");\n\n      systematics[systematics_labels[label]].Delete();\n      systematics[systematics_labels[label]] = nullptr;\n      systematics_labels.erase(label) ;\n    }\n\n    template <typename ORG_INFO, typename DATA_STRUCT>\n    void AddSystematics(Ptr<Systematics<ORG, ORG_INFO, DATA_STRUCT> > s, std::string label=\"systematics\") {\n      if (Has(systematics_labels, label)) {\n        label += to_string(systematics.size());\n      }\n      systematics_labels[label] = systematics.size();\n\n      if (is_synchronous) {\n        s->SetTrackSynchronous(true);\n      }\n\n      systematics.push_back(s);\n    }\n\n    /// Get the fitness function currently in use.\n    fun_calc_fitness_t GetFitFun() { return fun_calc_fitness; }\n\n    // --- CONFIGURE ---\n\n    /// Set the population to always append new organisms on the end.\n    /// Argument determines if the generations should be synchronous (true) or not (false, default)\n    void SetPopStruct_Grow(bool synchronous_gen=false);\n\n    /// Set the population to be well-mixed (with all organisms counting as neighbors.)\n    /// Argument determines if the generations should be synchronous (true) or not (false, default)\n    void SetPopStruct_Mixed(bool synchronous_gen=false);\n\n    /// Set the population to be a grid of cells using the specified dimensions.  The third\n    /// argument determines if the generations should be synchronous (true) or not (false, default)\n    void SetPopStruct_Grid(size_t width, size_t height, bool synchronous_gen=false);\n\n    /// Setup the population to automatically test for and trigger mutations.  By default, this\n    /// occurs before deciding where an offspring should be placed. Note that this pre-placement\n    /// timing may be needed if fitness or other phenotypic traits are required to determine placement.\n    void SetAutoMutate() {\n      OnOffspringReady( [this](ORG & org){ DoMutationsOrg(org); } );\n    }\n\n    /// Setup the population to automatically test for and trigger mutations based on a provided\n    /// test function that takes the position where the offspring will be placed and indicates\n    /// (true/false) whether mutations should be processed.  This timing allows position to\n    /// influence mutations.\n    void SetAutoMutate(std::function<bool(size_t pos)> test_fun) {\n      OnBeforePlacement( [this,test_fun](ORG & org, size_t pos){ if (test_fun(pos)) DoMutationsOrg(org); } );\n    }\n\n    /// Tell systematics managers that this world has synchronous generations.\n    //  @ELD: Can probably be removed with new WorldPosition\n    void SetSynchronousSystematics(bool synchronous) {\n      for (Ptr<SystematicsBase<ORG> > s : systematics) {\n        s->SetTrackSynchronous(synchronous);\n      }\n    }\n\n    /// Add a new phenotype measuring function.\n    // void AddPhenotype(const std::string & name, std::function<double(ORG &)> fun) {\n    //   phenotypes.AddTrait(name, fun);\n    // }\n    template <typename... Ts>\n    void AddPhenotype(Ts &&... args) {\n      phenotypes.AddTrait(std::forward<Ts>(args)...);\n    }\n\n    /// Access a data node that tracks fitness information in the population.  The fitness will not\n    /// be collected until the first Update() after this function is initially called, signaling\n    /// the need for this information.\n    Ptr<DataMonitor<double>> GetFitnessDataNode() {\n      if (!data_nodes.HasNode(\"fitness\")) {\n        DataMonitor<double> & node = data_nodes.New(\"fitness\");\n\n        // Collect fitnesses each update...\n        OnUpdate([this, &node](size_t){\n            node.Reset();\n            for (size_t i = 0; i < pop.size(); i++) {\n              if (IsOccupied(i)) node.AddDatum( CalcFitnessID(i) );\n            }\n          }\n        );\n      }\n      return &(data_nodes.Get(\"fitness\"));\n    }\n\n    // Returns a reference so that capturing it in a lambda to call on update\n    // is less confusing. It's possible we should change it to be consistent\n    // with GetFitnessDataNode, though.\n    Ptr<DataMonitor<double>> AddDataNode(const std::string & name) {\n      emp_assert(!data_nodes.HasNode(name));\n      return &(data_nodes.New(name));\n    }\n\n    Ptr<DataMonitor<double>> GetDataNode(const std::string & name) {\n      return &(data_nodes.Get(name));\n    }\n\n    /// Setup an arbitrary file; no default filename available.\n    DataFile & SetupFile(const std::string & filename);\n\n    /// Setup a file to be printed that collects fitness information over time.\n    DataFile & SetupFitnessFile(const std::string & filename=\"fitness.csv\", const bool & print_header=true);\n\n    /// Setup a file (by label) to be printed that collects systematics information over time.\n    DataFile & SetupSystematicsFile(std::string label, const std::string & filename=\"systematics.csv\", const bool & print_header=true);\n\n    /// Setup a file (by id) to be printed that collects systematics information over time.\n    DataFile & SetupSystematicsFile(size_t id=0, const std::string & filename=\"systematics.csv\", const bool & print_header=true);\n\n    /// Setup a file to be printed that collects population information over time.\n    DataFile & SetupPopulationFile(const std::string & filename=\"population.csv\", const bool & print_header=true);\n\n    /// Setup the function to be used when fitness needs to be calculated.  The provided function\n    /// should take a reference to an organism and return a fitness value of type double.\n    void SetFitFun(const fun_calc_fitness_t & fit_fun) { fun_calc_fitness = fit_fun; }\n\n    /// Setup the function to be used to mutate an organism.  It should take a reference to an\n    /// organism and return the number of mutations that occurred.\n    void SetMutFun(const fun_do_mutations_t & mut_fun) { fun_do_mutations = mut_fun; }\n\n    /// Setup the function to be used to print an organism.  It should take a reference to an\n    /// organism and an std::ostream, with a void return.  The organism should get printed to\n    /// the provided ostream.\n    void SetPrintFun(const fun_print_org_t & print_fun) { fun_print_org = print_fun; }\n\n    /// Setup the function to extract or convert an organism to a genome.  It should take an\n    /// organism reference and return a const genome reference.\n    void SetGetGenomeFun(const fun_get_genome_t & _fun) { fun_get_genome = _fun; }\n\n    /// Setup the function to inject an organism into the population.  It should take a pointer\n    /// to the organism to be injected and return a WorldPosition indicating where it was placed.\n    void SetAddInjectFun(const fun_find_inject_pos_t & _fun) { fun_find_inject_pos = _fun; }\n\n    /// Setup the function to place a newly born organism into the population.  It should take a\n    /// pointer to the new organism and the position of the parent, returning a WorldPosition\n    /// indicating where it was placed.\n    void SetAddBirthFun(const fun_find_birth_pos_t & _fun) { fun_find_birth_pos = _fun; }\n\n    /// Setup the function to kill an organism.  It should return a WorldPosition indicating\n    /// the newly empty cell, which is not necessarily where the kill occurred.\n    void SetKillOrgFun(const fun_kill_org_t & _fun) { fun_kill_org = _fun; }\n\n    /// Setup the function to take an organism position id and return a random neighbor id from\n    /// the population.\n    void SetGetNeighborFun(const fun_get_neighbor_t & _fun) { fun_get_neighbor = _fun; }\n\n    /// Same as setting a fitness function, but uses Goldberg and Richardson's fitness sharing\n    /// function (1987) to make similar organisms detract from each other's fitness and prevent\n    /// the population from clustering around a single peak.  In addition to the base fitness\n    /// function, a shared fitness function also requires:\n    ///  * a distance function that takes references to two organisms and returns a double\n    ///    indicating the distance between those organisms,\n    ///  * a sharing threshold (sigma share) that defines the maximum distance at which members\n    ///    should be consdered in the same niche,\n    ///  * and a value of alpha, which controls the shape of the fitness sharing curve.\n    void SetSharedFitFun(const fun_calc_fitness_t & fit_fun, const fun_calc_dist_t & dist_fun,\n                         double sharing_threshold, double alpha);\n\n    // Deal with Signals\n\n    /// Access signal controller used for this world directly.\n    SignalControl & GetSignalControl() { return control; }\n\n\n    /// Provide a function for World to call each time an organism is about to give birth.\n    /// Trigger:  Immediately prior to parent producing offspring\n    /// Argument: World ID for the parent-to-be\n    /// Return:   Key value needed to make future modifications.\n    SignalKey OnBeforeRepro(const std::function<void(size_t)> & fun) {\n      return before_repro_sig.AddAction(fun);\n    }\n\n    /// Provide a function for World to call after an offspring organism has been created, but\n    /// before it is inserted into the World.\n    /// Trigger:  Offspring about to enter population\n    /// Argument: Reference to organism about to be placed in population.\n    /// Return:   Key value needed to make future modifications.\n    SignalKey OnOffspringReady(const std::function<void(ORG &)> & fun) {\n      return offspring_ready_sig.AddAction(fun);\n    }\n\n    /// Provide a function for World to call before an external organim is injected into the World.\n    /// Trigger:  New organism about to be added to population from outside\n    /// Argument: Reference to organism about to be placed in population.\n    /// Return:   Key value needed to make future modifications.\n    SignalKey OnInjectReady(const std::function<void(ORG &)> & fun) {\n      return inject_ready_sig.AddAction(fun);\n    }\n\n    /// Provide a function for World to call before an organism is added to the active population,\n    /// but after position is found.  With synchonous generations, this occurs during Update().\n    /// Trigger:  Organism is about to be added to population; position is known (either born or injected)\n    /// Args:     (1) Reference to organism about to be placed; (2) Position organism will be placed.\n    /// Return:   Key value needed to make future modifications.\n    SignalKey OnBeforePlacement(const std::function<void(ORG &,size_t)> & fun) {\n      return before_placement_sig.AddAction(fun);\n    }\n\n    /// Provide a function for World to call immediately after any organism has been added to the\n    /// active population.  With synchonous generations, this occurs during Update().\n    /// Trigger:  Organism has been added to population (either born or injected)\n    /// Argument: Position of organism placed in the population.\n    /// Return:   Key value needed to make future modifications.\n    SignalKey OnPlacement(const std::function<void(size_t)> & fun) {\n      return on_placement_sig.AddAction(fun);\n    }\n\n    /// Provide a function for World to call each time Update() is run.\n    /// Trigger:  New update is starting\n    /// Argument: Update number (sequentially increasing)\n    /// Return:   Key value needed to make future modifications.\n    SignalKey OnUpdate(const std::function<void(size_t)> & fun) {\n      return on_update_sig.AddAction(fun);\n    }\n\n    /// Provide a function for World to call each time an organism is about to die.\n    /// Trigger:  Organism is about to be killed\n    /// Argument: Position of organism about to die\n    /// Return:   Key value needed to make future modifications.\n    SignalKey OnOrgDeath(const std::function<void(size_t)> & fun) {\n      return on_death_sig.AddAction(fun);\n    }\n\n    /// Provide a function for World to call each time two organisms swap positions in world.\n    /// Trigger:   Organisms have just swapped positions.\n    /// Arguments: Positions of the two organisms.\n    /// Return:    Key value needed to make future modifications.\n    SignalKey OnSwapOrgs(const std::function<void(WorldPosition,WorldPosition)> & fun) {\n      return on_swap_sig.AddAction(fun);\n    }\n\n    /// Provide a function for World to call at the start of its destructor (for additional cleanup).\n    /// Trigger:  Destructor has begun to execture\n    /// Argument: None\n    /// Return:   Key value needed to make future modifications.\n    SignalKey OnWorldDestruct(const std::function<void()> & fun) {\n      return world_destruct_sig.AddAction(fun);\n    }\n\n    // --- MANAGE ATTRIBUTES ---\n\n    /// Worlds can have arbitrary attributes that can be set and changed dynamically.\n    /// This function determines if an attribute exists, regardless of its value.\n    bool HasAttribute(const std::string & name) const { return Has(attributes, name); }\n\n    /// Get the value for an attribute that you know exists.\n    std::string GetAttribute(const std::string) const {\n      emp_assert( Has(attributes, name) );\n      return Find(attributes, name, \"UNKNOWN\");\n    }\n\n    /// Set the value of a new attribute on this world.  If the attribute already exists, it will\n    /// be updated.  If it doesn't exist, it will be added.\n    template <typename T>\n    void SetAttribute(const std::string & name, T && val) { attributes[name] = to_string(val); }\n\n\n    // --- UPDATE THE WORLD! ---\n\n    /// Update the world:\n    /// 1. Send out an update signal for any external functions to trigger.\n    /// 2. If synchronous generations, move next population into place as the current popoulation.\n    /// 3. Handle any data-related updates including systematics and files that need to be printed.\n    /// 4. Increment the current update number.\n    void Update();\n\n    /// Run the Process member function on all organisms in the population; forward any args passed\n    /// into this function.\n    template <typename... ARGS>\n    void Process(ARGS &&... args) {   // Redirect to all orgs in the population!\n      for (Ptr<ORG> org : pop) { if (org) org->Process(args...); }\n    }\n\n    /// Run the Process member function on a single, specified organism in the population;\n    /// forward any args passed into this function.\n    template <typename... ARGS>\n    void ProcessID(size_t id, ARGS &&... args) {   // Redirect to all orgs in the population!\n      if (pop[id]) pop[id]->Process(std::forward<ARGS>(args)...);\n    }\n\n    /// Reset the hardware for all organisms.\n    void ResetHardware() {\n      for (Ptr<ORG> org : pop) { if (org) org->ResetHardware(); }\n    }\n\n    // --- CALCULATE FITNESS ---\n\n    /// Use the configured fitness function on the specified organism.\n    double CalcFitnessOrg(ORG & org);\n\n    /// Use the configured fitness function on the organism at the specified position.\n    double CalcFitnessID(size_t id);\n\n    /// Calculate the fitness of all organisms, storing the results in the cache.\n    void CalcFitnessAll() const {\n      emp_assert(cache_on, \"Trying to calculate fitness of all orgs without caching.\");\n      for (size_t id = 0; id < pop.size(); id++) CalcFitnessID(id);\n    }\n\n    /// Turn on (or off) fitness caching for individual organisms.\n    void SetCache(bool _in=true) { cache_on = _in; }\n\n    /// Remove all currently cached fitness values (useful with changing environments, etc.)\n    void ClearCache() { fit_cache.resize(0); }\n\n\n    // --- MUTATIONS! ---\n\n    /// Use mutation function on a single, specified organism.\n    void DoMutationsOrg(ORG & org) {\n      emp_assert(fun_do_mutations);  emp_assert(random_ptr);\n      fun_do_mutations(org, *random_ptr);\n    }\n\n    /// Use mutation function on the organism at the specified position in the population.\n    void DoMutationsID(size_t id) {\n      emp_assert(pop[id]);\n      DoMutationsOrg(*(pop[id]));\n    }\n\n    /// Use mutation function on ALL organisms in the population.\n    void DoMutations(size_t start_id=0) {\n      for (size_t id = start_id; id < pop.size(); id++) { if (pop[id]) DoMutationsID(id); }\n    }\n\n    // --- MANIPULATE ORGS IN POPULATION ---\n\n    /// Remove all organisms from the world.\n    void Clear();\n\n    /// Clear all of the orgs and reset stats.\n    void Reset() { Clear(); update = 0; }\n\n    /// Swap the positions of two organisms.\n    void Swap(WorldPosition pos1, WorldPosition pos2) {\n      std::swap(pops(pos1), pops(pos2));\n      on_swap_sig.Trigger(pos1, pos2);\n    }\n\n    /// Change the size of the world.  If the new size is smaller than the old, remove any\n    /// organisms outside the new range.  If larger, new positions are empty.\n    void Resize(size_t new_size) {\n      for (size_t i = new_size; i < pop.size(); i++) RemoveOrgAt(i); // Remove orgs past new size.\n      pop.resize(new_size, nullptr);                                 // Default new orgs to null.\n    }\n\n    /// Change the size of the world based on width and height.\n    void Resize(size_t new_width, size_t new_height) {\n      Resize(new_width * new_height);\n      pop_sizes.resize(2);\n      pop_sizes[0] = new_width; pop_sizes[1] = new_height;\n    }\n\n    /// Change the size of the world based on a vector of dimensions.\n    void Resize(const emp::vector<size_t> & dims) {\n      Resize(emp::Product(dims));\n      pop_sizes = dims;\n    }\n\n    /// AddOrgAt is the core function to add organisms to the population (others must go through here)\n    /// Note: This function ignores population structure, so requires you to manage your own structure.\n    void AddOrgAt(Ptr<ORG> new_org, WorldPosition pos, WorldPosition p_pos=WorldPosition());\n\n    /// RemoveOrgAt is the core function to remove organisms from the population.\n    /// Note: This function ignores population structure, so requires you to manage your own structure.\n    void RemoveOrgAt(WorldPosition pos);\n\n    /// Inject an organism using the default injection scheme.\n    void Inject(const genome_t & mem, size_t copy_count=1);\n\n    /// Inject an organism at a specific position.\n    void InjectAt(const genome_t & mem, const WorldPosition pos);\n\n    /// Inject a random organism (constructor must facilitate!)\n    template <typename... ARGS> void InjectRandomOrg(ARGS &&... args);\n\n    /// Place one or more copies of an offspring into population; return position of last placed.\n    WorldPosition DoBirth(const genome_t & mem, size_t parent_pos, size_t copy_count=1);\n\n    // Kill off organism at the specified position (same as RemoveOrgAt, but callable externally)\n    void DoDeath(const WorldPosition pos) { RemoveOrgAt(pos); }\n\n    // Kill off an organism using internal kill method setup by population structure.\n    void DoDeath() { fun_kill_org(); }\n\n    // --- RANDOM FUNCTIONS ---\n\n    /// Return a reference to the random number generator currently being used by world.\n    Random & GetRandom() { emp_assert(random_ptr); return *random_ptr; }\n\n    /// Setup a new random number generator created elsewhere.\n    void SetRandom(Random & r);\n\n    /// Create a new random number generator (that World will manage)\n    void NewRandom(int seed=-1);\n\n    /// Get the position a cell, at random.\n    size_t GetRandomCellID() { return GetRandom().GetUInt(pop.size()); }\n\n    /// Get the position a cell in a range, at random.\n    size_t GetRandomCellID(size_t min_id, size_t max_id) {\n      emp_assert(min_id < max_id && max_id <= pop.size());\n      return min_id + GetRandom().GetUInt(max_id - min_id);\n    }\n\n    /// Use the specified function to get a neighbor (if not set, assume well mixed).\n    WorldPosition GetRandomNeighborPos(WorldPosition pos) { return fun_get_neighbor(pos); }\n\n    /// Get the id of a random *occupied* cell.\n    size_t GetRandomOrgID();\n\n    /// Get an organism from a random occupied cell.\n    ORG & GetRandomOrg() { return *pop[GetRandomOrgID()]; }\n\n    // --- POPULATION ANALYSIS ---\n\n    /// Find ALL cell IDs that return true in the provided filter.\n    emp::vector<size_t> FindCellIDs(const std::function<bool(ORG*)> & filter);\n\n    // Simple techniques for using FindCellIDs()\n\n    /// Return IDs of all occupied cells in the population.\n    emp::vector<size_t> GetValidOrgIDs() { return FindCellIDs([](ORG*org){ return (bool) org; }); }\n\n    /// Return IDs of all empty cells in the population.\n    emp::vector<size_t> GetEmptyPopIDs() { return FindCellIDs([](ORG*org){ return !org; }); }\n\n\n    // --- POPULATION MANIPULATIONS ---\n\n    /// Run population through a bottleneck to (potentially) shrink it.\n    void DoBottleneck(const size_t new_size, bool choose_random=true);\n\n    /// Perform a Serial Transfer where a fixed percentage of current organisms are maintained.\n    void SerialTransfer(const double keep_frac);\n\n    // --- PRINTING ---\n\n    /// Print all organisms in the population using previously provided print function.\n    void Print(std::ostream & os = std::cout, const std::string & empty=\"-\", const std::string & spacer=\" \");\n\n    /// Print unique organisms and the number of copies of each that exist.\n    void PrintOrgCounts(std::ostream & os = std::cout);\n\n    /// Print the organisms layed out in a grid structure (assumes a grid population.)\n    void PrintGrid(std::ostream& os=std::cout, const std::string & empty=\"-\", const std::string & spacer=\" \");\n\n\n    // --- FOR VECTOR COMPATIBILITY ---\n\n    /// [std::vector compatibility] How big is the world?\n    size_t size() const { return pop.size(); }\n\n    /// [std::vector compatibility] Update world size.\n    void resize(size_t new_size) { Resize(new_size); }\n\n    /// [std::vector compatibility] Remove all organisms.\n    void clear() { Clear(); }\n\n    /// [std::vector compatibility] Return iterator to first organism.\n    iterator_t begin() { return iterator_t(this, 0); }\n\n    /// [std::vector compatibility] Return iterator just past last organism.\n    iterator_t end() { return iterator_t(this, (int) pop.size()); }\n\n  };\n\n  // =============================================================\n  // ===                                                       ===\n  // ===  Out-of-class member function definitions from above  ===\n  // ===                                                       ===\n  // =============================================================\n\n  template <typename ORG>\n  void World<ORG>::AddOrgAt(Ptr<ORG> new_org, WorldPosition pos, WorldPosition p_pos) {\n    emp_assert(new_org);         // The new organism must exist.\n    emp_assert(pos.IsValid());   // Position must be legal.\n\n    // If new organism is going into the active population, trigger signal before doing so.\n    if (pos.IsActive()) { before_placement_sig.Trigger(*new_org, pos.GetIndex()); }\n\n    for (Ptr<SystematicsBase<ORG> > s : systematics) {\n      s->SetNextParent((int) p_pos.GetIndex());\n    }\n\n    // Clear out any old organism at this position.\n    RemoveOrgAt(pos);\n\n    pops.MakeValid(pos);                 // Make sure we have room for new organism\n    pops(pos) = new_org;                 // Put org into place.\n\n    // Track org count\n    if (pos.IsActive()) ++num_orgs;\n\n    // Track the new systematics info\n    for (Ptr<SystematicsBase<ORG> > s : systematics) {\n      s->AddOrg(*new_org, (int) pos.GetIndex(), (int) update, !pos.IsActive());\n    }\n\n    SetupOrg(*new_org, pos, *random_ptr);\n\n    // If new organism is in the active population, trigger associated signal.\n    if (pos.IsActive()) { on_placement_sig.Trigger(pos.GetIndex()); }\n  }\n\n  template<typename ORG>\n  void World<ORG>::RemoveOrgAt(WorldPosition pos) {\n    size_t id = pos.GetIndex(); // Identify specific index.\n    pop_t & cur_pop = pops[pos.GetPopID()];\n    if (id >= cur_pop.size() || !cur_pop[id]) return; // Nothing to remove!\n    if (pos.IsActive()) on_death_sig.Trigger(id);    // If active, signal that org is about to die.\n    cur_pop[id].Delete();                            // Delete the organism...\n    cur_pop[id] = nullptr;                           // ...and reset the pointer to null\n\n    if (pos.IsActive()) {\n      --num_orgs;                                    // Track one fewer organisms in the population\n      if (cache_on) ClearCache(id);                  // Delete any cached info about this organism\n      for (Ptr<SystematicsBase<ORG> > s : systematics) {\n        s->RemoveOrg((int) pos.GetIndex());          // Notify systematics about organism removal\n      }\n    } else {\n      for (Ptr<SystematicsBase<ORG> > s : systematics) {\n        s->RemoveNextOrg((int) pos.GetIndex());      // Notify systematics about organism removal\n      }\n    }\n  }\n\n  template<typename ORG>\n  void World<ORG>::SetPopStruct_Grow(bool synchronous_gen) {\n    pop_sizes.resize(0);\n    is_synchronous = synchronous_gen;\n    is_space_structured = false;\n    is_pheno_structured = false;\n\n    // -- Setup functions --\n    // Append at end of population\n    fun_find_inject_pos = [this](Ptr<ORG> new_org) {\n      (void) new_org;\n      return pop.size();\n    };\n\n    // Neighbors are anywhere in the same population.\n    fun_get_neighbor = [this](WorldPosition pos) { return pos.SetIndex(GetRandomCellID()); };\n\n    // Kill random organisms and move end into vacant position to keep pop compact.\n    fun_kill_org = [this](){\n      const size_t last_id = pop.size() - 1;\n      Swap(GetRandomCellID(), last_id);\n      RemoveOrgAt(last_id);\n      pop.resize(last_id);\n      return last_id;\n    };\n\n    if (synchronous_gen) {\n      // Append births into the next population.\n      fun_find_birth_pos = [this](Ptr<ORG> new_org, WorldPosition parent_pos) {\n        emp_assert(new_org);      // New organism must exist.\n        return WorldPosition(pops[1].size(), 1);   // Append it to the NEXT population\n      };\n\n      SetAttribute(\"SynchronousGen\", \"True\");\n    } else {\n      // Asynchronous: always append to current population.\n      fun_find_birth_pos = [this](Ptr<ORG> new_org, WorldPosition parent_pos) {\n        return WorldPosition(pop.size());\n      };\n      SetAttribute(\"SynchronousGen\", \"False\");\n    }\n\n    SetAttribute(\"PopStruct\", \"Grow\");\n    SetSynchronousSystematics(synchronous_gen);\n  }\n\n  template<typename ORG>\n  void World<ORG>::SetPopStruct_Mixed(bool synchronous_gen) {\n    pop_sizes.resize(0);\n    is_synchronous = synchronous_gen;\n    is_space_structured = false;\n    is_pheno_structured = false;\n\n    // -- Setup functions --\n    // Append at end of population\n    fun_find_inject_pos = [this](Ptr<ORG> new_org) {\n      (void) new_org;\n      return pop.size();\n    };\n\n    // Neighbors are anywhere in the same population.\n    fun_get_neighbor = [this](WorldPosition pos) { return pos.SetIndex(GetRandomCellID()); };\n\n    // Kill random organisms and move end into vacant position to keep pop compact.\n    fun_kill_org = [this](){\n      const size_t kill_id = GetRandomCellID();\n      RemoveOrgAt(kill_id);\n      return kill_id;\n    };\n\n    if (synchronous_gen) {\n      // Append births into the next population.\n      fun_find_birth_pos = [this](Ptr<ORG> new_org, WorldPosition parent_id) {\n        emp_assert(new_org);                        // New organism must exist.\n        return WorldPosition(pops[1].size(), 1);   // Append it to the NEXT population\n      };\n\n      SetAttribute(\"SynchronousGen\", \"True\");\n    } else {\n      // Asynchronous: always go to a neigbor in current population.\n      fun_find_birth_pos = [this](Ptr<ORG> new_org, WorldPosition parent_id) {\n        return WorldPosition(fun_get_neighbor(parent_id)); // Place org in existing population.\n      };\n      SetAttribute(\"SynchronousGen\", \"False\");\n    }\n\n    SetAttribute(\"PopStruct\", \"Mixed\");\n    SetSynchronousSystematics(synchronous_gen);\n  }\n\n  template<typename ORG>\n  void World<ORG>::SetPopStruct_Grid(size_t width, size_t height, bool synchronous_gen) {\n    Resize(width, height);\n    is_synchronous = synchronous_gen;\n    is_space_structured = true;\n    is_pheno_structured = false;\n\n    // -- Setup functions --\n    // Inject a random position in grid\n    fun_find_inject_pos = [this](Ptr<ORG> new_org) {\n      (void) new_org;\n      return WorldPosition(GetRandomCellID());\n    };\n\n    // neighbors are in 9-sized neighborhood.\n    fun_get_neighbor = [this](WorldPosition pos) {\n      emp_assert(random_ptr);\n      emp_assert(pop_sizes.size() == 2);\n      const size_t size_x = pop_sizes[0];\n      const size_t size_y = pop_sizes[1];\n      const size_t id = pos.GetIndex();\n      const int offset = random_ptr->GetInt(9);\n      const int rand_x = (int) (id%size_x) + offset%3 - 1;\n      const int rand_y = (int) (id/size_x) + offset/3 - 1;\n      const auto neighbor_id = emp::Mod(rand_x, (int) size_x) + emp::Mod(rand_y, (int) size_y) * (int)size_x;\n      return pos.SetIndex(neighbor_id);\n    };\n\n    fun_kill_org = [this](){\n      const size_t kill_id = GetRandomCellID();\n      RemoveOrgAt(kill_id);\n      return kill_id;\n    };\n\n    if (synchronous_gen) {\n      // Place births in a neighboring position in the new grid.\n      fun_find_birth_pos = [this](Ptr<ORG> new_org, WorldPosition parent_pos) {\n        emp_assert(new_org);                                    // New organism must exist.\n        WorldPosition next_pos = fun_get_neighbor(parent_pos);  // Place near parent.\n        return next_pos.SetPopID(1);                            // Adjust position to next pop and place..\n      };\n      SetAttribute(\"SynchronousGen\", \"True\");\n    } else {\n      // Asynchronous: always go to a neighbor in current population.\n      fun_find_birth_pos = [this](Ptr<ORG> new_org, WorldPosition parent_pos) {\n        return WorldPosition(fun_get_neighbor(parent_pos)); // Place org in existing population.\n      };\n      SetAttribute(\"SynchronousGen\", \"False\");\n    }\n\n    SetAttribute(\"PopStruct\", \"Grid\");\n    SetSynchronousSystematics(synchronous_gen);\n  }\n\n  // Add a new data file constructed elsewhere.\n  template<typename ORG>\n  DataFile & World<ORG>::AddDataFile(emp::Ptr<DataFile> file) {\n    size_t id = files.size();\n    files.push_back(file);\n    return *files[id];\n  }\n\n\n  // Create a new, arbitrary file.\n  template<typename ORG>\n  DataFile & World<ORG>::SetupFile(const std::string & filename) {\n    size_t id = files.size();\n    files.emplace_back();\n    files[id].New(filename);\n    return *files[id];\n  }\n\n  // A data file (default=\"fitness.csv\") that contains information about the population's fitness.\n  template<typename ORG>\n  DataFile & World<ORG>::SetupFitnessFile(const std::string & filename, const bool & print_header) {\n    auto & file = SetupFile(filename);\n    auto node = GetFitnessDataNode();\n    file.AddVar(update, \"update\", \"Update\");\n    file.AddMean(*node, \"mean_fitness\", \"Average organism fitness in current population.\");\n    file.AddMin(*node, \"min_fitness\", \"Minimum organism fitness in current population.\");\n    file.AddMax(*node, \"max_fitness\", \"Maximum organism fitness in current population.\");\n    file.AddInferiority(*node, \"inferiority\", \"Average fitness / maximum fitness in current population.\");\n    if (print_header) file.PrintHeaderKeys();\n    return file;\n  }\n\n  // A data file (default=\"systematics.csv\") that contains information about the population's\n  // phylogeny and lineages.\n  template<typename ORG>\n  DataFile & World<ORG>::SetupSystematicsFile(std::string label, const std::string & filename, const bool & print_header) {\n    emp_assert(Has(systematics_labels, label), \"Invalid systematics tracker requested.\", label);\n    return SetupSystematicsFile(systematics_labels[label], filename, print_header);\n  }\n\n  // A data file (default=\"systematics.csv\") that contains information about the population's\n  // phylogeny and lineages.\n  template<typename ORG>\n  DataFile & World<ORG>::SetupSystematicsFile(size_t id, const std::string & filename, const bool & print_header) {\n    emp_assert(systematics.size() > 0, \"Cannot track systematics file. No systematics file to track.\");\n    emp_assert(id < systematics.size(), \"Invalid systematics file requested to be tracked.\");\n    auto & file = SetupFile(filename);\n    file.AddVar(update, \"update\", \"Update\");\n    file.template AddFun<size_t>( [this, id](){ return systematics[id]->GetNumActive(); }, \"num_taxa\", \"Number of unique taxonomic groups currently active.\" );\n    file.template AddFun<size_t>( [this, id](){ return systematics[id]->GetTotalOrgs(); }, \"total_orgs\", \"Number of organisms tracked.\" );\n    file.template AddFun<double>( [this, id](){ return systematics[id]->GetAveDepth(); }, \"ave_depth\", \"Average Phylogenetic Depth of Organisms.\" );\n    file.template AddFun<size_t>( [this, id](){ return systematics[id]->GetNumRoots(); }, \"num_roots\", \"Number of independent roots for phlogenies.\" );\n    file.template AddFun<int>(    [this, id](){ return systematics[id]->GetMRCADepth(); }, \"mrca_depth\", \"Phylogenetic Depth of the Most Recent Common Ancestor (-1=none).\" );\n    file.template AddFun<double>( [this, id](){ return systematics[id]->CalcDiversity(); }, \"diversity\", \"Genotypic Diversity (entropy of taxa in population).\" );\n\n    if (print_header) file.PrintHeaderKeys();\n    return file;\n  }\n\n  // A data file (default=\"population.csv\") contains information about the current population.\n  template<typename ORG>\n  DataFile & World<ORG>::SetupPopulationFile(const std::string & filename, const bool & print_header) {\n    auto & file = SetupFile(filename);\n    file.AddVar(update, \"update\", \"Update\");\n    file.template AddFun<size_t>( [this](){ return GetNumOrgs(); }, \"num_orgs\", \"Number of organisms currently living in the population.\" );\n    if (print_header) file.PrintHeaderKeys();\n    return file;\n  }\n\n  template<typename ORG>\n  void World<ORG>::SetSharedFitFun(const fun_calc_fitness_t & fit_fun,\n                                   const fun_calc_dist_t & dist_fun,\n                                   double sharing_threshold, double alpha)\n  {\n    fun_calc_fitness = [this, fit_fun, dist_fun, sharing_threshold, alpha](ORG & org) {\n      double niche_count = 0;\n      for (Ptr<ORG> org2 : pop) {\n        if (!org2) continue;\n        double dist = dist_fun(org, *org2);\n        niche_count += std::max(1.0 - std::pow(dist/sharing_threshold, alpha), 0.0);\n      }\n      return fit_fun(org)/niche_count;\n    };\n  }\n\n  // --- Updating the world! ---\n\n  template<typename ORG>\n  void World<ORG>::Update() {\n    // 1. Send out an update signal for any external functions to trigger.\n    on_update_sig.Trigger(update);\n\n    // 2. If synchronous generations (i.e, pops[1] is not empty), move next population into\n    //    place as the current popoulation.\n    if (pops[1].size()) {\n      // Trigger signals for orgs in next pop before they are moved into the active pop.\n      for (size_t i = 0; i < pops[1].size(); i++) {\n        if (!pops[1][i]) continue;\n        before_placement_sig.Trigger(*pops[1][i], i);  // Trigger that org is about to be placed.\n      }\n\n      // Clear out current pop.\n      for (size_t i = 0; i < pop.size(); i++) RemoveOrgAt(i);\n      pop.resize(0);\n      std::swap(pops[0], pops[1]);            // Move next pop into place.\n\n      // Update the active population.\n      num_orgs = 0;\n      for (size_t i = 0; i < pop.size(); i++) {\n        if (!pop[i]) continue;        // Ignore empty positions.\n        ++num_orgs;                   // Keep count of number of organisms\n        on_placement_sig.Trigger(i);  // Trigger that organism has been placed.\n      }\n    }\n\n    // 3. Handle systematics and any data files that need to be printed this update.\n\n    // Tell systematics manager to swap next population and population\n    for (Ptr<SystematicsBase<ORG>> s : systematics) {\n      s->Update();\n    }\n\n    for (auto file : files) file->Update(update);\n\n    // 4. Increment the current update number; i.e., count calls to Update().\n    update++;\n  }\n\n  template<typename ORG>\n  double World<ORG>::CalcFitnessOrg(ORG & org) {\n    emp_assert(fun_calc_fitness);\n    return fun_calc_fitness(org);\n  }\n\n  template<typename ORG>\n  double World<ORG>::CalcFitnessID(size_t id) {\n    if (!pop[id]) return 0.0;\n    if (!cache_on) return CalcFitnessOrg(*pop[id]);\n    double cur_fit = GetCache(id);\n    if (cur_fit == 0.0 && pop[id]) {   // If org is non-null, but no cached fitness, calculate it!\n      if (id >= fit_cache.size()) fit_cache.resize(id+1, 0.0);\n      cur_fit = CalcFitnessOrg(*pop[id]);\n      fit_cache[id] = cur_fit;\n    }\n    return cur_fit;\n  }\n\n  // Delete all organisms.\n  template<typename ORG>\n  void World<ORG>::Clear() {\n    for (size_t pop_id = 0; pop_id < 2; pop_id++) {\n      for (size_t i = 0; i < pops[pop_id].size(); i++) RemoveOrgAt(WorldPosition(i,pop_id));\n      pops[pop_id].resize(0);\n    }\n  }\n\n  template <typename ORG>\n  void World<ORG>::Inject(const genome_t & mem, size_t copy_count) {\n    for (size_t i = 0; i < copy_count; i++) {\n      Ptr<ORG> new_org = NewPtr<ORG>(mem);\n      inject_ready_sig.Trigger(*new_org);\n      const WorldPosition pos = fun_find_inject_pos(new_org);\n\n      if (pos.IsValid()) AddOrgAt(new_org, pos);  // If placement position is valid, do so!\n      else new_org.Delete();                      // Otherwise delete the organism.\n    }\n  }\n\n  template <typename ORG>\n  void World<ORG>::InjectAt(const genome_t & mem, const WorldPosition pos) {\n    emp_assert(pos.IsValid());\n    Ptr<ORG> new_org = NewPtr<ORG>(mem);\n    inject_ready_sig.Trigger(*new_org);\n    AddOrgAt(new_org, pos);\n  }\n\n  template <typename ORG>\n  template <typename... ARGS>\n  void World<ORG>::InjectRandomOrg(ARGS &&... args) {\n    emp_assert(random_ptr != nullptr && \"InjectRandomOrg() requires active random_ptr\");\n    Ptr<ORG> new_org = NewPtr<ORG>(*random_ptr, std::forward<ARGS>(args)...);\n    inject_ready_sig.Trigger(*new_org);\n    const WorldPosition pos = fun_find_inject_pos(new_org);\n\n    if (pos.IsValid()) AddOrgAt(new_org, pos);  // If placement position is valid, do so!\n    else new_org.Delete();                      // Otherwise delete the organism.\n  }\n\n  // Give birth to (potentially) multiple offspring; return position of last placed.\n  // Triggers 'before repro' signal on parent (once) and 'offspring ready' on each offspring.\n  // Additional signal triggers occur in AddOrgAt.\n  template <typename ORG>\n  WorldPosition World<ORG>::DoBirth(const genome_t & mem, size_t parent_pos, size_t copy_count) {\n    before_repro_sig.Trigger(parent_pos);\n    WorldPosition pos;                                        // Position of each offspring placed.\n    for (size_t i = 0; i < copy_count; i++) {                 // Loop through offspring, adding each\n      Ptr<ORG> new_org = NewPtr<ORG>(mem);\n      offspring_ready_sig.Trigger(*new_org);\n      pos = fun_find_birth_pos(new_org, parent_pos);\n\n      if (pos.IsValid()) AddOrgAt(new_org, pos, parent_pos);  // If placement pos is valid, do so!\n      else new_org.Delete();                                  // Otherwise delete the organism.\n    }\n    return pos;\n  }\n\n  template<typename ORG>\n  void World<ORG>::SetRandom(Random & r) {\n    if (random_owner) random_ptr.Delete();\n    random_ptr = &r;\n    random_owner = false;\n  }\n\n  template<typename ORG>\n  void World<ORG>::NewRandom(int seed) {\n    if (random_owner) random_ptr.Delete();\n    random_ptr.New(seed);\n    random_owner = true;\n  }\n\n  // Get random *occupied* cell.\n  template<typename ORG>\n  size_t World<ORG>::GetRandomOrgID() {\n    emp_assert(num_orgs > 0); // Make sure it's possible to find an organism!\n    size_t pos = random_ptr->GetUInt(0, pop.size());\n    while (pop[pos] == nullptr) pos = random_ptr->GetUInt(0, pop.size());\n    return pos;\n  }\n\n  // Find ALL cell IDs the return true in the filter.\n  template<typename ORG>\n  emp::vector<size_t> World<ORG>::FindCellIDs(const std::function<bool(ORG*)> & filter) {\n    emp::vector<size_t> valid_IDs(0);\n    for (size_t i = 0; i < pop.size(); i++) {\n      if (filter(pop[i].Raw())) valid_IDs.push_back(i);\n    }\n    return valid_IDs;\n  }\n\n  // Run population through a bottleneck to (probably) shrink it.\n  template<typename ORG>\n  void World<ORG>::DoBottleneck(const size_t new_size, bool choose_random) {\n    if (new_size >= num_orgs) return;  // No bottleneck needed!\n\n    if (is_space_structured || is_pheno_structured) {\n      // @CAO: Need to implement bottlenecks for structured populations.\n      emp_assert(false, \"Not implemented yet.\");\n    } else {\n      // If we are supposed to keep only random organisms, shuffle the beginning into place!\n      if (choose_random) {\n        for (size_t to = 0; to < new_size; to++) {\n          const size_t from = random_ptr->GetUInt(to, pop.size());\n          if (from == to) continue;\n          Swap(to, from);\n        }\n      }\n\n      // Clear out all of the organisms we are removing and shrink the population.\n      for (size_t i = new_size; i < pop.size(); ++i) RemoveOrgAt(i);\n      pop.resize(new_size);\n      ClearCache();\n    }\n  }\n\n  template<typename ORG>\n  void World<ORG>::SerialTransfer(const double keep_frac) {\n    emp_assert(keep_frac >= 0.0 && keep_frac <= 1.0, keep_frac);\n\n    // For a structured population, test position-by-position.\n    if (is_space_structured || is_pheno_structured) {\n      // Loop over the current population to clear out anyone who fails to be transferred.\n      const double remove_frac = 1.0 - keep_frac;\n      for (size_t i = 0; i < pop.size(); ++i) {\n        if (random_ptr->P(remove_frac)) {\n          RemoveOrgAt(i);\n          ClearCache(i);\n        }\n      }\n    }\n\n    // For an unstructured population, keep all living organisms at the beginning.\n    else {\n      size_t live_pos = 0;\n      for (size_t test_pos = 0; test_pos < pop.size(); test_pos++) {\n        // If this organism is kept, keep it compact with the others.\n        if (random_ptr->P(keep_frac)) {\n          Swap(live_pos, test_pos);\n          live_pos++;\n        }\n\n        // This organism didn't make the cut; kill it.\n        else RemoveOrgAt(test_pos);\n      }\n\n      // Reflect the new population size.\n      pop.resize(live_pos);\n      ClearCache();\n    }\n  }\n\n  template<typename ORG>\n  void World<ORG>::Print(std::ostream & os, const std::string & empty, const std::string & spacer) {\n    for (Ptr<ORG> org : pop) {\n      if (org) os << fun_print_org(*org, os);\n      else os << empty;\n      os << spacer;\n    }\n  }\n\n  template<typename ORG>\n  void World<ORG>::PrintOrgCounts(std::ostream & os) {\n    std::map<ORG,size_t> org_counts;\n    for (Ptr<ORG> org : pop) if (org) org_counts[*org] = 0;  // Initialize needed entries\n    for (Ptr<ORG> org : pop) if (org) org_counts[*org] += 1; // Count actual types.\n    for (auto x : org_counts) {\n      ORG cur_org = x.first;\n      fun_print_org(cur_org, os);\n      os << \" : \" << x.second << std::endl;\n    }\n  }\n\n  template<typename ORG>\n  void World<ORG>::PrintGrid(std::ostream& os,\n                             const std::string & empty, const std::string & spacer) {\n    emp_assert(pop_sizes.size() == 2);\n    const size_t size_x = pop_sizes[0];\n    const size_t size_y = pop_sizes[1];\n    for (size_t y=0; y < size_y; y++) {\n      for (size_t x = 0; x < size_x; x++) {\n        Ptr<ORG> org = GetOrgPtr(x+y*size_x);\n        if (org) fun_print_org(*org, os);\n        else os << empty;\n        os << spacer;\n      }\n      os << std::endl;\n    }\n  }\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2018\n *\n *  @file  math.h\n *  @brief Useful mathematical functions (that are constexpr when possible.)\n *  @note Status: BETA (though new functions are added frequently)\n */\n\n\n#ifndef EMP_MATH_H\n#define EMP_MATH_H\n\n#include <initializer_list>\n#include <algorithm>\n#include <cmath>\n\n#include \"../base/assert.h\"\n#include \"../meta/reflection.h\"\n#include \"const.h\"\n\nnamespace emp {\n\n  /// % is actually remainder; Mod is a proper modulus command that handles negative #'s correctly\n  inline constexpr int Mod(int in_val, int mod_val) {\n    emp_assert(mod_val != 0);\n    in_val %= mod_val;\n    return (in_val < 0) ? (in_val + mod_val) : in_val;\n  }\n\n  /// Regular Mod doesn't work on doubles.  Build one that does!\n  // @CAO Make constexpr?\n  inline double Mod(double in_val, double mod_val) {\n    emp_assert(mod_val != 0);\n    const double remain = std::remainder(in_val, mod_val);\n    return (remain < 0.0) ? (remain + mod_val) : remain;\n  }\n\n  /// Find the absolute value for any variable.\n  template <typename T> constexpr T Abs(T in) { return (in > 0) ? in : (-in); }\n\n  /// Run both min and max on a value to put it into a desired range.\n  template <typename TYPE> constexpr TYPE ToRange(const TYPE & value, const TYPE & in_min, const TYPE & in_max) {\n    emp_assert(in_min <= in_max);\n    return (value < in_min) ? in_min : ((value > in_max) ? in_max : value);\n  }\n\n  /// Min of only one element is that element itself!\n  template <typename T> constexpr T Min(T in1) { return in1; }\n\n  /// Min of multiple elements is solved recursively.\n  template <typename T, typename... Ts>\n  constexpr T Min(T in1, T in2, Ts... extras) {\n    T cur_result = Min(in2, extras...);\n    return (in1 < cur_result) ? in1 : cur_result;\n  }\n\n\n  /// Max of only one element is that element itself!\n  template <typename T> constexpr T Max(T in1) { return in1; }\n\n  /// Max of multiple elements is solved recursively.\n  template <typename T, typename... Ts>\n  constexpr T Max(T in1, T in2, Ts... extras) {\n    T cur_result = Max(in2, extras...);\n    return (in1 < cur_result) ? cur_result : in1;\n  }\n\n  /// MinRef works like Min, but never copies any inputs; always treats as references.\n  /// MinRef of only one element returns reference to that element itself!\n  template <typename T> constexpr const T & MinRef(const T& in1) { return in1; }\n\n  /// MinRef of multiple elements returns reference to minimum value.\n  template <typename T, typename... Ts>\n  constexpr const T & MinRef(const T& in1, const T& in2, const Ts&... extras) {\n    const T & cur_result = MinRef(in2, extras...);\n    return (in1 < cur_result) ? in1 : cur_result;\n  }\n\n\n  /// MaxRef works like Max, but never copies any inputs; always treats as references.\n  /// MaxRef of only one element returns reference to that element itself!\n  template <typename T> constexpr const T & MaxRef(const T& in1) { return in1; }\n\n  /// MaxRef of multiple elements returns reference to maximum value.\n  template <typename T, typename... Ts>\n  constexpr const T & MaxRef(const T& in1, const T& in2, const Ts&... extras) {\n    const T & cur_result = MaxRef(in2, extras...);\n    return (in1 < cur_result) ? cur_result : in1;\n  }\n\n\n  namespace internal {\n    // A compile-time log calculator for values [1,2)\n    static constexpr double Log2_base(double x) {\n      emp_assert(x > 0);\n      return log2_chart_1_2[(int)((x-1.0)*1024)];\n      // return InterpolateTable(log2_chart_1_2, x-1.0, 1024);\n    }\n\n    // A compile-time log calculator for values < 1\n    static constexpr double Log2_frac(double x) {\n      emp_assert(x > 0);\n      return (x >= 1.0) ? Log2_base(x) : (Log2_frac(x*2.0) - 1.0);\n    }\n\n    // A compile-time log calculator for values >= 2\n    static constexpr double Log2_pos(double x) {\n      emp_assert(x > 0);\n      emp_assert(x != INFINITY);\n      return (x < 2.0) ? Log2_base(x) : (Log2_pos(x/2.0) + 1.0);\n    }\n\n  }\n\n  /// @endcond\n\n  /// Compile-time log base 2 calculator.\n  static constexpr double Log2(double x) {\n    emp_assert(x > 0);\n    return (x < 1.0) ? internal::Log2_frac(x) : internal::Log2_pos(x);\n  }\n\n  /// Compile-time log calculator\n  static constexpr double Log(double x, double base=10.0) { return Log2(x) / Log2(base); }\n  /// Compile-time natural log calculator\n  static constexpr double Ln(double x) { return Log(x, emp::E); }   // Natural Log...\n  /// Compile-time log base 10 calculator.\n  static constexpr double Log10(double x) { return Log(x, 10.0); }\n\n  /// A simple function to square a value.\n  template <typename T>\n  static constexpr T Square(T val) { return val * val; }\n\n  // Pow helper functions.\n  namespace internal {\n    static constexpr double Pow2_lt1(double exp, int id=0) {\n      return (id==32) ? 1.0 :\n        ( (exp > 0.5) ? (pow2_chart_bits[id]*Pow2_lt1(exp*2.0-1.0,id+1)) : Pow2_lt1(exp*2.0,id+1) );\n    }\n\n    static constexpr double Pow2_impl(double exp) {\n      return (exp >= 1.0) ? (2.0*Pow2_impl(exp-1.0)) : Pow2_lt1(exp);\n    }\n  }\n\n  /// A fast (O(log p)) integral-power command.\n  template <typename T>\n  static constexpr type_if<T, std::is_integral> Pow(T base, T p) {\n    if (p <= 0) return 1;\n    if (p & 1) return base * Pow(base, p-1); // Odd exponent: strip one mulitple off and recurse.\n    return Square( Pow(base,p/2) );          // Even exponent: calc for half and square result.\n  }\n\n  /// A fast 2^x command.\n  static constexpr double Pow2(double exp) {\n    return (exp < 0.0) ? (1.0/internal::Pow2_impl(-exp)) : internal::Pow2_impl(exp);\n  }\n\n  /// A fast method for calculating exponents for int types.\n  template <typename TYPE>\n  static constexpr TYPE IntPow(TYPE base, TYPE exp) {\n    emp_assert(exp < 65536); // Set a crazy-high limit for exp to identify problems...\n    return exp < 1 ? 1 : (base * IntPow(base, exp-1));\n  }\n\n  /// A fast method for calculating exponents on doubles.\n  static constexpr double Pow(double base, double exp) {\n    // Normally, convert to a base of 2 and then use Pow2.\n    // If base is negative, we don't want to deal with imaginary numbers, so use IntPow.\n    return (base > 0) ? Pow2(Log2(base) * exp) : IntPow(base,exp);\n  }\n\n  // A fast (O(log p)) integer-power command.\n  // static constexpr int Pow(int base, int p) {\n  //   return (p <= 0) ? 1 : (base * Pow(base, p-1));\n  // }\n\n  /// A fast method of calculating e^x\n  static constexpr double Exp(double exp) {\n    return Pow2(Log2(emp::E) * exp);  // convert to a base of e.\n  }\n\n\n  /// A compile-time int-log calculator (aka, significant bits)\n  template <typename TYPE>\n  static constexpr int IntLog2(TYPE x) { return x <= 1 ? 0 : (IntLog2(x/2) + 1); }\n\n  /// A compile-time bit counter.\n  template <typename TYPE>\n  static constexpr int CountOnes(TYPE x) { return x == 0 ? 0 : (CountOnes(x/2) + (x&1)); }\n\n  /// Quick bit-mask generator for low bits.\n  template <typename TYPE>\n  static constexpr TYPE MaskLow(std::size_t num_bits) {\n    return (num_bits == 8*sizeof(TYPE)) ? ((TYPE)-1) : ((((TYPE)1) << num_bits) - 1);\n  }\n\n  /// Quick bit-mask generator for high bits.\n  template <typename TYPE>\n  static constexpr TYPE MaskHigh(std::size_t num_bits) {\n    return MaskLow<TYPE>(num_bits) << (8*sizeof(TYPE)-num_bits);\n  }\n\n  /// Return the minimum of three values.\n  template <typename T> constexpr const T & Min(const T& in1, const T& in2, const T& in3) {\n    return std::min(std::min(in1,in2), in3);\n  }\n\n  /// A version of Min that allows a variable number of inputs to be compared.\n  template <typename T> const T & Min(std::initializer_list<const T&> lst) {\n    emp_assert(lst.size > 0); // Nothing to return if nothing in the list!\n    auto min_found = lst.begin();\n    for (auto it = lst.begin()+1; it < lst.end(); it++) {\n      if (*it < *min_found) min_found = it;\n    }\n    return *min_found;\n  }\n\n  /// A version of Max that allows a variable number of inputs to be compared.\n  template <typename T> const T & Max(std::initializer_list<const T&> lst) {\n    emp_assert(lst.size > 0); // Nothing to return if nothing in the list!\n    auto max_found = lst.begin();\n    for (auto it = lst.begin()+1; it < lst.end(); it++) {\n      if (*it > *max_found) max_found = it;\n    }\n    return *max_found;\n  }\n\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  Canvas.h\n *  @brief Manage an HTML canvas object.\n *\n */\n\n\n#ifndef EMP_WEB_CANVAS_H\n#define EMP_WEB_CANVAS_H\n\n#include <string>\n\n#include \"../base/vector.h\"\n#include \"../geometry/Circle2D.h\"\n\n#include \"CanvasAction.h\"\n#include \"CanvasShape.h\"\n\nnamespace emp {\nnamespace web {\n\n  /// Manage an HTML Canvas object.\n  class Canvas : public internal::WidgetFacet<Canvas> {\n    friend class CanvasInfo;\n  protected:\n\n    class CanvasInfo : public internal::WidgetInfo {\n      friend Canvas;\n\n    protected:\n      double width;   ///< pixel width of the canvas.\n      double height;  ///< pixel height of the canvas.\n\n      emp::vector<CanvasAction *> actions;\n\n      CanvasInfo(const std::string & in_id=\"\") : internal::WidgetInfo(in_id) { ; }\n      CanvasInfo(const CanvasInfo &) = delete;               // No copies of INFO allowed\n      CanvasInfo & operator=(const CanvasInfo &) = delete;   // No copies of INFO allowed\n      virtual ~CanvasInfo() { ClearActions(); }\n\n      std::string GetTypeName() const override { return \"CanvasInfo\"; }\n\n      virtual void GetHTML(std::stringstream & HTML) override {\n        HTML.str(\"\");                                           // Clear the current text.\n        HTML << \"<canvas id=\\\"\" << id\n             << \"\\\" width=\\\"\" << width\n             << \"\\\" height=\\\"\" << height << \"\\\">\";\n        // @CAO We can include fallback content here for browsers that don't support canvas.\n        HTML << \"</canvas>\";\n      }\n\n      // Setup a canvas to be drawn on.\n      void TargetCanvas() {\n        EM_ASM_ARGS({\n            var cname = Pointer_stringify($0);\n            var canvas = document.getElementById(cname);\n            emp_i.ctx = canvas.getContext('2d');\n        }, id.c_str());\n      }\n\n      // Trigger any JS code needed on re-draw.\n      void TriggerJS() override {\n        if (state == Widget::ACTIVE) {            // Only draw on active canvases\n          TargetCanvas();                         // Prepare the canvas for drawing\n          for (auto & a : actions) a->Apply();    // Run all of the actions\n        }\n      }\n\n      void AddAction(CanvasAction * new_action) {\n        if (state == Widget::ACTIVE) {    // Only draw on active canvases\n          TargetCanvas();                 // Prepare the canvas for drawing\n          new_action->Apply();            // Draw the current action\n        }\n        actions.push_back(new_action);    // Store the current action.\n      }\n\n      void ClearActions() {\n        for (auto * a : actions) delete a;\n        actions.resize(0);\n      }\n\n\n    public:\n      virtual std::string GetType() override { return \"web::CanvasInfo\"; }\n\n    };  // End of ButtonInfo definition.\n\n\n    // Get a properly cast version of indo.\n    CanvasInfo * Info() { return (CanvasInfo *) info; }\n    const CanvasInfo * Info() const { return (CanvasInfo *) info; }\n\n    Canvas(CanvasInfo * in_info) : WidgetFacet(in_info) { ; }\n\n  public:\n    /// Create a new canvas with the specified size and optional HTML identifier.\n    Canvas(double w, double h, const std::string & in_id=\"\")\n      : WidgetFacet(in_id)\n    {\n      info = new CanvasInfo(in_id);\n      Info()->width = w;\n      Info()->height = h;\n    }\n\n    /// Link to an existing canvas.\n    Canvas(const Canvas & in) : WidgetFacet(in) { ; }\n    Canvas(const Widget & in) : WidgetFacet(in) { emp_assert(in.IsCanvas()); }\n    Canvas() { ; }\n    virtual ~Canvas() { ; }\n\n    using INFO_TYPE = CanvasInfo;\n\n    double GetWidth() const { return Info()->width; }    ///< Get the pixel width of this Canvas.\n    double GetHeight() const { return Info()->height; }  ///< Get the pixel height of this Canvas.\n\n    void SetWidth(double w) { Info()->width=w; }         ///< Set a new width for this Canvas.\n    void SetHeight(double h) { Info()->height=h; }       ///< Set a new height for this Canvas.\n\n    /// Set Canvas size.\n    void SetSize(double w, double h) { Info()->width=w; Info()->height=h; }\n\n    /// Add a Circle to this canvas; provide constructor for the CanvasCircle with a position and radius\n    /// as well as optional face color, line color, and line width.\n    template <typename... Ts>\n    Canvas & Circle(Point center, double _r, Ts &&... vals) {\n      Info()->AddAction( new CanvasCircle(emp::Circle(center, _r), std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    template <typename... Ts>\n    Canvas & Circle(double _x, double _y, double _r, Ts &&... vals) {\n      Info()->AddAction( new CanvasCircle(emp::Circle(_x, _y, _r), std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    /// Add a Rectangle to this canvas at x,y with width w and heigh h.  Optional face color and\n    /// line color.\n    template <typename... Ts>\n    Canvas & Rect(Point corner, double w, double h, Ts &&... vals) {\n      Info()->AddAction( new CanvasRect(corner, w, h, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    template <typename... Ts>\n    Canvas & Rect(double x, double y, double w, double h, Ts &&... vals) {\n      Info()->AddAction( new CanvasRect(x, y, w, h, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    /// Add an Image to this canvas at x,y with width w and heigh h.\n    template <typename... Ts>\n    Canvas & Image(const emp::RawImage & image, Point corner, Ts &&... vals) {\n      Info()->AddAction( new CanvasImage(image, corner, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    template <typename... Ts>\n    Canvas & Image(const emp::RawImage & image, double x, double y, Ts &&... vals) {\n      Info()->AddAction( new CanvasImage(image, x, y, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n\n    /// Add a Line from x1,y1 to x2,y2.  Optional face color and line color.\n    template <typename... Ts>\n    Canvas & Line(double x1, double y1, double x2, double y2, Ts &&... vals) {\n      Info()->AddAction( new CanvasLine(x1, y1, x2, y2, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    template <typename... Ts>\n    Canvas & Line(emp::Point p1, emp::Point p2, Ts &&... vals) {\n      Info()->AddAction( new CanvasLine(p1, p2, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    /// Add a Line from x1,y1 to x2,y2.  Optional face color and line color.\n    template <typename... Ts>\n    Canvas & MultiLine(emp::Point p1, const emp::vector<emp::Point> & points, Ts &&... vals) {\n      Info()->AddAction( new CanvasMultiLine(p1, points, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    /// Add a string to this canvas at x,y with specified text.  Optional face color and\n    /// line color.\n    template <typename... Ts>\n    Canvas & Text(emp::Point p, Ts &&... vals) {\n      Info()->AddAction( new CanvasText(p, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    template <typename... Ts>\n    Canvas & Text(double x, double y, Ts &&... vals) {\n      Info()->AddAction( new CanvasText(x, y, std::forward<Ts>(vals)...) );\n      return *this;\n    }\n\n    /// Add a string to this canvas centered at x,y with specified text.  Optional face color and\n    /// line color.\n    template <typename... Ts>\n    Canvas & CenterText(emp::Point p, Ts &&... vals) {\n      auto * ctext = new CanvasText(p, std::forward<Ts>(vals)...);\n      ctext->Center();\n      Info()->AddAction( ctext );\n      return *this;\n    }\n\n    template <typename... Ts>\n    Canvas & CenterText(double x, double y, Ts &&... vals) {\n      auto * ctext = new CanvasText({x, y}, std::forward<Ts>(vals)...);\n      ctext->Center();\n      Info()->AddAction( ctext );\n      return *this;\n    }\n\n    /// Update the default font for text.\n    Canvas & Font(const std::string font) {\n      Info()->AddAction( new CanvasFont(font) );\n      return *this;\n    }\n\n    /// Draw a circle onto this canvas.\n    Canvas & Draw(const emp::Circle & circle,\n                  const std::string & fc=\"\", const std::string & lc=\"\") {\n      Info()->AddAction( new CanvasCircle(circle, fc, lc) );\n      return *this;\n    }\n\n    /// Draw an arbitrary shape onto this canvas.\n    Canvas & Draw(const CanvasShape & shape) {\n      Info()->AddAction( shape.Clone() );\n      return *this;\n    }\n\n    /// Change the default stroke color.\n    Canvas & StrokeColor(std::string c) {\n      Info()->AddAction( new CanvasStrokeColor(c) );\n      return *this;\n    }\n\n    /// Rotate the entire canvas.\n    Canvas & Rotate(double angle) {\n      Info()->AddAction( new CanvasRotate(angle) );\n      return *this;\n    }\n\n    /// Clear everything off of this canvas.\n    Canvas & Clear() {\n      Info()->ClearActions();\n      Info()->AddAction( new CanvasClearRect({0,0}, GetWidth(), GetHeight()) );\n      return *this;\n    }\n\n    /// Clear to a specific background color.\n    Canvas & Clear(const std::string & bg_color) {\n      Info()->ClearActions();\n      Info()->AddAction( new CanvasClearRect({0,0}, GetWidth(), GetHeight()) );\n      Info()->AddAction( new CanvasRect({0,0}, GetWidth(), GetHeight(), bg_color, \"\") );\n      return *this;\n    }\n\n  };\n\n\n}\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2017\n *\n *  @file  AvidaGP.h\n *  @brief This is a simple, efficient CPU for and applied version of Avida.\n *\n *  @todo Should we save a copy of the original genome?  (or create a new \"memory\" member)\n *  @todo We should clean up how we handle scope; the root scope is zero, so the arg-based\n *    scopes are 1-16 (or however many).  Right now we increment the value in various places\n *    and should be more consistent.\n *  @todo How should Avida-GP organisms take an action?  Options include sending ALL outputs and\n *    picking the maximum field; sending a single output and using its value; having specialized\n *    commands...\n */\n\n\n#ifndef EMP_AVIDA_GP_H\n#define EMP_AVIDA_GP_H\n\n#include <fstream>\n#include <iostream>\n#include <map>\n\n#include \"../base/array.h\"\n#include \"../base/Ptr.h\"\n#include \"../base/vector.h\"\n#include \"../tools/File.h\"\n#include \"../tools/map_utils.h\"\n#include \"../tools/Random.h\"\n#include \"../tools/string_utils.h\"\n\n#include \"AvidaCPU_InstLib.h\"\n\nnamespace emp {\n\n  template <typename HARDWARE>\n  class AvidaCPU_Base {\n  public:\n    static constexpr size_t CPU_SIZE = 16;   // Num arg values (for regs, stacks, functions, etc)\n    static constexpr size_t INST_ARGS = 3;   // Max num args per instruction.\n    static constexpr size_t STACK_CAP = 16;  // Max size for stacks.\n\n    struct Instruction;\n    struct Genome;\n\n    using this_t = AvidaCPU_Base<HARDWARE>;\n    using hardware_t = HARDWARE;\n    using inst_t = Instruction;\n    using genome_t = Genome;\n    using arg_t = size_t;             // All arguments are non-negative ints (indecies!)\n\n    using inst_lib_t = AvidaCPU_InstLib<hardware_t, arg_t, INST_ARGS>;\n    using stack_t = emp::vector<double>;\n    using arg_set_t = emp::array<arg_t, INST_ARGS>;\n\n    struct Instruction {\n      size_t id;\n      arg_set_t args;\n\n      Instruction(size_t _id=0, size_t a0=0, size_t a1=0, size_t a2=0)\n\t      : id(_id), args() { args[0] = a0; args[1] = a1; args[2] = a2; }\n      Instruction(const Instruction &) = default;\n      Instruction(Instruction &&) = default;\n\n      Instruction & operator=(const Instruction &) = default;\n      Instruction & operator=(Instruction &&) = default;\n      bool operator<(const Instruction & other) const {\n          return std::tie(id, args) < std::tie(other.id, other.args);\n      }\n\n      void Set(size_t _id, size_t _a0=0, size_t _a1=0, size_t _a2=0)\n\t      { id = _id; args[0] = _a0; args[1] = _a1; args[2] = _a2; }\n\n      bool operator==(const Instruction & in) const { return id == in.id && args == in.args; }\n    };\n\n    struct Genome {\n      using sequence_t = emp::vector<Instruction>;\n\n      Ptr<const inst_lib_t> inst_lib;\n      sequence_t sequence;\n\n      Genome() = default;\n      Genome(Ptr<const inst_lib_t> _inst_lib, const sequence_t & _seq=sequence_t(0))\n        : inst_lib(_inst_lib), sequence(_seq) { ; }\n      Genome(const inst_lib_t & _inst_lib, const sequence_t & _seq=sequence_t(0))\n        : inst_lib(&_inst_lib), sequence(_seq) { ; }\n      Genome(const Genome &) = default;\n      Genome(Genome &&) = default;\n      ~Genome() { ; }\n\n      size_t Hash() const {\n        std::size_t seed = sequence.size();\n        for(auto& i : sequence) {\n          seed ^= i.id + 0x9e3779b9 + (seed << 6) + (seed >> 2);\n        }\n        return seed;\n      }\n      struct hash_t { size_t operator()(const Genome & g) const { return g.Hash(); } };\n\n\n      Genome & operator=(const Genome &) = default;\n      Genome & operator=(Genome &&) = default;\n\n      bool operator==(const Genome& other) const { return sequence == other.sequence; }\n      bool operator!=(const Genome& other) const { return sequence != other.sequence; }\n      bool operator< (const Genome& other) const { return sequence <  other.sequence; }\n      bool operator<=(const Genome& other) const { return sequence <= other.sequence; }\n      bool operator> (const Genome& other) const { return sequence >  other.sequence; }\n      bool operator>=(const Genome& other) const { return sequence >= other.sequence; }\n    };\n\n    struct ScopeInfo {\n      size_t scope;\n      ScopeType type;\n      size_t start_pos;\n\n      ScopeInfo() : scope(0), type(ScopeType::BASIC), start_pos(0) { ; }\n      ScopeInfo(size_t _s, ScopeType _t, size_t _p) : scope(_s), type(_t), start_pos(_p) { ; }\n    };\n\n    struct RegBackup {\n      size_t scope;\n      size_t reg_id;\n      double value;\n\n      RegBackup() : scope(0), reg_id(0), value(0.0) { ; }\n      RegBackup(size_t _s, size_t _r, double _v) : scope(_s), reg_id(_r), value(_v) { ; }\n    };\n\n    // Virtual CPU Components!\n    genome_t genome;\n    emp::array<double, CPU_SIZE> regs;       // Registers used in the hardware.\n    std::unordered_map<int, double> inputs;  // Map of all available inputs (position -> value)\n    std::unordered_map<int, double> outputs; // Map of all outputs (position -> value)\n    emp::array< stack_t, CPU_SIZE > stacks;  // Stacks for long-term storage.\n    emp::array< int, CPU_SIZE > fun_starts;  // Postions where functions being in genome.\n\n    size_t inst_ptr;\n    emp::vector<ScopeInfo> scope_stack;\n    emp::vector<RegBackup> reg_stack;\n    emp::vector<size_t> call_stack;\n\n    size_t errors;\n\n    // A simple way of recording which traits a CPU has demonstrated, and at what qaulity.\n    emp::vector<double> traits;\n\n    // Run every time we need to exit the current scope.\n    void ExitScope() {\n      emp_assert(scope_stack.size() > 1, CurScope());\n      emp_assert(scope_stack.size() <= CPU_SIZE, CurScope());\n\n      // Restore any backed-up registers from this scope...\n      while (reg_stack.size() && reg_stack.back().scope == CurScope()) {\n        regs[reg_stack.back().reg_id] = reg_stack.back().value;\n        reg_stack.pop_back();\n      }\n\n      // Remove the inner-most scope.\n      scope_stack.pop_back();\n    }\n\n    // This function is run every time scope changed (if, while, scope instructions, etc.)\n    // If we are moving to an outer scope (lower value) we need to close the scope we are in,\n    // potentially continuing with a loop.\n    bool UpdateScope(size_t new_scope, ScopeType type=ScopeType::BASIC) {\n      const size_t cur_scope = CurScope();\n      new_scope++;                           // Scopes are stored as one higher than regs (Outer is 0)\n      // Test if we are entering a deeper scope.\n      if (new_scope > cur_scope) {\n        scope_stack.emplace_back(new_scope, type, inst_ptr);\n        return true;\n      }\n\n      // Otherwise we are potentially exiting the current scope.  Loop back instead?\n      if (CurScopeType() == ScopeType::LOOP) {\n        inst_ptr = scope_stack.back().start_pos;  // Move back to the beginning of the loop.\n        ExitScope();                              // Clear former scope\n        ProcessInst( genome.sequence[inst_ptr] ); // Process loops start again.\n        return false;                             // We did NOT enter the new scope.\n      }\n\n      // Or are we exiting a function?\n      if (CurScopeType() == ScopeType::FUNCTION) {\n        // @CAO Make sure we exit multiple scopes if needed to close the function...\n        inst_ptr = call_stack.back();             // Return from the function call.\n        if (inst_ptr >= genome.sequence.size()) { // Test if call occured at end of genome.\n          ResetIP();                              // ...and reset to the begnning if so.\n        } else {\n          call_stack.pop_back();                  // Clear the return position from the call stack.\n          ExitScope();                            // Leave the function scope.\n        }\n        ProcessInst( genome.sequence[inst_ptr] ); // Process the new instruction instead.\n        return false;                             // We did NOT enter the new scope.\n      }\n\n      // If we made it here, we must simply exit the current scope and test again.\n      ExitScope();\n\n      return UpdateScope(new_scope, type);\n    }\n\n    // This function fast-forwards to the end of the specified scope.\n    // NOTE: Bypass scope always drops out of the innermost scope no matter the arg provided.\n    void BypassScope(size_t scope) {\n      scope++;                           // Scopes are stored as one higher than regs (Outer is 0)\n      if (CurScope() < scope) return;    // Only continue if break is relevant for current scope.\n\n      ExitScope();\n      while (inst_ptr+1 < genome.sequence.size()) {\n        inst_ptr++;\n        const size_t test_scope = InstScope(genome.sequence[inst_ptr]);\n\n        // If this instruction sets the scope AND it's outside the one we want to end, stop here!\n        if (test_scope && test_scope <= scope) {\n          inst_ptr--;\n          break;\n        }\n      }\n    }\n\n  public:\n    /// Create a new AvidaCPU seeding it with a genome.\n    AvidaCPU_Base(const genome_t & in_genome)\n      : genome(in_genome), regs(), inputs(), outputs(), stacks(), fun_starts()\n      , inst_ptr(0), scope_stack(), reg_stack(), call_stack(), errors(0), traits()\n    {\n      scope_stack.emplace_back(0, ScopeType::ROOT, 0);  // Initial scope.\n      for (size_t i = 0; i < CPU_SIZE; i++) {\n        regs[i] = (double) i;\n        fun_starts[i] = -1;\n      }\n    }\n\n    /// Create a default AvidaCPU (no genome sequence, default instruction set)\n    AvidaCPU_Base() : AvidaCPU_Base(Genome(inst_lib_t::DefaultInstLib())) { ; }\n\n    /// Create an AvidaCPU with a specified instruction set (but no genome sequence)\n    AvidaCPU_Base(Ptr<const inst_lib_t> inst_lib) : AvidaCPU_Base(Genome(inst_lib)) { ; }\n    AvidaCPU_Base(const inst_lib_t & inst_lib) : AvidaCPU_Base(Genome(&inst_lib)) { ; }\n\n    /// Copy constructor\n    AvidaCPU_Base(const AvidaCPU_Base &) = default;\n\n    /// Move constructor\n    AvidaCPU_Base(AvidaCPU_Base &&) = default;\n\n    /// Destructor\n    virtual ~AvidaCPU_Base() { ; }\n\n    bool operator<(const this_t & other) const {\n      return genome < other.genome;\n    }\n\n    /// Reset the entire CPU to a starting state, without a genome.\n    void Reset() {\n      genome.sequence.resize(0);  // Clear out genome\n      traits.resize(0);           // Clear out traits\n      ResetHardware();            // Reset the full hardware\n    }\n\n    /// Reset just the CPU hardware, but keep the genome and traits.\n    virtual void ResetHardware() {\n      // Initialize registers to their posision.  So Reg0 = 0 and Reg11 = 11.\n      for (size_t i = 0; i < CPU_SIZE; i++) {\n        regs[i] = (double) i;\n        inputs.clear();\n        outputs.clear();\n        stacks[i].resize(0);\n        fun_starts[i] = -1;\n      }\n      inst_ptr = 0;           // Move IP back to beginning\n      scope_stack.resize(1);  // Reset to outermost scope.\n      reg_stack.resize(0);    // Clear saved registers.\n      call_stack.resize(0);   // Clear call history.\n      errors = 0;             // Clear all errors.\n     }\n\n    /// Reset the instruction pointer to the beginning of the genome AND reset scope.\n    void ResetIP() {\n      inst_ptr = 0;\n      while (scope_stack.size() > 1) ExitScope();  // Forcibly exit all scopes except root.\n      // Restore all remaining backed-up registers (likely backed up in outer-most scope).\n      while (reg_stack.size()) {\n        regs[reg_stack.back().reg_id] = reg_stack.back().value;\n        reg_stack.pop_back();\n      }\n      call_stack.resize(0);\n    }\n\n    // Accessors\n    Ptr<const inst_lib_t> GetInstLib() const { return genome.inst_lib; }\n    inst_t GetInst(size_t pos) const { return genome.sequence[pos]; }\n    const genome_t & GetGenome() const { return genome; }\n    const size_t GetSize() const { return genome.sequence.size(); }\n    double GetReg(size_t id) const { return regs[id]; }\n    double GetInput(int id) const { return Find(inputs, id, 0.0); }\n    const std::unordered_map<int,double> & GetInputs() const { return inputs; }\n    size_t GetNumInputs() const { return inputs.size(); }\n    double GetOutput(int id) const { return Find(outputs, id, 0.0); }\n    const std::unordered_map<int,double> & GetOutputs() const { return outputs; }\n    size_t GetNumOutputs() const { return outputs.size(); }\n    const stack_t & GetStack(size_t id) const { return stacks[id]; }\n    int GetFunStart(size_t id) const { return fun_starts[id]; }\n    size_t GetIP() const { return inst_ptr; }\n    emp::vector<ScopeInfo> GetScopeStack() const { return scope_stack; }\n    size_t CurScope() const { return scope_stack.back().scope; }\n    ScopeType CurScopeType() const { return scope_stack.back().type; }\n    ScopeType GetScopeType(size_t id) { return genome.inst_lib->GetScopeType(id); }\n    emp::vector<RegBackup> GetRegStack() const { return reg_stack; }\n    emp::vector<size_t> GetCallStack() const { return call_stack; }\n    size_t GetNumErrors() const { return errors; }\n    double GetTrait(size_t id) const { return traits[id]; }\n    const emp::vector<double> &  GetTraits() { return traits; }\n    size_t GetNumTraits() const { return traits.size(); }\n\n    void SetInst(size_t pos, const inst_t & inst) { genome.sequence[pos] = inst; }\n    void SetInst(size_t pos, size_t id, size_t a0=0, size_t a1=0, size_t a2=0) {\n      genome.sequence[pos].Set(id, a0, a1, a2);\n    }\n    void SetGenome(const genome_t & g) { genome = g; }\n    void SetReg(size_t id, double val) { regs[id] = val; }\n    void SetInput(int input_id, double value) { inputs[input_id] = value; }\n    void SetInputs(const std::unordered_map<int,double> & vals) { inputs = vals; }\n    void SetInputs(std::unordered_map<int,double> && vals) { inputs = std::move(vals); }\n    void SetOutput(int output_id, double value) { outputs[output_id] = value; }\n    void SetOutputs(const std::unordered_map<int,double> & vals) { outputs = vals; }\n    void SetOutputs(std::unordered_map<int,double> && vals) { outputs = std::move(vals); }\n    double PopStack(size_t id) {\n      if (stacks[id].size() == 0) return 0.0;\n      double out = stacks[id].back();\n      stacks[id].pop_back();\n      return out;\n    }\n    void PushStack(size_t id, double value) {\n      if (stacks[id].size() >= STACK_CAP) return;\n      stacks[id].push_back(value);\n    }\n    void SetFunStart(size_t id, int value) { fun_starts[id] = value; }\n    void SetIP(size_t pos) { inst_ptr = pos; }\n    void PushRegInfo(size_t scope_id, size_t reg_id) {\n      reg_stack.emplace_back(scope_id, reg_id, regs[reg_id]);\n    }\n    void PushCallInfo(size_t pos) { call_stack.push_back(pos); }\n    void IncErrors() { errors++; }\n    void SetTrait(size_t id, double val) {\n      if (id >= traits.size()) traits.resize(id+1, 0.0);\n      traits[id] = val;\n    }\n    void PushTrait(double val) { traits.push_back(val); }\n\n    inst_t GetRandomInst(Random & rand) {\n      return inst_t(rand.GetUInt(genome.inst_lib->GetSize()),\n                    rand.GetUInt(CPU_SIZE), rand.GetUInt(CPU_SIZE), rand.GetUInt(CPU_SIZE));\n    }\n\n    void RandomizeInst(size_t pos, Random & rand) { SetInst(pos, GetRandomInst(rand) ); }\n\n    void PushInst(size_t id, size_t a0=0, size_t a1=0, size_t a2=0) {\n      genome.sequence.emplace_back(id, a0, a1, a2);\n    }\n    void PushInst(const std::string & name, size_t a0=0, size_t a1=0, size_t a2=0) {\n      size_t id = genome.inst_lib->GetID(name);\n      genome.sequence.emplace_back(id, a0, a1, a2);\n    }\n    void PushInst(const Instruction & inst) { genome.sequence.emplace_back(inst); }\n    void PushInst(Instruction && inst) { genome.sequence.emplace_back(inst); }\n    void PushInstString(std::string info) {\n      size_t id = genome.inst_lib->GetID( string_pop(info) );\n      size_t arg1 = info.size() ? from_string<size_t>(string_pop(info)) : 0;\n      size_t arg2 = info.size() ? from_string<size_t>(string_pop(info)) : 0;\n      size_t arg3 = info.size() ? from_string<size_t>(string_pop(info)) : 0;\n      PushInst(id, arg1, arg2, arg3);\n    }\n    void PushRandom(Random & rand, const size_t count=1) {\n      for (size_t i = 0; i < count; i++) {\n        PushInst(GetRandomInst(rand));\n      }\n    }\n\n    // Loading whole genomes.\n    bool Load(std::istream & input);\n    bool Load(const std::string & filename) { std::ifstream is(filename); return Load(is); }\n\n    /// Process a specified instruction, provided by the caller.\n    void ProcessInst(const inst_t & inst) { genome.inst_lib->ProcessInst(ToPtr(this), inst); }\n\n    /// Determine the scope associated with a particular instruction.\n    size_t InstScope(const inst_t & inst) const;\n\n    /// Process the NEXT instruction pointed to be the instruction pointer\n    void SingleProcess() {\n      emp_assert(genome.sequence.size() > 0);  // A genome must exist to be processed.\n      if (inst_ptr >= genome.sequence.size()) ResetIP();\n      genome.inst_lib->ProcessInst(ToPtr(this), genome.sequence[inst_ptr]);\n      inst_ptr++;\n    }\n\n    /// Process the next SERIES of instructions, directed by the instruction pointer.\n    void Process(size_t num_inst) { for (size_t i = 0; i < num_inst; i++) SingleProcess(); }\n\n    /// Print out a single instruction, with its arguments.\n    void PrintInst(const inst_t & inst, std::ostream & os=std::cout) const;\n\n    /// Print out this program.\n    void PrintGenome(std::ostream & os=std::cout) const;\n    void PrintGenome(const std::string & filename) const;\n\n    /// Figure out which instruction is going to actually be run next SingleProcess()\n    size_t PredictNextInst() const;\n\n    /// Print out the state of the virtual CPU.\n    void PrintState(std::ostream & os=std::cout) const;\n\n    /// Trace the instructions being exectured, with full CPU details.\n    void Trace(size_t num_inst, std::ostream & os=std::cout) {\n      for (size_t i = 0; i < num_inst; i++) { PrintState(os); SingleProcess(); }\n    }\n    void Trace(size_t num_inst, const std::string & filename) {\n      std::ofstream of(filename);\n      Trace(num_inst, of);\n      of.close();\n    }\n\n  };\n\n  template <typename HARDWARE>\n  bool AvidaCPU_Base<HARDWARE>::Load(std::istream & input) {\n    File file(input);\n    file.RemoveComments(\"--\");  // Remove all comments beginning with -- (including --> and ----)\n    file.CompressWhitespace();  // Trim down remaining whitespace.\n    file.Apply( [this](std::string & info){ PushInstString(info); } );\n    return true;\n  }\n\n  template <typename HARDWARE>\n  size_t AvidaCPU_Base<HARDWARE>::InstScope(const typename AvidaCPU_Base<HARDWARE>::inst_t & inst) const {\n    if (genome.inst_lib->GetScopeType(inst.id) == ScopeType::NONE) return 0;\n    return inst.args[ genome.inst_lib->GetScopeArg(inst.id) ] + 1;\n  }\n\n  template <typename HARDWARE>\n  void AvidaCPU_Base<HARDWARE>::PrintInst(const inst_t & inst, std::ostream & os) const {\n    os << genome.inst_lib->GetName(inst.id);\n    const size_t num_args = genome.inst_lib->GetNumArgs(inst.id);\n    for (size_t i = 0; i < num_args; i++) {\n      os << ' ' << inst.args[i];\n    }\n  }\n\n  template <typename HARDWARE>\n  void AvidaCPU_Base<HARDWARE>::PrintGenome(std::ostream & os) const {\n    size_t cur_scope = 0;\n\n    for (const inst_t & inst : genome.sequence) {\n      size_t new_scope = InstScope(inst);\n\n      if (new_scope) {\n        if (new_scope == cur_scope) {\n          for (size_t i = 0; i < cur_scope; i++) os << ' ';\n          os << \"----\\n\";\n        }\n        if (new_scope < cur_scope) {\n          cur_scope = new_scope-1;\n        }\n      }\n\n      for (size_t i = 0; i < cur_scope; i++) os << ' ';\n      PrintInst(inst, os);\n      if (new_scope) {\n        if (new_scope > cur_scope) os << \" --> \";\n        cur_scope = new_scope;\n      }\n      os << '\\n';\n    }\n  }\n\n  template <typename HARDWARE>\n  void AvidaCPU_Base<HARDWARE>::PrintGenome(const std::string & filename) const {\n    std::ofstream of(filename);\n    PrintGenome(of);\n    of.close();\n  }\n\n  template <typename HARDWARE>\n  size_t AvidaCPU_Base<HARDWARE>::PredictNextInst() const {\n    // Determine if we are changing scope.\n    size_t new_scope = CPU_SIZE+1;  // Default to invalid scope.\n    if (inst_ptr >= genome.sequence.size()) new_scope = 0;\n    else {\n      size_t inst_scope = InstScope(genome.sequence[inst_ptr]);\n      if (inst_scope) new_scope = inst_scope;\n    }\n\n    // If we are not changing scope OR we are going to a deeper scope, execute next!\n    if (new_scope > CPU_SIZE || new_scope > CurScope()) return inst_ptr;\n\n    // If we are at the end of a loop, assume we will jump back to the beginning.\n    if (CurScopeType() == ScopeType::LOOP) {\n      return scope_stack.back().start_pos;\n    }\n\n    // If we are at the end of a function, assume we will jump back to the call.\n    if (CurScopeType() == ScopeType::FUNCTION) {\n      size_t next_pos = call_stack.back();\n      if (next_pos >= genome.sequence.size()) next_pos = 0;\n      return next_pos;\n    }\n\n    // If we have run past the end of the genome, we will start over.\n    if (inst_ptr >= genome.sequence.size()) return 0;\n\n    // Otherwise, we exit the scope normally.\n    return inst_ptr;\n  }\n\n  template <typename HARDWARE>\n  void AvidaCPU_Base<HARDWARE>::PrintState(std::ostream & os) const {\n    size_t next_inst = PredictNextInst();\n\n    os << \" REGS: \";\n    for (size_t i = 0; i < CPU_SIZE; i++) os << \"[\" << regs[i] << \"] \";\n    os << \"\\n INPUTS: \";\n    // for (size_t i = 0; i < CPU_SIZE; i++) os << \"[\" << Find(inputs, (int)i, 0.0) << \"] \";\n    for (auto & x : inputs) os << \"[\" << x.first << \",\" << x.second << \"] \";\n    os << \"\\n OUTPUTS: \";\n    //for (size_t i = 0; i < CPU_SIZE; i++) os << \"[\" << Find(outputs, (int)i, 0.0) << \"] \";\n    for (auto & x : outputs) os << \"[\" << x.first << \",\" << x.second << \"] \";\n    os << std::endl;\n\n    os << \"IP:\" << inst_ptr;\n    if (inst_ptr != next_inst) os << \"(-> \" << next_inst << \")\";\n    os << \" scope:\" << CurScope()\n       << \" (\";\n    if (next_inst < genome.sequence.size()) { // For interpreter mode\n        PrintInst(genome.sequence[next_inst], os);\n    }\n    os << \")\"\n       << \" errors: \" << errors\n       << std::endl;\n\n    // @CAO Still need:\n    // emp::array< emp::vector<double>, CPU_SIZE > stacks;\n    // emp::array< int, CPU_SIZE> fun_starts;\n    // emp::vector<RegBackup> reg_stack;\n    // emp::vector<size_t> call_stack;\n  }\n\n  class AvidaGP : public AvidaCPU_Base<AvidaGP> {\n  public:\n    using base_t = AvidaCPU_Base<AvidaGP>;\n    using typename base_t::genome_t;\n    using typename base_t::inst_lib_t;\n\n    AvidaGP(const genome_t & in_genome) : AvidaCPU_Base(in_genome) { ; }\n    AvidaGP(Ptr<const inst_lib_t> inst_lib) : AvidaCPU_Base(Genome(inst_lib)) { ; }\n    AvidaGP(const inst_lib_t & inst_lib) : AvidaCPU_Base(Genome(&inst_lib)) { ; }\n\n    AvidaGP() = default;\n    AvidaGP(const AvidaGP &) = default;\n    AvidaGP(AvidaGP &&) = default;\n\n    virtual ~AvidaGP() { ; }\n  };\n}\n\n\n#endif\n","// -*- C++ -*-\n//===----------------------------------------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP__HASH_TABLE\n#define _LIBCPP__HASH_TABLE\n\n#include <__config>\n#include <initializer_list>\n#include <memory>\n#include <iterator>\n#include <algorithm>\n#include <cmath>\n#include <utility>\n\n#include <__undef_min_max>\n\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Key, class _Tp>\nunion __hash_value_type;\n#else\ntemplate <class _Key, class _Tp>\nstruct __hash_value_type;\n#endif\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Tp>\nstruct __is_hash_value_type_imp : false_type {};\n\ntemplate <class _Key, class _Value>\nstruct __is_hash_value_type_imp<__hash_value_type<_Key, _Value>> : true_type {};\n\ntemplate <class ..._Args>\nstruct __is_hash_value_type : false_type {};\n\ntemplate <class _One>\nstruct __is_hash_value_type<_One> : __is_hash_value_type_imp<typename __uncvref<_One>::type> {};\n#endif\n\n_LIBCPP_FUNC_VIS\nsize_t __next_prime(size_t __n);\n\ntemplate <class _NodePtr>\nstruct __hash_node_base\n{\n    typedef typename pointer_traits<_NodePtr>::element_type __node_type;\n    typedef __hash_node_base __first_node;\n    typedef typename __rebind_pointer<_NodePtr, __first_node>::type __node_base_pointer;\n    typedef _NodePtr __node_pointer;\n\n#if defined(_LIBCPP_ABI_FIX_UNORDERED_NODE_POINTER_UB)\n  typedef __node_base_pointer __next_pointer;\n#else\n  typedef typename conditional<\n      is_pointer<__node_pointer>::value,\n      __node_base_pointer,\n      __node_pointer>::type   __next_pointer;\n#endif\n\n    __next_pointer    __next_;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __next_pointer __ptr() _NOEXCEPT {\n        return static_cast<__next_pointer>(\n            pointer_traits<__node_base_pointer>::pointer_to(*this));\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __node_pointer __upcast() _NOEXCEPT {\n        return static_cast<__node_pointer>(\n            pointer_traits<__node_base_pointer>::pointer_to(*this));\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_t __hash() const _NOEXCEPT {\n        return static_cast<__node_type const&>(*this).__hash_;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY __hash_node_base() _NOEXCEPT : __next_(nullptr) {}\n};\n\ntemplate <class _Tp, class _VoidPtr>\nstruct __hash_node\n    : public __hash_node_base\n             <\n                 typename __rebind_pointer<_VoidPtr, __hash_node<_Tp, _VoidPtr> >::type\n             >\n{\n    typedef _Tp __node_value_type;\n\n    size_t            __hash_;\n    __node_value_type __value_;\n};\n\ninline _LIBCPP_INLINE_VISIBILITY\nbool\n__is_hash_power2(size_t __bc)\n{\n    return __bc > 2 && !(__bc & (__bc - 1));\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nsize_t\n__constrain_hash(size_t __h, size_t __bc)\n{\n    return !(__bc & (__bc - 1)) ? __h & (__bc - 1) :\n        (__h < __bc ? __h : __h % __bc);\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nsize_t\n__next_hash_pow2(size_t __n)\n{\n    return size_t(1) << (std::numeric_limits<size_t>::digits - __clz(__n-1));\n}\n\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc> class __hash_table;\n\ntemplate <class _NodePtr>      class _LIBCPP_TEMPLATE_VIS __hash_iterator;\ntemplate <class _ConstNodePtr> class _LIBCPP_TEMPLATE_VIS __hash_const_iterator;\ntemplate <class _NodePtr>      class _LIBCPP_TEMPLATE_VIS __hash_local_iterator;\ntemplate <class _ConstNodePtr> class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator;\ntemplate <class _HashIterator> class _LIBCPP_TEMPLATE_VIS __hash_map_iterator;\ntemplate <class _HashIterator> class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator;\n\ntemplate <class _Tp>\nstruct __hash_key_value_types {\n  static_assert(!is_reference<_Tp>::value && !is_const<_Tp>::value, \"\");\n  typedef _Tp key_type;\n  typedef _Tp __node_value_type;\n  typedef _Tp __container_value_type;\n  static const bool __is_map = false;\n\n  _LIBCPP_INLINE_VISIBILITY\n  static key_type const& __get_key(_Tp const& __v) {\n    return __v;\n  }\n  _LIBCPP_INLINE_VISIBILITY\n  static __container_value_type const& __get_value(__node_value_type const& __v) {\n    return __v;\n  }\n  _LIBCPP_INLINE_VISIBILITY\n  static __container_value_type* __get_ptr(__node_value_type& __n) {\n    return _VSTD::addressof(__n);\n  }\n#ifndef _LIBCPP_CXX03_LANG\n  _LIBCPP_INLINE_VISIBILITY\n  static  __container_value_type&& __move(__node_value_type& __v) {\n    return _VSTD::move(__v);\n  }\n#endif\n};\n\ntemplate <class _Key, class _Tp>\nstruct __hash_key_value_types<__hash_value_type<_Key, _Tp> > {\n  typedef _Key                                         key_type;\n  typedef _Tp                                          mapped_type;\n  typedef __hash_value_type<_Key, _Tp>                 __node_value_type;\n  typedef pair<const _Key, _Tp>                        __container_value_type;\n  typedef pair<_Key, _Tp>                              __nc_value_type;\n  typedef __container_value_type                       __map_value_type;\n  static const bool __is_map = true;\n\n  _LIBCPP_INLINE_VISIBILITY\n  static key_type const& __get_key(__container_value_type const& __v) {\n    return __v.first;\n  }\n\n  template <class _Up>\n  _LIBCPP_INLINE_VISIBILITY\n  static typename enable_if<__is_same_uncvref<_Up, __node_value_type>::value,\n      __container_value_type const&>::type\n  __get_value(_Up& __t) {\n    return __t.__cc;\n  }\n\n  template <class _Up>\n  _LIBCPP_INLINE_VISIBILITY\n  static typename enable_if<__is_same_uncvref<_Up, __container_value_type>::value,\n      __container_value_type const&>::type\n  __get_value(_Up& __t) {\n    return __t;\n  }\n\n  _LIBCPP_INLINE_VISIBILITY\n  static __container_value_type* __get_ptr(__node_value_type& __n) {\n    return _VSTD::addressof(__n.__cc);\n  }\n#ifndef _LIBCPP_CXX03_LANG\n  _LIBCPP_INLINE_VISIBILITY\n  static __nc_value_type&& __move(__node_value_type& __v) {\n    return _VSTD::move(__v.__nc);\n  }\n#endif\n\n};\n\ntemplate <class _Tp, class _AllocPtr, class _KVTypes = __hash_key_value_types<_Tp>,\n          bool = _KVTypes::__is_map>\nstruct __hash_map_pointer_types {};\n\ntemplate <class _Tp, class _AllocPtr, class _KVTypes>\nstruct __hash_map_pointer_types<_Tp, _AllocPtr, _KVTypes, true> {\n  typedef typename _KVTypes::__map_value_type   _Mv;\n  typedef typename __rebind_pointer<_AllocPtr, _Mv>::type\n                                                       __map_value_type_pointer;\n  typedef typename __rebind_pointer<_AllocPtr, const _Mv>::type\n                                                 __const_map_value_type_pointer;\n};\n\ntemplate <class _NodePtr, class _NodeT = typename pointer_traits<_NodePtr>::element_type>\nstruct __hash_node_types;\n\ntemplate <class _NodePtr, class _Tp, class _VoidPtr>\nstruct __hash_node_types<_NodePtr, __hash_node<_Tp, _VoidPtr> >\n    : public __hash_key_value_types<_Tp>, __hash_map_pointer_types<_Tp, _VoidPtr>\n\n{\n  typedef __hash_key_value_types<_Tp>           __base;\n\npublic:\n  typedef ptrdiff_t difference_type;\n  typedef size_t size_type;\n\n  typedef typename __rebind_pointer<_NodePtr, void>::type       __void_pointer;\n\n  typedef typename pointer_traits<_NodePtr>::element_type       __node_type;\n  typedef _NodePtr                                              __node_pointer;\n\n  typedef __hash_node_base<__node_pointer>                      __node_base_type;\n  typedef typename __rebind_pointer<_NodePtr, __node_base_type>::type\n                                                             __node_base_pointer;\n\n  typedef typename __node_base_type::__next_pointer          __next_pointer;\n\n  typedef _Tp                                                 __node_value_type;\n  typedef typename __rebind_pointer<_VoidPtr, __node_value_type>::type\n                                                      __node_value_type_pointer;\n  typedef typename __rebind_pointer<_VoidPtr, const __node_value_type>::type\n                                                __const_node_value_type_pointer;\n\nprivate:\n    static_assert(!is_const<__node_type>::value,\n                \"_NodePtr should never be a pointer to const\");\n    static_assert((is_same<typename pointer_traits<_VoidPtr>::element_type, void>::value),\n                  \"_VoidPtr does not point to unqualified void type\");\n    static_assert((is_same<typename __rebind_pointer<_VoidPtr, __node_type>::type,\n                          _NodePtr>::value), \"_VoidPtr does not rebind to _NodePtr.\");\n};\n\ntemplate <class _HashIterator>\nstruct __hash_node_types_from_iterator;\ntemplate <class _NodePtr>\nstruct __hash_node_types_from_iterator<__hash_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};\ntemplate <class _NodePtr>\nstruct __hash_node_types_from_iterator<__hash_const_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};\ntemplate <class _NodePtr>\nstruct __hash_node_types_from_iterator<__hash_local_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};\ntemplate <class _NodePtr>\nstruct __hash_node_types_from_iterator<__hash_const_local_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};\n\n\ntemplate <class _NodeValueTp, class _VoidPtr>\nstruct __make_hash_node_types {\n  typedef __hash_node<_NodeValueTp, _VoidPtr> _NodeTp;\n  typedef typename __rebind_pointer<_VoidPtr, _NodeTp>::type _NodePtr;\n  typedef __hash_node_types<_NodePtr> type;\n};\n\ntemplate <class _NodePtr>\nclass _LIBCPP_TEMPLATE_VIS __hash_iterator\n{\n    typedef __hash_node_types<_NodePtr> _NodeTypes;\n    typedef _NodePtr                            __node_pointer;\n    typedef typename _NodeTypes::__next_pointer __next_pointer;\n\n    __next_pointer            __node_;\n\npublic:\n    typedef forward_iterator_tag                           iterator_category;\n    typedef typename _NodeTypes::__node_value_type         value_type;\n    typedef typename _NodeTypes::difference_type           difference_type;\n    typedef value_type&                                    reference;\n    typedef typename _NodeTypes::__node_value_type_pointer pointer;\n\n    _LIBCPP_INLINE_VISIBILITY __hash_iterator() _NOEXCEPT : __node_(nullptr) {\n        _LIBCPP_DEBUG_MODE(__get_db()->__insert_i(this));\n    }\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_iterator(const __hash_iterator& __i)\n        : __node_(__i.__node_)\n    {\n        __get_db()->__iterator_copy(this, &__i);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    ~__hash_iterator()\n    {\n        __get_db()->__erase_i(this);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_iterator& operator=(const __hash_iterator& __i)\n    {\n        if (this != &__i)\n        {\n            __get_db()->__iterator_copy(this, &__i);\n            __node_ = __i.__node_;\n        }\n        return *this;\n    }\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\n    _LIBCPP_INLINE_VISIBILITY\n    reference operator*() const {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                             \"Attempted to dereference a non-dereferenceable unordered container iterator\");\n        return __node_->__upcast()->__value_;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    pointer operator->() const {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                           \"Attempted to dereference a non-dereferenceable unordered container iterator\");\n        return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__value_);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_iterator& operator++() {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                       \"Attempted to increment non-incrementable unordered container iterator\");\n        __node_ = __node_->__next_;\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_iterator operator++(int)\n    {\n        __hash_iterator __t(*this);\n        ++(*this);\n        return __t;\n    }\n\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const __hash_iterator& __x, const __hash_iterator& __y)\n    {\n        return __x.__node_ == __y.__node_;\n    }\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator!=(const __hash_iterator& __x, const __hash_iterator& __y)\n        {return !(__x == __y);}\n\nprivate:\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_iterator(__next_pointer __node, const void* __c) _NOEXCEPT\n        : __node_(__node)\n        {\n            __get_db()->__insert_ic(this, __c);\n        }\n#else\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_iterator(__next_pointer __node) _NOEXCEPT\n        : __node_(__node)\n        {}\n#endif\n    template <class, class, class, class> friend class __hash_table;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_iterator;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_iterator;\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;\n};\n\ntemplate <class _NodePtr>\nclass _LIBCPP_TEMPLATE_VIS __hash_const_iterator\n{\n    static_assert(!is_const<typename pointer_traits<_NodePtr>::element_type>::value, \"\");\n    typedef __hash_node_types<_NodePtr> _NodeTypes;\n    typedef _NodePtr                            __node_pointer;\n    typedef typename _NodeTypes::__next_pointer __next_pointer;\n\n    __next_pointer __node_;\n\npublic:\n    typedef __hash_iterator<_NodePtr> __non_const_iterator;\n\n    typedef forward_iterator_tag                                 iterator_category;\n    typedef typename _NodeTypes::__node_value_type               value_type;\n    typedef typename _NodeTypes::difference_type                 difference_type;\n    typedef const value_type&                                    reference;\n    typedef typename _NodeTypes::__const_node_value_type_pointer pointer;\n\n\n    _LIBCPP_INLINE_VISIBILITY __hash_const_iterator() _NOEXCEPT : __node_(nullptr) {\n        _LIBCPP_DEBUG_MODE(__get_db()->__insert_i(this));\n    }\n\n    _LIBCPP_INLINE_VISIBILITY \n    __hash_const_iterator(const __non_const_iterator& __x) _NOEXCEPT\n        : __node_(__x.__node_)\n    {\n        _LIBCPP_DEBUG_MODE(__get_db()->__iterator_copy(this, &__x));\n    }\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_iterator(const __hash_const_iterator& __i)\n        : __node_(__i.__node_)\n    {\n        __get_db()->__iterator_copy(this, &__i);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    ~__hash_const_iterator()\n    {\n        __get_db()->__erase_i(this);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_iterator& operator=(const __hash_const_iterator& __i)\n    {\n        if (this != &__i)\n        {\n            __get_db()->__iterator_copy(this, &__i);\n            __node_ = __i.__node_;\n        }\n        return *this;\n    }\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\n    _LIBCPP_INLINE_VISIBILITY\n    reference operator*() const {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                           \"Attempted to dereference a non-dereferenceable unordered container const_iterator\");\n        return __node_->__upcast()->__value_;\n    }\n    _LIBCPP_INLINE_VISIBILITY\n    pointer operator->() const {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                           \"Attempted to dereference a non-dereferenceable unordered container const_iterator\");\n        return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__value_);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_iterator& operator++() {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                             \"Attempted to increment non-incrementable unordered container const_iterator\");\n        __node_ = __node_->__next_;\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_iterator operator++(int)\n    {\n        __hash_const_iterator __t(*this);\n        ++(*this);\n        return __t;\n    }\n\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const __hash_const_iterator& __x, const __hash_const_iterator& __y)\n    {\n        return __x.__node_ == __y.__node_;\n    }\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator!=(const __hash_const_iterator& __x, const __hash_const_iterator& __y)\n        {return !(__x == __y);}\n\nprivate:\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_iterator(__next_pointer __node, const void* __c) _NOEXCEPT\n        : __node_(__node)\n        {\n            __get_db()->__insert_ic(this, __c);\n        }\n#else\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_iterator(__next_pointer __node) _NOEXCEPT\n        : __node_(__node)\n        {}\n#endif\n    template <class, class, class, class> friend class __hash_table;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator;\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;\n};\n\ntemplate <class _NodePtr>\nclass _LIBCPP_TEMPLATE_VIS __hash_local_iterator\n{\n    typedef __hash_node_types<_NodePtr> _NodeTypes;\n    typedef _NodePtr                            __node_pointer;\n    typedef typename _NodeTypes::__next_pointer __next_pointer;\n\n    __next_pointer         __node_;\n    size_t                 __bucket_;\n    size_t                 __bucket_count_;\n\npublic:\n    typedef forward_iterator_tag                                iterator_category;\n    typedef typename _NodeTypes::__node_value_type              value_type;\n    typedef typename _NodeTypes::difference_type                difference_type;\n    typedef value_type&                                         reference;\n    typedef typename _NodeTypes::__node_value_type_pointer      pointer;\n\n    _LIBCPP_INLINE_VISIBILITY __hash_local_iterator() _NOEXCEPT : __node_(nullptr) {\n        _LIBCPP_DEBUG_MODE(__get_db()->__insert_i(this));\n    }\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_local_iterator(const __hash_local_iterator& __i)\n        : __node_(__i.__node_),\n          __bucket_(__i.__bucket_),\n          __bucket_count_(__i.__bucket_count_)\n    {\n        __get_db()->__iterator_copy(this, &__i);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    ~__hash_local_iterator()\n    {\n        __get_db()->__erase_i(this);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_local_iterator& operator=(const __hash_local_iterator& __i)\n    {\n        if (this != &__i)\n        {\n            __get_db()->__iterator_copy(this, &__i);\n            __node_ = __i.__node_;\n            __bucket_ = __i.__bucket_;\n            __bucket_count_ = __i.__bucket_count_;\n        }\n        return *this;\n    }\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\n    _LIBCPP_INLINE_VISIBILITY\n    reference operator*() const {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                           \"Attempted to dereference a non-dereferenceable unordered container local_iterator\");\n        return __node_->__upcast()->__value_;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    pointer operator->() const {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                             \"Attempted to dereference a non-dereferenceable unordered container local_iterator\");\n        return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__value_);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_local_iterator& operator++() {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                       \"Attempted to increment non-incrementable unordered container local_iterator\");\n        __node_ = __node_->__next_;\n        if (__node_ != nullptr && __constrain_hash(__node_->__hash(), __bucket_count_) != __bucket_)\n            __node_ = nullptr;\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_local_iterator operator++(int)\n    {\n        __hash_local_iterator __t(*this);\n        ++(*this);\n        return __t;\n    }\n\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const __hash_local_iterator& __x, const __hash_local_iterator& __y)\n    {\n        return __x.__node_ == __y.__node_;\n    }\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator!=(const __hash_local_iterator& __x, const __hash_local_iterator& __y)\n        {return !(__x == __y);}\n\nprivate:\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_local_iterator(__next_pointer __node, size_t __bucket,\n                          size_t __bucket_count, const void* __c) _NOEXCEPT\n        : __node_(__node),\n          __bucket_(__bucket),\n          __bucket_count_(__bucket_count)\n        {\n            __get_db()->__insert_ic(this, __c);\n            if (__node_ != nullptr)\n                __node_ = __node_->__next_;\n        }\n#else\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_local_iterator(__next_pointer __node, size_t __bucket,\n                          size_t __bucket_count) _NOEXCEPT\n        : __node_(__node),\n          __bucket_(__bucket),\n          __bucket_count_(__bucket_count)\n        {\n            if (__node_ != nullptr)\n                __node_ = __node_->__next_;\n        }\n#endif\n    template <class, class, class, class> friend class __hash_table;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_iterator;\n};\n\ntemplate <class _ConstNodePtr>\nclass _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator\n{\n    typedef __hash_node_types<_ConstNodePtr> _NodeTypes;\n    typedef _ConstNodePtr                       __node_pointer;\n    typedef typename _NodeTypes::__next_pointer __next_pointer;\n\n    __next_pointer         __node_;\n    size_t                 __bucket_;\n    size_t                 __bucket_count_;\n\n    typedef pointer_traits<__node_pointer>          __pointer_traits;\n    typedef typename __pointer_traits::element_type __node;\n    typedef typename remove_const<__node>::type     __non_const_node;\n    typedef typename __rebind_pointer<__node_pointer, __non_const_node>::type\n        __non_const_node_pointer;\npublic:\n    typedef __hash_local_iterator<__non_const_node_pointer>\n                                                    __non_const_iterator;\n\n    typedef forward_iterator_tag                                 iterator_category;\n    typedef typename _NodeTypes::__node_value_type               value_type;\n    typedef typename _NodeTypes::difference_type                 difference_type;\n    typedef const value_type&                                    reference;\n    typedef typename _NodeTypes::__const_node_value_type_pointer pointer;\n\n\n    _LIBCPP_INLINE_VISIBILITY __hash_const_local_iterator() _NOEXCEPT : __node_(nullptr) {\n        _LIBCPP_DEBUG_MODE(__get_db()->__insert_i(this));\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_local_iterator(const __non_const_iterator& __x) _NOEXCEPT\n        : __node_(__x.__node_),\n          __bucket_(__x.__bucket_),\n          __bucket_count_(__x.__bucket_count_)\n    {\n        _LIBCPP_DEBUG_MODE(__get_db()->__iterator_copy(this, &__x));\n    }\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_local_iterator(const __hash_const_local_iterator& __i)\n        : __node_(__i.__node_),\n          __bucket_(__i.__bucket_),\n          __bucket_count_(__i.__bucket_count_)\n    {\n        __get_db()->__iterator_copy(this, &__i);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    ~__hash_const_local_iterator()\n    {\n        __get_db()->__erase_i(this);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_local_iterator& operator=(const __hash_const_local_iterator& __i)\n    {\n        if (this != &__i)\n        {\n            __get_db()->__iterator_copy(this, &__i);\n            __node_ = __i.__node_;\n            __bucket_ = __i.__bucket_;\n            __bucket_count_ = __i.__bucket_count_;\n        }\n        return *this;\n    }\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\n    _LIBCPP_INLINE_VISIBILITY\n    reference operator*() const {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                           \"Attempted to dereference a non-dereferenceable unordered container const_local_iterator\");\n        return __node_->__upcast()->__value_;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    pointer operator->() const {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                           \"Attempted to dereference a non-dereferenceable unordered container const_local_iterator\");\n        return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__value_);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_local_iterator& operator++() {\n        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),\n                       \"Attempted to increment non-incrementable unordered container const_local_iterator\");\n        __node_ = __node_->__next_;\n        if (__node_ != nullptr && __constrain_hash(__node_->__hash(), __bucket_count_) != __bucket_)\n            __node_ = nullptr;\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_local_iterator operator++(int)\n    {\n        __hash_const_local_iterator __t(*this);\n        ++(*this);\n        return __t;\n    }\n\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const __hash_const_local_iterator& __x, const __hash_const_local_iterator& __y)\n    {\n        return __x.__node_ == __y.__node_;\n    }\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator!=(const __hash_const_local_iterator& __x, const __hash_const_local_iterator& __y)\n        {return !(__x == __y);}\n\nprivate:\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_local_iterator(__next_pointer __node, size_t __bucket,\n                                size_t __bucket_count, const void* __c) _NOEXCEPT\n        : __node_(__node),\n          __bucket_(__bucket),\n          __bucket_count_(__bucket_count)\n        {\n            __get_db()->__insert_ic(this, __c);\n            if (__node_ != nullptr)\n                __node_ = __node_->__next_;\n        }\n#else\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_const_local_iterator(__next_pointer __node, size_t __bucket,\n                                size_t __bucket_count) _NOEXCEPT\n        : __node_(__node),\n          __bucket_(__bucket),\n          __bucket_count_(__bucket_count)\n        {\n            if (__node_ != nullptr)\n                __node_ = __node_->__next_;\n        }\n#endif\n    template <class, class, class, class> friend class __hash_table;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator;\n};\n\ntemplate <class _Alloc>\nclass __bucket_list_deallocator\n{\n    typedef _Alloc                                          allocator_type;\n    typedef allocator_traits<allocator_type>                __alloc_traits;\n    typedef typename __alloc_traits::size_type              size_type;\n\n    __compressed_pair<size_type, allocator_type> __data_;\npublic:\n    typedef typename __alloc_traits::pointer pointer;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __bucket_list_deallocator()\n        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)\n        : __data_(0) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __bucket_list_deallocator(const allocator_type& __a, size_type __size)\n        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)\n        : __data_(__size, __a) {}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY\n    __bucket_list_deallocator(__bucket_list_deallocator&& __x)\n        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)\n        : __data_(_VSTD::move(__x.__data_))\n    {\n        __x.size() = 0;\n    }\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type& size() _NOEXCEPT {return __data_.first();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type  size() const _NOEXCEPT {return __data_.first();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type& __alloc() _NOEXCEPT {return __data_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    const allocator_type& __alloc() const _NOEXCEPT {return __data_.second();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void operator()(pointer __p) _NOEXCEPT\n    {\n        __alloc_traits::deallocate(__alloc(), __p, size());\n    }\n};\n\ntemplate <class _Alloc> class __hash_map_node_destructor;\n\ntemplate <class _Alloc>\nclass __hash_node_destructor\n{\n    typedef _Alloc                                          allocator_type;\n    typedef allocator_traits<allocator_type>                __alloc_traits;\n\npublic:\n    typedef typename __alloc_traits::pointer                pointer;\nprivate:\n    typedef __hash_node_types<pointer> _NodeTypes;\n\n    allocator_type& __na_;\n\n    __hash_node_destructor& operator=(const __hash_node_destructor&);\n\npublic:\n    bool __value_constructed;\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __hash_node_destructor(allocator_type& __na,\n                                    bool __constructed = false) _NOEXCEPT\n        : __na_(__na),\n          __value_constructed(__constructed)\n        {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void operator()(pointer __p) _NOEXCEPT\n    {\n        if (__value_constructed)\n            __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_));\n        if (__p)\n            __alloc_traits::deallocate(__na_, __p, 1);\n    }\n\n    template <class> friend class __hash_map_node_destructor;\n};\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nclass __hash_table\n{\npublic:\n    typedef _Tp    value_type;\n    typedef _Hash  hasher;\n    typedef _Equal key_equal;\n    typedef _Alloc allocator_type;\n\nprivate:\n    typedef allocator_traits<allocator_type> __alloc_traits;\n    typedef typename\n      __make_hash_node_types<value_type, typename __alloc_traits::void_pointer>::type\n                                                                     _NodeTypes;\npublic:\n\n    typedef typename _NodeTypes::__node_value_type           __node_value_type;\n    typedef typename _NodeTypes::__container_value_type      __container_value_type;\n    typedef typename _NodeTypes::key_type                    key_type;\n    typedef value_type&                              reference;\n    typedef const value_type&                        const_reference;\n    typedef typename __alloc_traits::pointer         pointer;\n    typedef typename __alloc_traits::const_pointer   const_pointer;\n#ifndef _LIBCPP_ABI_FIX_UNORDERED_CONTAINER_SIZE_TYPE\n    typedef typename __alloc_traits::size_type       size_type;\n#else\n    typedef typename _NodeTypes::size_type           size_type;\n#endif\n    typedef typename _NodeTypes::difference_type     difference_type;\npublic:\n    // Create __node\n\n    typedef typename _NodeTypes::__node_type __node;\n    typedef typename __rebind_alloc_helper<__alloc_traits, __node>::type __node_allocator;\n    typedef allocator_traits<__node_allocator>       __node_traits;\n    typedef typename _NodeTypes::__void_pointer      __void_pointer;\n    typedef typename _NodeTypes::__node_pointer      __node_pointer;\n    typedef typename _NodeTypes::__node_pointer      __node_const_pointer;\n    typedef typename _NodeTypes::__node_base_type    __first_node;\n    typedef typename _NodeTypes::__node_base_pointer __node_base_pointer;\n    typedef typename _NodeTypes::__next_pointer      __next_pointer;\n\nprivate:\n    // check for sane allocator pointer rebinding semantics. Rebinding the\n    // allocator for a new pointer type should be exactly the same as rebinding\n    // the pointer using 'pointer_traits'.\n    static_assert((is_same<__node_pointer, typename __node_traits::pointer>::value),\n                  \"Allocator does not rebind pointers in a sane manner.\");\n    typedef typename __rebind_alloc_helper<__node_traits, __first_node>::type\n        __node_base_allocator;\n    typedef allocator_traits<__node_base_allocator> __node_base_traits;\n    static_assert((is_same<__node_base_pointer, typename __node_base_traits::pointer>::value),\n                 \"Allocator does not rebind pointers in a sane manner.\");\n\nprivate:\n\n    typedef typename __rebind_alloc_helper<__node_traits, __next_pointer>::type __pointer_allocator;\n    typedef __bucket_list_deallocator<__pointer_allocator> __bucket_list_deleter;\n    typedef unique_ptr<__next_pointer[], __bucket_list_deleter> __bucket_list;\n    typedef allocator_traits<__pointer_allocator>          __pointer_alloc_traits;\n    typedef typename __bucket_list_deleter::pointer       __node_pointer_pointer;\n\n    // --- Member data begin ---\n    __bucket_list                                         __bucket_list_;\n    __compressed_pair<__first_node, __node_allocator>     __p1_;\n    __compressed_pair<size_type, hasher>                  __p2_;\n    __compressed_pair<float, key_equal>                   __p3_;\n    // --- Member data end ---\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type& size() _NOEXCEPT {return __p2_.first();}\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    size_type  size() const _NOEXCEPT {return __p2_.first();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    hasher& hash_function() _NOEXCEPT {return __p2_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    const hasher& hash_function() const _NOEXCEPT {return __p2_.second();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    float& max_load_factor() _NOEXCEPT {return __p3_.first();}\n    _LIBCPP_INLINE_VISIBILITY\n    float  max_load_factor() const _NOEXCEPT {return __p3_.first();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    key_equal& key_eq() _NOEXCEPT {return __p3_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    const key_equal& key_eq() const _NOEXCEPT {return __p3_.second();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __node_allocator& __node_alloc() _NOEXCEPT {return __p1_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    const __node_allocator& __node_alloc() const _NOEXCEPT\n        {return __p1_.second();}\n\npublic:\n    typedef __hash_iterator<__node_pointer>                   iterator;\n    typedef __hash_const_iterator<__node_pointer>             const_iterator;\n    typedef __hash_local_iterator<__node_pointer>             local_iterator;\n    typedef __hash_const_local_iterator<__node_pointer>       const_local_iterator;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_table()\n        _NOEXCEPT_(\n            is_nothrow_default_constructible<__bucket_list>::value &&\n            is_nothrow_default_constructible<__first_node>::value &&\n            is_nothrow_default_constructible<__node_allocator>::value &&\n            is_nothrow_default_constructible<hasher>::value &&\n            is_nothrow_default_constructible<key_equal>::value);\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_table(const hasher& __hf, const key_equal& __eql);\n    __hash_table(const hasher& __hf, const key_equal& __eql,\n                 const allocator_type& __a);\n    explicit __hash_table(const allocator_type& __a);\n    __hash_table(const __hash_table& __u);\n    __hash_table(const __hash_table& __u, const allocator_type& __a);\n#ifndef _LIBCPP_CXX03_LANG\n    __hash_table(__hash_table&& __u)\n        _NOEXCEPT_(\n            is_nothrow_move_constructible<__bucket_list>::value &&\n            is_nothrow_move_constructible<__first_node>::value &&\n            is_nothrow_move_constructible<__node_allocator>::value &&\n            is_nothrow_move_constructible<hasher>::value &&\n            is_nothrow_move_constructible<key_equal>::value);\n    __hash_table(__hash_table&& __u, const allocator_type& __a);\n#endif  // _LIBCPP_CXX03_LANG\n    ~__hash_table();\n\n    __hash_table& operator=(const __hash_table& __u);\n#ifndef _LIBCPP_CXX03_LANG\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_table& operator=(__hash_table&& __u)\n        _NOEXCEPT_(\n            __node_traits::propagate_on_container_move_assignment::value &&\n            is_nothrow_move_assignable<__node_allocator>::value &&\n            is_nothrow_move_assignable<hasher>::value &&\n            is_nothrow_move_assignable<key_equal>::value);\n#endif\n    template <class _InputIterator>\n        void __assign_unique(_InputIterator __first, _InputIterator __last);\n    template <class _InputIterator>\n        void __assign_multi(_InputIterator __first, _InputIterator __last);\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_size() const _NOEXCEPT\n    {\n        return std::min<size_type>(\n            __node_traits::max_size(__node_alloc()),\n            numeric_limits<difference_type >::max()\n        );\n    }\n\n    pair<iterator, bool> __node_insert_unique(__node_pointer __nd);\n    iterator             __node_insert_multi(__node_pointer __nd);\n    iterator             __node_insert_multi(const_iterator __p,\n                                             __node_pointer __nd);\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class _Key, class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __emplace_unique_key_args(_Key const& __k, _Args&&... __args);\n\n    template <class... _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __emplace_unique_impl(_Args&&... __args);\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __emplace_unique(_Pp&& __x) {\n      return __emplace_unique_extract_key(_VSTD::forward<_Pp>(__x),\n                                          __can_extract_key<_Pp, key_type>());\n    }\n\n    template <class _First, class _Second>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<\n        __can_extract_map_key<_First, key_type, __container_value_type>::value,\n        pair<iterator, bool>\n    >::type __emplace_unique(_First&& __f, _Second&& __s) {\n        return __emplace_unique_key_args(__f, _VSTD::forward<_First>(__f),\n                                              _VSTD::forward<_Second>(__s));\n    }\n\n    template <class... _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __emplace_unique(_Args&&... __args) {\n      return __emplace_unique_impl(_VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n    __emplace_unique_extract_key(_Pp&& __x, __extract_key_fail_tag) {\n      return __emplace_unique_impl(_VSTD::forward<_Pp>(__x));\n    }\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n    __emplace_unique_extract_key(_Pp&& __x, __extract_key_self_tag) {\n      return __emplace_unique_key_args(__x, _VSTD::forward<_Pp>(__x));\n    }\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n    __emplace_unique_extract_key(_Pp&& __x, __extract_key_first_tag) {\n      return __emplace_unique_key_args(__x.first, _VSTD::forward<_Pp>(__x));\n    }\n\n    template <class... _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __emplace_multi(_Args&&... __args);\n    template <class... _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __emplace_hint_multi(const_iterator __p, _Args&&... __args);\n\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n    __insert_unique(__container_value_type&& __x) {\n      return __emplace_unique_key_args(_NodeTypes::__get_key(__x), _VSTD::move(__x));\n    }\n\n    template <class _Pp, class = typename enable_if<\n            !__is_same_uncvref<_Pp, __container_value_type>::value\n        >::type>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __insert_unique(_Pp&& __x) {\n      return __emplace_unique(_VSTD::forward<_Pp>(__x));\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_multi(_Pp&& __x) {\n      return __emplace_multi(_VSTD::forward<_Pp>(__x));\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_multi(const_iterator __p, _Pp&& __x) {\n        return __emplace_hint_multi(__p, _VSTD::forward<_Pp>(__x));\n    }\n\n#else  // !defined(_LIBCPP_CXX03_LANG)\n    template <class _Key, class _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __emplace_unique_key_args(_Key const&, _Args& __args);\n\n    iterator __insert_multi(const __container_value_type& __x);\n    iterator __insert_multi(const_iterator __p, const __container_value_type& __x);\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __insert_unique(const __container_value_type& __x) {\n        return __emplace_unique_key_args(_NodeTypes::__get_key(__x), __x);\n    }\n\n    void clear() _NOEXCEPT;\n    void rehash(size_type __n);\n    _LIBCPP_INLINE_VISIBILITY void reserve(size_type __n)\n        {rehash(static_cast<size_type>(ceil(__n / max_load_factor())));}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_count() const _NOEXCEPT\n    {\n        return __bucket_list_.get_deleter().size();\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       begin() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       end() _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin() const _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end() const _NOEXCEPT;\n\n    template <class _Key>\n        _LIBCPP_INLINE_VISIBILITY\n        size_type bucket(const _Key& __k) const\n        {\n            _LIBCPP_ASSERT(bucket_count() > 0,\n                \"unordered container::bucket(key) called when bucket_count() == 0\");\n            return __constrain_hash(hash_function()(__k), bucket_count());\n        }\n\n    template <class _Key>\n        iterator       find(const _Key& __x);\n    template <class _Key>\n        const_iterator find(const _Key& __x) const;\n\n    typedef __hash_node_destructor<__node_allocator> _Dp;\n    typedef unique_ptr<__node, _Dp> __node_holder;\n\n    iterator erase(const_iterator __p);\n    iterator erase(const_iterator __first, const_iterator __last);\n    template <class _Key>\n        size_type __erase_unique(const _Key& __k);\n    template <class _Key>\n        size_type __erase_multi(const _Key& __k);\n    __node_holder remove(const_iterator __p) _NOEXCEPT;\n\n    template <class _Key>\n        _LIBCPP_INLINE_VISIBILITY\n        size_type __count_unique(const _Key& __k) const;\n    template <class _Key>\n        size_type __count_multi(const _Key& __k) const;\n\n    template <class _Key>\n        pair<iterator, iterator>\n        __equal_range_unique(const _Key& __k);\n    template <class _Key>\n        pair<const_iterator, const_iterator>\n        __equal_range_unique(const _Key& __k) const;\n\n    template <class _Key>\n        pair<iterator, iterator>\n        __equal_range_multi(const _Key& __k);\n    template <class _Key>\n        pair<const_iterator, const_iterator>\n        __equal_range_multi(const _Key& __k) const;\n\n    void swap(__hash_table& __u)\n#if _LIBCPP_STD_VER <= 11\n        _NOEXCEPT_DEBUG_(\n            __is_nothrow_swappable<hasher>::value && __is_nothrow_swappable<key_equal>::value\n            && (!allocator_traits<__pointer_allocator>::propagate_on_container_swap::value\n                  || __is_nothrow_swappable<__pointer_allocator>::value)\n            && (!__node_traits::propagate_on_container_swap::value\n                  || __is_nothrow_swappable<__node_allocator>::value)\n            );\n#else\n     _NOEXCEPT_DEBUG_(__is_nothrow_swappable<hasher>::value && __is_nothrow_swappable<key_equal>::value);\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_bucket_count() const _NOEXCEPT\n        {return max_size(); }\n    size_type bucket_size(size_type __n) const;\n    _LIBCPP_INLINE_VISIBILITY float load_factor() const _NOEXCEPT\n    {\n        size_type __bc = bucket_count();\n        return __bc != 0 ? (float)size() / __bc : 0.f;\n    }\n    _LIBCPP_INLINE_VISIBILITY void max_load_factor(float __mlf) _NOEXCEPT\n    {\n        _LIBCPP_ASSERT(__mlf > 0,\n            \"unordered container::max_load_factor(lf) called with lf <= 0\");\n        max_load_factor() = _VSTD::max(__mlf, load_factor());\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator\n    begin(size_type __n)\n    {\n        _LIBCPP_ASSERT(__n < bucket_count(),\n            \"unordered container::begin(n) called with n >= bucket_count()\");\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        return local_iterator(__bucket_list_[__n], __n, bucket_count(), this);\n#else\n        return local_iterator(__bucket_list_[__n], __n, bucket_count());\n#endif\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator\n    end(size_type __n)\n    {\n        _LIBCPP_ASSERT(__n < bucket_count(),\n            \"unordered container::end(n) called with n >= bucket_count()\");\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        return local_iterator(nullptr, __n, bucket_count(), this);\n#else\n        return local_iterator(nullptr, __n, bucket_count());\n#endif\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator\n    cbegin(size_type __n) const\n    {\n        _LIBCPP_ASSERT(__n < bucket_count(),\n            \"unordered container::cbegin(n) called with n >= bucket_count()\");\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        return const_local_iterator(__bucket_list_[__n], __n, bucket_count(), this);\n#else\n        return const_local_iterator(__bucket_list_[__n], __n, bucket_count());\n#endif\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator\n    cend(size_type __n) const\n    {\n        _LIBCPP_ASSERT(__n < bucket_count(),\n            \"unordered container::cend(n) called with n >= bucket_count()\");\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        return const_local_iterator(nullptr, __n, bucket_count(), this);\n#else\n        return const_local_iterator(nullptr, __n, bucket_count());\n#endif\n    }\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\n    bool __dereferenceable(const const_iterator* __i) const;\n    bool __decrementable(const const_iterator* __i) const;\n    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;\n    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\nprivate:\n    void __rehash(size_type __n);\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class ..._Args>\n    __node_holder __construct_node(_Args&& ...__args);\n\n    template <class _First, class ..._Rest>\n    __node_holder __construct_node_hash(size_t __hash, _First&& __f, _Rest&&... __rest);\n#else // _LIBCPP_CXX03_LANG\n    __node_holder __construct_node(const __container_value_type& __v);\n    __node_holder __construct_node_hash(size_t __hash, const __container_value_type& __v);\n#endif\n\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const __hash_table& __u)\n        {__copy_assign_alloc(__u, integral_constant<bool,\n             __node_traits::propagate_on_container_copy_assignment::value>());}\n    void __copy_assign_alloc(const __hash_table& __u, true_type);\n    _LIBCPP_INLINE_VISIBILITY\n        void __copy_assign_alloc(const __hash_table&, false_type) {}\n\n#ifndef _LIBCPP_CXX03_LANG\n    void __move_assign(__hash_table& __u, false_type);\n    void __move_assign(__hash_table& __u, true_type)\n        _NOEXCEPT_(\n            is_nothrow_move_assignable<__node_allocator>::value &&\n            is_nothrow_move_assignable<hasher>::value &&\n            is_nothrow_move_assignable<key_equal>::value);\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__hash_table& __u)\n        _NOEXCEPT_(\n            !__node_traits::propagate_on_container_move_assignment::value ||\n            (is_nothrow_move_assignable<__pointer_allocator>::value &&\n             is_nothrow_move_assignable<__node_allocator>::value))\n        {__move_assign_alloc(__u, integral_constant<bool,\n             __node_traits::propagate_on_container_move_assignment::value>());}\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__hash_table& __u, true_type)\n        _NOEXCEPT_(\n            is_nothrow_move_assignable<__pointer_allocator>::value &&\n            is_nothrow_move_assignable<__node_allocator>::value)\n    {\n        __bucket_list_.get_deleter().__alloc() =\n                _VSTD::move(__u.__bucket_list_.get_deleter().__alloc());\n        __node_alloc() = _VSTD::move(__u.__node_alloc());\n    }\n    _LIBCPP_INLINE_VISIBILITY\n        void __move_assign_alloc(__hash_table&, false_type) _NOEXCEPT {}\n#endif // _LIBCPP_CXX03_LANG\n\n    void __deallocate_node(__next_pointer __np) _NOEXCEPT;\n    __next_pointer __detach() _NOEXCEPT;\n\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;\n};\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ninline\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table()\n    _NOEXCEPT_(\n        is_nothrow_default_constructible<__bucket_list>::value &&\n        is_nothrow_default_constructible<__first_node>::value &&\n        is_nothrow_default_constructible<__node_allocator>::value &&\n        is_nothrow_default_constructible<hasher>::value &&\n        is_nothrow_default_constructible<key_equal>::value)\n    : __p2_(0),\n      __p3_(1.0f)\n{\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ninline\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const hasher& __hf,\n                                                       const key_equal& __eql)\n    : __bucket_list_(nullptr, __bucket_list_deleter()),\n      __p1_(),\n      __p2_(0, __hf),\n      __p3_(1.0f, __eql)\n{\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const hasher& __hf,\n                                                       const key_equal& __eql,\n                                                       const allocator_type& __a)\n    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),\n      __p1_(__node_allocator(__a)),\n      __p2_(0, __hf),\n      __p3_(1.0f, __eql)\n{\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const allocator_type& __a)\n    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),\n      __p1_(__node_allocator(__a)),\n      __p2_(0),\n      __p3_(1.0f)\n{\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const __hash_table& __u)\n    : __bucket_list_(nullptr,\n          __bucket_list_deleter(allocator_traits<__pointer_allocator>::\n              select_on_container_copy_construction(\n                  __u.__bucket_list_.get_deleter().__alloc()), 0)),\n      __p1_(allocator_traits<__node_allocator>::\n          select_on_container_copy_construction(__u.__node_alloc())),\n      __p2_(0, __u.hash_function()),\n      __p3_(__u.__p3_)\n{\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const __hash_table& __u,\n                                                       const allocator_type& __a)\n    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),\n      __p1_(__node_allocator(__a)),\n      __p2_(0, __u.hash_function()),\n      __p3_(__u.__p3_)\n{\n}\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(__hash_table&& __u)\n        _NOEXCEPT_(\n            is_nothrow_move_constructible<__bucket_list>::value &&\n            is_nothrow_move_constructible<__first_node>::value &&\n            is_nothrow_move_constructible<__node_allocator>::value &&\n            is_nothrow_move_constructible<hasher>::value &&\n            is_nothrow_move_constructible<key_equal>::value)\n    : __bucket_list_(_VSTD::move(__u.__bucket_list_)),\n      __p1_(_VSTD::move(__u.__p1_)),\n      __p2_(_VSTD::move(__u.__p2_)),\n      __p3_(_VSTD::move(__u.__p3_))\n{\n    if (size() > 0)\n    {\n        __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] =\n            __p1_.first().__ptr();\n        __u.__p1_.first().__next_ = nullptr;\n        __u.size() = 0;\n    }\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(__hash_table&& __u,\n                                                       const allocator_type& __a)\n    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),\n      __p1_(__node_allocator(__a)),\n      __p2_(0, _VSTD::move(__u.hash_function())),\n      __p3_(_VSTD::move(__u.__p3_))\n{\n    if (__a == allocator_type(__u.__node_alloc()))\n    {\n        __bucket_list_.reset(__u.__bucket_list_.release());\n        __bucket_list_.get_deleter().size() = __u.__bucket_list_.get_deleter().size();\n        __u.__bucket_list_.get_deleter().size() = 0;\n        if (__u.size() > 0)\n        {\n            __p1_.first().__next_ = __u.__p1_.first().__next_;\n            __u.__p1_.first().__next_ = nullptr;\n            __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] =\n                __p1_.first().__ptr();\n            size() = __u.size();\n            __u.size() = 0;\n        }\n    }\n}\n\n#endif  // _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::~__hash_table()\n{\n    static_assert((is_copy_constructible<key_equal>::value),\n                 \"Predicate must be copy-constructible.\");\n    static_assert((is_copy_constructible<hasher>::value),\n                 \"Hasher must be copy-constructible.\");\n    __deallocate_node(__p1_.first().__next_);\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__erase_c(this);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__copy_assign_alloc(\n        const __hash_table& __u, true_type)\n{\n    if (__node_alloc() != __u.__node_alloc())\n    {\n        clear();\n        __bucket_list_.reset();\n        __bucket_list_.get_deleter().size() = 0;\n    }\n    __bucket_list_.get_deleter().__alloc() = __u.__bucket_list_.get_deleter().__alloc();\n    __node_alloc() = __u.__node_alloc();\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>&\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::operator=(const __hash_table& __u)\n{\n    if (this != &__u)\n    {\n        __copy_assign_alloc(__u);\n        hash_function() = __u.hash_function();\n        key_eq() = __u.key_eq();\n        max_load_factor() = __u.max_load_factor();\n        __assign_multi(__u.begin(), __u.end());\n    }\n    return *this;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__deallocate_node(__next_pointer __np)\n    _NOEXCEPT\n{\n    __node_allocator& __na = __node_alloc();\n    while (__np != nullptr)\n    {\n        __next_pointer __next = __np->__next_;\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        __c_node* __c = __get_db()->__find_c_and_lock(this);\n        for (__i_node** __p = __c->end_; __p != __c->beg_; )\n        {\n            --__p;\n            iterator* __i = static_cast<iterator*>((*__p)->__i_);\n            if (__i->__node_ == __np)\n            {\n                (*__p)->__c_ = nullptr;\n                if (--__c->end_ != __p)\n                    memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));\n            }\n        }\n        __get_db()->unlock();\n#endif\n        __node_pointer __real_np = __np->__upcast();\n        __node_traits::destroy(__na, _NodeTypes::__get_ptr(__real_np->__value_));\n        __node_traits::deallocate(__na, __real_np, 1);\n        __np = __next;\n    }\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__next_pointer\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__detach() _NOEXCEPT\n{\n    size_type __bc = bucket_count();\n    for (size_type __i = 0; __i < __bc; ++__i)\n        __bucket_list_[__i] = nullptr;\n    size() = 0;\n    __next_pointer __cache = __p1_.first().__next_;\n    __p1_.first().__next_ = nullptr;\n    return __cache;\n}\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__move_assign(\n        __hash_table& __u, true_type)\n    _NOEXCEPT_(\n        is_nothrow_move_assignable<__node_allocator>::value &&\n        is_nothrow_move_assignable<hasher>::value &&\n        is_nothrow_move_assignable<key_equal>::value)\n{\n    clear();\n    __bucket_list_.reset(__u.__bucket_list_.release());\n    __bucket_list_.get_deleter().size() = __u.__bucket_list_.get_deleter().size();\n    __u.__bucket_list_.get_deleter().size() = 0;\n    __move_assign_alloc(__u);\n    size() = __u.size();\n    hash_function() = _VSTD::move(__u.hash_function());\n    max_load_factor() = __u.max_load_factor();\n    key_eq() = _VSTD::move(__u.key_eq());\n    __p1_.first().__next_ = __u.__p1_.first().__next_;\n    if (size() > 0)\n    {\n        __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] =\n            __p1_.first().__ptr();\n        __u.__p1_.first().__next_ = nullptr;\n        __u.size() = 0;\n    }\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->swap(this, &__u);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__move_assign(\n        __hash_table& __u, false_type)\n{\n    if (__node_alloc() == __u.__node_alloc())\n        __move_assign(__u, true_type());\n    else\n    {\n        hash_function() = _VSTD::move(__u.hash_function());\n        key_eq() = _VSTD::move(__u.key_eq());\n        max_load_factor() = __u.max_load_factor();\n        if (bucket_count() != 0)\n        {\n            __next_pointer __cache = __detach();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n            try\n            {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n                const_iterator __i = __u.begin();\n                while (__cache != nullptr && __u.size() != 0)\n                {\n                    __cache->__upcast()->__value_ =\n                        _VSTD::move(__u.remove(__i++)->__value_);\n                    __next_pointer __next = __cache->__next_;\n                    __node_insert_multi(__cache->__upcast());\n                    __cache = __next;\n                }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n            }\n            catch (...)\n            {\n                __deallocate_node(__cache);\n                throw;\n            }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            __deallocate_node(__cache);\n        }\n        const_iterator __i = __u.begin();\n        while (__u.size() != 0)\n        {\n            __node_holder __h = __construct_node(_NodeTypes::__move(__u.remove(__i++)->__value_));\n            __node_insert_multi(__h.get());\n            __h.release();\n        }\n    }\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ninline\n__hash_table<_Tp, _Hash, _Equal, _Alloc>&\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::operator=(__hash_table&& __u)\n    _NOEXCEPT_(\n        __node_traits::propagate_on_container_move_assignment::value &&\n        is_nothrow_move_assignable<__node_allocator>::value &&\n        is_nothrow_move_assignable<hasher>::value &&\n        is_nothrow_move_assignable<key_equal>::value)\n{\n    __move_assign(__u, integral_constant<bool,\n                  __node_traits::propagate_on_container_move_assignment::value>());\n    return *this;\n}\n\n#endif  // _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _InputIterator>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__assign_unique(_InputIterator __first,\n                                                          _InputIterator __last)\n{\n    typedef iterator_traits<_InputIterator> _ITraits;\n    typedef typename _ITraits::value_type _ItValueType;\n    static_assert((is_same<_ItValueType, __container_value_type>::value),\n                  \"__assign_unique may only be called with the containers value type\");\n\n    if (bucket_count() != 0)\n    {\n        __next_pointer __cache = __detach();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            for (; __cache != nullptr && __first != __last; ++__first)\n            {\n                __cache->__upcast()->__value_ = *__first;\n                __next_pointer __next = __cache->__next_;\n                __node_insert_unique(__cache->__upcast());\n                __cache = __next;\n            }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n            __deallocate_node(__cache);\n            throw;\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        __deallocate_node(__cache);\n    }\n    for (; __first != __last; ++__first)\n        __insert_unique(*__first);\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _InputIterator>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__assign_multi(_InputIterator __first,\n                                                         _InputIterator __last)\n{\n    typedef iterator_traits<_InputIterator> _ITraits;\n    typedef typename _ITraits::value_type _ItValueType;\n    static_assert((is_same<_ItValueType, __container_value_type>::value ||\n                  is_same<_ItValueType, __node_value_type>::value),\n                  \"__assign_multi may only be called with the containers value type\"\n                  \" or the nodes value type\");\n    if (bucket_count() != 0)\n    {\n        __next_pointer __cache = __detach();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            for (; __cache != nullptr && __first != __last; ++__first)\n            {\n                __cache->__upcast()->__value_ = *__first;\n                __next_pointer __next = __cache->__next_;\n                __node_insert_multi(__cache->__upcast());\n                __cache = __next;\n            }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n            __deallocate_node(__cache);\n            throw;\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        __deallocate_node(__cache);\n    }\n    for (; __first != __last; ++__first)\n        __insert_multi(_NodeTypes::__get_value(*__first));\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ninline\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::begin() _NOEXCEPT\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return iterator(__p1_.first().__next_, this);\n#else\n    return iterator(__p1_.first().__next_);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ninline\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::end() _NOEXCEPT\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return iterator(nullptr, this);\n#else\n    return iterator(nullptr);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ninline\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::begin() const _NOEXCEPT\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return const_iterator(__p1_.first().__next_, this);\n#else\n    return const_iterator(__p1_.first().__next_);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ninline\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::end() const _NOEXCEPT\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return const_iterator(nullptr, this);\n#else\n    return const_iterator(nullptr);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::clear() _NOEXCEPT\n{\n    if (size() > 0)\n    {\n        __deallocate_node(__p1_.first().__next_);\n        __p1_.first().__next_ = nullptr;\n        size_type __bc = bucket_count();\n        for (size_type __i = 0; __i < __bc; ++__i)\n            __bucket_list_[__i] = nullptr;\n        size() = 0;\n    }\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\npair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_unique(__node_pointer __nd)\n{\n    __nd->__hash_ = hash_function()(__nd->__value_);\n    size_type __bc = bucket_count();\n    bool __inserted = false;\n    __next_pointer __ndptr;\n    size_t __chash;\n    if (__bc != 0)\n    {\n        __chash = __constrain_hash(__nd->__hash_, __bc);\n        __ndptr = __bucket_list_[__chash];\n        if (__ndptr != nullptr)\n        {\n            for (__ndptr = __ndptr->__next_; __ndptr != nullptr &&\n                                             __constrain_hash(__ndptr->__hash(), __bc) == __chash;\n                                                     __ndptr = __ndptr->__next_)\n            {\n                if (key_eq()(__ndptr->__upcast()->__value_, __nd->__value_))\n                    goto __done;\n            }\n        }\n    }\n    {\n        if (size()+1 > __bc * max_load_factor() || __bc == 0)\n        {\n            rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc),\n                           size_type(ceil(float(size() + 1) / max_load_factor()))));\n            __bc = bucket_count();\n            __chash = __constrain_hash(__nd->__hash_, __bc);\n        }\n        // insert_after __bucket_list_[__chash], or __first_node if bucket is null\n        __next_pointer __pn = __bucket_list_[__chash];\n        if (__pn == nullptr)\n        {\n            __pn =__p1_.first().__ptr();\n            __nd->__next_ = __pn->__next_;\n            __pn->__next_ = __nd->__ptr();\n            // fix up __bucket_list_\n            __bucket_list_[__chash] = __pn;\n            if (__nd->__next_ != nullptr)\n                __bucket_list_[__constrain_hash(__nd->__next_->__hash(), __bc)] = __nd->__ptr();\n        }\n        else\n        {\n            __nd->__next_ = __pn->__next_;\n            __pn->__next_ = __nd->__ptr();\n        }\n        __ndptr = __nd->__ptr();\n        // increment size\n        ++size();\n        __inserted = true;\n    }\n__done:\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return pair<iterator, bool>(iterator(__ndptr, this), __inserted);\n#else\n    return pair<iterator, bool>(iterator(__ndptr), __inserted);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi(__node_pointer __cp)\n{\n    __cp->__hash_ = hash_function()(__cp->__value_);\n    size_type __bc = bucket_count();\n    if (size()+1 > __bc * max_load_factor() || __bc == 0)\n    {\n        rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc),\n                       size_type(ceil(float(size() + 1) / max_load_factor()))));\n        __bc = bucket_count();\n    }\n    size_t __chash = __constrain_hash(__cp->__hash_, __bc);\n    __next_pointer __pn = __bucket_list_[__chash];\n    if (__pn == nullptr)\n    {\n        __pn =__p1_.first().__ptr();\n        __cp->__next_ = __pn->__next_;\n        __pn->__next_ = __cp->__ptr();\n        // fix up __bucket_list_\n        __bucket_list_[__chash] = __pn;\n        if (__cp->__next_ != nullptr)\n            __bucket_list_[__constrain_hash(__cp->__next_->__hash(), __bc)]\n                = __cp->__ptr();\n    }\n    else\n    {\n        for (bool __found = false; __pn->__next_ != nullptr &&\n                                   __constrain_hash(__pn->__next_->__hash(), __bc) == __chash;\n                                                           __pn = __pn->__next_)\n        {\n            //      __found    key_eq()     action\n            //      false       false       loop\n            //      true        true        loop\n            //      false       true        set __found to true\n            //      true        false       break\n            if (__found != (__pn->__next_->__hash() == __cp->__hash_ &&\n                            key_eq()(__pn->__next_->__upcast()->__value_, __cp->__value_)))\n            {\n                if (!__found)\n                    __found = true;\n                else\n                    break;\n            }\n        }\n        __cp->__next_ = __pn->__next_;\n        __pn->__next_ = __cp->__ptr();\n        if (__cp->__next_ != nullptr)\n        {\n            size_t __nhash = __constrain_hash(__cp->__next_->__hash(), __bc);\n            if (__nhash != __chash)\n                __bucket_list_[__nhash] = __cp->__ptr();\n        }\n    }\n    ++size();\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return iterator(__cp->__ptr(), this);\n#else\n    return iterator(__cp->__ptr());\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi(\n        const_iterator __p, __node_pointer __cp)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n        \"unordered container::emplace_hint(const_iterator, args...) called with an iterator not\"\n        \" referring to this unordered container\");\n#endif\n    if (__p != end() && key_eq()(*__p, __cp->__value_))\n    {\n        __next_pointer __np = __p.__node_;\n        __cp->__hash_ = __np->__hash();\n        size_type __bc = bucket_count();\n        if (size()+1 > __bc * max_load_factor() || __bc == 0)\n        {\n            rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc),\n                           size_type(ceil(float(size() + 1) / max_load_factor()))));\n            __bc = bucket_count();\n        }\n        size_t __chash = __constrain_hash(__cp->__hash_, __bc);\n        __next_pointer __pp = __bucket_list_[__chash];\n        while (__pp->__next_ != __np)\n            __pp = __pp->__next_;\n        __cp->__next_ = __np;\n        __pp->__next_ = static_cast<__next_pointer>(__cp);\n        ++size();\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        return iterator(static_cast<__next_pointer>(__cp), this);\n#else\n        return iterator(static_cast<__next_pointer>(__cp));\n#endif\n    }\n    return __node_insert_multi(__cp);\n}\n\n\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key, class ..._Args>\npair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_unique_key_args(_Key const& __k, _Args&&... __args)\n#else\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key, class _Args>\npair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_unique_key_args(_Key const& __k, _Args& __args)\n#endif\n{\n\n    size_t __hash = hash_function()(__k);\n    size_type __bc = bucket_count();\n    bool __inserted = false;\n    __next_pointer __nd;\n    size_t __chash;\n    if (__bc != 0)\n    {\n        __chash = __constrain_hash(__hash, __bc);\n        __nd = __bucket_list_[__chash];\n        if (__nd != nullptr)\n        {\n            for (__nd = __nd->__next_; __nd != nullptr &&\n                (__nd->__hash() == __hash || __constrain_hash(__nd->__hash(), __bc) == __chash);\n                                                           __nd = __nd->__next_)\n            {\n                if (key_eq()(__nd->__upcast()->__value_, __k))\n                    goto __done;\n            }\n        }\n    }\n    {\n#ifndef _LIBCPP_CXX03_LANG\n        __node_holder __h = __construct_node_hash(__hash, _VSTD::forward<_Args>(__args)...);\n#else\n        __node_holder __h = __construct_node_hash(__hash, __args);\n#endif\n        if (size()+1 > __bc * max_load_factor() || __bc == 0)\n        {\n            rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc),\n                           size_type(ceil(float(size() + 1) / max_load_factor()))));\n            __bc = bucket_count();\n            __chash = __constrain_hash(__hash, __bc);\n        }\n        // insert_after __bucket_list_[__chash], or __first_node if bucket is null\n        __next_pointer __pn = __bucket_list_[__chash];\n        if (__pn == nullptr)\n        {\n            __pn = __p1_.first().__ptr();\n            __h->__next_ = __pn->__next_;\n            __pn->__next_ = __h.get()->__ptr();\n            // fix up __bucket_list_\n            __bucket_list_[__chash] = __pn;\n            if (__h->__next_ != nullptr)\n                __bucket_list_[__constrain_hash(__h->__next_->__hash(), __bc)]\n                    = __h.get()->__ptr();\n        }\n        else\n        {\n            __h->__next_ = __pn->__next_;\n            __pn->__next_ = static_cast<__next_pointer>(__h.get());\n        }\n        __nd = static_cast<__next_pointer>(__h.release());\n        // increment size\n        ++size();\n        __inserted = true;\n    }\n__done:\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return pair<iterator, bool>(iterator(__nd, this), __inserted);\n#else\n    return pair<iterator, bool>(iterator(__nd), __inserted);\n#endif\n}\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class... _Args>\npair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_unique_impl(_Args&&... __args)\n{\n    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n    pair<iterator, bool> __r = __node_insert_unique(__h.get());\n    if (__r.second)\n        __h.release();\n    return __r;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class... _Args>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_multi(_Args&&... __args)\n{\n    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n    iterator __r = __node_insert_multi(__h.get());\n    __h.release();\n    return __r;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class... _Args>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_hint_multi(\n        const_iterator __p, _Args&&... __args)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n        \"unordered container::emplace_hint(const_iterator, args...) called with an iterator not\"\n        \" referring to this unordered container\");\n#endif\n    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n    iterator __r = __node_insert_multi(__p, __h.get());\n    __h.release();\n    return __r;\n}\n\n#else // _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__insert_multi(const __container_value_type& __x)\n{\n    __node_holder __h = __construct_node(__x);\n    iterator __r = __node_insert_multi(__h.get());\n    __h.release();\n    return __r;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__insert_multi(const_iterator __p,\n                                                         const __container_value_type& __x)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n        \"unordered container::insert(const_iterator, lvalue) called with an iterator not\"\n        \" referring to this unordered container\");\n#endif\n    __node_holder __h = __construct_node(__x);\n    iterator __r = __node_insert_multi(__p, __h.get());\n    __h.release();\n    return __r;\n}\n\n#endif  // _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::rehash(size_type __n)\n{\n    if (__n == 1)\n        __n = 2;\n    else if (__n & (__n - 1))\n        __n = __next_prime(__n);\n    size_type __bc = bucket_count();\n    if (__n > __bc)\n        __rehash(__n);\n    else if (__n < __bc)\n    {\n        __n = _VSTD::max<size_type>\n              (\n                  __n,\n                  __is_hash_power2(__bc) ? __next_hash_pow2(size_t(ceil(float(size()) / max_load_factor()))) :\n                                           __next_prime(size_t(ceil(float(size()) / max_load_factor())))\n              );\n        if (__n < __bc)\n            __rehash(__n);\n    }\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__rehash(size_type __nbc)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__invalidate_all(this);\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n    __pointer_allocator& __npa = __bucket_list_.get_deleter().__alloc();\n    __bucket_list_.reset(__nbc > 0 ?\n                      __pointer_alloc_traits::allocate(__npa, __nbc) : nullptr);\n    __bucket_list_.get_deleter().size() = __nbc;\n    if (__nbc > 0)\n    {\n        for (size_type __i = 0; __i < __nbc; ++__i)\n            __bucket_list_[__i] = nullptr;\n        __next_pointer __pp = __p1_.first().__ptr();\n        __next_pointer __cp = __pp->__next_;\n        if (__cp != nullptr)\n        {\n            size_type __chash = __constrain_hash(__cp->__hash(), __nbc);\n            __bucket_list_[__chash] = __pp;\n            size_type __phash = __chash;\n            for (__pp = __cp, __cp = __cp->__next_; __cp != nullptr;\n                                                           __cp = __pp->__next_)\n            {\n                __chash = __constrain_hash(__cp->__hash(), __nbc);\n                if (__chash == __phash)\n                    __pp = __cp;\n                else\n                {\n                    if (__bucket_list_[__chash] == nullptr)\n                    {\n                        __bucket_list_[__chash] = __pp;\n                        __pp = __cp;\n                        __phash = __chash;\n                    }\n                    else\n                    {\n                        __next_pointer __np = __cp;\n                        for (; __np->__next_ != nullptr &&\n                               key_eq()(__cp->__upcast()->__value_,\n                                        __np->__next_->__upcast()->__value_);\n                                                           __np = __np->__next_)\n                            ;\n                        __pp->__next_ = __np->__next_;\n                        __np->__next_ = __bucket_list_[__chash]->__next_;\n                        __bucket_list_[__chash]->__next_ = __cp;\n\n                    }\n                }\n            }\n        }\n    }\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::find(const _Key& __k)\n{\n    size_t __hash = hash_function()(__k);\n    size_type __bc = bucket_count();\n    if (__bc != 0)\n    {\n        size_t __chash = __constrain_hash(__hash, __bc);\n        __next_pointer __nd = __bucket_list_[__chash];\n        if (__nd != nullptr)\n        {\n            for (__nd = __nd->__next_; __nd != nullptr &&\n                (__nd->__hash() == __hash\n                  || __constrain_hash(__nd->__hash(), __bc) == __chash);\n                                                           __nd = __nd->__next_)\n            {\n                if ((__nd->__hash() == __hash)\n                    && key_eq()(__nd->__upcast()->__value_, __k))\n#if _LIBCPP_DEBUG_LEVEL >= 2\n                    return iterator(__nd, this);\n#else\n                    return iterator(__nd);\n#endif\n            }\n        }\n    }\n    return end();\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::find(const _Key& __k) const\n{\n    size_t __hash = hash_function()(__k);\n    size_type __bc = bucket_count();\n    if (__bc != 0)\n    {\n        size_t __chash = __constrain_hash(__hash, __bc);\n        __next_pointer __nd = __bucket_list_[__chash];\n        if (__nd != nullptr)\n        {\n            for (__nd = __nd->__next_; __nd != nullptr &&\n                (__hash == __nd->__hash()\n                    || __constrain_hash(__nd->__hash(), __bc) == __chash);\n                                                           __nd = __nd->__next_)\n            {\n                if ((__nd->__hash() == __hash)\n                    && key_eq()(__nd->__upcast()->__value_, __k))\n#if _LIBCPP_DEBUG_LEVEL >= 2\n                    return const_iterator(__nd, this);\n#else\n                    return const_iterator(__nd);\n#endif\n            }\n        }\n\n    }\n    return end();\n}\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class ..._Args>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__construct_node(_Args&& ...__args)\n{\n    static_assert(!__is_hash_value_type<_Args...>::value,\n                  \"Construct cannot be called with a hash value type\");\n    __node_allocator& __na = __node_alloc();\n    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));\n    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), _VSTD::forward<_Args>(__args)...);\n    __h.get_deleter().__value_constructed = true;\n    __h->__hash_ = hash_function()(__h->__value_);\n    __h->__next_ = nullptr;\n    return __h;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _First, class ..._Rest>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__construct_node_hash(\n    size_t __hash, _First&& __f, _Rest&& ...__rest)\n{\n    static_assert(!__is_hash_value_type<_First, _Rest...>::value,\n                  \"Construct cannot be called with a hash value type\");\n    __node_allocator& __na = __node_alloc();\n    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));\n    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_),\n                             _VSTD::forward<_First>(__f),\n                             _VSTD::forward<_Rest>(__rest)...);\n    __h.get_deleter().__value_constructed = true;\n    __h->__hash_ = __hash;\n    __h->__next_ = nullptr;\n    return __h;\n}\n\n#else  // _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__construct_node(const __container_value_type& __v)\n{\n    __node_allocator& __na = __node_alloc();\n    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));\n    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), __v);\n    __h.get_deleter().__value_constructed = true;\n    __h->__hash_ = hash_function()(__h->__value_);\n    __h->__next_ = nullptr;\n    return _LIBCPP_EXPLICIT_MOVE(__h);  // explicitly moved for C++03\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__construct_node_hash(size_t __hash,\n                                                                const __container_value_type& __v)\n{\n    __node_allocator& __na = __node_alloc();\n    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));\n    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), __v);\n    __h.get_deleter().__value_constructed = true;\n    __h->__hash_ = __hash;\n    __h->__next_ = nullptr;\n    return _LIBCPP_EXPLICIT_MOVE(__h);  // explicitly moved for C++03\n}\n\n#endif  // _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::erase(const_iterator __p)\n{\n    __next_pointer __np = __p.__node_;\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n        \"unordered container erase(iterator) called with an iterator not\"\n        \" referring to this container\");\n    _LIBCPP_ASSERT(__p != end(),\n        \"unordered container erase(iterator) called with a non-dereferenceable iterator\");\n    iterator __r(__np, this);\n#else\n    iterator __r(__np);\n#endif\n    ++__r;\n    remove(__p);\n    return __r;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::erase(const_iterator __first,\n                                                const_iterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,\n        \"unodered container::erase(iterator, iterator) called with an iterator not\"\n        \" referring to this unodered container\");\n    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__last) == this,\n        \"unodered container::erase(iterator, iterator) called with an iterator not\"\n        \" referring to this unodered container\");\n#endif\n    for (const_iterator __p = __first; __first != __last; __p = __first)\n    {\n        ++__first;\n        erase(__p);\n    }\n    __next_pointer __np = __last.__node_;\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    return iterator (__np, this);\n#else\n    return iterator (__np);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__erase_unique(const _Key& __k)\n{\n    iterator __i = find(__k);\n    if (__i == end())\n        return 0;\n    erase(__i);\n    return 1;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__erase_multi(const _Key& __k)\n{\n    size_type __r = 0;\n    iterator __i = find(__k);\n    if (__i != end())\n    {\n        iterator __e = end();\n        do\n        {\n            erase(__i++);\n            ++__r;\n        } while (__i != __e && key_eq()(*__i, __k));\n    }\n    return __r;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::remove(const_iterator __p) _NOEXCEPT\n{\n    // current node\n    __next_pointer __cn = __p.__node_;\n    size_type __bc = bucket_count();\n    size_t __chash = __constrain_hash(__cn->__hash(), __bc);\n    // find previous node\n    __next_pointer __pn = __bucket_list_[__chash];\n    for (; __pn->__next_ != __cn; __pn = __pn->__next_)\n        ;\n    // Fix up __bucket_list_\n        // if __pn is not in same bucket (before begin is not in same bucket) &&\n        //    if __cn->__next_ is not in same bucket (nullptr is not in same bucket)\n    if (__pn == __p1_.first().__ptr()\n            || __constrain_hash(__pn->__hash(), __bc) != __chash)\n    {\n        if (__cn->__next_ == nullptr\n            || __constrain_hash(__cn->__next_->__hash(), __bc) != __chash)\n            __bucket_list_[__chash] = nullptr;\n    }\n        // if __cn->__next_ is not in same bucket (nullptr is in same bucket)\n    if (__cn->__next_ != nullptr)\n    {\n        size_t __nhash = __constrain_hash(__cn->__next_->__hash(), __bc);\n        if (__nhash != __chash)\n            __bucket_list_[__nhash] = __pn;\n    }\n    // remove __cn\n    __pn->__next_ = __cn->__next_;\n    __cn->__next_ = nullptr;\n    --size();\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __c_node* __c = __get_db()->__find_c_and_lock(this);\n    for (__i_node** __dp = __c->end_; __dp != __c->beg_; )\n    {\n        --__dp;\n        iterator* __i = static_cast<iterator*>((*__dp)->__i_);\n        if (__i->__node_ == __cn)\n        {\n            (*__dp)->__c_ = nullptr;\n            if (--__c->end_ != __dp)\n                memmove(__dp, __dp+1, (__c->end_ - __dp)*sizeof(__i_node*));\n        }\n    }\n    __get_db()->unlock();\n#endif\n    return __node_holder(__cn->__upcast(), _Dp(__node_alloc(), true));\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\ninline\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__count_unique(const _Key& __k) const\n{\n    return static_cast<size_type>(find(__k) != end());\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__count_multi(const _Key& __k) const\n{\n    size_type __r = 0;\n    const_iterator __i = find(__k);\n    if (__i != end())\n    {\n        const_iterator __e = end();\n        do\n        {\n            ++__i;\n            ++__r;\n        } while (__i != __e && key_eq()(*__i, __k));\n    }\n    return __r;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\npair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator,\n     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_unique(\n        const _Key& __k)\n{\n    iterator __i = find(__k);\n    iterator __j = __i;\n    if (__i != end())\n        ++__j;\n    return pair<iterator, iterator>(__i, __j);\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\npair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator,\n     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_unique(\n        const _Key& __k) const\n{\n    const_iterator __i = find(__k);\n    const_iterator __j = __i;\n    if (__i != end())\n        ++__j;\n    return pair<const_iterator, const_iterator>(__i, __j);\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\npair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator,\n     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_multi(\n        const _Key& __k)\n{\n    iterator __i = find(__k);\n    iterator __j = __i;\n    if (__i != end())\n    {\n        iterator __e = end();\n        do\n        {\n            ++__j;\n        } while (__j != __e && key_eq()(*__j, __k));\n    }\n    return pair<iterator, iterator>(__i, __j);\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntemplate <class _Key>\npair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator,\n     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator>\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_multi(\n        const _Key& __k) const\n{\n    const_iterator __i = find(__k);\n    const_iterator __j = __i;\n    if (__i != end())\n    {\n        const_iterator __e = end();\n        do\n        {\n            ++__j;\n        } while (__j != __e && key_eq()(*__j, __k));\n    }\n    return pair<const_iterator, const_iterator>(__i, __j);\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nvoid\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::swap(__hash_table& __u)\n#if _LIBCPP_STD_VER <= 11\n    _NOEXCEPT_DEBUG_(\n        __is_nothrow_swappable<hasher>::value && __is_nothrow_swappable<key_equal>::value\n        && (!allocator_traits<__pointer_allocator>::propagate_on_container_swap::value\n              || __is_nothrow_swappable<__pointer_allocator>::value)\n        && (!__node_traits::propagate_on_container_swap::value\n              || __is_nothrow_swappable<__node_allocator>::value)\n            )\n#else\n  _NOEXCEPT_DEBUG_(__is_nothrow_swappable<hasher>::value && __is_nothrow_swappable<key_equal>::value)\n#endif\n{\n    _LIBCPP_ASSERT(__node_traits::propagate_on_container_swap::value ||\n                   this->__node_alloc() == __u.__node_alloc(),\n                   \"list::swap: Either propagate_on_container_swap must be true\"\n                   \" or the allocators must compare equal\");\n    {\n    __node_pointer_pointer __npp = __bucket_list_.release();\n    __bucket_list_.reset(__u.__bucket_list_.release());\n    __u.__bucket_list_.reset(__npp);\n    }\n    _VSTD::swap(__bucket_list_.get_deleter().size(), __u.__bucket_list_.get_deleter().size());\n    __swap_allocator(__bucket_list_.get_deleter().__alloc(),\n             __u.__bucket_list_.get_deleter().__alloc());\n    __swap_allocator(__node_alloc(), __u.__node_alloc());\n    _VSTD::swap(__p1_.first().__next_, __u.__p1_.first().__next_);\n    __p2_.swap(__u.__p2_);\n    __p3_.swap(__u.__p3_);\n    if (size() > 0)\n        __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] =\n            __p1_.first().__ptr();\n    if (__u.size() > 0)\n        __u.__bucket_list_[__constrain_hash(__u.__p1_.first().__next_->__hash(), __u.bucket_count())] =\n            __u.__p1_.first().__ptr();\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->swap(this, &__u);\n#endif\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ntypename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::bucket_size(size_type __n) const\n{\n    _LIBCPP_ASSERT(__n < bucket_count(),\n        \"unordered container::bucket_size(n) called with n >= bucket_count()\");\n    __next_pointer __np = __bucket_list_[__n];\n    size_type __bc = bucket_count();\n    size_type __r = 0;\n    if (__np != nullptr)\n    {\n        for (__np = __np->__next_; __np != nullptr &&\n                                   __constrain_hash(__np->__hash(), __bc) == __n;\n                                                    __np = __np->__next_, ++__r)\n            ;\n    }\n    return __r;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(__hash_table<_Tp, _Hash, _Equal, _Alloc>& __x,\n     __hash_table<_Tp, _Hash, _Equal, _Alloc>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nbool\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__dereferenceable(const const_iterator* __i) const\n{\n    return __i->__node_ != nullptr;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nbool\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__decrementable(const const_iterator*) const\n{\n    return false;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nbool\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__addable(const const_iterator*, ptrdiff_t) const\n{\n    return false;\n}\n\ntemplate <class _Tp, class _Hash, class _Equal, class _Alloc>\nbool\n__hash_table<_Tp, _Hash, _Equal, _Alloc>::__subscriptable(const const_iterator*, ptrdiff_t) const\n{\n    return false;\n}\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP__HASH_TABLE\n","// -*- C++ -*-\n//===-------------------------- ostream -----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_OSTREAM\n#define _LIBCPP_OSTREAM\n\n/*\n    ostream synopsis\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass basic_ostream\n    : virtual public basic_ios<charT,traits>\n{\npublic:\n    // types (inherited from basic_ios (27.5.4)):\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    // 27.7.2.2 Constructor/destructor:\n    explicit basic_ostream(basic_streambuf<char_type,traits>* sb);\n    basic_ostream(basic_ostream&& rhs);\n    virtual ~basic_ostream();\n\n    // 27.7.2.3 Assign/swap\n    basic_ostream& operator=(const basic_ostream& rhs) = delete; // C++14\n    basic_ostream& operator=(basic_ostream&& rhs);\n    void swap(basic_ostream& rhs);\n\n    // 27.7.2.4 Prefix/suffix:\n    class sentry;\n\n    // 27.7.2.6 Formatted output:\n    basic_ostream& operator<<(basic_ostream& (*pf)(basic_ostream&));\n    basic_ostream& operator<<(basic_ios<charT, traits>& (*pf)(basic_ios<charT,traits>&));\n    basic_ostream& operator<<(ios_base& (*pf)(ios_base&));\n    basic_ostream& operator<<(bool n);\n    basic_ostream& operator<<(short n);\n    basic_ostream& operator<<(unsigned short n);\n    basic_ostream& operator<<(int n);\n    basic_ostream& operator<<(unsigned int n);\n    basic_ostream& operator<<(long n);\n    basic_ostream& operator<<(unsigned long n);\n    basic_ostream& operator<<(long long n);\n    basic_ostream& operator<<(unsigned long long n);\n    basic_ostream& operator<<(float f);\n    basic_ostream& operator<<(double f);\n    basic_ostream& operator<<(long double f);\n    basic_ostream& operator<<(const void* p);\n    basic_ostream& operator<<(basic_streambuf<char_type,traits>* sb);\n\n    // 27.7.2.7 Unformatted output:\n    basic_ostream& put(char_type c);\n    basic_ostream& write(const char_type* s, streamsize n);\n    basic_ostream& flush();\n\n    // 27.7.2.5 seeks:\n    pos_type tellp();\n    basic_ostream& seekp(pos_type);\n    basic_ostream& seekp(off_type, ios_base::seekdir);\nprotected:\n    basic_ostream(const basic_ostream& rhs) = delete;\n    basic_ostream(basic_ostream&& rhs);\n    // 27.7.3.3 Assign/swap\n    basic_ostream& operator=(basic_ostream& rhs) = delete;\n    basic_ostream& operator=(const basic_ostream&& rhs);\n    void swap(basic_ostream& rhs);\n};\n\n// 27.7.2.6.4 character inserters\n\ntemplate<class charT, class traits>\n  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&, charT);\n\ntemplate<class charT, class traits>\n  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&, char);\n\ntemplate<class traits>\n  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, char);\n\n// signed and unsigned\n\ntemplate<class traits>\n  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, signed char);\n\ntemplate<class traits>\n  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, unsigned char);\n\n// NTBS\ntemplate<class charT, class traits>\n  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&, const charT*);\n\ntemplate<class charT, class traits>\n  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&, const char*);\n\ntemplate<class traits>\n  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, const char*);\n\n// signed and unsigned\ntemplate<class traits>\nbasic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, const signed char*);\n\ntemplate<class traits>\n  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, const unsigned char*);\n\n// swap:\ntemplate <class charT, class traits>\n  void swap(basic_ostream<charT, traits>& x, basic_ostream<charT, traits>& y);\n\ntemplate <class charT, class traits>\n  basic_ostream<charT,traits>& endl(basic_ostream<charT,traits>& os);\n\ntemplate <class charT, class traits>\n  basic_ostream<charT,traits>& ends(basic_ostream<charT,traits>& os);\n\ntemplate <class charT, class traits>\n  basic_ostream<charT,traits>& flush(basic_ostream<charT,traits>& os);\n\n// rvalue stream insertion\ntemplate <class charT, class traits, class T>\n  basic_ostream<charT, traits>&\n  operator<<(basic_ostream<charT, traits>&& os, const T& x);\n\n}  // std\n\n*/\n\n#include <__config>\n#include <ios>\n#include <streambuf>\n#include <locale>\n#include <iterator>\n#include <bitset>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_ostream\n    : virtual public basic_ios<_CharT, _Traits>\n{\npublic:\n    // types (inherited from basic_ios (27.5.4)):\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    // 27.7.2.2 Constructor/destructor:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    explicit basic_ostream(basic_streambuf<char_type, traits_type>* __sb)\n    { this->init(__sb); }\n    virtual ~basic_ostream();\nprotected:\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_ostream(basic_ostream&& __rhs);\n#endif\n\n    // 27.7.2.3 Assign/swap\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    inline _LIBCPP_INLINE_VISIBILITY\n    basic_ostream& operator=(basic_ostream&& __rhs);\n#endif\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    void swap(basic_ostream& __rhs)\n    { basic_ios<char_type, traits_type>::swap(__rhs); }\n\n#ifndef _LIBCPP_CXX03_LANG\n    basic_ostream           (const basic_ostream& __rhs) = delete;\n    basic_ostream& operator=(const basic_ostream& __rhs) = delete;\n#else\n    basic_ostream           (const basic_ostream& __rhs); // not defined\n    basic_ostream& operator=(const basic_ostream& __rhs); // not defined\n#endif\npublic:\n\n    // 27.7.2.4 Prefix/suffix:\n    class _LIBCPP_TEMPLATE_VIS sentry;\n\n    // 27.7.2.6 Formatted output:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_ostream& operator<<(basic_ostream& (*__pf)(basic_ostream&))\n    { return __pf(*this); }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_ostream& operator<<(basic_ios<char_type, traits_type>&\n                              (*__pf)(basic_ios<char_type,traits_type>&))\n    { __pf(*this); return *this; }\n\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_ostream& operator<<(ios_base& (*__pf)(ios_base&))\n    { __pf(*this); return *this; }\n\n    basic_ostream& operator<<(bool __n);\n    basic_ostream& operator<<(short __n);\n    basic_ostream& operator<<(unsigned short __n);\n    basic_ostream& operator<<(int __n);\n    basic_ostream& operator<<(unsigned int __n);\n    basic_ostream& operator<<(long __n);\n    basic_ostream& operator<<(unsigned long __n);\n    basic_ostream& operator<<(long long __n);\n    basic_ostream& operator<<(unsigned long long __n);\n    basic_ostream& operator<<(float __f);\n    basic_ostream& operator<<(double __f);\n    basic_ostream& operator<<(long double __f);\n    basic_ostream& operator<<(const void* __p);\n    basic_ostream& operator<<(basic_streambuf<char_type, traits_type>* __sb);\n\n    // 27.7.2.7 Unformatted output:\n    basic_ostream& put(char_type __c);\n    basic_ostream& write(const char_type* __s, streamsize __n);\n    basic_ostream& flush();\n\n    // 27.7.2.5 seeks:\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    pos_type tellp();\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_ostream& seekp(pos_type __pos);\n    inline _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY\n    basic_ostream& seekp(off_type __off, ios_base::seekdir __dir);\n\nprotected:\n    _LIBCPP_ALWAYS_INLINE\n    basic_ostream() {}  // extension, intentially does not initialize\n};\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_ostream<_CharT, _Traits>::sentry\n{\n    bool __ok_;\n    basic_ostream<_CharT, _Traits>& __os_;\n\n    sentry(const sentry&); // = delete;\n    sentry& operator=(const sentry&); // = delete;\n\npublic:\n    explicit sentry(basic_ostream<_CharT, _Traits>& __os);\n    ~sentry();\n\n    _LIBCPP_ALWAYS_INLINE\n        _LIBCPP_EXPLICIT\n        operator bool() const {return __ok_;}\n};\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>::sentry::sentry(basic_ostream<_CharT, _Traits>& __os)\n    : __ok_(false),\n      __os_(__os)\n{\n    if (__os.good())\n    {\n        if (__os.tie())\n            __os.tie()->flush();\n        __ok_ = true;\n    }\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>::sentry::~sentry()\n{\n    if (__os_.rdbuf() && __os_.good() && (__os_.flags() & ios_base::unitbuf)\n                      && !uncaught_exception())\n    {\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            if (__os_.rdbuf()->pubsync() == -1)\n                __os_.setstate(ios_base::badbit);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    }\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>::basic_ostream(basic_ostream&& __rhs)\n{\n    this->move(__rhs);\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator=(basic_ostream&& __rhs)\n{\n    swap(__rhs);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>::~basic_ostream()\n{\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(basic_streambuf<char_type, traits_type>* __sb)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            if (__sb)\n            {\n#ifndef _LIBCPP_NO_EXCEPTIONS\n                try\n                {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n                    typedef istreambuf_iterator<_CharT, _Traits> _Ip;\n                    typedef ostreambuf_iterator<_CharT, _Traits> _Op;\n                    _Ip __i(__sb);\n                    _Ip __eof;\n                    _Op __o(*this);\n                    size_t __c = 0;\n                    for (; __i != __eof; ++__i, ++__o, ++__c)\n                    {\n                        *__o = *__i;\n                        if (__o.failed())\n                            break;\n                    }\n                    if (__c == 0)\n                        this->setstate(ios_base::failbit);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n                }\n                catch (...)\n                {\n                    this->__set_failbit_and_consider_rethrow();\n                }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            }\n            else\n                this->setstate(ios_base::badbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(bool __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), __n).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(short __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            ios_base::fmtflags __flags = ios_base::flags() & ios_base::basefield;\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(),\n                        __flags == ios_base::oct || __flags == ios_base::hex ?\n                        static_cast<long>(static_cast<unsigned short>(__n))  :\n                        static_cast<long>(__n)).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(unsigned short __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), static_cast<unsigned long>(__n)).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(int __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            ios_base::fmtflags __flags = ios_base::flags() & ios_base::basefield;\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(),\n                        __flags == ios_base::oct || __flags == ios_base::hex ?\n                        static_cast<long>(static_cast<unsigned int>(__n))  :\n                        static_cast<long>(__n)).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(unsigned int __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), static_cast<unsigned long>(__n)).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(long __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), __n).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(unsigned long __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), __n).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(long long __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), __n).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(unsigned long long __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), __n).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(float __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), static_cast<double>(__n)).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(double __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), __n).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(long double __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), __n).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::operator<<(const void* __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;\n            const _Fp& __f = use_facet<_Fp>(this->getloc());\n            if (__f.put(*this, *this, this->fill(), __n).failed())\n                this->setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\n__put_character_sequence(basic_ostream<_CharT, _Traits>& __os,\n                          const _CharT* __str, size_t __len)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_ostream<_CharT, _Traits>::sentry __s(__os);\n        if (__s)\n        {\n            typedef ostreambuf_iterator<_CharT, _Traits> _Ip;\n            if (__pad_and_output(_Ip(__os),\n                                 __str,\n                                 (__os.flags() & ios_base::adjustfield) == ios_base::left ?\n                                     __str + __len :\n                                     __str,\n                                 __str + __len,\n                                 __os,\n                                 __os.fill()).failed())\n                __os.setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __os.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __os;\n}\n\n\ntemplate<class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os, _CharT __c)\n{\n    return _VSTD::__put_character_sequence(__os, &__c, 1);\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os, char __cn)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_ostream<_CharT, _Traits>::sentry __s(__os);\n        if (__s)\n        {\n            _CharT __c = __os.widen(__cn);\n            typedef ostreambuf_iterator<_CharT, _Traits> _Ip;\n            if (__pad_and_output(_Ip(__os),\n                                 &__c,\n                                 (__os.flags() & ios_base::adjustfield) == ios_base::left ?\n                                     &__c + 1 :\n                                     &__c,\n                                 &__c + 1,\n                                 __os,\n                                 __os.fill()).failed())\n                __os.setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __os.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __os;\n}\n\ntemplate<class _Traits>\nbasic_ostream<char, _Traits>&\noperator<<(basic_ostream<char, _Traits>& __os, char __c)\n{\n    return _VSTD::__put_character_sequence(__os, &__c, 1);\n}\n\ntemplate<class _Traits>\nbasic_ostream<char, _Traits>&\noperator<<(basic_ostream<char, _Traits>& __os, signed char __c)\n{\n    return _VSTD::__put_character_sequence(__os, (char *) &__c, 1);\n}\n\ntemplate<class _Traits>\nbasic_ostream<char, _Traits>&\noperator<<(basic_ostream<char, _Traits>& __os, unsigned char __c)\n{\n    return _VSTD::__put_character_sequence(__os, (char *) &__c, 1);\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os, const _CharT* __str)\n{\n    return _VSTD::__put_character_sequence(__os, __str, _Traits::length(__str));\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os, const char* __strn)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        typename basic_ostream<_CharT, _Traits>::sentry __s(__os);\n        if (__s)\n        {\n            typedef ostreambuf_iterator<_CharT, _Traits> _Ip;\n            size_t __len = char_traits<char>::length(__strn);\n            const int __bs = 100;\n            _CharT __wbb[__bs];\n            _CharT* __wb = __wbb;\n            unique_ptr<_CharT, void(*)(void*)> __h(0, free);\n            if (__len > __bs)\n            {\n                __wb = (_CharT*)malloc(__len*sizeof(_CharT));\n                if (__wb == 0)\n                    __throw_bad_alloc();\n                __h.reset(__wb);\n            }\n            for (_CharT* __p = __wb; *__strn != '\\0'; ++__strn, ++__p)\n                *__p = __os.widen(*__strn);\n            if (__pad_and_output(_Ip(__os),\n                                 __wb,\n                                 (__os.flags() & ios_base::adjustfield) == ios_base::left ?\n                                     __wb + __len :\n                                     __wb,\n                                 __wb + __len,\n                                 __os,\n                                 __os.fill()).failed())\n                __os.setstate(ios_base::badbit | ios_base::failbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        __os.__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __os;\n}\n\ntemplate<class _Traits>\nbasic_ostream<char, _Traits>&\noperator<<(basic_ostream<char, _Traits>& __os, const char* __str)\n{\n    return _VSTD::__put_character_sequence(__os, __str, _Traits::length(__str));\n}\n\ntemplate<class _Traits>\nbasic_ostream<char, _Traits>&\noperator<<(basic_ostream<char, _Traits>& __os, const signed char* __str)\n{\n    const char *__s = (const char *) __str;\n    return _VSTD::__put_character_sequence(__os, __s, _Traits::length(__s));\n}\n\ntemplate<class _Traits>\nbasic_ostream<char, _Traits>&\noperator<<(basic_ostream<char, _Traits>& __os, const unsigned char* __str)\n{\n    const char *__s = (const char *) __str;\n    return _VSTD::__put_character_sequence(__os, __s, _Traits::length(__s));\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::put(char_type __c)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __s(*this);\n        if (__s)\n        {\n            typedef ostreambuf_iterator<_CharT, _Traits> _Op;\n            _Op __o(*this);\n            *__o = __c;\n            if (__o.failed())\n                this->setstate(ios_base::badbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::write(const char_type* __s, streamsize __n)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        sentry __sen(*this);\n        if (__sen && __n)\n        {\n            if (this->rdbuf()->sputn(__s, __n) != __n)\n                this->setstate(ios_base::badbit);\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::flush()\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        if (this->rdbuf())\n        {\n            sentry __s(*this);\n            if (__s)\n            {\n                if (this->rdbuf()->pubsync() == -1)\n                    this->setstate(ios_base::badbit);\n            }\n        }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n        this->__set_badbit_and_consider_rethrow();\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_ostream<_CharT, _Traits>::pos_type\nbasic_ostream<_CharT, _Traits>::tellp()\n{\n    if (this->fail())\n        return pos_type(-1);\n    return this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::seekp(pos_type __pos)\n{\n    sentry __s(*this);\n    if (!this->fail())\n    {\n        if (this->rdbuf()->pubseekpos(__pos, ios_base::out) == pos_type(-1))\n            this->setstate(ios_base::failbit);\n    }\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\nbasic_ostream<_CharT, _Traits>::seekp(off_type __off, ios_base::seekdir __dir)\n{\n    sentry __s(*this);\n    if (!this->fail())\n    {\n        if (this->rdbuf()->pubseekoff(__off, __dir, ios_base::out) == pos_type(-1))\n            this->setstate(ios_base::failbit);\n    }\n    return *this;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ostream<_CharT, _Traits>&\nendl(basic_ostream<_CharT, _Traits>& __os)\n{\n    __os.put(__os.widen('\\n'));\n    __os.flush();\n    return __os;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ostream<_CharT, _Traits>&\nends(basic_ostream<_CharT, _Traits>& __os)\n{\n    __os.put(_CharT());\n    return __os;\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ostream<_CharT, _Traits>&\nflush(basic_ostream<_CharT, _Traits>& __os)\n{\n    __os.flush();\n    return __os;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Stream, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    !is_lvalue_reference<_Stream>::value &&\n    is_base_of<ios_base, _Stream>::value,\n    _Stream&&\n>::type\noperator<<(_Stream&& __os, const _Tp& __x)\n{\n    __os << __x;\n    return _VSTD::move(__os);\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate<class _CharT, class _Traits, class _Allocator>\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os,\n           const basic_string<_CharT, _Traits, _Allocator>& __str)\n{\n    return _VSTD::__put_character_sequence(__os, __str.data(), __str.size());\n}\n\ntemplate<class _CharT, class _Traits>\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os,\n           const basic_string_view<_CharT, _Traits> __sv)\n{\n    return _VSTD::__put_character_sequence(__os, __sv.data(), __sv.size());\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __ec)\n{\n    return __os << __ec.category().name() << ':' << __ec.value();\n}\n\ntemplate<class _CharT, class _Traits, class _Yp>\ninline _LIBCPP_INLINE_VISIBILITY\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p)\n{\n    return __os << __p.get();\n}\n\ntemplate <class _CharT, class _Traits, size_t _Size>\nbasic_ostream<_CharT, _Traits>&\noperator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Size>& __x)\n{\n    return __os << __x.template to_string<_CharT, _Traits>\n                        (use_facet<ctype<_CharT> >(__os.getloc()).widen('0'),\n                         use_facet<ctype<_CharT> >(__os.getloc()).widen('1'));\n}\n\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_ostream<char>)\n_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_ostream<wchar_t>)\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_OSTREAM\n","// -*- C++ -*-\n//===----------------------------------------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP___LOCALE\n#define _LIBCPP___LOCALE\n\n#include <__config>\n#include <string>\n#include <memory>\n#include <utility>\n#include <mutex>\n#include <cstdint>\n#include <cctype>\n#include <locale.h>\n#if defined(_LIBCPP_MSVCRT) || defined(__MINGW32__)\n# include <support/win32/locale_win32.h>\n#elif defined(_AIX)\n# include <support/ibm/xlocale.h>\n#elif defined(__ANDROID__)\n// Android gained the locale aware functions in L (API level 21)\n# include <android/api-level.h>\n# if __ANDROID_API__ <= 20\n#  include <support/android/locale_bionic.h>\n# endif\n#elif defined(__sun__)\n# include <xlocale.h>\n# include <support/solaris/xlocale.h>\n#elif defined(_NEWLIB_VERSION)\n# include <support/newlib/xlocale.h>\n#elif (defined(__GLIBC__) || defined(__APPLE__)      || defined(__FreeBSD__) \\\n    || defined(__EMSCRIPTEN__) || defined(__IBMCPP__))\n# include <xlocale.h>\n#elif defined(_LIBCPP_HAS_MUSL_LIBC)\n# include <support/musl/xlocale.h>\n#endif // __GLIBC__ || __APPLE__ || __FreeBSD__ || __sun__ || __EMSCRIPTEN__ || __IBMCPP__\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\nclass _LIBCPP_TYPE_VIS locale;\n\ntemplate <class _Facet>\n_LIBCPP_INLINE_VISIBILITY\nbool\nhas_facet(const locale&) _NOEXCEPT;\n\ntemplate <class _Facet>\n_LIBCPP_INLINE_VISIBILITY\nconst _Facet&\nuse_facet(const locale&);\n\nclass _LIBCPP_TYPE_VIS locale\n{\npublic:\n    // types:\n    class _LIBCPP_TYPE_VIS facet;\n    class _LIBCPP_TYPE_VIS id;\n\n    typedef int category;\n    static const category // values assigned here are for exposition only\n        none     = 0,\n        collate  = LC_COLLATE_MASK,\n        ctype    = LC_CTYPE_MASK,\n        monetary = LC_MONETARY_MASK,\n        numeric  = LC_NUMERIC_MASK,\n        time     = LC_TIME_MASK,\n        messages = LC_MESSAGES_MASK,\n        all = collate | ctype | monetary | numeric | time | messages;\n\n    // construct/copy/destroy:\n    locale()  _NOEXCEPT;\n    locale(const locale&)  _NOEXCEPT;\n    explicit locale(const char*);\n    explicit locale(const string&);\n    locale(const locale&, const char*, category);\n    locale(const locale&, const string&, category);\n    template <class _Facet>\n        _LIBCPP_INLINE_VISIBILITY locale(const locale&, _Facet*);\n    locale(const locale&, const locale&, category);\n\n    ~locale();\n\n    const locale& operator=(const locale&)  _NOEXCEPT;\n\n    template <class _Facet> locale combine(const locale&) const;\n\n    // locale operations:\n    string name() const;\n    bool operator==(const locale&) const;\n    bool operator!=(const locale& __y) const {return !(*this == __y);}\n    template <class _CharT, class _Traits, class _Allocator>\n      bool operator()(const basic_string<_CharT, _Traits, _Allocator>&,\n                      const basic_string<_CharT, _Traits, _Allocator>&) const;\n\n    // global locale objects:\n    static locale global(const locale&);\n    static const locale& classic();\n\nprivate:\n    class __imp;\n    __imp* __locale_;\n\n    void __install_ctor(const locale&, facet*, long);\n    static locale& __global();\n    bool has_facet(id&) const;\n    const facet* use_facet(id&) const;\n\n    template <class _Facet> friend bool has_facet(const locale&)  _NOEXCEPT;\n    template <class _Facet> friend const _Facet& use_facet(const locale&);\n};\n\nclass _LIBCPP_TYPE_VIS locale::facet\n    : public __shared_count\n{\nprotected:\n    _LIBCPP_INLINE_VISIBILITY\n    explicit facet(size_t __refs = 0)\n        : __shared_count(static_cast<long>(__refs)-1) {}\n\n    virtual ~facet();\n\n//    facet(const facet&) = delete;     // effectively done in __shared_count\n//    void operator=(const facet&) = delete;\nprivate:\n    virtual void __on_zero_shared() _NOEXCEPT;\n};\n\nclass _LIBCPP_TYPE_VIS locale::id\n{\n    once_flag      __flag_;\n    int32_t        __id_;\n\n    static int32_t __next_id;\npublic:\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR id() :__id_(0) {}\nprivate:\n    void __init();\n    void operator=(const id&); // = delete;\n    id(const id&); // = delete;\npublic:  // only needed for tests\n    long __get();\n\n    friend class locale;\n    friend class locale::__imp;\n};\n\ntemplate <class _Facet>\ninline _LIBCPP_INLINE_VISIBILITY\nlocale::locale(const locale& __other, _Facet* __f)\n{\n    __install_ctor(__other, __f, __f ? __f->id.__get() : 0);\n}\n\ntemplate <class _Facet>\nlocale\nlocale::combine(const locale& __other) const\n{\n    if (!_VSTD::has_facet<_Facet>(__other))\n        __throw_runtime_error(\"locale::combine: locale missing facet\");\n\n    return locale(*this, &const_cast<_Facet&>(_VSTD::use_facet<_Facet>(__other)));\n}\n\ntemplate <class _Facet>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nhas_facet(const locale& __l)  _NOEXCEPT\n{\n    return __l.has_facet(_Facet::id);\n}\n\ntemplate <class _Facet>\ninline _LIBCPP_INLINE_VISIBILITY\nconst _Facet&\nuse_facet(const locale& __l)\n{\n    return static_cast<const _Facet&>(*__l.use_facet(_Facet::id));\n}\n\n// template <class _CharT> class collate;\n\ntemplate <class _CharT>\nclass _LIBCPP_TEMPLATE_VIS collate\n    : public locale::facet\n{\npublic:\n    typedef _CharT char_type;\n    typedef basic_string<char_type> string_type;\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit collate(size_t __refs = 0)\n        : locale::facet(__refs) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    int compare(const char_type* __lo1, const char_type* __hi1,\n                const char_type* __lo2, const char_type* __hi2) const\n    {\n        return do_compare(__lo1, __hi1, __lo2, __hi2);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    string_type transform(const char_type* __lo, const char_type* __hi) const\n    {\n        return do_transform(__lo, __hi);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    long hash(const char_type* __lo, const char_type* __hi) const\n    {\n        return do_hash(__lo, __hi);\n    }\n\n    static locale::id id;\n\nprotected:\n    ~collate();\n    virtual int do_compare(const char_type* __lo1, const char_type* __hi1,\n                           const char_type* __lo2, const char_type* __hi2) const;\n    virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const\n        {return string_type(__lo, __hi);}\n    virtual long do_hash(const char_type* __lo, const char_type* __hi) const;\n};\n\ntemplate <class _CharT> locale::id collate<_CharT>::id;\n\ntemplate <class _CharT>\ncollate<_CharT>::~collate()\n{\n}\n\ntemplate <class _CharT>\nint\ncollate<_CharT>::do_compare(const char_type* __lo1, const char_type* __hi1,\n                            const char_type* __lo2, const char_type* __hi2) const\n{\n    for (; __lo2 != __hi2; ++__lo1, ++__lo2)\n    {\n        if (__lo1 == __hi1 || *__lo1 < *__lo2)\n            return -1;\n        if (*__lo2 < *__lo1)\n            return 1;\n    }\n    return __lo1 != __hi1;\n}\n\ntemplate <class _CharT>\nlong\ncollate<_CharT>::do_hash(const char_type* __lo, const char_type* __hi) const\n{\n    size_t __h = 0;\n    const size_t __sr = __CHAR_BIT__ * sizeof(size_t) - 8;\n    const size_t __mask = size_t(0xF) << (__sr + 4);\n    for(const char_type* __p = __lo; __p != __hi; ++__p)\n    {\n        __h = (__h << 4) + static_cast<size_t>(*__p);\n        size_t __g = __h & __mask;\n        __h ^= __g | (__g >> __sr);\n    }\n    return static_cast<long>(__h);\n}\n\n_LIBCPP_EXTERN_TEMPLATE2(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS collate<char>)\n_LIBCPP_EXTERN_TEMPLATE2(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS collate<wchar_t>)\n\n// template <class CharT> class collate_byname;\n\ntemplate <class _CharT> class _LIBCPP_TEMPLATE_VIS collate_byname;\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS collate_byname<char>\n    : public collate<char>\n{\n    locale_t __l;\npublic:\n    typedef char char_type;\n    typedef basic_string<char_type> string_type;\n\n    explicit collate_byname(const char* __n, size_t __refs = 0);\n    explicit collate_byname(const string& __n, size_t __refs = 0);\n\nprotected:\n    ~collate_byname();\n    virtual int do_compare(const char_type* __lo1, const char_type* __hi1,\n                           const char_type* __lo2, const char_type* __hi2) const;\n    virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const;\n};\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS collate_byname<wchar_t>\n    : public collate<wchar_t>\n{\n    locale_t __l;\npublic:\n    typedef wchar_t char_type;\n    typedef basic_string<char_type> string_type;\n\n    explicit collate_byname(const char* __n, size_t __refs = 0);\n    explicit collate_byname(const string& __n, size_t __refs = 0);\n\nprotected:\n    ~collate_byname();\n\n    virtual int do_compare(const char_type* __lo1, const char_type* __hi1,\n                           const char_type* __lo2, const char_type* __hi2) const;\n    virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const;\n};\n\ntemplate <class _CharT, class _Traits, class _Allocator>\nbool\nlocale::operator()(const basic_string<_CharT, _Traits, _Allocator>& __x,\n                   const basic_string<_CharT, _Traits, _Allocator>& __y) const\n{\n    return _VSTD::use_facet<_VSTD::collate<_CharT> >(*this).compare(\n                                       __x.data(), __x.data() + __x.size(),\n                                       __y.data(), __y.data() + __y.size()) < 0;\n}\n\n// template <class charT> class ctype\n\nclass _LIBCPP_TYPE_VIS ctype_base\n{\npublic:\n#if defined(__GLIBC__)\n    typedef unsigned short mask;\n    static const mask space  = _ISspace;\n    static const mask print  = _ISprint;\n    static const mask cntrl  = _IScntrl;\n    static const mask upper  = _ISupper;\n    static const mask lower  = _ISlower;\n    static const mask alpha  = _ISalpha;\n    static const mask digit  = _ISdigit;\n    static const mask punct  = _ISpunct;\n    static const mask xdigit = _ISxdigit;\n    static const mask blank  = _ISblank;\n#elif defined(_LIBCPP_MSVCRT)\n    typedef unsigned short mask;\n    static const mask space  = _SPACE;\n    static const mask print  = _BLANK|_PUNCT|_ALPHA|_DIGIT;\n    static const mask cntrl  = _CONTROL;\n    static const mask upper  = _UPPER;\n    static const mask lower  = _LOWER;\n    static const mask alpha  = _ALPHA;\n    static const mask digit  = _DIGIT;\n    static const mask punct  = _PUNCT;\n    static const mask xdigit = _HEX;\n    static const mask blank  = _BLANK;\n# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT\n#elif defined(__APPLE__) || defined(__FreeBSD__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)\n# ifdef __APPLE__\n    typedef __uint32_t mask;\n# elif defined(__FreeBSD__)\n    typedef unsigned long mask;\n# elif defined(__EMSCRIPTEN__) || defined(__NetBSD__)\n    typedef unsigned short mask;\n# endif\n    static const mask space  = _CTYPE_S;\n    static const mask print  = _CTYPE_R;\n    static const mask cntrl  = _CTYPE_C;\n    static const mask upper  = _CTYPE_U;\n    static const mask lower  = _CTYPE_L;\n    static const mask alpha  = _CTYPE_A;\n    static const mask digit  = _CTYPE_D;\n    static const mask punct  = _CTYPE_P;\n    static const mask xdigit = _CTYPE_X;\n\n# if defined(__NetBSD__)\n    static const mask blank  = _CTYPE_BL;\n# else\n    static const mask blank  = _CTYPE_B;\n# endif\n#elif defined(__sun__) || defined(_AIX)\n    typedef unsigned int mask;\n    static const mask space  = _ISSPACE;\n    static const mask print  = _ISPRINT;\n    static const mask cntrl  = _ISCNTRL;\n    static const mask upper  = _ISUPPER;\n    static const mask lower  = _ISLOWER;\n    static const mask alpha  = _ISALPHA;\n    static const mask digit  = _ISDIGIT;\n    static const mask punct  = _ISPUNCT;\n    static const mask xdigit = _ISXDIGIT;\n    static const mask blank  = _ISBLANK;\n#elif defined(_NEWLIB_VERSION)\n    // Same type as Newlib's _ctype_ array in newlib/libc/include/ctype.h.\n    typedef char mask;\n    static const mask space  = _S;\n    static const mask print  = _P | _U | _L | _N | _B;\n    static const mask cntrl  = _C;\n    static const mask upper  = _U;\n    static const mask lower  = _L;\n    static const mask alpha  = _U | _L;\n    static const mask digit  = _N;\n    static const mask punct  = _P;\n    static const mask xdigit = _X | _N;\n    static const mask blank  = _B;\n# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT\n# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_ALPHA\n# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_XDIGIT\n#else\n    typedef unsigned long mask;\n    static const mask space  = 1<<0;\n    static const mask print  = 1<<1;\n    static const mask cntrl  = 1<<2;\n    static const mask upper  = 1<<3;\n    static const mask lower  = 1<<4;\n    static const mask alpha  = 1<<5;\n    static const mask digit  = 1<<6;\n    static const mask punct  = 1<<7;\n    static const mask xdigit = 1<<8;\n    static const mask blank  = 1<<9;\n#endif\n    static const mask alnum  = alpha | digit;\n    static const mask graph  = alnum | punct;\n\n    _LIBCPP_ALWAYS_INLINE ctype_base() {}\n};\n\ntemplate <class _CharT> class _LIBCPP_TEMPLATE_VIS ctype;\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS ctype<wchar_t>\n    : public locale::facet,\n      public ctype_base\n{\npublic:\n    typedef wchar_t char_type;\n\n    _LIBCPP_ALWAYS_INLINE\n    explicit ctype(size_t __refs = 0)\n        : locale::facet(__refs) {}\n\n    _LIBCPP_ALWAYS_INLINE\n    bool is(mask __m, char_type __c) const\n    {\n        return do_is(__m, __c);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const\n    {\n        return do_is(__low, __high, __vec);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* scan_is(mask __m, const char_type* __low, const char_type* __high) const\n    {\n        return do_scan_is(__m, __low, __high);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const\n    {\n        return do_scan_not(__m, __low, __high);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    char_type toupper(char_type __c) const\n    {\n        return do_toupper(__c);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* toupper(char_type* __low, const char_type* __high) const\n    {\n        return do_toupper(__low, __high);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    char_type tolower(char_type __c) const\n    {\n        return do_tolower(__c);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* tolower(char_type* __low, const char_type* __high) const\n    {\n        return do_tolower(__low, __high);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    char_type widen(char __c) const\n    {\n        return do_widen(__c);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char* widen(const char* __low, const char* __high, char_type* __to) const\n    {\n        return do_widen(__low, __high, __to);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    char narrow(char_type __c, char __dfault) const\n    {\n        return do_narrow(__c, __dfault);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const\n    {\n        return do_narrow(__low, __high, __dfault, __to);\n    }\n\n    static locale::id id;\n\nprotected:\n    ~ctype();\n    virtual bool do_is(mask __m, char_type __c) const;\n    virtual const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const;\n    virtual const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const;\n    virtual const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const;\n    virtual char_type do_toupper(char_type) const;\n    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;\n    virtual char_type do_tolower(char_type) const;\n    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;\n    virtual char_type do_widen(char) const;\n    virtual const char* do_widen(const char* __low, const char* __high, char_type* __dest) const;\n    virtual char do_narrow(char_type, char __dfault) const;\n    virtual const char_type* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const;\n};\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS ctype<char>\n    : public locale::facet, public ctype_base\n{\n    const mask* __tab_;\n    bool        __del_;\npublic:\n    typedef char char_type;\n\n    explicit ctype(const mask* __tab = 0, bool __del = false, size_t __refs = 0);\n\n    _LIBCPP_ALWAYS_INLINE\n    bool is(mask __m, char_type __c) const\n    {\n        return isascii(__c) ? (__tab_[static_cast<int>(__c)] & __m) !=0 : false;\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const\n    {\n        for (; __low != __high; ++__low, ++__vec)\n            *__vec = isascii(*__low) ? __tab_[static_cast<int>(*__low)] : 0;\n        return __low;\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* scan_is (mask __m, const char_type* __low, const char_type* __high) const\n    {\n        for (; __low != __high; ++__low)\n            if (isascii(*__low) && (__tab_[static_cast<int>(*__low)] & __m))\n                break;\n        return __low;\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const\n    {\n        for (; __low != __high; ++__low)\n            if (!(isascii(*__low) && (__tab_[static_cast<int>(*__low)] & __m)))\n                break;\n        return __low;\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    char_type toupper(char_type __c) const\n    {\n        return do_toupper(__c);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* toupper(char_type* __low, const char_type* __high) const\n    {\n        return do_toupper(__low, __high);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    char_type tolower(char_type __c) const\n    {\n        return do_tolower(__c);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char_type* tolower(char_type* __low, const char_type* __high) const\n    {\n        return do_tolower(__low, __high);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    char_type widen(char __c) const\n    {\n        return do_widen(__c);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char* widen(const char* __low, const char* __high, char_type* __to) const\n    {\n        return do_widen(__low, __high, __to);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    char narrow(char_type __c, char __dfault) const\n    {\n        return do_narrow(__c, __dfault);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    const char* narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const\n    {\n        return do_narrow(__low, __high, __dfault, __to);\n    }\n\n    static locale::id id;\n\n#ifdef _CACHED_RUNES\n    static const size_t table_size = _CACHED_RUNES;\n#else\n    static const size_t table_size = 256;  // FIXME: Don't hardcode this.\n#endif\n    _LIBCPP_ALWAYS_INLINE const mask* table() const  _NOEXCEPT {return __tab_;}\n    static const mask* classic_table()  _NOEXCEPT;\n#if defined(__GLIBC__) || defined(__EMSCRIPTEN__)\n    static const int* __classic_upper_table() _NOEXCEPT;\n    static const int* __classic_lower_table() _NOEXCEPT;\n#endif\n#if defined(__NetBSD__)\n    static const short* __classic_upper_table() _NOEXCEPT;\n    static const short* __classic_lower_table() _NOEXCEPT;\n#endif\n\nprotected:\n    ~ctype();\n    virtual char_type do_toupper(char_type __c) const;\n    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;\n    virtual char_type do_tolower(char_type __c) const;\n    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;\n    virtual char_type do_widen(char __c) const;\n    virtual const char* do_widen(const char* __low, const char* __high, char_type* __to) const;\n    virtual char do_narrow(char_type __c, char __dfault) const;\n    virtual const char* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const;\n};\n\n// template <class CharT> class ctype_byname;\n\ntemplate <class _CharT> class _LIBCPP_TEMPLATE_VIS ctype_byname;\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS ctype_byname<char>\n    : public ctype<char>\n{\n    locale_t __l;\n\npublic:\n    explicit ctype_byname(const char*, size_t = 0);\n    explicit ctype_byname(const string&, size_t = 0);\n\nprotected:\n    ~ctype_byname();\n    virtual char_type do_toupper(char_type) const;\n    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;\n    virtual char_type do_tolower(char_type) const;\n    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;\n};\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS ctype_byname<wchar_t>\n    : public ctype<wchar_t>\n{\n    locale_t __l;\n\npublic:\n    explicit ctype_byname(const char*, size_t = 0);\n    explicit ctype_byname(const string&, size_t = 0);\n\nprotected:\n    ~ctype_byname();\n    virtual bool do_is(mask __m, char_type __c) const;\n    virtual const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const;\n    virtual const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const;\n    virtual const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const;\n    virtual char_type do_toupper(char_type) const;\n    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;\n    virtual char_type do_tolower(char_type) const;\n    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;\n    virtual char_type do_widen(char) const;\n    virtual const char* do_widen(const char* __low, const char* __high, char_type* __dest) const;\n    virtual char do_narrow(char_type, char __dfault) const;\n    virtual const char_type* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const;\n};\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nisspace(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nisprint(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\niscntrl(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nisupper(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nislower(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nisalpha(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nisdigit(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nispunct(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nisxdigit(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nisalnum(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nisgraph(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\n_CharT\ntoupper(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).toupper(__c);\n}\n\ntemplate <class _CharT>\ninline _LIBCPP_INLINE_VISIBILITY\n_CharT\ntolower(_CharT __c, const locale& __loc)\n{\n    return use_facet<ctype<_CharT> >(__loc).tolower(__c);\n}\n\n// codecvt_base\n\nclass _LIBCPP_TYPE_VIS codecvt_base\n{\npublic:\n    _LIBCPP_ALWAYS_INLINE codecvt_base() {}\n    enum result {ok, partial, error, noconv};\n};\n\n// template <class internT, class externT, class stateT> class codecvt;\n\ntemplate <class _InternT, class _ExternT, class _StateT> class _LIBCPP_TEMPLATE_VIS codecvt;\n\n// template <> class codecvt<char, char, mbstate_t>\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS codecvt<char, char, mbstate_t>\n    : public locale::facet,\n      public codecvt_base\n{\npublic:\n    typedef char      intern_type;\n    typedef char      extern_type;\n    typedef mbstate_t state_type;\n\n    _LIBCPP_ALWAYS_INLINE\n    explicit codecvt(size_t __refs = 0)\n        : locale::facet(__refs) {}\n\n    _LIBCPP_ALWAYS_INLINE\n    result out(state_type& __st,\n               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,\n               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const\n    {\n        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    result unshift(state_type& __st,\n                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const\n    {\n        return do_unshift(__st, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    result in(state_type& __st,\n              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,\n              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const\n    {\n        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int encoding() const  _NOEXCEPT\n    {\n        return do_encoding();\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    bool always_noconv() const  _NOEXCEPT\n    {\n        return do_always_noconv();\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const\n    {\n        return do_length(__st, __frm, __end, __mx);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int max_length() const  _NOEXCEPT\n    {\n        return do_max_length();\n    }\n\n    static locale::id id;\n\nprotected:\n    _LIBCPP_ALWAYS_INLINE\n    explicit codecvt(const char*, size_t __refs = 0)\n        : locale::facet(__refs) {}\n\n    ~codecvt();\n\n    virtual result do_out(state_type& __st,\n                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,\n                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;\n    virtual result do_in(state_type& __st,\n                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,\n                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;\n    virtual result do_unshift(state_type& __st,\n                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;\n    virtual int do_encoding() const  _NOEXCEPT;\n    virtual bool do_always_noconv() const  _NOEXCEPT;\n    virtual int do_length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const;\n    virtual int do_max_length() const  _NOEXCEPT;\n};\n\n// template <> class codecvt<wchar_t, char, mbstate_t>\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS codecvt<wchar_t, char, mbstate_t>\n    : public locale::facet,\n      public codecvt_base\n{\n    locale_t __l;\npublic:\n    typedef wchar_t   intern_type;\n    typedef char      extern_type;\n    typedef mbstate_t state_type;\n\n    explicit codecvt(size_t __refs = 0);\n\n    _LIBCPP_ALWAYS_INLINE\n    result out(state_type& __st,\n               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,\n               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const\n    {\n        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    result unshift(state_type& __st,\n                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const\n    {\n        return do_unshift(__st, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    result in(state_type& __st,\n              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,\n              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const\n    {\n        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int encoding() const  _NOEXCEPT\n    {\n        return do_encoding();\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    bool always_noconv() const  _NOEXCEPT\n    {\n        return do_always_noconv();\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const\n    {\n        return do_length(__st, __frm, __end, __mx);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int max_length() const  _NOEXCEPT\n    {\n        return do_max_length();\n    }\n\n    static locale::id id;\n\nprotected:\n    explicit codecvt(const char*, size_t __refs = 0);\n\n    ~codecvt();\n\n    virtual result do_out(state_type& __st,\n                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,\n                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;\n    virtual result do_in(state_type& __st,\n                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,\n                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;\n    virtual result do_unshift(state_type& __st,\n                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;\n    virtual int do_encoding() const  _NOEXCEPT;\n    virtual bool do_always_noconv() const  _NOEXCEPT;\n    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;\n    virtual int do_max_length() const  _NOEXCEPT;\n};\n\n// template <> class codecvt<char16_t, char, mbstate_t>\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS codecvt<char16_t, char, mbstate_t>\n    : public locale::facet,\n      public codecvt_base\n{\npublic:\n    typedef char16_t  intern_type;\n    typedef char      extern_type;\n    typedef mbstate_t state_type;\n\n    _LIBCPP_ALWAYS_INLINE\n    explicit codecvt(size_t __refs = 0)\n        : locale::facet(__refs) {}\n\n    _LIBCPP_ALWAYS_INLINE\n    result out(state_type& __st,\n               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,\n               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const\n    {\n        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    result unshift(state_type& __st,\n                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const\n    {\n        return do_unshift(__st, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    result in(state_type& __st,\n              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,\n              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const\n    {\n        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int encoding() const  _NOEXCEPT\n    {\n        return do_encoding();\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    bool always_noconv() const  _NOEXCEPT\n    {\n        return do_always_noconv();\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const\n    {\n        return do_length(__st, __frm, __end, __mx);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int max_length() const  _NOEXCEPT\n    {\n        return do_max_length();\n    }\n\n    static locale::id id;\n\nprotected:\n    _LIBCPP_ALWAYS_INLINE\n    explicit codecvt(const char*, size_t __refs = 0)\n        : locale::facet(__refs) {}\n\n    ~codecvt();\n\n    virtual result do_out(state_type& __st,\n                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,\n                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;\n    virtual result do_in(state_type& __st,\n                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,\n                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;\n    virtual result do_unshift(state_type& __st,\n                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;\n    virtual int do_encoding() const  _NOEXCEPT;\n    virtual bool do_always_noconv() const  _NOEXCEPT;\n    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;\n    virtual int do_max_length() const  _NOEXCEPT;\n};\n\n// template <> class codecvt<char32_t, char, mbstate_t>\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS codecvt<char32_t, char, mbstate_t>\n    : public locale::facet,\n      public codecvt_base\n{\npublic:\n    typedef char32_t  intern_type;\n    typedef char      extern_type;\n    typedef mbstate_t state_type;\n\n    _LIBCPP_ALWAYS_INLINE\n    explicit codecvt(size_t __refs = 0)\n        : locale::facet(__refs) {}\n\n    _LIBCPP_ALWAYS_INLINE\n    result out(state_type& __st,\n               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,\n               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const\n    {\n        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    result unshift(state_type& __st,\n                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const\n    {\n        return do_unshift(__st, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    result in(state_type& __st,\n              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,\n              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const\n    {\n        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int encoding() const  _NOEXCEPT\n    {\n        return do_encoding();\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    bool always_noconv() const  _NOEXCEPT\n    {\n        return do_always_noconv();\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const\n    {\n        return do_length(__st, __frm, __end, __mx);\n    }\n\n    _LIBCPP_ALWAYS_INLINE\n    int max_length() const  _NOEXCEPT\n    {\n        return do_max_length();\n    }\n\n    static locale::id id;\n\nprotected:\n    _LIBCPP_ALWAYS_INLINE\n    explicit codecvt(const char*, size_t __refs = 0)\n        : locale::facet(__refs) {}\n\n    ~codecvt();\n\n    virtual result do_out(state_type& __st,\n                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,\n                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;\n    virtual result do_in(state_type& __st,\n                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,\n                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;\n    virtual result do_unshift(state_type& __st,\n                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;\n    virtual int do_encoding() const  _NOEXCEPT;\n    virtual bool do_always_noconv() const  _NOEXCEPT;\n    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;\n    virtual int do_max_length() const  _NOEXCEPT;\n};\n\n// template <class _InternT, class _ExternT, class _StateT> class codecvt_byname\n\ntemplate <class _InternT, class _ExternT, class _StateT>\nclass _LIBCPP_TEMPLATE_VIS codecvt_byname\n    : public codecvt<_InternT, _ExternT, _StateT>\n{\npublic:\n    _LIBCPP_ALWAYS_INLINE\n    explicit codecvt_byname(const char* __nm, size_t __refs = 0)\n        : codecvt<_InternT, _ExternT, _StateT>(__nm, __refs) {}\n    _LIBCPP_ALWAYS_INLINE\n    explicit codecvt_byname(const string& __nm, size_t __refs = 0)\n        : codecvt<_InternT, _ExternT, _StateT>(__nm.c_str(), __refs) {}\nprotected:\n    ~codecvt_byname();\n};\n\ntemplate <class _InternT, class _ExternT, class _StateT>\ncodecvt_byname<_InternT, _ExternT, _StateT>::~codecvt_byname()\n{\n}\n\n_LIBCPP_EXTERN_TEMPLATE2(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char, char, mbstate_t>)\n_LIBCPP_EXTERN_TEMPLATE2(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<wchar_t, char, mbstate_t>)\n_LIBCPP_EXTERN_TEMPLATE2(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char16_t, char, mbstate_t>)\n_LIBCPP_EXTERN_TEMPLATE2(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char32_t, char, mbstate_t>)\n\n_LIBCPP_NORETURN _LIBCPP_FUNC_VIS void __throw_runtime_error(const char*);\n\ntemplate <size_t _Np>\nstruct __narrow_to_utf8\n{\n    template <class _OutputIterator, class _CharT>\n    _OutputIterator\n    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const;\n};\n\ntemplate <>\nstruct __narrow_to_utf8<8>\n{\n    template <class _OutputIterator, class _CharT>\n    _LIBCPP_ALWAYS_INLINE\n    _OutputIterator\n    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const\n    {\n        for (; __wb < __we; ++__wb, ++__s)\n            *__s = *__wb;\n        return __s;\n    }\n};\n\ntemplate <>\nstruct __narrow_to_utf8<16>\n    : public codecvt<char16_t, char, mbstate_t>\n{\n    _LIBCPP_ALWAYS_INLINE\n    __narrow_to_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}\n\n    ~__narrow_to_utf8();\n\n    template <class _OutputIterator, class _CharT>\n    _LIBCPP_ALWAYS_INLINE\n    _OutputIterator\n    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const\n    {\n        result __r = ok;\n        mbstate_t __mb;\n        while (__wb < __we && __r != error)\n        {\n            const int __sz = 32;\n            char __buf[__sz];\n            char* __bn;\n            const char16_t* __wn = (const char16_t*)__wb;\n            __r = do_out(__mb, (const char16_t*)__wb, (const char16_t*)__we, __wn,\n                         __buf, __buf+__sz, __bn);\n            if (__r == codecvt_base::error || __wn == (const char16_t*)__wb)\n                __throw_runtime_error(\"locale not supported\");\n            for (const char* __p = __buf; __p < __bn; ++__p, ++__s)\n                *__s = *__p;\n            __wb = (const _CharT*)__wn;\n        }\n        return __s;\n    }\n};\n\ntemplate <>\nstruct __narrow_to_utf8<32>\n    : public codecvt<char32_t, char, mbstate_t>\n{\n    _LIBCPP_ALWAYS_INLINE\n    __narrow_to_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}\n\n    ~__narrow_to_utf8();\n\n    template <class _OutputIterator, class _CharT>\n    _LIBCPP_ALWAYS_INLINE\n    _OutputIterator\n    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const\n    {\n        result __r = ok;\n        mbstate_t __mb;\n        while (__wb < __we && __r != error)\n        {\n            const int __sz = 32;\n            char __buf[__sz];\n            char* __bn;\n            const char32_t* __wn = (const char32_t*)__wb;\n            __r = do_out(__mb, (const char32_t*)__wb, (const char32_t*)__we, __wn,\n                         __buf, __buf+__sz, __bn);\n            if (__r == codecvt_base::error || __wn == (const char32_t*)__wb)\n                __throw_runtime_error(\"locale not supported\");\n            for (const char* __p = __buf; __p < __bn; ++__p, ++__s)\n                *__s = *__p;\n            __wb = (const _CharT*)__wn;\n        }\n        return __s;\n    }\n};\n\ntemplate <size_t _Np>\nstruct __widen_from_utf8\n{\n    template <class _OutputIterator>\n    _OutputIterator\n    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const;\n};\n\ntemplate <>\nstruct __widen_from_utf8<8>\n{\n    template <class _OutputIterator>\n    _LIBCPP_ALWAYS_INLINE\n    _OutputIterator\n    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const\n    {\n        for (; __nb < __ne; ++__nb, ++__s)\n            *__s = *__nb;\n        return __s;\n    }\n};\n\ntemplate <>\nstruct __widen_from_utf8<16>\n    : public codecvt<char16_t, char, mbstate_t>\n{\n    _LIBCPP_ALWAYS_INLINE\n    __widen_from_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}\n\n    ~__widen_from_utf8();\n\n    template <class _OutputIterator>\n    _LIBCPP_ALWAYS_INLINE\n    _OutputIterator\n    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const\n    {\n        result __r = ok;\n        mbstate_t __mb;\n        while (__nb < __ne && __r != error)\n        {\n            const int __sz = 32;\n            char16_t __buf[__sz];\n            char16_t* __bn;\n            const char* __nn = __nb;\n            __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb+__sz : __ne, __nn,\n                        __buf, __buf+__sz, __bn);\n            if (__r == codecvt_base::error || __nn == __nb)\n                __throw_runtime_error(\"locale not supported\");\n            for (const char16_t* __p = __buf; __p < __bn; ++__p, ++__s)\n                *__s = (wchar_t)*__p;\n            __nb = __nn;\n        }\n        return __s;\n    }\n};\n\ntemplate <>\nstruct __widen_from_utf8<32>\n    : public codecvt<char32_t, char, mbstate_t>\n{\n    _LIBCPP_ALWAYS_INLINE\n    __widen_from_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}\n\n    ~__widen_from_utf8();\n\n    template <class _OutputIterator>\n    _LIBCPP_ALWAYS_INLINE\n    _OutputIterator\n    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const\n    {\n        result __r = ok;\n        mbstate_t __mb;\n        while (__nb < __ne && __r != error)\n        {\n            const int __sz = 32;\n            char32_t __buf[__sz];\n            char32_t* __bn;\n            const char* __nn = __nb;\n            __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb+__sz : __ne, __nn,\n                        __buf, __buf+__sz, __bn);\n            if (__r == codecvt_base::error || __nn == __nb)\n                __throw_runtime_error(\"locale not supported\");\n            for (const char32_t* __p = __buf; __p < __bn; ++__p, ++__s)\n                *__s = (wchar_t)*__p;\n            __nb = __nn;\n        }\n        return __s;\n    }\n};\n\n// template <class charT> class numpunct\n\ntemplate <class _CharT> class _LIBCPP_TEMPLATE_VIS numpunct;\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS numpunct<char>\n    : public locale::facet\n{\npublic:\n    typedef char char_type;\n    typedef basic_string<char_type> string_type;\n\n    explicit numpunct(size_t __refs = 0);\n\n    _LIBCPP_ALWAYS_INLINE char_type decimal_point() const {return do_decimal_point();}\n    _LIBCPP_ALWAYS_INLINE char_type thousands_sep() const {return do_thousands_sep();}\n    _LIBCPP_ALWAYS_INLINE string grouping() const         {return do_grouping();}\n    _LIBCPP_ALWAYS_INLINE string_type truename() const    {return do_truename();}\n    _LIBCPP_ALWAYS_INLINE string_type falsename() const   {return do_falsename();}\n\n    static locale::id id;\n\nprotected:\n    ~numpunct();\n    virtual char_type do_decimal_point() const;\n    virtual char_type do_thousands_sep() const;\n    virtual string do_grouping() const;\n    virtual string_type do_truename() const;\n    virtual string_type do_falsename() const;\n\n    char_type __decimal_point_;\n    char_type __thousands_sep_;\n    string __grouping_;\n};\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS numpunct<wchar_t>\n    : public locale::facet\n{\npublic:\n    typedef wchar_t char_type;\n    typedef basic_string<char_type> string_type;\n\n    explicit numpunct(size_t __refs = 0);\n\n    _LIBCPP_ALWAYS_INLINE char_type decimal_point() const {return do_decimal_point();}\n    _LIBCPP_ALWAYS_INLINE char_type thousands_sep() const {return do_thousands_sep();}\n    _LIBCPP_ALWAYS_INLINE string grouping() const         {return do_grouping();}\n    _LIBCPP_ALWAYS_INLINE string_type truename() const    {return do_truename();}\n    _LIBCPP_ALWAYS_INLINE string_type falsename() const   {return do_falsename();}\n\n    static locale::id id;\n\nprotected:\n    ~numpunct();\n    virtual char_type do_decimal_point() const;\n    virtual char_type do_thousands_sep() const;\n    virtual string do_grouping() const;\n    virtual string_type do_truename() const;\n    virtual string_type do_falsename() const;\n\n    char_type __decimal_point_;\n    char_type __thousands_sep_;\n    string __grouping_;\n};\n\n// template <class charT> class numpunct_byname\n\ntemplate <class _CharT> class _LIBCPP_TEMPLATE_VIS numpunct_byname;\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS numpunct_byname<char>\n: public numpunct<char>\n{\npublic:\n    typedef char char_type;\n    typedef basic_string<char_type> string_type;\n\n    explicit numpunct_byname(const char* __nm, size_t __refs = 0);\n    explicit numpunct_byname(const string& __nm, size_t __refs = 0);\n\nprotected:\n    ~numpunct_byname();\n\nprivate:\n    void __init(const char*);\n};\n\ntemplate <>\nclass _LIBCPP_TYPE_VIS numpunct_byname<wchar_t>\n: public numpunct<wchar_t>\n{\npublic:\n    typedef wchar_t char_type;\n    typedef basic_string<char_type> string_type;\n\n    explicit numpunct_byname(const char* __nm, size_t __refs = 0);\n    explicit numpunct_byname(const string& __nm, size_t __refs = 0);\n\nprotected:\n    ~numpunct_byname();\n\nprivate:\n    void __init(const char*);\n};\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP___LOCALE\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  emfunctions.h\n *  @brief Specialized, useful function for Empirical.\n */\n\n#ifndef EMP_EM_FUNCTIONS_H\n#define EMP_EM_FUNCTIONS_H\n\n#include <functional>\n\n#include \"../tools/alert.h\"\n#include \"../tools/string_utils.h\"\n#include \"JSWrap.h\"\n\nnamespace emp {\n\n#define AlertVar(VAR) emp::Alert(std::string(#VAR) + std::string(\"=\") + std::to_string(VAR))\n\n  /// Call a function after a specified amount of time.\n  static void DelayCall(const std::function<void()> & in_fun, int delay) {\n    uint32_t callback_id = JSWrapOnce(in_fun); // Wrap and dispose when called.\n    (void)callback_id;\n    EM_ASM_ARGS({\n        window.setTimeout(function() { emp.Callback($0); }, $1);\n      }, callback_id, delay);\n  }\n\n  /// Provide a function to call whenever a window's size changes (no arguments).\n  static void OnResize(const std::function<void()> & in_fun) {\n    uint32_t callback_id = JSWrap(in_fun);\n    (void)callback_id;\n    EM_ASM_ARGS({\n        window.addEventListener(\"resize\", function() { emp.Callback($0); });\n      }, callback_id);\n  }\n\n  /// Provide a function to call whenever a window's size changes (new size as arguments)\n  static void OnResize(const std::function<void(int,int)> & in_fun) {\n    uint32_t callback_id = JSWrap(in_fun);\n    (void)callback_id;\n    EM_ASM_ARGS({\n        window.addEventListener(\"resize\", function() {\n            emp.Callback($0, window.innerWidth, window.innerHeight);\n          });\n      }, callback_id);\n  }\n\n  /// Get the current time, as provided by the web browser.\n  inline double GetTime() { return EM_ASM_DOUBLE_V({ return (new Date()).getTime(); }); }\n\n  /// Determine with width of the current window.\n  inline int GetWindowInnerWidth() { return EM_ASM_INT_V({ return window.innerWidth; }); }\n\n  /// Determine with height of the current window.\n  inline int GetWindowInnerHeight() { return EM_ASM_INT_V({ return window.innerHeight; }); }\n\n  /// Set the background color of this web page.\n  static void SetBackgroundColor(const std::string color) {\n    EM_ASM_ARGS({\n        var color = Pointer_stringify($0);\n        $(\"body\").first().css(\"background-color\", color);\n      }, color.c_str());\n  }\n\n  static void SetColor(const std::string color) {\n    EM_ASM_ARGS({\n        var color = Pointer_stringify($0);\n        $(\"body\").first().css(\"color\", color);\n      }, color.c_str());\n  }\n\n  // These may already be in HTML5 for Emscripten\n  static void SetCursor(const char * type) {\n    EM_ASM_ARGS({\n        var type = Pointer_stringify($0);\n        document.body.style.cursor = type;\n    }, type);\n  }\n\n  static void OpenWindow(const std::string & url) {\n    EM_ASM_ARGS({\n        var url = Pointer_stringify($0);\n        window.open = url;\n    }, url.c_str());\n  }\n\n  // Convert a sequence with possible html codes to appear identically in html.\n  static std::string text2html(const std::string & text) {\n    std::stringstream html;\n    for (char x : text) {\n      switch (x) {\n      case '<': html << \"&lt;\"; break;\n      case '>': html << \"&gt;\"; break;\n      case '&': html << \"&amp;\"; break;\n      case ' ': html << \"&nbsp;\"; break;\n      case '\\n': html << \"<br>\"; break;\n      default: html << x;\n      };\n    }\n    return html.str();\n  }\n\n    /// Get the value of @param attribute in the element with @param id as its id. \n    inline std::string GetElementAttribute(const std::string & id, const std::string & attribute) { \n      char * buffer = (char * )EM_ASM_INT({\n        var text = document.getElementById(Pointer_stringify($0))[Pointer_stringify($1)];\n        var buffer = Module._malloc(text.length+1);\n        Module.stringToUTF8(text, buffer, text.length*4+1);\n        return buffer;\n      }, id.c_str(), attribute.c_str());\n\n      std::string result = std::string(buffer);\n      free(buffer);\n      return result;\n    }\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018.\n *\n *  @file  Button.h\n *  @brief Create/control an HTML button and call a specified function when that button is clicked.\n *\n *  Use example:\n *\n *    emp::web::Button my_button(MyFun, \"Button Name\", \"html_id\");\n *\n *  Where my_button is the C++ object linking to the button, MyFun is the\n *  function you want to call on clicks, \"Button Name\" is the label on the\n *  button itself, and \"html_id\" is the optional id you want it to use in the\n *  HTML code (otherwise it will generate a unique name on its own.)\n *\n *  Member functions to set state:\n *    Button & Callback(const std::function<void()> & in_callback)\n *    Button & Label(const std::string & in_label)\n *    Button & Autofocus(bool in_af)\n *    Button & Disabled(bool in_dis)\n *\n *  Retriving current state:\n *    const std::string & GetLabel() const\n *    bool HasAutofocus() const\n *    bool IsDisabled() const\n */\n\n#ifndef EMP_WEB_BUTTON_H\n#define EMP_WEB_BUTTON_H\n\n#include \"init.h\"\n#include \"Widget.h\"\n\nnamespace emp {\nnamespace web {\n\n  /// Create or control an HTML Button object that you can manipulate and update as needed.\n  class Button : public internal::WidgetFacet<Button> {\n    friend class ButtonInfo;\n  protected:\n\n    // Buttons associated with the same DOM element share a single ButtonInfo object.\n    class ButtonInfo : public internal::WidgetInfo {\n      friend Button;\n    protected:\n      std::string label;\n      std::function<void()> callback;\n      uint32_t callback_id;\n\n      ButtonInfo(const std::string & in_id=\"\") : internal::WidgetInfo(in_id) { ; }\n      ButtonInfo(const ButtonInfo &) = delete;               // No copies of INFO allowed\n      ButtonInfo & operator=(const ButtonInfo &) = delete;   // No copies of INFO allowed\n      virtual ~ButtonInfo() {\n        if (callback_id) emp::JSDelete(callback_id);         // Delete callback wrapper.\n      }\n\n      std::string GetTypeName() const override { return \"ButtonInfo\"; }\n\n      void DoCallback() {\n        callback();\n        UpdateDependants();\n      }\n\n      virtual void GetHTML(std::stringstream & HTML) override {\n        HTML.str(to_string(\"<button id=\\\"\", id, \"\\\">\", label, \"</button>\"));\n      }\n\n      void UpdateCallback(const std::function<void()> & in_cb) {\n        callback = in_cb;\n      }\n\n      void UpdateLabel(const std::string & in_label) {\n        label = in_label;\n        if (state == Widget::ACTIVE) ReplaceHTML();     // If node is active, immediately redraw!\n      }\n\n    public:\n      virtual std::string GetType() override { return \"web::ButtonInfo\"; }\n    }; // End of ButtonInfo definition\n\n\n    // Get a properly cast version of indo.\n    ButtonInfo * Info() { return (ButtonInfo *) info; }\n    const ButtonInfo * Info() const { return (ButtonInfo *) info; }\n\n    Button(ButtonInfo * in_info) : WidgetFacet(in_info) { ; }\n\n  public:\n\n    /// Create a new button.\n    /// @param in_cb The function to call when the button is clicked.\n    /// @param in_label The label that should appear on the button.\n    /// @param in_id The HTML ID to use for this button (leave blank for auto-generated)\n    Button(const std::function<void()> & in_cb, const std::string & in_label,\n           const std::string & in_id=\"\")\n      : WidgetFacet(in_id)\n    {\n      info = new ButtonInfo(in_id);\n\n      Info()->label = in_label;\n\n      Info()->callback = in_cb;\n      ButtonInfo * b_info = Info();\n      Info()->callback_id = JSWrap( std::function<void()>( [b_info](){b_info->DoCallback();} )  );\n      SetAttr(\"onclick\", emp::to_string(\"emp.Callback(\", Info()->callback_id, \")\"));\n    }\n\n    /// Link to an existing button.\n    Button(const Button & in) : WidgetFacet(in) { ; }\n    Button(const Widget & in) : WidgetFacet(in) { emp_assert(in.IsButton()); }\n    Button() : WidgetFacet(\"\") { info = nullptr; }\n    virtual ~Button() { ; }\n\n    using INFO_TYPE = ButtonInfo;\n\n    /// Set a new callback function to trigger when the button is clicked.\n    Button & SetCallback(const std::function<void()> & in_cb) {\n      Info()->UpdateCallback(in_cb);\n      return *this;\n    }\n\n    /// Set a new label to appear on this Button.\n    Button & SetLabel(const std::string & in_label) { Info()->UpdateLabel(in_label); return *this; }\n\n    /// Setup this button to have autofocus (or remove it!)\n    Button & SetAutofocus(bool _in=true) { SetAttr(\"autofocus\", ToJSLiteral(_in)); return *this; }\n\n    /// Setup this button to be disabled (or re-enable it!)\n    Button & SetDisabled(bool _in=true) {\n      if (_in) SetAttr(\"disabled\", \"disabled\");\n      else {\n        Info()->extras.RemoveAttr(\"disabled\");\n        if (IsActive()) Info()->ReplaceHTML();\n      }\n\n      return *this;\n    }\n\n    /// Get the current label on this button.\n    const std::string & GetLabel() const { return Info()->label; }\n\n    /// Determine if this button currently has autofocus.\n    bool HasAutofocus() const { return GetAttr(\"autofocus\") == \"true\"; }\n\n    /// Determine if this button is currently disabled.\n    bool IsDisabled() const { return Info()->extras.HasAttr(\"disabled\"); }\n  };\n\n\n}\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2018\n *\n *  @file array.h\n *  @brief A drop-in wrapper for std::array; adds on bounds checking in debug mode.\n *  @note Status: RELEASE\n *\n *  If EMP_NDEBUG is set, emp::array is just an alias for std::array.\n *  Otherwise, every time an array is accessed, tests are done to make sure that the\n *  access is legal.\n *\n *  @todo Add tests in array::front and array::back to ensure not empty.\n *  @todo Add tests for get.\n */\n\n\n#ifndef EMP_ARRAY_H\n#define EMP_ARRAY_H\n\n#include <initializer_list>\n#include <array>\n\n#include \"assert.h\"\n#include \"../meta/TypeID.h\"\n\n#ifdef EMP_NDEBUG\n\nnamespace emp {\n  /// In release mode, emp::array is simply an alias for std::array.\n  template <typename T, size_t N> using array = std::array<T,N>;\n}\n\n#else\n\nnamespace emp {\n\n  /// We are in debug mode, so emp::array has the same interface as std::array, but with extra\n  /// bounds checking.  Using vector as our base since it has the right pieces and is dyanmic.\n  template <typename T, size_t N>\n  class array : public std::vector<T> {\n  private:\n    using this_t = emp::array<T,N>;\n    using base_t = std::vector<T>;\n\n  public:\n    bool valid;\n\n    /// Setup an iterator wrapper to make sure that they're valid.\n    template<typename ITERATOR_T>\n    struct iterator_wrapper : public ITERATOR_T {\n      using this_t = iterator_wrapper<ITERATOR_T>;\n      using wrapped_t = ITERATOR_T;\n      using vec_t = emp::array<T,N>;\n\n      /// What vector was this iterator created from?\n      const vec_t * v_ptr;\n\n      iterator_wrapper(const ITERATOR_T & _in, const vec_t * _v) : ITERATOR_T(_in), v_ptr(_v) { ; }\n      iterator_wrapper(const this_t &) = default;\n      iterator_wrapper(this_t &&) = default;\n      ~iterator_wrapper() { ; }\n\n      // Debug tools to make sure this iterator is okay.\n      bool OK(bool begin_ok=true, bool end_ok=true) const {\n        if (v_ptr == nullptr) return false;                // Invalid vector\n        if (!v_ptr->valid) return false;                   // Vector has been deleted!\n        size_t pos = (size_t) (*this - v_ptr->begin());\n        if (pos > v_ptr->size()) return false;             // Iterator out of range.\n        if (!begin_ok && pos == 0) return false;           // Iterator not allowed at beginning.\n        if (!end_ok && pos == v_ptr->size()) return false; // Iterator not allowed at end.\n        return true;\n      }\n\n      this_t & operator=(const this_t &) = default;\n      this_t & operator=(this_t &&) = default;\n\n      operator ITERATOR_T() { return *this; }\n      operator const ITERATOR_T() const { return *this; }\n\n      auto & operator*() {\n        emp_assert(OK(true, false));  // Ensure array is being pointed to properly.\n        return wrapped_t::operator*();\n      }\n      const auto & operator*() const {\n        emp_assert(OK(true, false));  // Ensure array is being pointed to properly.\n        return wrapped_t::operator*();\n      }\n\n      auto operator->() {\n        emp_assert(OK(true, false));  // Ensure array is being pointed to properly.\n        return wrapped_t::operator->();\n      }\n      const auto operator->() const {\n        emp_assert(OK(true, false));  // Ensure array is being pointed to properly.\n        return wrapped_t::operator->();\n      }\n\n      this_t & operator++() { emp_assert(OK(true,false)); wrapped_t::operator++(); return *this; }\n      this_t operator++(int x) { emp_assert(OK(true,false)); return this_t(wrapped_t::operator++(x), v_ptr); }\n      this_t & operator--() { emp_assert(OK(false,true)); wrapped_t::operator--(); return *this; }\n      this_t operator--(int x) { emp_assert(OK(false,true)); return this_t(wrapped_t::operator--(x), v_ptr); }\n\n      auto operator+(int in) { emp_assert(OK()); return this_t(wrapped_t::operator+(in), v_ptr); }\n      auto operator-(int in) { emp_assert(OK()); return this_t(wrapped_t::operator-(in), v_ptr); }\n      auto operator-(const this_t & in) { emp_assert(OK()); return ((wrapped_t) *this) - (wrapped_t) in; }\n\n      this_t & operator+=(int in) { emp_assert(OK()); wrapped_t::operator+=(in); return *this; }\n      this_t & operator-=(int in) { emp_assert(OK()); wrapped_t::operator-=(in); return *this; }\n      auto & operator[](int offset) { emp_assert(OK()); return wrapped_t::operator[](offset); }\n    };\n\n    using iterator = iterator_wrapper< typename base_t::iterator >;\n    using const_iterator = iterator_wrapper< typename base_t::const_iterator >;\n    using reverse_iterator = iterator_wrapper< typename base_t::reverse_iterator >;\n    using const_reverse_iterator = iterator_wrapper< typename base_t::const_reverse_iterator >;\n    using value_type = T;\n    using size_type = typename base_t::size_type;\n    using reference = typename base_t::reference;\n    using const_reference = typename base_t::const_reference;\n\n    array() : base_t(N), valid(true) {};\n    array(const this_t & _in) : base_t(_in), valid(true) { emp_assert(_in.size() == N); };\n    array(std::initializer_list<T> in_list) : base_t(in_list), valid(true) { emp_assert(size() == N); }\n    template <typename InputIt>\n    array(InputIt first, InputIt last) : base_t(first, last), valid(true) { emp_assert(size() == N); }\n    ~array() { valid=false; } // No longer valid when array is deleted.\n\n    operator std::array<T,N>() {\n      std::array<T,N> ar;\n      for (size_t i = 0; i < N; i++) ar[i] = base_t::operator[](i);\n      return ar;\n    }\n\n    constexpr size_t size() const { return N; }\n\n    iterator begin() noexcept { return iterator(base_t::begin(), this); }\n    const_iterator begin() const noexcept { return const_iterator(base_t::begin(), this); }\n    iterator end() noexcept { return iterator(base_t::end(), this); }\n    const_iterator end() const noexcept { return const_iterator(base_t::end(), this); }\n\n    this_t & operator=(const this_t &) = default;\n\n    T & operator[](size_t pos) {\n      emp_assert(pos < N, pos, N);\n      return base_t::operator[](pos);\n    }\n\n    const T & operator[](size_t pos) const {\n      emp_assert(pos < N, pos, N);\n      return base_t::operator[](pos);\n    }\n\n    T & back() { emp_assert(N > 0); return base_t::back(); }\n    const T & back() const { emp_assert(N > 0); return base_t::back(); }\n    T & front() { emp_assert(N > 0); return base_t::front(); }\n    const T & front() const { emp_assert(N > 0); return base_t::front(); }\n\n    void fill(const T & val) { this->assign(N, val); }\n\n    // Functions to make sure to throw an error on:\n\n    void resize(size_t new_size) { emp_assert(false, \"invalid operation for array!\"); }\n    void resize(size_t new_size, const T & val) { emp_assert(false, \"invalid operation for array!\"); }\n\n    template <typename... PB_Ts>\n    void push_back(PB_Ts &&... args) { emp_assert(false, \"invalid operation for array!\"); }\n    void pop_back() { emp_assert(false, \"invalid operation for array!\"); }\n\n    template <typename... ARGS>\n    iterator insert(ARGS &&... args) {\n      emp_assert(false, \"invalid operation for array!\");\n      return iterator( base_t::insert(std::forward<ARGS>(args)...), this );\n    }\n\n    template <typename... ARGS>\n    iterator erase(ARGS &&... args) {\n      emp_assert(false, \"invalid operation for array!\");\n      return iterator( base_t::erase(std::forward<ARGS>(args)...), this );\n    }\n\n    template <typename... ARGS>\n    iterator emplace(ARGS &&... args) {\n      emp_assert(false, \"invalid operation for array!\");\n      return iterator( base_t::emplace(std::forward<ARGS>(args)...), this );\n    }\n\n    template <typename... ARGS>\n    void emplace_back(ARGS &&... args) {\n      emp_assert(false, \"invalid operation for array!\");\n    }\n  };\n\n\n}\n\n// A crude, generic printing function for arrays.\ntemplate <typename T, size_t N>\nstd::ostream & operator<<(std::ostream & out, const emp::array<T,N> & v) {\n  for (const T & x : v) out << x << \" \";\n  return out;\n}\n\ntemplate <typename T, size_t N>\nstd::istream & operator>>(std::istream & is, emp::array<T,N> & v) {\n  for (T & x : v) is >> x;\n  return is;\n}\n\n#endif\n\nnamespace emp{\n  /// Ensure that emp::array works with TypeID\n  template <typename T, size_t N> struct TypeID<emp::array<T,N>> {\n    static std::string GetName() {\n      std::stringstream ss;\n      ss << \"emp::array<\" << TypeID<T>::GetName() << \",\" << N << \">\";\n      return ss.str();\n    }\n  };\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2018\n *\n *  @file Ptr.h\n *  @brief A wrapper for pointers that does careful memory tracking (but only in debug mode).\n *  @note Status: BETA\n *\n *  Ptr objects behave as normal pointers under most conditions.  However, if a program is\n *  compiled with EMP_TRACK_MEM set, then these pointers perform extra tests to ensure that\n *  they point to valid memory and that memory is freed before pointers are released.\n *\n *  If you trip an assert, you can re-do the run a track a specific pointer by defining\n *  EMP_ABORT_PTR_NEW or EMP_ABORT_PTR_DELETE to the ID of the pointer in question.  This will\n *  allow you to track the pointer more easily in a debugger.\n *\n *  @todo Track information about emp::vector and emp::array objects to make sure we don't\n *    point directly into them? (A resize() could make such pointers invalid!) Or better, warn\n *    it vector memory could have moved.\n *  @todo Get working with threads\n */\n\n#ifndef EMP_PTR_H\n#define EMP_PTR_H\n\n#include <unordered_map>\n\n#include \"assert.h\"\n#include \"vector.h\"\n\nnamespace emp {\n\n  namespace internal {\n    /// An anonymous log2 calculator for hashing below.\n    static constexpr size_t Log2(size_t x) { return x <= 1 ? 0 : (Log2(x/2) + 1); }\n\n    static bool ptr_debug = false;\n  }\n  void SetPtrDebug(bool _d = true) { internal::ptr_debug = _d; }\n  bool GetPtrDebug() { return internal::ptr_debug; }\n\n  enum class PtrStatus { DELETED=0, ACTIVE, ARRAY };\n\n  class PtrInfo {\n  private:\n    const void * ptr;   ///< Which pointer are we keeping data on?\n    int count;          ///< How many of this pointer do we have?\n    PtrStatus status;   ///< Has this pointer been deleted? (i.e., we should no longer access it!)\n    size_t array_bytes; ///< How big is the array pointed to (in bytes)?\n\n  public:\n    PtrInfo(const void * _ptr) : ptr(_ptr), count(1), status(PtrStatus::ACTIVE), array_bytes(0) {\n      if (internal::ptr_debug) std::cout << \"Created info for pointer: \" << ptr << std::endl;\n    }\n    PtrInfo(const void * _ptr, size_t _array_bytes)\n      : ptr(_ptr), count(1), status(PtrStatus::ARRAY), array_bytes(_array_bytes)\n    {\n      emp_assert(_array_bytes >= 1);\n      if (internal::ptr_debug) {\n        std::cout << \"Created info for array pointer (bytes=\" << array_bytes << \"): \"\n                  << ptr << std::endl;\n      }\n    }\n    PtrInfo(const PtrInfo &) = default;\n    PtrInfo(PtrInfo &&) = default;\n    PtrInfo & operator=(const PtrInfo &) = default;\n    PtrInfo & operator=(PtrInfo &&) = default;\n\n    ~PtrInfo() {\n      if (internal::ptr_debug) std::cout << \"Deleted info for pointer \" << ptr << std::endl;\n    }\n\n    /// What pointer does this one hold information about?\n    const void * GetPtr() const noexcept { return ptr; }\n\n    /// How many Ptr objects point to the associated position?\n    int GetCount() const noexcept { return count; }\n\n    /// If this ptr is to an array, how many bytes large is the array (may be different from size!)\n    size_t GetArrayBytes() const noexcept { return array_bytes; }\n\n    /// Is this pointer currently valid to access?\n    bool IsActive() const noexcept { return (bool) status; }\n\n    /// Is this pointer pointing to an array?\n    bool IsArray() const noexcept { return status == PtrStatus::ARRAY; }\n\n    /// Denote that this pointer is an array.\n    void SetArray(size_t bytes) noexcept { array_bytes = bytes; status = PtrStatus::ARRAY; }\n\n    /// Add one more pointer.\n    void Inc(size_t id) {\n      if (internal::ptr_debug) std::cout << \"Inc info for pointer \" << ptr << std::endl;\n      emp_assert(status != PtrStatus::DELETED, \"Incrementing deleted pointer!\", id);\n      count++;\n    }\n\n    /// Remove a pointer.\n    void Dec(size_t id) {\n      if (internal::ptr_debug) std::cout << \"Dec info for pointer \" << ptr << std::endl;\n\n      // Make sure that we have more than one copy, -or- we've already deleted this pointer\n      emp_assert(count > 1 || status == PtrStatus::DELETED, \"Removing last reference to owned Ptr!\", id);\n      count--;\n    }\n\n    /// Indicate that the associated position has been deleted.\n    void MarkDeleted() {\n      if (internal::ptr_debug) std::cout << \"Marked deleted for pointer \" << ptr << std::endl;\n      status = PtrStatus::DELETED;\n    }\n\n    /// Debug utility to determine if everything looks okay with this pointer's information.\n    bool OK() const noexcept {\n      if (ptr == nullptr) return false;     // Should not have info for a null pointer.\n      if (status == PtrStatus::ARRAY) {\n        if (array_bytes == 0) return false; // Arrays cannot be size 0.\n        if (count == 0) return false;       // Active arrays must have pointers to them.\n      }\n      if (status == PtrStatus::ACTIVE) {\n        if (array_bytes > 0) return false;  // non-arrays must be array size 0.\n        if (count == 0) return false;       // Active pointers must have references to them.\n      }\n      return true;\n    }\n  };\n\n\n  /// Facilitate tracking of all Ptr objects in this run.\n  class PtrTracker {\n  private:\n    std::unordered_map<const void *, size_t> ptr_id;  ///< Associate raw pointers with unique IDs\n    emp::vector<PtrInfo> id_info;                     ///< Associate IDs with pointer information.\n    static constexpr size_t UNTRACKED_ID = (size_t) -1;\n\n    // Make PtrTracker a singleton.\n    PtrTracker() : ptr_id(), id_info() {\n      std::cout << \"EMP_TRACK_MEM: Pointer tracking is active!\\n\";\n    }\n    PtrTracker(const PtrTracker &) = delete;\n    PtrTracker(PtrTracker &&) = delete;\n    PtrTracker & operator=(const PtrTracker &) = delete;\n    PtrTracker & operator=(PtrTracker &&) = delete;\n\n  public:\n    ~PtrTracker() {\n      // Track stats about pointer record.\n      size_t total = 0;\n      size_t remain = 0;\n\n      // Scan through live pointers and make sure all have been deleted.\n      for (const auto & info : id_info) {\n        total++;\n        if (info.GetCount()) remain++;\n\n        emp_assert(info.IsActive() == false, info.GetPtr(), info.GetCount(), info.IsActive());\n      }\n\n      std::cout << \"EMP_TRACK_MEM: No memory leaks found!\\n \"\n                << total << \" pointers found; \"\n                << remain << \" still exist with a non-null value (but have been properly deleted)\"\n                << std::endl;\n    }\n\n    /// Treat this class as a singleton with a single Get() method to retrieve it.\n    static PtrTracker & Get() { static PtrTracker tracker; return tracker; }\n\n    /// Get the info associated with an existing pointer.\n    PtrInfo & GetInfo(const void * ptr) { return id_info[ptr_id[ptr]]; }\n    PtrInfo & GetInfo(size_t id) { return id_info[id]; }\n\n    /// Determine if a pointer is being tracked.\n    bool HasPtr(const void * ptr) const {\n      if (internal::ptr_debug) std::cout << \"HasPtr: \" << ptr << std::endl;\n      return ptr_id.find(ptr) != ptr_id.end();\n    }\n\n    /// Retrive the ID associated with a pointer.\n    size_t GetCurID(const void * ptr) { emp_assert(HasPtr(ptr)); return ptr_id[ptr]; }\n\n    /// Lookup how many pointers are being tracked.\n    size_t GetNumIDs() const { return id_info.size(); }\n\n    /// How big is an array associated with an ID?\n    size_t GetArrayBytes(size_t id) const { return id_info[id].GetArrayBytes(); }\n\n    /// Check if an ID is for a pointer that has been deleted.\n    bool IsDeleted(size_t id) const {\n      if (id == UNTRACKED_ID) return false;   // Not tracked!\n      if (internal::ptr_debug) std::cout << \"IsDeleted: \" << id << std::endl;\n      return !id_info[id].IsActive();\n    }\n\n    /// Is a pointer active and ready to be used?\n    bool IsActive(const void * ptr) {\n      if (internal::ptr_debug) std::cout << \"IsActive: \" << ptr << std::endl;\n      if (ptr_id.find(ptr) == ptr_id.end()) return false; // Not in database.\n      return GetInfo(ptr).IsActive();\n    }\n\n    /// Is a pointer id associated with a pointer that's active and ready to be used?\n    bool IsActiveID(size_t id) {\n      if (id == UNTRACKED_ID) return false;\n      if (id >= id_info.size()) return false;\n      return id_info[id].IsActive();\n    }\n\n    /// Is an ID associated with an array?\n    bool IsArrayID(size_t id) {\n      if (internal::ptr_debug) std::cout << \"IsArrayID: \" << id << std::endl;\n      return id_info[id].IsArray();\n    }\n\n    /// How many Ptr objects are associated with an ID?\n    int GetIDCount(size_t id) const {\n      if (internal::ptr_debug) std::cout << \"Count:  \" << id << std::endl;\n      return id_info[id].GetCount();\n    }\n\n    /// This pointer was just created as a Ptr!\n    size_t New(const void * ptr) {\n      emp_assert(ptr);     // Cannot track a null pointer.\n      size_t id = id_info.size();\n#ifdef EMP_ABORT_PTR_NEW\n      if (id == EMP_ABORT_PTR_NEW) {\n        std::cerr << \"Aborting at creation of Ptr id \" << id << std::endl;\n        abort();\n      }\n#endif\n      if (internal::ptr_debug) std::cout << \"New:    \" << id << \" (\" << ptr << \")\" << std::endl;\n      // Make sure pointer is not already stored -OR- hase been deleted (since re-use is possible).\n      emp_assert(!HasPtr(ptr) || IsDeleted(GetCurID(ptr)), id);\n      id_info.emplace_back(ptr);\n      ptr_id[ptr] = id;\n      return id;\n    }\n\n    /// This pointer was just created as a Ptr ARRAY!\n    size_t NewArray(const void * ptr, size_t array_bytes) {\n      size_t id = New(ptr);  // Build the new pointer.\n      if (internal::ptr_debug) std::cout << \"  ...Array of size \" << array_bytes << std::endl;\n      id_info[id].SetArray(array_bytes);\n      return id;\n    }\n\n    /// Increment the nuber of Pointers associated with an ID\n    void IncID(size_t id) {\n      if (id == UNTRACKED_ID) return;   // Not tracked!\n      if (internal::ptr_debug) std::cout << \"Inc:    \" << id << std::endl;\n      id_info[id].Inc(id);\n    }\n\n    /// Decrement the nuber of Pointers associated with an ID\n    void DecID(size_t id) {\n      if (id == UNTRACKED_ID) return;   // Not tracked!\n      auto & info = id_info[id];\n      if (internal::ptr_debug) std::cout << \"Dec:    \" << id << \"(\" << info.GetPtr() << \")\" << std::endl;\n      emp_assert(info.GetCount() > 0, \"Decrementing Ptr, but already zero!\",\n                 id, info.GetPtr(), info.IsActive());\n      info.Dec(id);\n    }\n\n    /// Mark the pointers associated with this ID as deleted.\n    void MarkDeleted(size_t id) {\n#ifdef EMP_ABORT_PTR_DELETE\n      if (id == EMP_ABORT_PTR_DELETE) {\n        std::cerr << \"Aborting at deletion of Ptr id \" << id << std::endl;\n        abort();\n      }\n#endif\n      if (internal::ptr_debug) std::cout << \"Delete: \" << id << std::endl;\n      emp_assert(id_info[id].IsActive(), \"Deleting same emp::Ptr a second time!\", id);\n      id_info[id].MarkDeleted();\n    }\n  };\n\n\n//////////////////////////////////\n//\n//  --- Ptr implementation ---\n//\n//////////////////////////////////\n\n#ifdef EMP_TRACK_MEM\n\n  namespace {\n    // @CAO: Build this for real!\n    template <typename FROM, typename TO>\n    bool PtrIsConvertable(FROM * ptr) { return true; }\n    // emp_assert( (std::is_same<TYPE,T2>() || dynamic_cast<TYPE*>(in_ptr)) );\n\n    // Debug information provided for each pointer type.\n    struct PtrDebug {\n      size_t current;\n      size_t total;\n      PtrDebug() : current(0), total(0) { ; }\n      void AddPtr() { current++; total++; }\n      void RemovePtr() { current--; }\n    };\n  }\n\n  template <typename TYPE>\n  class Ptr {\n  public:\n    TYPE * ptr;                 ///< The raw pointer associated with this Ptr object.\n    size_t id;                  ///< A unique ID for this pointer type.\n    using element_type = TYPE;  ///< Type being pointed at.\n\n    static constexpr size_t UNTRACKED_ID = (size_t) -1;\n\n    static PtrDebug & DebugInfo() { static PtrDebug info; return info; } // Debug info for each type\n    static PtrTracker & Tracker() { return PtrTracker::Get(); }  // Single tracker for al Ptr types\n\n    /// Construct a null Ptr by default.\n    Ptr() : ptr(nullptr), id(UNTRACKED_ID) {\n      if (internal::ptr_debug) std::cout << \"null construct: \" << ptr << std::endl;\n    }\n\n    /// Construct using copy constructor\n    Ptr(const Ptr<TYPE> & _in) : ptr(_in.ptr), id(_in.id) {\n      if (internal::ptr_debug) std::cout << \"copy construct: \" << ptr << std::endl;\n      Tracker().IncID(id);\n    }\n\n    /// Construct using move constructor\n    Ptr(Ptr<TYPE> && _in) : ptr(_in.ptr), id(_in.id) {\n      if (internal::ptr_debug) std::cout << \"move construct: \" << ptr << std::endl;\n      _in.ptr = nullptr;\n      _in.id = UNTRACKED_ID;\n      // No IncID or DecID in Tracker since we just move the id.\n    }\n\n    /// Construct from a raw pointer of campatable type.\n    template <typename T2>\n    Ptr(T2 * in_ptr, bool track=false) : ptr(in_ptr), id(UNTRACKED_ID)\n    {\n      if (internal::ptr_debug) std::cout << \"raw construct: \" << ptr << \". track=\" << track << std::endl;\n      emp_assert( (PtrIsConvertable<T2, TYPE>(in_ptr)) );\n\n      // If this pointer is already active, link to it.\n      if (Tracker().IsActive(ptr)) {\n        id = Tracker().GetCurID(ptr);\n        Tracker().IncID(id);\n      }\n      // If we are not already tracking this pointer, but should be, add it.\n      else if (track) {\n        id = Tracker().New(ptr);\n        DebugInfo().AddPtr();\n      }\n    }\n\n    /// Construct from a raw pointer of campatable ARRAY type.\n    template <typename T2>\n    Ptr(T2 * _ptr, size_t array_size, bool track) : ptr(_ptr), id(UNTRACKED_ID)\n    {\n      const size_t array_bytes = array_size * sizeof(T2);\n      if (internal::ptr_debug) std::cout << \"raw ARRAY construct: \" << ptr\n                               << \". size=\" << array_size << \"(\" << array_bytes\n                               << \" bytes); track=\" << track << std::endl;\n      emp_assert( (PtrIsConvertable<T2, TYPE>(_ptr)) );\n\n      // If this pointer is already active, link to it.\n      if (Tracker().IsActive(ptr)) {\n        id = Tracker().GetCurID(ptr);\n        Tracker().IncID(id);\n        emp_assert(Tracker().GetArrayBytes(id) == array_bytes); // Make sure pointer is consistent.\n      }\n      // If we are not already tracking this pointer, but should be, add it.\n      else if (track) {\n        id = Tracker().NewArray(ptr, array_bytes);\n        DebugInfo().AddPtr();\n      }\n    }\n\n    /// Construct from another Ptr<> object of compatable type.\n    template <typename T2>\n    Ptr(Ptr<T2> _in) : ptr(_in.Raw()), id(_in.GetID()) {\n      if (internal::ptr_debug) std::cout << \"inexact copy construct: \" << ptr << std::endl;\n      emp_assert( (PtrIsConvertable<T2, TYPE>(_in.Raw())), id );\n      Tracker().IncID(id);\n    }\n\n    /// Construct from nullptr.\n    Ptr(std::nullptr_t) : Ptr() {\n      if (internal::ptr_debug) std::cout << \"null construct 2.\" << std::endl;\n    }\n\n    /// Destructor.\n    ~Ptr() {\n      if (internal::ptr_debug) {\n        std::cout << \"destructing Ptr instance \";\n        if (ptr) std::cout << id << \" (\" << ptr << \")\\n\";\n        else std::cout << \"(nullptr)\\n\";\n      }\n      Tracker().DecID(id);\n    }\n\n    /// Is this Ptr currently nullptr?\n    bool IsNull() const { return ptr == nullptr; }\n\n    /// Convert this Ptr to a raw pointer that isn't going to be tracked.\n    TYPE * Raw() {\n      emp_assert(Tracker().IsDeleted(id) == false, \"Do not convert deleted Ptr to raw.\", id);\n      return ptr;\n    }\n\n    /// Convert this Ptr to a const raw pointer that isn't going to be tracked.\n    const TYPE * const Raw() const {\n      emp_assert(Tracker().IsDeleted(id) == false, \"Do not convert deleted Ptr to raw.\", id);\n      return ptr;\n    }\n\n    /// Cast this Ptr to a different type.\n    template <typename T2> Ptr<T2> Cast() {\n      emp_assert(Tracker().IsDeleted(id) == false, \"Do not cast deleted pointers.\", id);\n      return (T2*) ptr;\n    }\n\n    /// Cast this Ptr to a const Ptr of a different type.\n    template <typename T2> const Ptr<const T2> Cast() const {\n      emp_assert(Tracker().IsDeleted(id) == false, \"Do not cast deleted pointers.\", id);\n      return (T2*) ptr;\n    }\n\n    /// Dynamically cast this Ptr to another type; throw an assert of the cast fails.\n    template <typename T2> Ptr<T2> DynamicCast() {\n      emp_assert(dynamic_cast<T2*>(ptr) != nullptr);\n      emp_assert(Tracker().IsDeleted(id) == false, \"Do not cast deleted pointers.\", id);\n      return (T2*) ptr;\n    }\n\n    /// Get the unique ID associated with this pointer.\n    size_t GetID() const { return id; }\n\n    /// Reallocate this Ptr to a newly allocated value using arguments passed in.\n    template <typename... T>\n    void New(T &&... args) {\n      Tracker().DecID(id);                            // Remove a pointer to any old memory...\n\n      ptr = new TYPE(std::forward<T>(args)...); // Special new that uses allocated space.\n      // ptr = (TYPE*) malloc (sizeof(TYPE));            // Build a new raw pointer.\n      // emp_emscripten_assert(ptr);                     // No exceptions in emscripten; assert alloc!\n      // ptr = new (ptr) TYPE(std::forward<T>(args)...); // Special new that uses allocated space.\n\n      if (internal::ptr_debug) std::cout << \"Ptr::New() : \" << ptr << std::endl;\n      id = Tracker().New(ptr);                        // And track it!\n      DebugInfo().AddPtr();\n    }\n\n    /// Reallocate this Ptr to a newly allocated array using the size passed in.\n    template <typename... T>\n    void NewArray(size_t array_size, T &&... args) {\n      Tracker().DecID(id);                              // Remove a pointer to any old memory...\n\n      // @CAO: This next portion of code is allocating an array of the appropriate type.\n      //       We are currently using \"new\", but should shift over to malloc since new throws an\n      //       exception when there's a problem, which will trigger an abort in Emscripten mode.\n      //       We'd rather be able to identify a more specific problem.\n      ptr = new TYPE[array_size];                     // Build a new raw pointer to an array.\n      // ptr = (TYPE*) malloc (array_size * sizeof(TYPE)); // Build a new raw pointer.\n      // emp_emscripten_assert(ptr, array_size);           // No exceptions in emscripten; assert alloc!\n      // for (size_t i = 0; i < array_size; i++) {\n      //   new (ptr + i*sizeof(TYPE)) TYPE(args...);\n      // }\n\n      if (internal::ptr_debug) std::cout << \"Ptr::NewArray() : \" << ptr << std::endl;\n      id = Tracker().NewArray(ptr, array_size * sizeof(TYPE));   // And track it!\n      DebugInfo().AddPtr();\n    }\n\n    /// Delete this pointer (must NOT be an array).\n    void Delete() {\n      emp_assert(id < Tracker().GetNumIDs(), id, \"Deleting Ptr that we are not resposible for.\");\n      emp_assert(ptr, \"Deleting null Ptr.\");\n      emp_assert(Tracker().IsArrayID(id) == false, id, \"Trying to delete array pointer as non-array.\");\n      if (internal::ptr_debug) std::cout << \"Ptr::Delete() : \" << ptr << std::endl;\n      delete ptr;\n      Tracker().MarkDeleted(id);\n      DebugInfo().RemovePtr();\n    }\n\n    /// Delete this pointer to an array (must be an array).\n    void DeleteArray() {\n      emp_assert(id < Tracker().GetNumIDs(), id, \"Deleting Ptr that we are not resposible for.\");\n      emp_assert(ptr, \"Deleting null Ptr.\");\n      emp_assert(Tracker().IsArrayID(id), id, \"Trying to delete non-array pointer as array.\");\n      if (internal::ptr_debug) std::cout << \"Ptr::DeleteArray() : \" << ptr << std::endl;\n      delete [] ptr;\n      Tracker().MarkDeleted(id);\n      DebugInfo().RemovePtr();\n    }\n\n    /// Convert this pointer to a hash value.\n    size_t Hash() const {\n      // Chop off useless bits of pointer...\n      static constexpr size_t shift = internal::Log2(1 + sizeof(TYPE));\n      return (size_t)(ptr) >> shift;\n    }\n    struct hash_t { size_t operator()(const Ptr<TYPE> & t) const { return t.Hash(); } };\n\n    /// Copy assignment\n    Ptr<TYPE> & operator=(const Ptr<TYPE> & _in) {\n      if (internal::ptr_debug) std::cout << \"copy assignment\" << std::endl;\n      emp_assert(Tracker().IsDeleted(_in.id) == false, _in.id, \"Do not copy deleted pointers.\");\n      if (id != _in.id) {        // Assignments only need to happen if ptrs are different.\n        Tracker().DecID(id);\n        ptr = _in.ptr;\n        id = _in.id;\n        Tracker().IncID(id);\n      }\n      return *this;\n    }\n\n    /// Move assignment\n    Ptr<TYPE> & operator=(Ptr<TYPE> && _in) {\n      if (internal::ptr_debug) std::cout << \"move assignment: \" << _in.ptr << std::endl;\n      emp_assert(Tracker().IsDeleted(_in.id) == false, _in.id, \"Do not move deleted pointers.\");\n      if (ptr != _in.ptr) {\n        Tracker().DecID(id);   // Decrement references to former pointer at this position.\n        ptr = _in.ptr;\n        id = _in.id;\n        _in.ptr = nullptr;\n        _in.id = UNTRACKED_ID;\n      }\n      return *this;\n    }\n\n    /// Assign to a raw pointer of the correct type; if this is already tracked, hooked in\n    /// correctly, otherwise don't track.\n    template <typename T2>\n    Ptr<TYPE> & operator=(T2 * _in) {\n      if (internal::ptr_debug) std::cout << \"raw assignment\" << std::endl;\n      emp_assert( (PtrIsConvertable<T2, TYPE>(_in)) );\n\n      Tracker().DecID(id);    // Decrement references to former pointer at this position.\n      ptr = _in;              // Update to new pointer.\n\n      // If this pointer is already active, link to it.\n      if (Tracker().IsActive(ptr)) {\n        id = Tracker().GetCurID(ptr);\n        Tracker().IncID(id);\n      }\n      // Otherwise, since this ptr was passed in as a raw pointer, we do not manage it.\n      else {\n        id = UNTRACKED_ID;\n      }\n\n      return *this;\n    }\n\n    /// Assign to a convertable Ptr\n    template <typename T2>\n    Ptr<TYPE> & operator=(Ptr<T2> _in) {\n      if (internal::ptr_debug) std::cout << \"convert-copy assignment\" << std::endl;\n      emp_assert( (PtrIsConvertable<T2, TYPE>(_in.Raw())), _in.id );\n      emp_assert(Tracker().IsDeleted(_in.id) == false, _in.id, \"Do not copy deleted pointers.\");\n      Tracker().DecID(id);\n      ptr = _in.Raw();\n      id = _in.GetID();\n      Tracker().IncID(id);\n      return *this;\n    }\n\n    /// Dereference a pointer.\n    TYPE & operator*() {\n      // Make sure a pointer is active and non-null before we dereference it.\n      emp_assert(Tracker().IsDeleted(id) == false /*, typeid(TYPE).name() */, id);\n      emp_assert(ptr != nullptr, \"Do not dereference a null pointer!\");\n      return *ptr;\n    }\n\n    /// Dereference a pointer to a const type.\n    const TYPE & operator*() const {\n      // Make sure a pointer is active before we dereference it.\n      emp_assert(Tracker().IsDeleted(id) == false /*, typeid(TYPE).name() */, id);\n      emp_assert(ptr != nullptr, \"Do not dereference a null pointer!\");\n      return *ptr;\n    }\n\n    /// Follow a pointer.\n    TYPE * operator->() {\n      // Make sure a pointer is active before we follow it.\n      emp_assert(Tracker().IsDeleted(id) == false /*, typeid(TYPE).name() */, id);\n      emp_assert(ptr != nullptr, \"Do not follow a null pointer!\");\n      return ptr;\n    }\n\n    /// Follow a pointer to a const target.\n    TYPE * const operator->() const {\n      // Make sure a pointer is active before we follow it.\n      emp_assert(Tracker().IsDeleted(id) == false /*, typeid(TYPE).name() */, id);\n      emp_assert(ptr != nullptr, \"Do not follow a null pointer!\");\n      return ptr;\n    }\n\n    /// Indexing into array\n    TYPE & operator[](size_t pos) {\n      emp_assert(Tracker().IsDeleted(id) == false /*, typeid(TYPE).name() */, id);\n      emp_assert(Tracker().IsArrayID(id), \"Only arrays can be indexed into.\", id);\n      emp_assert(Tracker().GetArrayBytes(id) > (pos*sizeof(TYPE)),\n        \"Indexing out of range.\", id, ptr, pos, sizeof(TYPE), Tracker().GetArrayBytes(id));\n      emp_assert(ptr != nullptr, \"Do not follow a null pointer!\");\n      return ptr[pos];\n    }\n\n    /// Indexing into const array\n    const TYPE & operator[](size_t pos) const {\n      emp_assert(Tracker().IsDeleted(id) == false /*, typeid(TYPE).name() */, id);\n      emp_assert(Tracker().IsArrayID(id), \"Only arrays can be indexed into.\", id);\n      emp_assert(Tracker().GetArrayBytes(id) > (pos*sizeof(TYPE)),\n        \"Indexing out of range.\", id, ptr, pos, sizeof(TYPE), Tracker().GetArrayBytes(id));\n      emp_assert(ptr != nullptr, \"Do not follow a null pointer!\");\n      return ptr[pos];\n    }\n\n    /// Auto-case to raw pointer type.\n    operator TYPE *() {\n      // Make sure a pointer is active before we convert it.\n      emp_assert(Tracker().IsDeleted(id) == false /*, typeid(TYPE).name() */, id);\n\n      // We should not automatically convert managed pointers to raw pointers; use .Raw()\n      emp_assert(id == UNTRACKED_ID /*, typeid(TYPE).name() */, id);\n      return ptr;\n    }\n\n    /// Does this pointer exist?\n    operator bool() { return ptr != nullptr; }\n\n    /// Does this const pointer exist?\n    operator bool() const { return ptr != nullptr; }\n\n    /// Does this Ptr point to the same memory position?\n    bool operator==(const Ptr<TYPE> & in_ptr) const { return ptr == in_ptr.ptr; }\n\n    /// Does this Ptr point to different memory positions?\n    bool operator!=(const Ptr<TYPE> & in_ptr) const { return ptr != in_ptr.ptr; }\n\n    /// Does this Ptr point to a memory position before another?\n    bool operator<(const Ptr<TYPE> & in_ptr)  const { return ptr < in_ptr.ptr; }\n\n    /// Does this Ptr point to a memory position before or equal to another?\n    bool operator<=(const Ptr<TYPE> & in_ptr) const { return ptr <= in_ptr.ptr; }\n\n    /// Does this Ptr point to a memory position after another?\n    bool operator>(const Ptr<TYPE> & in_ptr)  const { return ptr > in_ptr.ptr; }\n\n    /// Does this Ptr point to a memory position after or equal to another?\n    bool operator>=(const Ptr<TYPE> & in_ptr) const { return ptr >= in_ptr.ptr; }\n\n\n    /// Does this Ptr point to the same memory position as a raw pointer?\n    bool operator==(const TYPE * in_ptr) const { return ptr == in_ptr; }\n\n    /// Does this Ptr point to different memory positions as a raw pointer?\n    bool operator!=(const TYPE * in_ptr) const { return ptr != in_ptr; }\n\n    /// Does this Ptr point to a memory position before a raw pointer?\n    bool operator<(const TYPE * in_ptr)  const { return ptr < in_ptr; }\n\n    /// Does this Ptr point to a memory position before or equal to a raw pointer?\n    bool operator<=(const TYPE * in_ptr) const { return ptr <= in_ptr; }\n\n    /// Does this Ptr point to a memory position after a raw pointer?\n    bool operator>(const TYPE * in_ptr)  const { return ptr > in_ptr; }\n\n    /// Does this Ptr point to a memory position after or equal to a raw pointer?\n    bool operator>=(const TYPE * in_ptr) const { return ptr >= in_ptr; }\n\n\n    /// Some debug testing functions\n    int DebugGetCount() const { return Tracker().GetIDCount(id); }\n    bool DebugIsArray() const { return Tracker().IsArrayID(id); }\n    size_t DebugGetArrayBytes() const { return Tracker().GetArrayBytes(id); }\n    bool DebugIsActive() const { return Tracker().IsActiveID(id); }\n\n    bool OK() const {\n      // Untracked ID's should not have pointers in the Tracker.\n      if (id == UNTRACKED_ID) return !Tracker().HasPtr(ptr);\n\n      // Make sure this pointer is linked to the correct info.\n      if (Tracker().GetInfo(id).GetPtr() != ptr) return false;\n\n      // And make sure that info itself is okay.\n      return Tracker().GetInfo(id).OK();\n    }\n\n    // Prevent use of new and delete on Ptr\n    // static void* operator new(std::size_t) noexcept {\n    //   emp_assert(false, \"No Ptr::operator new; use emp::NewPtr for clarity.\");\n    //   return nullptr;\n    // }\n    // static void* operator new[](std::size_t sz) noexcept {\n    //   emp_assert(false, \"No Ptr::operator new[]; use emp::NewPtrArray for clarity.\");\n    //   return nullptr;\n    // }\n    //\n    // static void operator delete(void* ptr, std::size_t sz) {\n    //   emp_assert(false, \"No Ptr::operator delete; use Delete() member function for clarity.\");\n    // }\n    // static void operator delete[](void* ptr, std::size_t sz) {\n    //   emp_assert(false, \"No Ptr::operator delete[]; use DeleteArray() member function for clarity.\");\n    // }\n\n  };\n\n#else\n\n\n  template <typename TYPE>\n  class Ptr {\n  private:\n    TYPE * ptr;\n\n  public:\n    using element_type = TYPE;\n\n    Ptr() : ptr(nullptr) {}                                              ///< Default constructor\n    Ptr(const Ptr<TYPE> & _in) : ptr(_in.ptr) {}                         ///< Copy constructor\n    Ptr(Ptr<TYPE> && _in) : ptr(_in.ptr) {}                              ///< Move constructor\n    template <typename T2> Ptr(T2 * in_ptr, bool=false) : ptr(in_ptr) {} ///< Construct from raw ptr\n    template <typename T2> Ptr(T2 * _ptr, size_t, bool) : ptr(_ptr) {}   ///< Construct from array\n    template <typename T2> Ptr(Ptr<T2> _in) : ptr(_in.Raw()) {}          ///< From compatible Ptr\n    Ptr(std::nullptr_t) : Ptr() {}                                       ///< From nullptr\n    ~Ptr() { ; }                                                         ///< Destructor\n\n    bool IsNull() const { return ptr == nullptr; }\n    TYPE * Raw() { return ptr; }\n    const TYPE * const Raw() const { return ptr; }\n    template <typename T2> Ptr<T2> Cast() { return (T2*) ptr; }\n    template <typename T2> const Ptr<const T2> Cast() const { return (T2*) ptr; }\n    template <typename T2> Ptr<T2> DynamicCast() { return dynamic_cast<T2*>(ptr); }\n\n    template <typename... T>\n    void New(T &&... args) { ptr = new TYPE(std::forward<T>(args)...); }  // New raw pointer.\n    void NewArray(size_t array_size) { ptr = new TYPE[array_size]; }\n    void Delete() { delete ptr; }\n    void DeleteArray() { delete [] ptr; }\n\n    size_t Hash() const {\n      static constexpr size_t shift = internal::Log2(1 + sizeof(TYPE));  // Chop off useless bits...\n      return (size_t)(ptr) >> shift;\n    }\n    struct hash_t { size_t operator()(const Ptr<TYPE> & t) const { return t.Hash(); } };\n\n    // Copy/Move assignments\n    Ptr<TYPE> & operator=(const Ptr<TYPE> & _in) { ptr = _in.ptr; return *this; }\n    Ptr<TYPE> & operator=(Ptr<TYPE> && _in) { ptr = _in.ptr; _in.ptr = nullptr; return *this; }\n\n    // Assign to compatible Ptr or raw (non-managed) pointer.\n    template <typename T2> Ptr<TYPE> & operator=(T2 * _in) { ptr = _in; return *this; }\n    template <typename T2> Ptr<TYPE> & operator=(Ptr<T2> _in) { ptr = _in.Raw(); return *this; }\n\n    // Dereference a pointer.\n    TYPE & operator*() { return *ptr; }\n    const TYPE & operator*() const { return *ptr; }\n\n    // Follow a pointer.\n    TYPE * operator->() { return ptr; }\n    TYPE * const operator->() const { return ptr; }\n\n    // Indexing into array\n    TYPE & operator[](size_t pos) { return ptr[pos]; }\n    const TYPE & operator[](size_t pos) const { return ptr[pos]; }\n\n    // Auto-case to raw pointer type.\n    operator TYPE *() { return ptr; }\n\n    operator bool() { return ptr != nullptr; }\n    operator bool() const { return ptr != nullptr; }\n\n    // Comparisons to other Ptr objects\n    bool operator==(const Ptr<TYPE> & in_ptr) const { return ptr == in_ptr.ptr; }\n    bool operator!=(const Ptr<TYPE> & in_ptr) const { return ptr != in_ptr.ptr; }\n    bool operator<(const Ptr<TYPE> & in_ptr)  const { return ptr < in_ptr.ptr; }\n    bool operator<=(const Ptr<TYPE> & in_ptr) const { return ptr <= in_ptr.ptr; }\n    bool operator>(const Ptr<TYPE> & in_ptr)  const { return ptr > in_ptr.ptr; }\n    bool operator>=(const Ptr<TYPE> & in_ptr) const { return ptr >= in_ptr.ptr; }\n\n    // Comparisons to raw pointers.\n    bool operator==(const TYPE * in_ptr) const { return ptr == in_ptr; }\n    bool operator!=(const TYPE * in_ptr) const { return ptr != in_ptr; }\n    bool operator<(const TYPE * in_ptr)  const { return ptr < in_ptr; }\n    bool operator<=(const TYPE * in_ptr) const { return ptr <= in_ptr; }\n    bool operator>(const TYPE * in_ptr)  const { return ptr > in_ptr; }\n    bool operator>=(const TYPE * in_ptr) const { return ptr >= in_ptr; }\n\n    // Stubs for debug-related functions when outside debug mode.\n    int DebugGetCount() const { return -1; }\n    bool DebugIsArray() const { emp_assert(false); return false; }\n    size_t DebugGetArrayBytes() const { return 0; }\n    bool DebugIsActive() const { return true; }\n    bool OK() const { return true; }\n  };\n\n#endif\n\n  // IO\n  template <typename T>\n  std::ostream & operator<<(std::ostream & out, const emp::Ptr<T> & ptr) {\n    out << ptr.Raw();\n    return out;\n  }\n\n  // @CAO: Reading a pointer from a stream seems like a terrible idea in most situations, but I\n  // can imagine limited circumstances where it would be needed.\n  template <typename T, typename... Ts>\n  std::istream & operator>>(std::istream & is, emp::Ptr<T> & ptr) {\n    T * val;\n    is >> val;\n    ptr = val;\n    return is;\n  }\n\n  /// Convert a T* to a Ptr<T>.  By default, don't track.\n  template <typename T> Ptr<T> ToPtr(T * _in, bool own=false) { return Ptr<T>(_in, own); }\n\n  /// Convert a T* to a Ptr<T> that we DO track.\n  template <typename T> Ptr<T> TrackPtr(T * _in, bool own=true) { return Ptr<T>(_in, own); }\n\n  /// Create a new Ptr of the target type; use the args in the constructor.\n  template <typename T, typename... ARGS> Ptr<T> NewPtr(ARGS &&... args) {\n    auto ptr = new T(std::forward<ARGS>(args)...);\n    // auto ptr = (T*) malloc (sizeof(T));         // Build a new raw pointer.\n    // emp_assert(ptr);                            // No exceptions in emscripten; assert alloc!\n    // new (ptr) T(std::forward<ARGS>(args)...);   // Special new that uses allocated space.\n    return Ptr<T>(ptr, true);\n  }\n\n  /// Copy an object pointed to and return a Ptr to the copy.\n  template <typename T> Ptr<T> CopyPtr(Ptr<T> in) { return NewPtr<T>(*in); }\n\n  /// Copy a vector of objects pointed to; return a vector of Ptrs to the new copies.\n  template <typename T> emp::vector<Ptr<T>> CopyPtrs(const emp::vector<Ptr<T>> & in) {\n    emp::vector<Ptr<T>> out_ptrs(in.size());\n    for (size_t i = 0; i < in.size(); i++) out_ptrs[i] = CopyPtr(in[i]);\n    return out_ptrs;\n  }\n\n  /// Copy a vector of objects pointed to by using their Clone() member function; return vector.\n  template <typename T> emp::vector<Ptr<T>> ClonePtrs(const emp::vector<Ptr<T>> & in) {\n    emp::vector<Ptr<T>> out_ptrs(in.size());\n    for (size_t i = 0; i < in.size(); i++) out_ptrs[i] = in[i]->Clone();\n    return out_ptrs;\n  }\n\n  /// Create a pointer to an array of objects.\n  template <typename T, typename... ARGS> Ptr<T> NewArrayPtr(size_t array_size, ARGS &&... args) {\n    auto ptr = new T[array_size];                     // Build a new raw pointer.\n    // const size_t alloc_size = array_size * sizeof(T);\n    // auto ptr = (T*) malloc (alloc_size);\n    emp_assert(ptr, array_size);                      // No exceptions in emscripten; assert alloc!\n    // for (size_t i = 0; i < array_size; i++) {         // Loop through all array elements.\n    //   new (ptr + i*sizeof(T)) T(args...);             //    ...and initialize them.\n    // }\n    return Ptr<T>(ptr, array_size, true);\n  }\n\n\n}\n\n#endif // EMP_PTR_H\n","// -*- C++ -*-\n//===-------------------------- typeinfo ----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef __LIBCPP_TYPEINFO\n#define __LIBCPP_TYPEINFO\n\n/*\n\n    typeinfo synopsis\n\nnamespace std {\n\nclass type_info\n{\npublic:\n    virtual ~type_info();\n\n    bool operator==(const type_info& rhs) const noexcept;\n    bool operator!=(const type_info& rhs) const noexcept;\n\n    bool before(const type_info& rhs) const noexcept;\n    size_t hash_code() const noexcept;\n    const char* name() const noexcept;\n\n    type_info(const type_info& rhs) = delete;\n    type_info& operator=(const type_info& rhs) = delete;\n};\n\nclass bad_cast\n    : public exception\n{\npublic:\n    bad_cast() noexcept;\n    bad_cast(const bad_cast&) noexcept;\n    bad_cast& operator=(const bad_cast&) noexcept;\n    virtual const char* what() const noexcept;\n};\n\nclass bad_typeid\n    : public exception\n{\npublic:\n    bad_typeid() noexcept;\n    bad_typeid(const bad_typeid&) noexcept;\n    bad_typeid& operator=(const bad_typeid&) noexcept;\n    virtual const char* what() const noexcept;\n};\n\n}  // std\n\n*/\n\n#include <__config>\n#include <exception>\n#include <cstddef>\n#include <cstdint>\n#ifdef _LIBCPP_NO_EXCEPTIONS\n#include <cstdlib>\n#endif\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n#if defined(_LIBCPP_NONUNIQUE_RTTI_BIT)\n#define _LIBCPP_HAS_NONUNIQUE_TYPEINFO\n#else\n#define _LIBCPP_HAS_UNIQUE_TYPEINFO\n#endif\n\nnamespace std  // purposefully not using versioning namespace\n{\n\nclass _LIBCPP_EXCEPTION_ABI type_info\n{\n    type_info& operator=(const type_info&);\n    type_info(const type_info&);\n\n#if defined(_LIBCPP_HAS_NONUNIQUE_TYPEINFO)\n    _LIBCPP_INLINE_VISIBILITY\n    int __compare_nonunique_names(const type_info &__arg) const _NOEXCEPT\n    { return __builtin_strcmp(name(), __arg.name()); }\n#endif\n\nprotected:\n#if defined(_LIBCPP_HAS_NONUNIQUE_TYPEINFO)\n    // A const char* with the non-unique RTTI bit possibly set.\n    uintptr_t __type_name;\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit type_info(const char* __n)\n      : __type_name(reinterpret_cast<uintptr_t>(__n)) {}\n#else\n    const char *__type_name;\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit type_info(const char* __n) : __type_name(__n) {}\n#endif\n\npublic:\n    virtual ~type_info();\n\n#if defined(_LIBCPP_HAS_NONUNIQUE_TYPEINFO)\n    _LIBCPP_INLINE_VISIBILITY\n    const char* name() const _NOEXCEPT\n    {\n      return reinterpret_cast<const char*>(__type_name &\n                                           ~_LIBCPP_NONUNIQUE_RTTI_BIT);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool before(const type_info& __arg) const _NOEXCEPT\n    {\n      if (!((__type_name & __arg.__type_name) & _LIBCPP_NONUNIQUE_RTTI_BIT))\n        return __type_name < __arg.__type_name;\n      return __compare_nonunique_names(__arg) < 0;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_t hash_code() const _NOEXCEPT\n    {\n      if (!(__type_name & _LIBCPP_NONUNIQUE_RTTI_BIT))\n        return __type_name;\n\n      const char* __ptr = name();\n      size_t __hash = 5381;\n      while (unsigned char __c = static_cast<unsigned char>(*__ptr++))\n        __hash = (__hash * 33) ^ __c;\n      return __hash;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const type_info& __arg) const _NOEXCEPT\n    {\n      if (__type_name == __arg.__type_name)\n        return true;\n\n      if (!((__type_name & __arg.__type_name) & _LIBCPP_NONUNIQUE_RTTI_BIT))\n        return false;\n      return __compare_nonunique_names(__arg) == 0;\n    }\n#else\n    _LIBCPP_INLINE_VISIBILITY\n    const char* name() const _NOEXCEPT\n    { return __type_name; }\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool before(const type_info& __arg) const _NOEXCEPT\n    { return __type_name < __arg.__type_name; }\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_t hash_code() const _NOEXCEPT\n    { return reinterpret_cast<size_t>(__type_name); }\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const type_info& __arg) const _NOEXCEPT\n    { return __type_name == __arg.__type_name; }\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator!=(const type_info& __arg) const _NOEXCEPT\n    { return !operator==(__arg); }\n};\n\nclass _LIBCPP_EXCEPTION_ABI bad_cast\n    : public exception\n{\npublic:\n    bad_cast() _NOEXCEPT;\n    virtual ~bad_cast() _NOEXCEPT;\n    virtual const char* what() const _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI bad_typeid\n    : public exception\n{\npublic:\n    bad_typeid() _NOEXCEPT;\n    virtual ~bad_typeid() _NOEXCEPT;\n    virtual const char* what() const _NOEXCEPT;\n};\n\n}  // std\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_bad_cast()\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw bad_cast();\n#else\n\t_VSTD::abort();\n#endif\n}\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // __LIBCPP_TYPEINFO\n","// -*- C++ -*-\n//===------------------------ type_traits ---------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_TYPE_TRAITS\n#define _LIBCPP_TYPE_TRAITS\n\n/*\n    type_traits synopsis\n\nnamespace std\n{\n\n    // helper class:\n    template <class T, T v> struct integral_constant;\n    typedef integral_constant<bool, true>  true_type;   // C++11\n    typedef integral_constant<bool, false> false_type;  // C++11\n    \n    template <bool B>                                   // C++14\n    using bool_constant = integral_constant<bool, B>;   // C++14\n    typedef bool_constant<true> true_type;              // C++14\n    typedef bool_constant<false> false_type;            // C++14\n\n    // helper traits\n    template <bool, class T = void> struct enable_if;\n    template <bool, class T, class F> struct conditional;\n\n    // Primary classification traits:\n    template <class T> struct is_void;\n    template <class T> struct is_null_pointer;  // C++14\n    template <class T> struct is_integral;\n    template <class T> struct is_floating_point;\n    template <class T> struct is_array;\n    template <class T> struct is_pointer;\n    template <class T> struct is_lvalue_reference;\n    template <class T> struct is_rvalue_reference;\n    template <class T> struct is_member_object_pointer;\n    template <class T> struct is_member_function_pointer;\n    template <class T> struct is_enum;\n    template <class T> struct is_union;\n    template <class T> struct is_class;\n    template <class T> struct is_function;\n\n    // Secondary classification traits:\n    template <class T> struct is_reference;\n    template <class T> struct is_arithmetic;\n    template <class T> struct is_fundamental;\n    template <class T> struct is_member_pointer;\n    template <class T> struct is_scalar;\n    template <class T> struct is_object;\n    template <class T> struct is_compound;\n\n    // Const-volatile properties and transformations:\n    template <class T> struct is_const;\n    template <class T> struct is_volatile;\n    template <class T> struct remove_const;\n    template <class T> struct remove_volatile;\n    template <class T> struct remove_cv;\n    template <class T> struct add_const;\n    template <class T> struct add_volatile;\n    template <class T> struct add_cv;\n\n    // Reference transformations:\n    template <class T> struct remove_reference;\n    template <class T> struct add_lvalue_reference;\n    template <class T> struct add_rvalue_reference;\n\n    // Pointer transformations:\n    template <class T> struct remove_pointer;\n    template <class T> struct add_pointer;\n\n    // Integral properties:\n    template <class T> struct is_signed;\n    template <class T> struct is_unsigned;\n    template <class T> struct make_signed;\n    template <class T> struct make_unsigned;\n\n    // Array properties and transformations:\n    template <class T> struct rank;\n    template <class T, unsigned I = 0> struct extent;\n    template <class T> struct remove_extent;\n    template <class T> struct remove_all_extents;\n\n    // Member introspection:\n    template <class T> struct is_pod;\n    template <class T> struct is_trivial;\n    template <class T> struct is_trivially_copyable;\n    template <class T> struct is_standard_layout;\n    template <class T> struct is_literal_type;\n    template <class T> struct is_empty;\n    template <class T> struct is_polymorphic;\n    template <class T> struct is_abstract;\n    template <class T> struct is_final; // C++14\n\n    template <class T, class... Args> struct is_constructible;\n    template <class T>                struct is_default_constructible;\n    template <class T>                struct is_copy_constructible;\n    template <class T>                struct is_move_constructible;\n    template <class T, class U>       struct is_assignable;\n    template <class T>                struct is_copy_assignable;\n    template <class T>                struct is_move_assignable;\n    template <class T, class U>       struct is_swappable_with;       // C++17\n    template <class T>                struct is_swappable;            // C++17\n    template <class T>                struct is_destructible;\n\n    template <class T, class... Args> struct is_trivially_constructible;\n    template <class T>                struct is_trivially_default_constructible;\n    template <class T>                struct is_trivially_copy_constructible;\n    template <class T>                struct is_trivially_move_constructible;\n    template <class T, class U>       struct is_trivially_assignable;\n    template <class T>                struct is_trivially_copy_assignable;\n    template <class T>                struct is_trivially_move_assignable;\n    template <class T>                struct is_trivially_destructible;\n\n    template <class T, class... Args> struct is_nothrow_constructible;\n    template <class T>                struct is_nothrow_default_constructible;\n    template <class T>                struct is_nothrow_copy_constructible;\n    template <class T>                struct is_nothrow_move_constructible;\n    template <class T, class U>       struct is_nothrow_assignable;\n    template <class T>                struct is_nothrow_copy_assignable;\n    template <class T>                struct is_nothrow_move_assignable;\n    template <class T, class U>       struct is_nothrow_swappable_with; // C++17\n    template <class T>                struct is_nothrow_swappable;      // C++17\n    template <class T>                struct is_nothrow_destructible;\n\n    template <class T> struct has_virtual_destructor;\n\n    // Relationships between types:\n    template <class T, class U> struct is_same;\n    template <class Base, class Derived> struct is_base_of;\n    template <class From, class To> struct is_convertible;\n\n    template <class, class R = void> struct is_callable; // not defined\n    template <class Fn, class... ArgTypes, class R>\n      struct is_callable<Fn(ArgTypes...), R>;\n\n    template <class, class R = void> struct is_nothrow_callable; // not defined\n    template <class Fn, class... ArgTypes, class R>\n      struct is_nothrow_callable<Fn(ArgTypes...), R>;\n\n    // Alignment properties and transformations:\n    template <class T> struct alignment_of;\n    template <size_t Len, size_t Align = most_stringent_alignment_requirement>\n        struct aligned_storage;\n    template <size_t Len, class... Types> struct aligned_union;\n\n    template <class T> struct decay;\n    template <class... T> struct common_type;\n    template <class T> struct underlying_type;\n    template <class> class result_of; // undefined\n    template <class Fn, class... ArgTypes> class result_of<Fn(ArgTypes...)>;\n\n    // const-volatile modifications:\n    template <class T>\n      using remove_const_t    = typename remove_const<T>::type;  // C++14\n    template <class T>\n      using remove_volatile_t = typename remove_volatile<T>::type;  // C++14\n    template <class T>\n      using remove_cv_t       = typename remove_cv<T>::type;  // C++14\n    template <class T>\n      using add_const_t       = typename add_const<T>::type;  // C++14\n    template <class T>\n      using add_volatile_t    = typename add_volatile<T>::type;  // C++14\n    template <class T>\n      using add_cv_t          = typename add_cv<T>::type;  // C++14\n  \n    // reference modifications:\n    template <class T>\n      using remove_reference_t     = typename remove_reference<T>::type;  // C++14\n    template <class T>\n      using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;  // C++14\n    template <class T>\n      using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;  // C++14\n  \n    // sign modifications:\n    template <class T>\n      using make_signed_t   = typename make_signed<T>::type;  // C++14\n    template <class T>\n      using make_unsigned_t = typename make_unsigned<T>::type;  // C++14\n  \n    // array modifications:\n    template <class T>\n      using remove_extent_t      = typename remove_extent<T>::type;  // C++14\n    template <class T>\n      using remove_all_extents_t = typename remove_all_extents<T>::type;  // C++14\n\n    // pointer modifications:\n    template <class T>\n      using remove_pointer_t = typename remove_pointer<T>::type;  // C++14\n    template <class T>\n      using add_pointer_t    = typename add_pointer<T>::type;  // C++14\n\n    // other transformations:\n    template <size_t Len, std::size_t Align=default-alignment>\n      using aligned_storage_t = typename aligned_storage<Len,Align>::type;  // C++14\n    template <std::size_t Len, class... Types>\n      using aligned_union_t   = typename aligned_union<Len,Types...>::type;  // C++14\n    template <class T>\n      using decay_t           = typename decay<T>::type;  // C++14\n    template <bool b, class T=void>\n      using enable_if_t       = typename enable_if<b,T>::type;  // C++14\n    template <bool b, class T, class F>\n      using conditional_t     = typename conditional<b,T,F>::type;  // C++14\n    template <class... T>\n      using common_type_t     = typename common_type<T...>::type;  // C++14\n    template <class T>\n      using underlying_type_t = typename underlying_type<T>::type;  // C++14\n    template <class F, class... ArgTypes>\n      using result_of_t       = typename result_of<F(ArgTypes...)>::type;  // C++14\n\n    template <class...>\n      using void_t = void;   // C++17\n      \n      // See C++14 20.10.4.1, primary type categories\n      template <class T> constexpr bool is_void_v\n        = is_void<T>::value;                                             // C++17\n      template <class T> constexpr bool is_null_pointer_v\n        = is_null_pointer<T>::value;                                     // C++17\n      template <class T> constexpr bool is_integral_v\n        = is_integral<T>::value;                                         // C++17\n      template <class T> constexpr bool is_floating_point_v\n        = is_floating_point<T>::value;                                   // C++17\n      template <class T> constexpr bool is_array_v\n        = is_array<T>::value;                                            // C++17\n      template <class T> constexpr bool is_pointer_v\n        = is_pointer<T>::value;                                          // C++17\n      template <class T> constexpr bool is_lvalue_reference_v\n        = is_lvalue_reference<T>::value;                                 // C++17\n      template <class T> constexpr bool is_rvalue_reference_v\n        = is_rvalue_reference<T>::value;                                 // C++17\n      template <class T> constexpr bool is_member_object_pointer_v\n        = is_member_object_pointer<T>::value;                            // C++17\n      template <class T> constexpr bool is_member_function_pointer_v\n        = is_member_function_pointer<T>::value;                          // C++17\n      template <class T> constexpr bool is_enum_v\n        = is_enum<T>::value;                                             // C++17\n      template <class T> constexpr bool is_union_v\n        = is_union<T>::value;                                            // C++17\n      template <class T> constexpr bool is_class_v\n        = is_class<T>::value;                                            // C++17\n      template <class T> constexpr bool is_function_v\n        = is_function<T>::value;                                         // C++17\n\n      // See C++14 20.10.4.2, composite type categories\n      template <class T> constexpr bool is_reference_v\n        = is_reference<T>::value;                                        // C++17\n      template <class T> constexpr bool is_arithmetic_v\n        = is_arithmetic<T>::value;                                       // C++17\n      template <class T> constexpr bool is_fundamental_v\n        = is_fundamental<T>::value;                                      // C++17\n      template <class T> constexpr bool is_object_v\n        = is_object<T>::value;                                           // C++17\n      template <class T> constexpr bool is_scalar_v\n        = is_scalar<T>::value;                                           // C++17\n      template <class T> constexpr bool is_compound_v\n        = is_compound<T>::value;                                         // C++17\n      template <class T> constexpr bool is_member_pointer_v\n        = is_member_pointer<T>::value;                                   // C++17\n\n      // See C++14 20.10.4.3, type properties\n      template <class T> constexpr bool is_const_v\n        = is_const<T>::value;                                            // C++17\n      template <class T> constexpr bool is_volatile_v\n        = is_volatile<T>::value;                                         // C++17\n      template <class T> constexpr bool is_trivial_v\n        = is_trivial<T>::value;                                          // C++17\n      template <class T> constexpr bool is_trivially_copyable_v\n        = is_trivially_copyable<T>::value;                               // C++17\n      template <class T> constexpr bool is_standard_layout_v\n        = is_standard_layout<T>::value;                                  // C++17\n      template <class T> constexpr bool is_pod_v\n        = is_pod<T>::value;                                              // C++17\n      template <class T> constexpr bool is_literal_type_v\n        = is_literal_type<T>::value;                                     // C++17\n      template <class T> constexpr bool is_empty_v\n        = is_empty<T>::value;                                            // C++17\n      template <class T> constexpr bool is_polymorphic_v\n        = is_polymorphic<T>::value;                                      // C++17\n      template <class T> constexpr bool is_abstract_v\n        = is_abstract<T>::value;                                         // C++17\n      template <class T> constexpr bool is_final_v\n        = is_final<T>::value;                                            // C++17\n      template <class T> constexpr bool is_signed_v\n        = is_signed<T>::value;                                           // C++17\n      template <class T> constexpr bool is_unsigned_v\n        = is_unsigned<T>::value;                                         // C++17\n      template <class T, class... Args> constexpr bool is_constructible_v\n        = is_constructible<T, Args...>::value;                           // C++17\n      template <class T> constexpr bool is_default_constructible_v\n        = is_default_constructible<T>::value;                            // C++17\n      template <class T> constexpr bool is_copy_constructible_v\n        = is_copy_constructible<T>::value;                               // C++17\n      template <class T> constexpr bool is_move_constructible_v\n        = is_move_constructible<T>::value;                               // C++17\n      template <class T, class U> constexpr bool is_assignable_v\n        = is_assignable<T, U>::value;                                    // C++17\n      template <class T> constexpr bool is_copy_assignable_v\n        = is_copy_assignable<T>::value;                                  // C++17\n      template <class T> constexpr bool is_move_assignable_v\n        = is_move_assignable<T>::value;                                  // C++17\n      template <class T, class U> constexpr bool is_swappable_with_v\n        = is_swappable_with<T, U>::value;                                // C++17\n      template <class T> constexpr bool is_swappable_v\n        = is_swappable<T>::value;                                        // C++17\n      template <class T> constexpr bool is_destructible_v\n        = is_destructible<T>::value;                                     // C++17\n      template <class T, class... Args> constexpr bool is_trivially_constructible_v\n        = is_trivially_constructible<T, Args...>::value;                 // C++17\n      template <class T> constexpr bool is_trivially_default_constructible_v\n        = is_trivially_default_constructible<T>::value;                  // C++17\n      template <class T> constexpr bool is_trivially_copy_constructible_v\n        = is_trivially_copy_constructible<T>::value;                     // C++17\n      template <class T> constexpr bool is_trivially_move_constructible_v\n        = is_trivially_move_constructible<T>::value;                     // C++17\n      template <class T, class U> constexpr bool is_trivially_assignable_v\n        = is_trivially_assignable<T, U>::value;                          // C++17\n      template <class T> constexpr bool is_trivially_copy_assignable_v\n        = is_trivially_copy_assignable<T>::value;                        // C++17\n      template <class T> constexpr bool is_trivially_move_assignable_v\n        = is_trivially_move_assignable<T>::value;                        // C++17\n      template <class T> constexpr bool is_trivially_destructible_v\n        = is_trivially_destructible<T>::value;                           // C++17\n      template <class T, class... Args> constexpr bool is_nothrow_constructible_v\n        = is_nothrow_constructible<T, Args...>::value;                   // C++17\n      template <class T> constexpr bool is_nothrow_default_constructible_v\n        = is_nothrow_default_constructible<T>::value;                    // C++17\n      template <class T> constexpr bool is_nothrow_copy_constructible_v\n        = is_nothrow_copy_constructible<T>::value;                       // C++17\n      template <class T> constexpr bool is_nothrow_move_constructible_v\n        = is_nothrow_move_constructible<T>::value;                       // C++17\n      template <class T, class U> constexpr bool is_nothrow_assignable_v\n        = is_nothrow_assignable<T, U>::value;                            // C++17\n      template <class T> constexpr bool is_nothrow_copy_assignable_v\n        = is_nothrow_copy_assignable<T>::value;                          // C++17\n      template <class T> constexpr bool is_nothrow_move_assignable_v\n        = is_nothrow_move_assignable<T>::value;                          // C++17\n      template <class T, class U> constexpr bool is_nothrow_swappable_with_v\n        = is_nothrow_swappable_with<T, U>::value;                       // C++17\n      template <class T> constexpr bool is_nothrow_swappable_v\n        = is_nothrow_swappable<T>::value;                               // C++17\n      template <class T> constexpr bool is_nothrow_destructible_v\n        = is_nothrow_destructible<T>::value;                             // C++17\n      template <class T> constexpr bool has_virtual_destructor_v\n        = has_virtual_destructor<T>::value;                              // C++17\n\n      // See C++14 20.10.5, type property queries\n      template <class T> constexpr size_t alignment_of_v\n        = alignment_of<T>::value;                                        // C++17\n      template <class T> constexpr size_t rank_v\n        = rank<T>::value;                                                // C++17\n      template <class T, unsigned I = 0> constexpr size_t extent_v\n        = extent<T, I>::value;                                           // C++17\n\n      // See C++14 20.10.6, type relations\n      template <class T, class U> constexpr bool is_same_v\n        = is_same<T, U>::value;                                          // C++17\n      template <class Base, class Derived> constexpr bool is_base_of_v\n        = is_base_of<Base, Derived>::value;                              // C++17\n      template <class From, class To> constexpr bool is_convertible_v\n        = is_convertible<From, To>::value;                               // C++17\n      template <class T, class R = void> constexpr bool is_callable_v\n        = is_callable<T, R>::value;                                      // C++17\n      template <class T, class R = void> constexpr bool is_nothrow_callable_v\n        = is_nothrow_callable<T, R>::value;                              // C++17\n\n      // [meta.logical], logical operator traits:\n      template<class... B> struct conjunction;                           // C++17\n      template<class... B> \n        constexpr bool conjunction_v = conjunction<B...>::value;         // C++17\n      template<class... B> struct disjunction;                           // C++17\n      template<class... B>\n        constexpr bool disjunction_v = disjunction<B...>::value;         // C++17\n      template<class B> struct negation;                                 // C++17\n      template<class B> \n        constexpr bool negation_v = negation<B>::value;                  // C++17\n\n}\n\n*/\n#include <__config>\n#include <cstddef>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS pair;\ntemplate <class _Tp> class _LIBCPP_TEMPLATE_VIS reference_wrapper;\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS hash;\n\ntemplate <class>\nstruct __void_t { typedef void type; };\n\ntemplate <class _Tp>\nstruct __identity { typedef _Tp type; };\n\ntemplate <class _Tp, bool>\nstruct _LIBCPP_TEMPLATE_VIS __dependent_type : public _Tp {};\n\ntemplate <bool _Bp, class _If, class _Then>\n    struct _LIBCPP_TEMPLATE_VIS conditional {typedef _If type;};\ntemplate <class _If, class _Then>\n    struct _LIBCPP_TEMPLATE_VIS conditional<false, _If, _Then> {typedef _Then type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <bool _Bp, class _If, class _Then> using conditional_t = typename conditional<_Bp, _If, _Then>::type;\n#endif\n\ntemplate <bool, class _Tp> struct _LIBCPP_TEMPLATE_VIS __lazy_enable_if {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS __lazy_enable_if<true, _Tp> {typedef typename _Tp::type type;};\n\ntemplate <bool, class _Tp = void> struct _LIBCPP_TEMPLATE_VIS enable_if {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS enable_if<true, _Tp> {typedef _Tp type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <bool _Bp, class _Tp = void> using enable_if_t = typename enable_if<_Bp, _Tp>::type;\n#endif\n\n// addressof\n#ifndef _LIBCPP_HAS_NO_BUILTIN_ADDRESSOF\n\ntemplate <class _Tp>\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\n_LIBCPP_NO_CFI _LIBCPP_INLINE_VISIBILITY\n_Tp*\naddressof(_Tp& __x) _NOEXCEPT\n{\n    return __builtin_addressof(__x);\n}\n\n#else\n\ntemplate <class _Tp>\ninline _LIBCPP_NO_CFI _LIBCPP_INLINE_VISIBILITY\n_Tp*\naddressof(_Tp& __x) _NOEXCEPT\n{\n  return reinterpret_cast<_Tp *>(\n      const_cast<char *>(&reinterpret_cast<const volatile char &>(__x)));\n}\n\n#endif // _LIBCPP_HAS_NO_BUILTIN_ADDRESSOF\n\n#if defined(_LIBCPP_HAS_OBJC_ARC) && !defined(_LIBCPP_PREDEFINED_OBJC_ARC_ADDRESSOF)\n// Objective-C++ Automatic Reference Counting uses qualified pointers\n// that require special addressof() signatures. When\n// _LIBCPP_PREDEFINED_OBJC_ARC_ADDRESSOF is defined, the compiler\n// itself is providing these definitions. Otherwise, we provide them.\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n__strong _Tp*\naddressof(__strong _Tp& __x) _NOEXCEPT\n{\n  return &__x;\n}\n\n#ifdef _LIBCPP_HAS_OBJC_ARC_WEAK\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n__weak _Tp*\naddressof(__weak _Tp& __x) _NOEXCEPT\n{\n  return &__x;\n}\n#endif\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n__autoreleasing _Tp*\naddressof(__autoreleasing _Tp& __x) _NOEXCEPT\n{\n  return &__x;\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n__unsafe_unretained _Tp*\naddressof(__unsafe_unretained _Tp& __x) _NOEXCEPT\n{\n  return &__x;\n}\n#endif\n\n#if !defined(_LIBCPP_CXX03_LANG)\ntemplate <class _Tp> _Tp* addressof(const _Tp&&) noexcept = delete;\n#endif\n\nstruct __two {char __lx[2];};\n\n// helper class:\n\ntemplate <class _Tp, _Tp __v>\nstruct _LIBCPP_TEMPLATE_VIS integral_constant\n{\n    static _LIBCPP_CONSTEXPR const _Tp      value = __v;\n    typedef _Tp               value_type;\n    typedef integral_constant type;\n    _LIBCPP_INLINE_VISIBILITY\n        _LIBCPP_CONSTEXPR operator value_type() const _NOEXCEPT {return value;}\n#if _LIBCPP_STD_VER > 11\n    _LIBCPP_INLINE_VISIBILITY\n         constexpr value_type operator ()() const _NOEXCEPT {return value;}\n#endif\n};\n\ntemplate <class _Tp, _Tp __v>\n_LIBCPP_CONSTEXPR const _Tp integral_constant<_Tp, __v>::value;\n\n#if _LIBCPP_STD_VER > 14\ntemplate <bool __b>\nusing bool_constant = integral_constant<bool, __b>;\n#define _LIBCPP_BOOL_CONSTANT(__b) bool_constant<(__b)>\n#else\n#define _LIBCPP_BOOL_CONSTANT(__b) integral_constant<bool,(__b)>\n#endif\n\ntypedef _LIBCPP_BOOL_CONSTANT(true)  true_type;\ntypedef _LIBCPP_BOOL_CONSTANT(false) false_type;\n\n#if !defined(_LIBCPP_CXX03_LANG)\n\n// __lazy_and\n\ntemplate <bool _Last, class ..._Preds>\nstruct __lazy_and_impl;\n\ntemplate <class ..._Preds>\nstruct __lazy_and_impl<false, _Preds...> : false_type {};\n\ntemplate <>\nstruct __lazy_and_impl<true> : true_type {};\n\ntemplate <class _Pred>\nstruct __lazy_and_impl<true, _Pred> : integral_constant<bool, _Pred::type::value> {};\n\ntemplate <class _Hp, class ..._Tp>\nstruct __lazy_and_impl<true, _Hp, _Tp...> : __lazy_and_impl<_Hp::type::value, _Tp...> {};\n\ntemplate <class _P1, class ..._Pr>\nstruct __lazy_and : __lazy_and_impl<_P1::type::value, _Pr...> {};\n\n// __lazy_or\n\ntemplate <bool _List, class ..._Preds>\nstruct __lazy_or_impl;\n\ntemplate <class ..._Preds>\nstruct __lazy_or_impl<true, _Preds...> : true_type {};\n\ntemplate <>\nstruct __lazy_or_impl<false> : false_type {};\n\ntemplate <class _Hp, class ..._Tp>\nstruct __lazy_or_impl<false, _Hp, _Tp...>\n        : __lazy_or_impl<_Hp::type::value, _Tp...> {};\n\ntemplate <class _P1, class ..._Pr>\nstruct __lazy_or : __lazy_or_impl<_P1::type::value, _Pr...> {};\n\n// __lazy_not\n\ntemplate <class _Pred>\nstruct __lazy_not : integral_constant<bool, !_Pred::type::value> {};\n\n// __and_\ntemplate<class...> struct __and_;\ntemplate<> struct __and_<> : true_type {};\n\ntemplate<class _B0> struct __and_<_B0> : _B0 {};\n\ntemplate<class _B0, class _B1>\nstruct __and_<_B0, _B1> : conditional<_B0::value, _B1, _B0>::type {};\n\ntemplate<class _B0, class _B1, class _B2, class... _Bn>\nstruct __and_<_B0, _B1, _B2, _Bn...> \n        : conditional<_B0::value, __and_<_B1, _B2, _Bn...>, _B0>::type {};\n\n// __or_\ntemplate<class...> struct __or_;\ntemplate<> struct __or_<> : false_type {};\n\ntemplate<class _B0> struct __or_<_B0> : _B0 {};\n\ntemplate<class _B0, class _B1>\nstruct __or_<_B0, _B1> : conditional<_B0::value, _B0, _B1>::type {};\n\ntemplate<class _B0, class _B1, class _B2, class... _Bn>\nstruct __or_<_B0, _B1, _B2, _Bn...> \n        : conditional<_B0::value, _B0, __or_<_B1, _B2, _Bn...> >::type {};\n\n// __not_\ntemplate<class _Tp> \nstruct __not_ : conditional<_Tp::value, false_type, true_type>::type {};\n\n#endif // !defined(_LIBCPP_CXX03_LANG)\n\n// is_const\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_const            : public false_type {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_const<_Tp const> : public true_type {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_const_v\n    = is_const<_Tp>::value;\n#endif\n\n// is_volatile\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_volatile               : public false_type {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_volatile<_Tp volatile> : public true_type {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_volatile_v\n    = is_volatile<_Tp>::value;\n#endif\n\n// remove_const\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_const            {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_const<const _Tp> {typedef _Tp type;};\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using remove_const_t = typename remove_const<_Tp>::type;\n#endif\n\n// remove_volatile\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_volatile               {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_volatile<volatile _Tp> {typedef _Tp type;};\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using remove_volatile_t = typename remove_volatile<_Tp>::type;\n#endif\n\n// remove_cv\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_cv\n{typedef typename remove_volatile<typename remove_const<_Tp>::type>::type type;};\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using remove_cv_t = typename remove_cv<_Tp>::type;\n#endif\n\n// is_void\n\ntemplate <class _Tp> struct __libcpp_is_void       : public false_type {};\ntemplate <>          struct __libcpp_is_void<void> : public true_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_void\n    : public __libcpp_is_void<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_void_v\n    = is_void<_Tp>::value;\n#endif\n\n// __is_nullptr_t\n\ntemplate <class _Tp> struct __is_nullptr_t_impl       : public false_type {};\ntemplate <>          struct __is_nullptr_t_impl<nullptr_t> : public true_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS __is_nullptr_t\n    : public __is_nullptr_t_impl<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_null_pointer\n    : public __is_nullptr_t_impl<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_null_pointer_v\n    = is_null_pointer<_Tp>::value;\n#endif\n#endif\n\n// is_integral\n\ntemplate <class _Tp> struct __libcpp_is_integral                     : public false_type {};\ntemplate <>          struct __libcpp_is_integral<bool>               : public true_type {};\ntemplate <>          struct __libcpp_is_integral<char>               : public true_type {};\ntemplate <>          struct __libcpp_is_integral<signed char>        : public true_type {};\ntemplate <>          struct __libcpp_is_integral<unsigned char>      : public true_type {};\ntemplate <>          struct __libcpp_is_integral<wchar_t>            : public true_type {};\n#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS\ntemplate <>          struct __libcpp_is_integral<char16_t>           : public true_type {};\ntemplate <>          struct __libcpp_is_integral<char32_t>           : public true_type {};\n#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS\ntemplate <>          struct __libcpp_is_integral<short>              : public true_type {};\ntemplate <>          struct __libcpp_is_integral<unsigned short>     : public true_type {};\ntemplate <>          struct __libcpp_is_integral<int>                : public true_type {};\ntemplate <>          struct __libcpp_is_integral<unsigned int>       : public true_type {};\ntemplate <>          struct __libcpp_is_integral<long>               : public true_type {};\ntemplate <>          struct __libcpp_is_integral<unsigned long>      : public true_type {};\ntemplate <>          struct __libcpp_is_integral<long long>          : public true_type {};\ntemplate <>          struct __libcpp_is_integral<unsigned long long> : public true_type {};\n#ifndef _LIBCPP_HAS_NO_INT128\ntemplate <>          struct __libcpp_is_integral<__int128_t>         : public true_type {};\ntemplate <>          struct __libcpp_is_integral<__uint128_t>        : public true_type {};\n#endif\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_integral\n    : public __libcpp_is_integral<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_integral_v\n    = is_integral<_Tp>::value;\n#endif\n\n// is_floating_point\n\ntemplate <class _Tp> struct __libcpp_is_floating_point              : public false_type {};\ntemplate <>          struct __libcpp_is_floating_point<float>       : public true_type {};\ntemplate <>          struct __libcpp_is_floating_point<double>      : public true_type {};\ntemplate <>          struct __libcpp_is_floating_point<long double> : public true_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_floating_point\n    : public __libcpp_is_floating_point<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_floating_point_v\n    = is_floating_point<_Tp>::value;\n#endif\n\n// is_array\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_array\n    : public false_type {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_array<_Tp[]>\n    : public true_type {};\ntemplate <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS is_array<_Tp[_Np]>\n    : public true_type {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_array_v\n    = is_array<_Tp>::value;\n#endif\n\n// is_pointer\n\ntemplate <class _Tp> struct __libcpp_is_pointer       : public false_type {};\ntemplate <class _Tp> struct __libcpp_is_pointer<_Tp*> : public true_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pointer\n    : public __libcpp_is_pointer<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_pointer_v\n    = is_pointer<_Tp>::value;\n#endif\n\n// is_reference\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference       : public false_type {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference<_Tp&> : public true_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_rvalue_reference        : public false_type {};\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_rvalue_reference<_Tp&&> : public true_type {};\n#endif\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference        : public false_type {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference<_Tp&>  : public true_type {};\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference<_Tp&&> : public true_type {};\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_reference_v\n    = is_reference<_Tp>::value;\n\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_lvalue_reference_v\n    = is_lvalue_reference<_Tp>::value;\n\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_rvalue_reference_v\n    = is_rvalue_reference<_Tp>::value;\n#endif\n// is_union\n\n#if __has_feature(is_union) || (_GNUC_VER >= 403)\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_union\n    : public integral_constant<bool, __is_union(_Tp)> {};\n\n#else\n\ntemplate <class _Tp> struct __libcpp_union : public false_type {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_union\n    : public __libcpp_union<typename remove_cv<_Tp>::type> {};\n\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_union_v\n    = is_union<_Tp>::value;\n#endif\n\n// is_class\n\n#if __has_feature(is_class) || (_GNUC_VER >= 403)\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_class\n    : public integral_constant<bool, __is_class(_Tp)> {};\n\n#else\n\nnamespace __is_class_imp\n{\ntemplate <class _Tp> char  __test(int _Tp::*);\ntemplate <class _Tp> __two __test(...);\n}\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_class\n    : public integral_constant<bool, sizeof(__is_class_imp::__test<_Tp>(0)) == 1 && !is_union<_Tp>::value> {};\n\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_class_v\n    = is_class<_Tp>::value;\n#endif\n\n// is_same\n\ntemplate <class _Tp, class _Up> struct _LIBCPP_TEMPLATE_VIS is_same           : public false_type {};\ntemplate <class _Tp>            struct _LIBCPP_TEMPLATE_VIS is_same<_Tp, _Tp> : public true_type {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp, class _Up> _LIBCPP_CONSTEXPR bool is_same_v\n    = is_same<_Tp, _Up>::value;\n#endif\n\n// is_function\n\nnamespace __libcpp_is_function_imp\n{\nstruct __dummy_type {};\ntemplate <class _Tp> char  __test(_Tp*);\ntemplate <class _Tp> char __test(__dummy_type);\ntemplate <class _Tp> __two __test(...);\ntemplate <class _Tp> _Tp&  __source(int);\ntemplate <class _Tp> __dummy_type __source(...);\n}\n\ntemplate <class _Tp, bool = is_class<_Tp>::value ||\n                            is_union<_Tp>::value ||\n                            is_void<_Tp>::value  ||\n                            is_reference<_Tp>::value ||\n                            __is_nullptr_t<_Tp>::value >\nstruct __libcpp_is_function\n    : public integral_constant<bool, sizeof(__libcpp_is_function_imp::__test<_Tp>(__libcpp_is_function_imp::__source<_Tp>(0))) == 1>\n    {};\ntemplate <class _Tp> struct __libcpp_is_function<_Tp, true> : public false_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_function\n    : public __libcpp_is_function<_Tp> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_function_v\n    = is_function<_Tp>::value;\n#endif\n\n// is_member_function_pointer\n\n// template <class _Tp> struct            __libcpp_is_member_function_pointer             : public false_type {};\n// template <class _Tp, class _Up> struct __libcpp_is_member_function_pointer<_Tp _Up::*> : public is_function<_Tp> {};\n// \n\ntemplate <class _MP, bool _IsMemberFunctionPtr, bool _IsMemberObjectPtr>\nstruct __member_pointer_traits_imp\n{  // forward declaration; specializations later\n};\n\n\ntemplate <class _Tp> struct __libcpp_is_member_function_pointer\n    : public false_type {};\n\ntemplate <class _Ret, class _Class>\nstruct __libcpp_is_member_function_pointer<_Ret _Class::*>\n    : public is_function<_Ret> {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer\n    : public __libcpp_is_member_function_pointer<typename remove_cv<_Tp>::type>::type {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_member_function_pointer_v\n    = is_member_function_pointer<_Tp>::value;\n#endif\n\n// is_member_pointer\n\ntemplate <class _Tp>            struct __libcpp_is_member_pointer             : public false_type {};\ntemplate <class _Tp, class _Up> struct __libcpp_is_member_pointer<_Tp _Up::*> : public true_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_pointer\n    : public __libcpp_is_member_pointer<typename remove_cv<_Tp>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_member_pointer_v\n    = is_member_pointer<_Tp>::value;\n#endif\n\n// is_member_object_pointer\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer\n    : public integral_constant<bool, is_member_pointer<_Tp>::value &&\n                                    !is_member_function_pointer<_Tp>::value> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_member_object_pointer_v\n    = is_member_object_pointer<_Tp>::value;\n#endif\n\n// is_enum\n\n#if __has_feature(is_enum) || (_GNUC_VER >= 403)\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_enum\n    : public integral_constant<bool, __is_enum(_Tp)> {};\n\n#else\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_enum\n    : public integral_constant<bool, !is_void<_Tp>::value             &&\n                                     !is_integral<_Tp>::value         &&\n                                     !is_floating_point<_Tp>::value   &&\n                                     !is_array<_Tp>::value            &&\n                                     !is_pointer<_Tp>::value          &&\n                                     !is_reference<_Tp>::value        &&\n                                     !is_member_pointer<_Tp>::value   &&\n                                     !is_union<_Tp>::value            &&\n                                     !is_class<_Tp>::value            &&\n                                     !is_function<_Tp>::value         > {};\n\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_enum_v\n    = is_enum<_Tp>::value;\n#endif\n\n// is_arithmetic\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_arithmetic\n    : public integral_constant<bool, is_integral<_Tp>::value      ||\n                                     is_floating_point<_Tp>::value> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_arithmetic_v\n    = is_arithmetic<_Tp>::value;\n#endif\n\n// is_fundamental\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_fundamental\n    : public integral_constant<bool, is_void<_Tp>::value        ||\n                                     __is_nullptr_t<_Tp>::value ||\n                                     is_arithmetic<_Tp>::value> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_fundamental_v\n    = is_fundamental<_Tp>::value;\n#endif\n\n// is_scalar\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_scalar\n    : public integral_constant<bool, is_arithmetic<_Tp>::value     ||\n                                     is_member_pointer<_Tp>::value ||\n                                     is_pointer<_Tp>::value        ||\n                                     __is_nullptr_t<_Tp>::value    ||\n                                     is_enum<_Tp>::value           > {};\n\ntemplate <> struct _LIBCPP_TEMPLATE_VIS is_scalar<nullptr_t> : public true_type {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_scalar_v\n    = is_scalar<_Tp>::value;\n#endif\n\n// is_object\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_object\n    : public integral_constant<bool, is_scalar<_Tp>::value ||\n                                     is_array<_Tp>::value  ||\n                                     is_union<_Tp>::value  ||\n                                     is_class<_Tp>::value  > {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_object_v\n    = is_object<_Tp>::value;\n#endif\n\n// is_compound\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_compound\n    : public integral_constant<bool, !is_fundamental<_Tp>::value> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_compound_v\n    = is_compound<_Tp>::value;\n#endif\n\n\n// __is_referenceable  [defns.referenceable]\n\nstruct __is_referenceable_impl {\n    template <class _Tp> static _Tp& __test(int);\n    template <class _Tp> static __two __test(...);\n};\n\ntemplate <class _Tp>\nstruct __is_referenceable : integral_constant<bool,\n    !is_same<decltype(__is_referenceable_impl::__test<_Tp>(0)), __two>::value> {};\n\n\n// add_const\n\ntemplate <class _Tp, bool = is_reference<_Tp>::value ||\n                            is_function<_Tp>::value  ||\n                            is_const<_Tp>::value     >\nstruct __add_const             {typedef _Tp type;};\n\ntemplate <class _Tp>\nstruct __add_const<_Tp, false> {typedef const _Tp type;};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_const\n    {typedef typename __add_const<_Tp>::type type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using add_const_t = typename add_const<_Tp>::type;\n#endif\n\n// add_volatile\n\ntemplate <class _Tp, bool = is_reference<_Tp>::value ||\n                            is_function<_Tp>::value  ||\n                            is_volatile<_Tp>::value  >\nstruct __add_volatile             {typedef _Tp type;};\n\ntemplate <class _Tp>\nstruct __add_volatile<_Tp, false> {typedef volatile _Tp type;};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_volatile\n    {typedef typename __add_volatile<_Tp>::type type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using add_volatile_t = typename add_volatile<_Tp>::type;\n#endif\n\n// add_cv\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_cv\n    {typedef typename add_const<typename add_volatile<_Tp>::type>::type type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using add_cv_t = typename add_cv<_Tp>::type;\n#endif\n\n// remove_reference\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference        {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference<_Tp&>  {typedef _Tp type;};\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference<_Tp&&> {typedef _Tp type;};\n#endif\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using remove_reference_t = typename remove_reference<_Tp>::type;\n#endif\n\n// add_lvalue_reference\n\ntemplate <class _Tp, bool = __is_referenceable<_Tp>::value> struct __add_lvalue_reference_impl            { typedef _Tp  type; };\ntemplate <class _Tp                                       > struct __add_lvalue_reference_impl<_Tp, true> { typedef _Tp& type; };\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_lvalue_reference\n{typedef typename __add_lvalue_reference_impl<_Tp>::type type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;\n#endif\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, bool = __is_referenceable<_Tp>::value> struct __add_rvalue_reference_impl            { typedef _Tp   type; };\ntemplate <class _Tp                                       > struct __add_rvalue_reference_impl<_Tp, true> { typedef _Tp&& type; };\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_rvalue_reference\n{typedef typename __add_rvalue_reference_impl<_Tp>::type type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;\n#endif\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp> _Tp&& __declval(int);\ntemplate <class _Tp> _Tp   __declval(long);\n\ntemplate <class _Tp>\ndecltype(_VSTD::__declval<_Tp>(0))\ndeclval() _NOEXCEPT;\n\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp>\ntypename add_lvalue_reference<_Tp>::type\ndeclval();\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n// __uncvref\n\ntemplate <class _Tp>\nstruct __uncvref  {\n    typedef typename remove_cv<typename remove_reference<_Tp>::type>::type type;\n};\n\ntemplate <class _Tp>\nstruct __unconstref {\n    typedef typename remove_const<typename remove_reference<_Tp>::type>::type type;\n};\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Tp>\nusing __uncvref_t = typename __uncvref<_Tp>::type;\n#endif\n\n// __is_same_uncvref\n\ntemplate <class _Tp, class _Up>\nstruct __is_same_uncvref : is_same<typename __uncvref<_Tp>::type,\n                                   typename __uncvref<_Up>::type> {};\n\nstruct __any\n{\n    __any(...);\n};\n\n// remove_pointer\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer                      {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp*>                {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* const>          {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* volatile>       {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* const volatile> {typedef _Tp type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using remove_pointer_t = typename remove_pointer<_Tp>::type;\n#endif\n\n// add_pointer\n\ntemplate <class _Tp, \n        bool = __is_referenceable<_Tp>::value || \n                is_same<typename remove_cv<_Tp>::type, void>::value>\nstruct __add_pointer_impl\n    {typedef typename remove_reference<_Tp>::type* type;};\ntemplate <class _Tp> struct __add_pointer_impl<_Tp, false> \n    {typedef _Tp type;};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_pointer\n    {typedef typename __add_pointer_impl<_Tp>::type type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using add_pointer_t = typename add_pointer<_Tp>::type;\n#endif\n\n// is_signed\n\ntemplate <class _Tp, bool = is_integral<_Tp>::value>\nstruct __libcpp_is_signed_impl : public _LIBCPP_BOOL_CONSTANT(_Tp(-1) < _Tp(0)) {};\n\ntemplate <class _Tp>\nstruct __libcpp_is_signed_impl<_Tp, false> : public true_type {};  // floating point\n\ntemplate <class _Tp, bool = is_arithmetic<_Tp>::value>\nstruct __libcpp_is_signed : public __libcpp_is_signed_impl<_Tp> {};\n\ntemplate <class _Tp> struct __libcpp_is_signed<_Tp, false> : public false_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_signed : public __libcpp_is_signed<_Tp> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_signed_v\n    = is_signed<_Tp>::value;\n#endif\n\n// is_unsigned\n\ntemplate <class _Tp, bool = is_integral<_Tp>::value>\nstruct __libcpp_is_unsigned_impl : public _LIBCPP_BOOL_CONSTANT(_Tp(0) < _Tp(-1)) {};\n\ntemplate <class _Tp>\nstruct __libcpp_is_unsigned_impl<_Tp, false> : public false_type {};  // floating point\n\ntemplate <class _Tp, bool = is_arithmetic<_Tp>::value>\nstruct __libcpp_is_unsigned : public __libcpp_is_unsigned_impl<_Tp> {};\n\ntemplate <class _Tp> struct __libcpp_is_unsigned<_Tp, false> : public false_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_unsigned : public __libcpp_is_unsigned<_Tp> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_unsigned_v\n    = is_unsigned<_Tp>::value;\n#endif\n\n// rank\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS rank\n    : public integral_constant<size_t, 0> {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS rank<_Tp[]>\n    : public integral_constant<size_t, rank<_Tp>::value + 1> {};\ntemplate <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS rank<_Tp[_Np]>\n    : public integral_constant<size_t, rank<_Tp>::value + 1> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR size_t rank_v\n    = rank<_Tp>::value;\n#endif\n\n// extent\n\ntemplate <class _Tp, unsigned _Ip = 0> struct _LIBCPP_TEMPLATE_VIS extent\n    : public integral_constant<size_t, 0> {};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[], 0>\n    : public integral_constant<size_t, 0> {};\ntemplate <class _Tp, unsigned _Ip> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[], _Ip>\n    : public integral_constant<size_t, extent<_Tp, _Ip-1>::value> {};\ntemplate <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[_Np], 0>\n    : public integral_constant<size_t, _Np> {};\ntemplate <class _Tp, size_t _Np, unsigned _Ip> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[_Np], _Ip>\n    : public integral_constant<size_t, extent<_Tp, _Ip-1>::value> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp, unsigned _Ip = 0> _LIBCPP_CONSTEXPR size_t extent_v\n    = extent<_Tp, _Ip>::value;\n#endif\n\n// remove_extent\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_extent\n    {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_extent<_Tp[]>\n    {typedef _Tp type;};\ntemplate <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS remove_extent<_Tp[_Np]>\n    {typedef _Tp type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using remove_extent_t = typename remove_extent<_Tp>::type;\n#endif\n\n// remove_all_extents\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_all_extents\n    {typedef _Tp type;};\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_all_extents<_Tp[]>\n    {typedef typename remove_all_extents<_Tp>::type type;};\ntemplate <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS remove_all_extents<_Tp[_Np]>\n    {typedef typename remove_all_extents<_Tp>::type type;};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using remove_all_extents_t = typename remove_all_extents<_Tp>::type;\n#endif\n\n// decay\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS decay\n{\nprivate:\n    typedef typename remove_reference<_Tp>::type _Up;\npublic:\n    typedef typename conditional\n                     <\n                         is_array<_Up>::value,\n                         typename remove_extent<_Up>::type*,\n                         typename conditional\n                         <\n                              is_function<_Up>::value,\n                              typename add_pointer<_Up>::type,\n                              typename remove_cv<_Up>::type\n                         >::type\n                     >::type type;\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using decay_t = typename decay<_Tp>::type;\n#endif\n\n// is_abstract\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_abstract\n    : public integral_constant<bool, __is_abstract(_Tp)> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_abstract_v\n    = is_abstract<_Tp>::value;\n#endif\n\n// is_final\n\n#if defined(_LIBCPP_HAS_IS_FINAL)\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS\n__libcpp_is_final : public integral_constant<bool, __is_final(_Tp)> {};\n#else\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS\n__libcpp_is_final : public false_type {};\n#endif\n\n#if defined(_LIBCPP_HAS_IS_FINAL) && _LIBCPP_STD_VER > 11\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS\nis_final : public integral_constant<bool, __is_final(_Tp)> {};\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_final_v\n    = is_final<_Tp>::value;\n#endif\n\n// is_base_of\n\n#ifdef _LIBCPP_HAS_IS_BASE_OF\n\ntemplate <class _Bp, class _Dp>\nstruct _LIBCPP_TEMPLATE_VIS is_base_of\n    : public integral_constant<bool, __is_base_of(_Bp, _Dp)> {};\n\n#else  // _LIBCPP_HAS_IS_BASE_OF\n\nnamespace __is_base_of_imp\n{\ntemplate <class _Tp>\nstruct _Dst\n{\n    _Dst(const volatile _Tp &);\n};\ntemplate <class _Tp>\nstruct _Src\n{\n    operator const volatile _Tp &();\n    template <class _Up> operator const _Dst<_Up> &();\n};\ntemplate <size_t> struct __one { typedef char type; };\ntemplate <class _Bp, class _Dp> typename __one<sizeof(_Dst<_Bp>(declval<_Src<_Dp> >()))>::type __test(int);\ntemplate <class _Bp, class _Dp> __two __test(...);\n}\n\ntemplate <class _Bp, class _Dp>\nstruct _LIBCPP_TEMPLATE_VIS is_base_of\n    : public integral_constant<bool, is_class<_Bp>::value &&\n                                     sizeof(__is_base_of_imp::__test<_Bp, _Dp>(0)) == 2> {};\n\n#endif  // _LIBCPP_HAS_IS_BASE_OF\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Bp, class _Dp> _LIBCPP_CONSTEXPR bool is_base_of_v\n    = is_base_of<_Bp, _Dp>::value;\n#endif\n\n// is_convertible\n\n#if __has_feature(is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)\n\ntemplate <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible\n    : public integral_constant<bool, __is_convertible_to(_T1, _T2) &&\n                                     !is_abstract<_T2>::value> {};\n\n#else  // __has_feature(is_convertible_to)\n\nnamespace __is_convertible_imp\n{\ntemplate <class _Tp> void  __test_convert(_Tp);\n\ntemplate <class _From, class _To, class = void>\nstruct __is_convertible_test : public false_type {};\n\ntemplate <class _From, class _To>\nstruct __is_convertible_test<_From, _To,\n    decltype(_VSTD::__is_convertible_imp::__test_convert<_To>(_VSTD::declval<_From>()))> : public true_type\n{};\n\ntemplate <class _Tp, bool _IsArray =    is_array<_Tp>::value,\n                     bool _IsFunction = is_function<_Tp>::value,\n                     bool _IsVoid =     is_void<_Tp>::value>\n                     struct __is_array_function_or_void                          {enum {value = 0};};\ntemplate <class _Tp> struct __is_array_function_or_void<_Tp, true, false, false> {enum {value = 1};};\ntemplate <class _Tp> struct __is_array_function_or_void<_Tp, false, true, false> {enum {value = 2};};\ntemplate <class _Tp> struct __is_array_function_or_void<_Tp, false, false, true> {enum {value = 3};};\n}\n\ntemplate <class _Tp,\n    unsigned = __is_convertible_imp::__is_array_function_or_void<typename remove_reference<_Tp>::type>::value>\nstruct __is_convertible_check\n{\n    static const size_t __v = 0;\n};\n\ntemplate <class _Tp>\nstruct __is_convertible_check<_Tp, 0>\n{\n    static const size_t __v = sizeof(_Tp);\n};\n\ntemplate <class _T1, class _T2,\n    unsigned _T1_is_array_function_or_void = __is_convertible_imp::__is_array_function_or_void<_T1>::value,\n    unsigned _T2_is_array_function_or_void = __is_convertible_imp::__is_array_function_or_void<_T2>::value>\nstruct __is_convertible\n    : public integral_constant<bool,\n        __is_convertible_imp::__is_convertible_test<_T1, _T2>::value\n#if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)\n         && !(!is_function<_T1>::value && !is_reference<_T1>::value && is_reference<_T2>::value\n              && (!is_const<typename remove_reference<_T2>::type>::value\n                  || is_volatile<typename remove_reference<_T2>::type>::value)\n                  && (is_same<typename remove_cv<_T1>::type,\n                              typename remove_cv<typename remove_reference<_T2>::type>::type>::value\n                      || is_base_of<typename remove_reference<_T2>::type, _T1>::value))\n#endif\n    >\n{};\n\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 1> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 1> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 1> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 1> : public false_type {};\n\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 2> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 2> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 2> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 2> : public false_type {};\n\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 3> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 3> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 3> : public false_type {};\ntemplate <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 3> : public true_type {};\n\ntemplate <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible\n    : public __is_convertible<_T1, _T2>\n{\n    static const size_t __complete_check1 = __is_convertible_check<_T1>::__v;\n    static const size_t __complete_check2 = __is_convertible_check<_T2>::__v;\n};\n\n#endif  // __has_feature(is_convertible_to)\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _From, class _To> _LIBCPP_CONSTEXPR bool is_convertible_v\n    = is_convertible<_From, _To>::value;\n#endif\n\n// is_empty\n\n#if __has_feature(is_empty) || (_GNUC_VER >= 407)\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_empty\n    : public integral_constant<bool, __is_empty(_Tp)> {};\n\n#else  // __has_feature(is_empty)\n\ntemplate <class _Tp>\nstruct __is_empty1\n    : public _Tp\n{\n    double __lx;\n};\n\nstruct __is_empty2\n{\n    double __lx;\n};\n\ntemplate <class _Tp, bool = is_class<_Tp>::value>\nstruct __libcpp_empty : public integral_constant<bool, sizeof(__is_empty1<_Tp>) == sizeof(__is_empty2)> {};\n\ntemplate <class _Tp> struct __libcpp_empty<_Tp, false> : public false_type {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_empty : public __libcpp_empty<_Tp> {};\n\n#endif  // __has_feature(is_empty)\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_empty_v\n    = is_empty<_Tp>::value;\n#endif\n\n// is_polymorphic\n\n#if __has_feature(is_polymorphic) || defined(_LIBCPP_COMPILER_MSVC)\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_polymorphic\n    : public integral_constant<bool, __is_polymorphic(_Tp)> {};\n\n#else\n\ntemplate<typename _Tp> char &__is_polymorphic_impl(\n    typename enable_if<sizeof((_Tp*)dynamic_cast<const volatile void*>(declval<_Tp*>())) != 0,\n                       int>::type);\ntemplate<typename _Tp> __two &__is_polymorphic_impl(...);\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_polymorphic\n    : public integral_constant<bool, sizeof(__is_polymorphic_impl<_Tp>(0)) == 1> {};\n\n#endif // __has_feature(is_polymorphic)\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_polymorphic_v\n    = is_polymorphic<_Tp>::value;\n#endif\n\n// has_virtual_destructor\n\n#if __has_feature(has_virtual_destructor) || (_GNUC_VER >= 403)\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_virtual_destructor\n    : public integral_constant<bool, __has_virtual_destructor(_Tp)> {};\n\n#else\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_virtual_destructor\n    : public false_type {};\n\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool has_virtual_destructor_v\n    = has_virtual_destructor<_Tp>::value;\n#endif\n\n// alignment_of\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS alignment_of\n    : public integral_constant<size_t, __alignof__(_Tp)> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR size_t alignment_of_v\n    = alignment_of<_Tp>::value;\n#endif\n\n// aligned_storage\n\ntemplate <class _Hp, class _Tp>\nstruct __type_list\n{\n    typedef _Hp _Head;\n    typedef _Tp _Tail;\n};\n\nstruct __nat\n{\n#ifndef _LIBCPP_CXX03_LANG\n    __nat() = delete;\n    __nat(const __nat&) = delete;\n    __nat& operator=(const __nat&) = delete;\n    ~__nat() = delete;\n#endif\n};\n\ntemplate <class _Tp>\nstruct __align_type\n{\n    static const size_t value = alignment_of<_Tp>::value;\n    typedef _Tp type;\n};\n\nstruct __struct_double {long double __lx;};\nstruct __struct_double4 {double __lx[4];};\n\ntypedef\n    __type_list<__align_type<unsigned char>,\n    __type_list<__align_type<unsigned short>,\n    __type_list<__align_type<unsigned int>,\n    __type_list<__align_type<unsigned long>,\n    __type_list<__align_type<unsigned long long>,\n    __type_list<__align_type<double>,\n    __type_list<__align_type<long double>,\n    __type_list<__align_type<__struct_double>,\n    __type_list<__align_type<__struct_double4>,\n    __type_list<__align_type<int*>,\n    __nat\n    > > > > > > > > > > __all_types;\n\ntemplate <class _TL, size_t _Align> struct __find_pod;\n\ntemplate <class _Hp, size_t _Align>\nstruct __find_pod<__type_list<_Hp, __nat>, _Align>\n{\n    typedef typename conditional<\n                             _Align == _Hp::value,\n                             typename _Hp::type,\n                             void\n                         >::type type;\n};\n\ntemplate <class _Hp, class _Tp, size_t _Align>\nstruct __find_pod<__type_list<_Hp, _Tp>, _Align>\n{\n    typedef typename conditional<\n                             _Align == _Hp::value,\n                             typename _Hp::type,\n                             typename __find_pod<_Tp, _Align>::type\n                         >::type type;\n};\n\ntemplate <class _TL, size_t _Len> struct __find_max_align;\n\ntemplate <class _Hp, size_t _Len>\nstruct __find_max_align<__type_list<_Hp, __nat>, _Len> : public integral_constant<size_t, _Hp::value> {};\n\ntemplate <size_t _Len, size_t _A1, size_t _A2>\nstruct __select_align\n{\nprivate:\n    static const size_t __min = _A2 < _A1 ? _A2 : _A1;\n    static const size_t __max = _A1 < _A2 ? _A2 : _A1;\npublic:\n    static const size_t value = _Len < __max ? __min : __max;\n};\n\ntemplate <class _Hp, class _Tp, size_t _Len>\nstruct __find_max_align<__type_list<_Hp, _Tp>, _Len>\n    : public integral_constant<size_t, __select_align<_Len, _Hp::value, __find_max_align<_Tp, _Len>::value>::value> {};\n\ntemplate <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>\nstruct _LIBCPP_TEMPLATE_VIS aligned_storage\n{\n    typedef typename __find_pod<__all_types, _Align>::type _Aligner;\n    static_assert(!is_void<_Aligner>::value, \"\");\n    union type\n    {\n        _Aligner __align;\n        unsigned char __data[(_Len + _Align - 1)/_Align * _Align];\n    };\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>\n    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;\n#endif\n\n#define _CREATE_ALIGNED_STORAGE_SPECIALIZATION(n) \\\ntemplate <size_t _Len>\\\nstruct _LIBCPP_TEMPLATE_VIS aligned_storage<_Len, n>\\\n{\\\n    struct _ALIGNAS(n) type\\\n    {\\\n        unsigned char __lx[(_Len + n - 1)/n * n];\\\n    };\\\n}\n\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x1);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x2);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x8);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x10);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x20);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x40);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x80);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x100);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x200);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x400);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x800);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x1000);\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x2000);\n// PE/COFF does not support alignment beyond 8192 (=0x2000)\n#if !defined(_LIBCPP_OBJECT_FORMAT_COFF)\n_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4000);\n#endif // !defined(_LIBCPP_OBJECT_FORMAT_COFF)\n\n#undef _CREATE_ALIGNED_STORAGE_SPECIALIZATION\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n// aligned_union\n\ntemplate <size_t _I0, size_t ..._In>\nstruct __static_max;\n\ntemplate <size_t _I0>\nstruct __static_max<_I0>\n{\n    static const size_t value = _I0;\n};\n\ntemplate <size_t _I0, size_t _I1, size_t ..._In>\nstruct __static_max<_I0, _I1, _In...>\n{\n    static const size_t value = _I0 >= _I1 ? __static_max<_I0, _In...>::value :\n                                             __static_max<_I1, _In...>::value;\n};\n\ntemplate <size_t _Len, class _Type0, class ..._Types>\nstruct aligned_union\n{\n    static const size_t alignment_value = __static_max<__alignof__(_Type0),\n                                                       __alignof__(_Types)...>::value;\n    static const size_t __len = __static_max<_Len, sizeof(_Type0),\n                                             sizeof(_Types)...>::value;\n    typedef typename aligned_storage<__len, alignment_value>::type type;\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union<_Len, _Types...>::type;\n#endif\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp>\nstruct __numeric_type\n{\n   static void __test(...);\n   static float __test(float);\n   static double __test(char);\n   static double __test(int);\n   static double __test(unsigned);\n   static double __test(long);\n   static double __test(unsigned long);\n   static double __test(long long);\n   static double __test(unsigned long long);\n   static double __test(double);\n   static long double __test(long double);\n\n   typedef decltype(__test(declval<_Tp>())) type;\n   static const bool value = !is_same<type, void>::value;\n};\n\ntemplate <>\nstruct __numeric_type<void>\n{\n   static const bool value = true;\n};\n\n// __promote\n\ntemplate <class _A1, class _A2 = void, class _A3 = void,\n          bool = __numeric_type<_A1>::value &&\n                 __numeric_type<_A2>::value &&\n                 __numeric_type<_A3>::value>\nclass __promote_imp\n{\npublic:\n    static const bool value = false;\n};\n\ntemplate <class _A1, class _A2, class _A3>\nclass __promote_imp<_A1, _A2, _A3, true>\n{\nprivate:\n    typedef typename __promote_imp<_A1>::type __type1;\n    typedef typename __promote_imp<_A2>::type __type2;\n    typedef typename __promote_imp<_A3>::type __type3;\npublic:\n    typedef decltype(__type1() + __type2() + __type3()) type;\n    static const bool value = true;\n};\n\ntemplate <class _A1, class _A2>\nclass __promote_imp<_A1, _A2, void, true>\n{\nprivate:\n    typedef typename __promote_imp<_A1>::type __type1;\n    typedef typename __promote_imp<_A2>::type __type2;\npublic:\n    typedef decltype(__type1() + __type2()) type;\n    static const bool value = true;\n};\n\ntemplate <class _A1>\nclass __promote_imp<_A1, void, void, true>\n{\npublic:\n    typedef typename __numeric_type<_A1>::type type;\n    static const bool value = true;\n};\n\ntemplate <class _A1, class _A2 = void, class _A3 = void>\nclass __promote : public __promote_imp<_A1, _A2, _A3> {};\n\n// make_signed / make_unsigned\n\ntypedef\n    __type_list<signed char,\n    __type_list<signed short,\n    __type_list<signed int,\n    __type_list<signed long,\n    __type_list<signed long long,\n#ifndef _LIBCPP_HAS_NO_INT128\n    __type_list<__int128_t,\n#endif\n    __nat\n#ifndef _LIBCPP_HAS_NO_INT128\n    >\n#endif\n    > > > > > __signed_types;\n\ntypedef\n    __type_list<unsigned char,\n    __type_list<unsigned short,\n    __type_list<unsigned int,\n    __type_list<unsigned long,\n    __type_list<unsigned long long,\n#ifndef _LIBCPP_HAS_NO_INT128\n    __type_list<__uint128_t,\n#endif\n    __nat\n#ifndef _LIBCPP_HAS_NO_INT128\n    >\n#endif\n    > > > > > __unsigned_types;\n\ntemplate <class _TypeList, size_t _Size, bool = _Size <= sizeof(typename _TypeList::_Head)> struct __find_first;\n\ntemplate <class _Hp, class _Tp, size_t _Size>\nstruct __find_first<__type_list<_Hp, _Tp>, _Size, true>\n{\n    typedef _Hp type;\n};\n\ntemplate <class _Hp, class _Tp, size_t _Size>\nstruct __find_first<__type_list<_Hp, _Tp>, _Size, false>\n{\n    typedef typename __find_first<_Tp, _Size>::type type;\n};\n\ntemplate <class _Tp, class _Up, bool = is_const<typename remove_reference<_Tp>::type>::value,\n                             bool = is_volatile<typename remove_reference<_Tp>::type>::value>\nstruct __apply_cv\n{\n    typedef _Up type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __apply_cv<_Tp, _Up, true, false>\n{\n    typedef const _Up type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __apply_cv<_Tp, _Up, false, true>\n{\n    typedef volatile _Up type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __apply_cv<_Tp, _Up, true, true>\n{\n    typedef const volatile _Up type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __apply_cv<_Tp&, _Up, false, false>\n{\n    typedef _Up& type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __apply_cv<_Tp&, _Up, true, false>\n{\n    typedef const _Up& type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __apply_cv<_Tp&, _Up, false, true>\n{\n    typedef volatile _Up& type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __apply_cv<_Tp&, _Up, true, true>\n{\n    typedef const volatile _Up& type;\n};\n\ntemplate <class _Tp, bool = is_integral<_Tp>::value || is_enum<_Tp>::value>\nstruct __make_signed {};\n\ntemplate <class _Tp>\nstruct __make_signed<_Tp, true>\n{\n    typedef typename __find_first<__signed_types, sizeof(_Tp)>::type type;\n};\n\ntemplate <> struct __make_signed<bool,               true> {};\ntemplate <> struct __make_signed<  signed short,     true> {typedef short     type;};\ntemplate <> struct __make_signed<unsigned short,     true> {typedef short     type;};\ntemplate <> struct __make_signed<  signed int,       true> {typedef int       type;};\ntemplate <> struct __make_signed<unsigned int,       true> {typedef int       type;};\ntemplate <> struct __make_signed<  signed long,      true> {typedef long      type;};\ntemplate <> struct __make_signed<unsigned long,      true> {typedef long      type;};\ntemplate <> struct __make_signed<  signed long long, true> {typedef long long type;};\ntemplate <> struct __make_signed<unsigned long long, true> {typedef long long type;};\n#ifndef _LIBCPP_HAS_NO_INT128\ntemplate <> struct __make_signed<__int128_t,         true> {typedef __int128_t type;};\ntemplate <> struct __make_signed<__uint128_t,        true> {typedef __int128_t type;};\n#endif\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS make_signed\n{\n    typedef typename __apply_cv<_Tp, typename __make_signed<typename remove_cv<_Tp>::type>::type>::type type;\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using make_signed_t = typename make_signed<_Tp>::type;\n#endif\n\ntemplate <class _Tp, bool = is_integral<_Tp>::value || is_enum<_Tp>::value>\nstruct __make_unsigned {};\n\ntemplate <class _Tp>\nstruct __make_unsigned<_Tp, true>\n{\n    typedef typename __find_first<__unsigned_types, sizeof(_Tp)>::type type;\n};\n\ntemplate <> struct __make_unsigned<bool,               true> {};\ntemplate <> struct __make_unsigned<  signed short,     true> {typedef unsigned short     type;};\ntemplate <> struct __make_unsigned<unsigned short,     true> {typedef unsigned short     type;};\ntemplate <> struct __make_unsigned<  signed int,       true> {typedef unsigned int       type;};\ntemplate <> struct __make_unsigned<unsigned int,       true> {typedef unsigned int       type;};\ntemplate <> struct __make_unsigned<  signed long,      true> {typedef unsigned long      type;};\ntemplate <> struct __make_unsigned<unsigned long,      true> {typedef unsigned long      type;};\ntemplate <> struct __make_unsigned<  signed long long, true> {typedef unsigned long long type;};\ntemplate <> struct __make_unsigned<unsigned long long, true> {typedef unsigned long long type;};\n#ifndef _LIBCPP_HAS_NO_INT128\ntemplate <> struct __make_unsigned<__int128_t,         true> {typedef __uint128_t        type;};\ntemplate <> struct __make_unsigned<__uint128_t,        true> {typedef __uint128_t        type;};\n#endif\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS make_unsigned\n{\n    typedef typename __apply_cv<_Tp, typename __make_unsigned<typename remove_cv<_Tp>::type>::type>::type type;\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using make_unsigned_t = typename make_unsigned<_Tp>::type;\n#endif\n\n#ifdef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp, class _Up = void, class _Vp = void>\nstruct _LIBCPP_TEMPLATE_VIS common_type\n{\npublic:\n    typedef typename common_type<typename common_type<_Tp, _Up>::type, _Vp>::type type;\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS common_type<_Tp, void, void>\n{\npublic:\n    typedef typename decay<_Tp>::type type;\n};\n\ntemplate <class _Tp, class _Up>\nstruct _LIBCPP_TEMPLATE_VIS common_type<_Tp, _Up, void>\n{\n    typedef typename decay<decltype(\n        true ? _VSTD::declval<_Tp>() : _VSTD::declval<_Up>()\n      )>::type type;\n};\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\n// bullet 1 - sizeof...(Tp) == 0\n\ntemplate <class ..._Tp>\nstruct _LIBCPP_TEMPLATE_VIS common_type {};\n\n// bullet 2 - sizeof...(Tp) == 1\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS common_type<_Tp>\n{\n    typedef typename decay<_Tp>::type type;\n};\n\n// bullet 3 - sizeof...(Tp) == 2\n\ntemplate <class _Tp, class _Up, class = void>\nstruct __common_type2_imp {};\n\ntemplate <class _Tp, class _Up>\nstruct __common_type2_imp<_Tp, _Up,\n    typename __void_t<decltype(\n        true ? _VSTD::declval<_Tp>() : _VSTD::declval<_Up>()\n    )>::type>\n{\n    typedef typename decay<decltype(\n        true ? _VSTD::declval<_Tp>() : _VSTD::declval<_Up>()\n    )>::type type;\n};\n\ntemplate <class _Tp, class _Up,\n          class _DTp = typename decay<_Tp>::type,\n          class _DUp = typename decay<_Up>::type>\nusing __common_type2 =\n  typename conditional<\n    is_same<_Tp, _DTp>::value && is_same<_Up, _DUp>::value,\n    __common_type2_imp<_Tp, _Up>,\n    common_type<_DTp, _DUp>\n  >::type;\n\ntemplate <class _Tp, class _Up>\nstruct _LIBCPP_TEMPLATE_VIS common_type<_Tp, _Up>\n    : __common_type2<_Tp, _Up> {};\n\n// bullet 4 - sizeof...(Tp) > 2\n\ntemplate <class ...Tp> struct __common_types;\n\ntemplate <class, class = void>\nstruct __common_type_impl {};\n\ntemplate <class _Tp, class _Up>\nstruct __common_type_impl<\n    __common_types<_Tp, _Up>,\n    typename __void_t<typename common_type<_Tp, _Up>::type>::type>\n{\n  typedef typename common_type<_Tp, _Up>::type type;\n};\n\ntemplate <class _Tp, class _Up, class ..._Vp>\nstruct __common_type_impl<__common_types<_Tp, _Up, _Vp...>,\n    typename __void_t<typename common_type<_Tp, _Up>::type>::type>\n  : __common_type_impl<\n      __common_types<typename common_type<_Tp, _Up>::type, _Vp...> >\n{\n\n};\n\ntemplate <class _Tp, class _Up, class ..._Vp>\nstruct _LIBCPP_TEMPLATE_VIS common_type<_Tp, _Up, _Vp...>\n    : __common_type_impl<__common_types<_Tp, _Up, _Vp...> > {};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class ..._Tp> using common_type_t = typename common_type<_Tp...>::type;\n#endif\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n// is_assignable\n\ntemplate<typename, typename _Tp> struct __select_2nd { typedef _Tp type; };\n\ntemplate <class _Tp, class _Arg>\ntypename __select_2nd<decltype((_VSTD::declval<_Tp>() = _VSTD::declval<_Arg>())), true_type>::type\n__is_assignable_test(int);\n\ntemplate <class, class>\nfalse_type __is_assignable_test(...);\n\n\ntemplate <class _Tp, class _Arg, bool = is_void<_Tp>::value || is_void<_Arg>::value>\nstruct __is_assignable_imp\n    : public decltype((_VSTD::__is_assignable_test<_Tp, _Arg>(0))) {};\n\ntemplate <class _Tp, class _Arg>\nstruct __is_assignable_imp<_Tp, _Arg, true>\n    : public false_type\n{\n};\n\ntemplate <class _Tp, class _Arg>\nstruct is_assignable\n    : public __is_assignable_imp<_Tp, _Arg> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp, class _Arg> _LIBCPP_CONSTEXPR bool is_assignable_v\n    = is_assignable<_Tp, _Arg>::value;\n#endif\n\n// is_copy_assignable\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_copy_assignable\n    : public is_assignable<typename add_lvalue_reference<_Tp>::type,\n                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_copy_assignable_v\n    = is_copy_assignable<_Tp>::value;\n#endif\n\n// is_move_assignable\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_move_assignable\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    : public is_assignable<typename add_lvalue_reference<_Tp>::type,\n                           typename add_rvalue_reference<_Tp>::type> {};\n#else\n    : public is_copy_assignable<_Tp> {};\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_move_assignable_v\n    = is_move_assignable<_Tp>::value;\n#endif\n\n// is_destructible\n\n//  if it's a reference, return true\n//  if it's a function, return false\n//  if it's   void,     return false\n//  if it's an array of unknown bound, return false\n//  Otherwise, return \"std::declval<_Up&>().~_Up()\" is well-formed\n//    where _Up is remove_all_extents<_Tp>::type\n\ntemplate <class>\nstruct __is_destructible_apply { typedef int type; };\n\ntemplate <typename _Tp>\nstruct __is_destructor_wellformed {\n    template <typename _Tp1>\n    static char  __test (\n        typename __is_destructible_apply<decltype(_VSTD::declval<_Tp1&>().~_Tp1())>::type\n    );\n\n    template <typename _Tp1>\n    static __two __test (...);\n    \n    static const bool value = sizeof(__test<_Tp>(12)) == sizeof(char);\n};\n\ntemplate <class _Tp, bool>\nstruct __destructible_imp;\n\ntemplate <class _Tp>\nstruct __destructible_imp<_Tp, false> \n   : public _VSTD::integral_constant<bool, \n        __is_destructor_wellformed<typename _VSTD::remove_all_extents<_Tp>::type>::value> {};\n\ntemplate <class _Tp>\nstruct __destructible_imp<_Tp, true>\n    : public _VSTD::true_type {};\n\ntemplate <class _Tp, bool>\nstruct __destructible_false;\n\ntemplate <class _Tp>\nstruct __destructible_false<_Tp, false> : public __destructible_imp<_Tp, _VSTD::is_reference<_Tp>::value> {};\n\ntemplate <class _Tp>\nstruct __destructible_false<_Tp, true> : public _VSTD::false_type {};\n\ntemplate <class _Tp>\nstruct is_destructible\n    : public __destructible_false<_Tp, _VSTD::is_function<_Tp>::value> {};\n\ntemplate <class _Tp>\nstruct is_destructible<_Tp[]>\n    : public _VSTD::false_type {};\n\ntemplate <>\nstruct is_destructible<void>\n    : public _VSTD::false_type {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_destructible_v\n    = is_destructible<_Tp>::value;\n#endif\n\n// move\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR\ntypename remove_reference<_Tp>::type&&\nmove(_Tp&& __t) _NOEXCEPT\n{\n    typedef typename remove_reference<_Tp>::type _Up;\n    return static_cast<_Up&&>(__t);\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR\n_Tp&&\nforward(typename remove_reference<_Tp>::type& __t) _NOEXCEPT\n{\n    return static_cast<_Tp&&>(__t);\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR\n_Tp&&\nforward(typename remove_reference<_Tp>::type&& __t) _NOEXCEPT\n{\n    static_assert(!is_lvalue_reference<_Tp>::value,\n                  \"can not forward an rvalue as an lvalue\");\n    return static_cast<_Tp&&>(__t);\n}\n\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_Tp&\nmove(_Tp& __t)\n{\n    return __t;\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nconst _Tp&\nmove(const _Tp& __t)\n{\n    return __t;\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_Tp&\nforward(typename remove_reference<_Tp>::type& __t) _NOEXCEPT\n{\n    return __t;\n}\n\n\ntemplate <class _Tp>\nclass __rv\n{\n    typedef typename remove_reference<_Tp>::type _Trr;\n    _Trr& t_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    _Trr* operator->() {return &t_;}\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __rv(_Trr& __t) : t_(__t) {}\n};\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename decay<_Tp>::type\n__decay_copy(_Tp&& __t)\n{\n    return _VSTD::forward<_Tp>(__t);\n}\n\n#else\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename decay<_Tp>::type\n__decay_copy(const _Tp& __t)\n{\n    return _VSTD::forward<_Tp>(__t);\n}\n\n#endif\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\n#if __has_feature(cxx_reference_qualified_functions) || \\\n    (defined(_GNUC_VER) && _GNUC_VER >= 409)\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) &, true, false>\n{\n    typedef _Class& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) &, true, false>\n{\n    typedef _Class& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&, true, false>\n{\n    typedef _Class const& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&, true, false>\n{\n    typedef _Class const& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&, true, false>\n{\n    typedef _Class volatile& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&, true, false>\n{\n    typedef _Class volatile& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&, true, false>\n{\n    typedef _Class const volatile& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&, true, false>\n{\n    typedef _Class const volatile& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) &&, true, false>\n{\n    typedef _Class&& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) &&, true, false>\n{\n    typedef _Class&& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&&, true, false>\n{\n    typedef _Class const&& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&&, true, false>\n{\n    typedef _Class const&& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&&, true, false>\n{\n    typedef _Class volatile&& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&&, true, false>\n{\n    typedef _Class volatile&& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&&, true, false>\n{\n    typedef _Class const volatile&& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param...);\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&&, true, false>\n{\n    typedef _Class const volatile&& _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_Param..., ...);\n};\n\n#endif  // __has_feature(cxx_reference_qualified_functions) || _GNUC_VER >= 409\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) ();\n};\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(...), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (...);\n};\n\ntemplate <class _Rp, class _Class, class _P0>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0);\n};\n\ntemplate <class _Rp, class _Class, class _P0>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, ...), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, ...);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, ...), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, ...);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1, class _P2>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, _P2);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1, class _P2>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2, ...), true, false>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, _P2, ...);\n};\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)() const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) ();\n};\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(...) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (...);\n};\n\ntemplate <class _Rp, class _Class, class _P0>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0);\n};\n\ntemplate <class _Rp, class _Class, class _P0>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, ...) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, ...);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, ...) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, ...);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1, class _P2>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, _P2);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1, class _P2>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2, ...) const, true, false>\n{\n    typedef _Class const _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, _P2, ...);\n};\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)() volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) ();\n};\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(...) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (...);\n};\n\ntemplate <class _Rp, class _Class, class _P0>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0);\n};\n\ntemplate <class _Rp, class _Class, class _P0>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, ...) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, ...);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, ...) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, ...);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1, class _P2>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, _P2);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1, class _P2>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2, ...) volatile, true, false>\n{\n    typedef _Class volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, _P2, ...);\n};\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)() const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) ();\n};\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(...) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (...);\n};\n\ntemplate <class _Rp, class _Class, class _P0>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0);\n};\n\ntemplate <class _Rp, class _Class, class _P0>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, ...) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, ...);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, ...) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, ...);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1, class _P2>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, _P2);\n};\n\ntemplate <class _Rp, class _Class, class _P0, class _P1, class _P2>\nstruct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2, ...) const volatile, true, false>\n{\n    typedef _Class const volatile _ClassType;\n    typedef _Rp _ReturnType;\n    typedef _Rp (_FnType) (_P0, _P1, _P2, ...);\n};\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Rp, class _Class>\nstruct __member_pointer_traits_imp<_Rp _Class::*, false, true>\n{\n    typedef _Class _ClassType;\n    typedef _Rp _ReturnType;\n};\n\ntemplate <class _MP>\nstruct __member_pointer_traits\n    : public __member_pointer_traits_imp<typename remove_cv<_MP>::type,\n                    is_member_function_pointer<_MP>::value,\n                    is_member_object_pointer<_MP>::value>\n{\n//     typedef ... _ClassType;\n//     typedef ... _ReturnType;\n//     typedef ... _FnType;\n};\n\n\ntemplate <class _DecayedFp>\nstruct __member_pointer_class_type {};\n\ntemplate <class _Ret, class _ClassType>\nstruct __member_pointer_class_type<_Ret _ClassType::*> {\n  typedef _ClassType type;\n};\n\n// result_of\n\ntemplate <class _Callable> class result_of;\n\n#ifdef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Fn, bool, bool>\nclass __result_of\n{\n};\n\ntemplate <class _Fn>\nclass __result_of<_Fn(), true, false>\n{\npublic:\n    typedef decltype(declval<_Fn>()()) type;\n};\n\ntemplate <class _Fn, class _A0>\nclass __result_of<_Fn(_A0), true, false>\n{\npublic:\n    typedef decltype(declval<_Fn>()(declval<_A0>())) type;\n};\n\ntemplate <class _Fn, class _A0, class _A1>\nclass __result_of<_Fn(_A0, _A1), true, false>\n{\npublic:\n    typedef decltype(declval<_Fn>()(declval<_A0>(), declval<_A1>())) type;\n};\n\ntemplate <class _Fn, class _A0, class _A1, class _A2>\nclass __result_of<_Fn(_A0, _A1, _A2), true, false>\n{\npublic:\n    typedef decltype(declval<_Fn>()(declval<_A0>(), declval<_A1>(), declval<_A2>())) type;\n};\n\ntemplate <class _MP, class _Tp, bool _IsMemberFunctionPtr>\nstruct __result_of_mp;\n\n// member function pointer\n\ntemplate <class _MP, class _Tp>\nstruct __result_of_mp<_MP, _Tp, true>\n    : public __identity<typename __member_pointer_traits<_MP>::_ReturnType>\n{\n};\n\n// member data pointer\n\ntemplate <class _MP, class _Tp, bool>\nstruct __result_of_mdp;\n\ntemplate <class _Rp, class _Class, class _Tp>\nstruct __result_of_mdp<_Rp _Class::*, _Tp, false>\n{\n    typedef typename __apply_cv<decltype(*_VSTD::declval<_Tp>()), _Rp>::type& type;\n};\n\ntemplate <class _Rp, class _Class, class _Tp>\nstruct __result_of_mdp<_Rp _Class::*, _Tp, true>\n{\n    typedef typename __apply_cv<_Tp, _Rp>::type& type;\n};\n\ntemplate <class _Rp, class _Class, class _Tp>\nstruct __result_of_mp<_Rp _Class::*, _Tp, false>\n    : public __result_of_mdp<_Rp _Class::*, _Tp,\n            is_base_of<_Class, typename remove_reference<_Tp>::type>::value>\n{\n};\n\n\n\ntemplate <class _Fn, class _Tp>\nclass __result_of<_Fn(_Tp), false, true>  // _Fn must be member pointer\n    : public __result_of_mp<typename remove_reference<_Fn>::type,\n                            _Tp,\n                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>\n{\n};\n\ntemplate <class _Fn, class _Tp, class _A0>\nclass __result_of<_Fn(_Tp, _A0), false, true>  // _Fn must be member pointer\n    : public __result_of_mp<typename remove_reference<_Fn>::type,\n                            _Tp,\n                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>\n{\n};\n\ntemplate <class _Fn, class _Tp, class _A0, class _A1>\nclass __result_of<_Fn(_Tp, _A0, _A1), false, true>  // _Fn must be member pointer\n    : public __result_of_mp<typename remove_reference<_Fn>::type,\n                            _Tp,\n                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>\n{\n};\n\ntemplate <class _Fn, class _Tp, class _A0, class _A1, class _A2>\nclass __result_of<_Fn(_Tp, _A0, _A1, _A2), false, true>  // _Fn must be member pointer\n    : public __result_of_mp<typename remove_reference<_Fn>::type,\n                            _Tp,\n                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>\n{\n};\n\n// result_of\n\ntemplate <class _Fn>\nclass _LIBCPP_TEMPLATE_VIS result_of<_Fn()>\n    : public __result_of<_Fn(),\n                         is_class<typename remove_reference<_Fn>::type>::value ||\n                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,\n                         is_member_pointer<typename remove_reference<_Fn>::type>::value\n                        >\n{\n};\n\ntemplate <class _Fn, class _A0>\nclass _LIBCPP_TEMPLATE_VIS result_of<_Fn(_A0)>\n    : public __result_of<_Fn(_A0),\n                         is_class<typename remove_reference<_Fn>::type>::value ||\n                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,\n                         is_member_pointer<typename remove_reference<_Fn>::type>::value\n                        >\n{\n};\n\ntemplate <class _Fn, class _A0, class _A1>\nclass _LIBCPP_TEMPLATE_VIS result_of<_Fn(_A0, _A1)>\n    : public __result_of<_Fn(_A0, _A1),\n                         is_class<typename remove_reference<_Fn>::type>::value ||\n                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,\n                         is_member_pointer<typename remove_reference<_Fn>::type>::value\n                        >\n{\n};\n\ntemplate <class _Fn, class _A0, class _A1, class _A2>\nclass _LIBCPP_TEMPLATE_VIS result_of<_Fn(_A0, _A1, _A2)>\n    : public __result_of<_Fn(_A0, _A1, _A2),\n                         is_class<typename remove_reference<_Fn>::type>::value ||\n                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,\n                         is_member_pointer<typename remove_reference<_Fn>::type>::value\n                        >\n{\n};\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n// template <class T, class... Args> struct is_constructible;\n\nnamespace __is_construct\n{\nstruct __nat {};\n}\n\n#if !defined(_LIBCPP_CXX03_LANG) && (!__has_feature(is_constructible) || \\\n    defined(_LIBCPP_TESTING_FALLBACK_IS_CONSTRUCTIBLE))\n\ntemplate <class _Tp, class... _Args>\nstruct __libcpp_is_constructible;\n\ntemplate <class _To, class _From>\nstruct __is_invalid_base_to_derived_cast {\n  static_assert(is_reference<_To>::value, \"Wrong specialization\");\n  using _RawFrom = __uncvref_t<_From>;\n  using _RawTo = __uncvref_t<_To>;\n  static const bool value = __lazy_and<\n        __lazy_not<is_same<_RawFrom, _RawTo>>,\n        is_base_of<_RawFrom, _RawTo>,\n        __lazy_not<__libcpp_is_constructible<_RawTo, _From>>\n  >::value;\n};\n\ntemplate <class _To, class _From>\nstruct __is_invalid_lvalue_to_rvalue_cast : false_type {\n  static_assert(is_reference<_To>::value, \"Wrong specialization\");\n};\n\ntemplate <class _ToRef, class _FromRef>\nstruct __is_invalid_lvalue_to_rvalue_cast<_ToRef&&, _FromRef&> {\n  using _RawFrom = __uncvref_t<_FromRef>;\n  using _RawTo = __uncvref_t<_ToRef>;\n  static const bool value = __lazy_and<\n      __lazy_not<is_function<_RawTo>>,\n      __lazy_or<\n        is_same<_RawFrom, _RawTo>,\n        is_base_of<_RawTo, _RawFrom>>\n    >::value;\n};\n\nstruct __is_constructible_helper\n{\n    template <class _To>\n    static void __eat(_To);\n\n    // This overload is needed to work around a Clang bug that disallows\n    // static_cast<T&&>(e) for non-reference-compatible types.\n    // Example: static_cast<int&&>(declval<double>());\n    // NOTE: The static_cast implementation below is required to support\n    //  classes with explicit conversion operators.\n    template <class _To, class _From,\n              class = decltype(__eat<_To>(_VSTD::declval<_From>()))>\n    static true_type __test_cast(int);\n\n    template <class _To, class _From,\n              class = decltype(static_cast<_To>(_VSTD::declval<_From>()))>\n    static integral_constant<bool,\n        !__is_invalid_base_to_derived_cast<_To, _From>::value &&\n        !__is_invalid_lvalue_to_rvalue_cast<_To, _From>::value\n    > __test_cast(long);\n\n    template <class, class>\n    static false_type __test_cast(...);\n\n    template <class _Tp, class ..._Args,\n        class = decltype(_Tp(_VSTD::declval<_Args>()...))>\n    static true_type __test_nary(int);\n    template <class _Tp, class...>\n    static false_type __test_nary(...);\n\n    template <class _Tp, class _A0, class = decltype(::new _Tp(_VSTD::declval<_A0>()))>\n    static is_destructible<_Tp> __test_unary(int);\n    template <class, class>\n    static false_type __test_unary(...);\n};\n\ntemplate <class _Tp, bool = is_void<_Tp>::value>\nstruct __is_default_constructible\n    : decltype(__is_constructible_helper::__test_nary<_Tp>(0))\n{};\n\ntemplate <class _Tp>\nstruct __is_default_constructible<_Tp, true> : false_type {};\n\ntemplate <class _Tp>\nstruct __is_default_constructible<_Tp[], false> : false_type {};\n\ntemplate <class _Tp, size_t _Nx>\nstruct __is_default_constructible<_Tp[_Nx], false>\n    : __is_default_constructible<typename remove_all_extents<_Tp>::type>  {};\n\ntemplate <class _Tp, class... _Args>\nstruct __libcpp_is_constructible\n{\n  static_assert(sizeof...(_Args) > 1, \"Wrong specialization\");\n  typedef decltype(__is_constructible_helper::__test_nary<_Tp, _Args...>(0))\n      type;\n};\n\ntemplate <class _Tp>\nstruct __libcpp_is_constructible<_Tp> : __is_default_constructible<_Tp> {};\n\ntemplate <class _Tp, class _A0>\nstruct __libcpp_is_constructible<_Tp, _A0>\n    : public decltype(__is_constructible_helper::__test_unary<_Tp, _A0>(0))\n{};\n\ntemplate <class _Tp, class _A0>\nstruct __libcpp_is_constructible<_Tp&, _A0>\n    : public decltype(__is_constructible_helper::\n    __test_cast<_Tp&, _A0>(0))\n{};\n\ntemplate <class _Tp, class _A0>\nstruct __libcpp_is_constructible<_Tp&&, _A0>\n    : public decltype(__is_constructible_helper::\n    __test_cast<_Tp&&, _A0>(0))\n{};\n\n#endif\n\n#if __has_feature(is_constructible)\ntemplate <class _Tp, class ..._Args>\nstruct _LIBCPP_TEMPLATE_VIS is_constructible\n    : public integral_constant<bool, __is_constructible(_Tp, _Args...)>\n    {};\n#elif !defined(_LIBCPP_CXX03_LANG)\ntemplate <class _Tp, class... _Args>\nstruct _LIBCPP_TEMPLATE_VIS is_constructible\n    : public __libcpp_is_constructible<_Tp, _Args...>::type {};\n#else\n// template <class T> struct is_constructible0;\n\n//      main is_constructible0 test\n\ntemplate <class _Tp>\ndecltype((_Tp(), true_type()))\n__is_constructible0_test(_Tp&);\n\nfalse_type\n__is_constructible0_test(__any);\n\ntemplate <class _Tp, class _A0>\ndecltype((_Tp(_VSTD::declval<_A0>()), true_type()))\n__is_constructible1_test(_Tp&, _A0&);\n\ntemplate <class _A0>\nfalse_type\n__is_constructible1_test(__any, _A0&);\n\ntemplate <class _Tp, class _A0, class _A1>\ndecltype((_Tp(_VSTD::declval<_A0>(), _VSTD::declval<_A1>()), true_type()))\n__is_constructible2_test(_Tp&, _A0&, _A1&);\n\ntemplate <class _A0, class _A1>\nfalse_type\n__is_constructible2_test(__any, _A0&, _A1&);\n\ntemplate <bool, class _Tp>\nstruct __is_constructible0_imp // false, _Tp is not a scalar\n    : public common_type\n             <\n                 decltype(__is_constructible0_test(declval<_Tp&>()))\n             >::type\n    {};\n\ntemplate <bool, class _Tp, class _A0>\nstruct __is_constructible1_imp // false, _Tp is not a scalar\n    : public common_type\n             <\n                 decltype(__is_constructible1_test(declval<_Tp&>(), declval<_A0&>()))\n             >::type\n    {};\n\ntemplate <bool, class _Tp, class _A0, class _A1>\nstruct __is_constructible2_imp // false, _Tp is not a scalar\n    : public common_type\n             <\n                 decltype(__is_constructible2_test(declval<_Tp&>(), declval<_A0>(), declval<_A1>()))\n             >::type\n    {};\n\n//      handle scalars and reference types\n\n//      Scalars are default constructible, references are not\n\ntemplate <class _Tp>\nstruct __is_constructible0_imp<true, _Tp>\n    : public is_scalar<_Tp>\n    {};\n\ntemplate <class _Tp, class _A0>\nstruct __is_constructible1_imp<true, _Tp, _A0>\n    : public is_convertible<_A0, _Tp>\n    {};\n\ntemplate <class _Tp, class _A0, class _A1>\nstruct __is_constructible2_imp<true, _Tp, _A0, _A1>\n    : public false_type\n    {};\n\n//      Treat scalars and reference types separately\n\ntemplate <bool, class _Tp>\nstruct __is_constructible0_void_check\n    : public __is_constructible0_imp<is_scalar<_Tp>::value || is_reference<_Tp>::value,\n                                _Tp>\n    {};\n\ntemplate <bool, class _Tp, class _A0>\nstruct __is_constructible1_void_check\n    : public __is_constructible1_imp<is_scalar<_Tp>::value || is_reference<_Tp>::value,\n                                _Tp, _A0>\n    {};\n\ntemplate <bool, class _Tp, class _A0, class _A1>\nstruct __is_constructible2_void_check\n    : public __is_constructible2_imp<is_scalar<_Tp>::value || is_reference<_Tp>::value,\n                                _Tp, _A0, _A1>\n    {};\n\n//      If any of T or Args is void, is_constructible should be false\n\ntemplate <class _Tp>\nstruct __is_constructible0_void_check<true, _Tp>\n    : public false_type\n    {};\n\ntemplate <class _Tp, class _A0>\nstruct __is_constructible1_void_check<true, _Tp, _A0>\n    : public false_type\n    {};\n\ntemplate <class _Tp, class _A0, class _A1>\nstruct __is_constructible2_void_check<true, _Tp, _A0, _A1>\n    : public false_type\n    {};\n\n//      is_constructible entry point\n\ntemplate <class _Tp, class _A0 = __is_construct::__nat,\n                     class _A1 = __is_construct::__nat>\nstruct _LIBCPP_TEMPLATE_VIS is_constructible\n    : public __is_constructible2_void_check<is_void<_Tp>::value\n                                        || is_abstract<_Tp>::value\n                                        || is_function<_Tp>::value\n                                        || is_void<_A0>::value\n                                        || is_void<_A1>::value,\n                                           _Tp, _A0, _A1>\n    {};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_constructible<_Tp, __is_construct::__nat, __is_construct::__nat>\n    : public __is_constructible0_void_check<is_void<_Tp>::value\n                                        || is_abstract<_Tp>::value\n                                        || is_function<_Tp>::value,\n                                           _Tp>\n    {};\n\ntemplate <class _Tp, class _A0>\nstruct _LIBCPP_TEMPLATE_VIS is_constructible<_Tp, _A0, __is_construct::__nat>\n    : public __is_constructible1_void_check<is_void<_Tp>::value\n                                        || is_abstract<_Tp>::value\n                                        || is_function<_Tp>::value\n                                        || is_void<_A0>::value,\n                                           _Tp, _A0>\n    {};\n\n//      Array types are default constructible if their element type\n//      is default constructible\n\ntemplate <class _Ap, size_t _Np>\nstruct __is_constructible0_imp<false, _Ap[_Np]>\n    : public is_constructible<typename remove_all_extents<_Ap>::type>\n    {};\n\ntemplate <class _Ap, size_t _Np, class _A0>\nstruct __is_constructible1_imp<false, _Ap[_Np], _A0>\n    : public false_type\n    {};\n\ntemplate <class _Ap, size_t _Np, class _A0, class _A1>\nstruct __is_constructible2_imp<false, _Ap[_Np], _A0, _A1>\n    : public false_type\n    {};\n\n//      Incomplete array types are not constructible\n\ntemplate <class _Ap>\nstruct __is_constructible0_imp<false, _Ap[]>\n    : public false_type\n    {};\n\ntemplate <class _Ap, class _A0>\nstruct __is_constructible1_imp<false, _Ap[], _A0>\n    : public false_type\n    {};\n\ntemplate <class _Ap, class _A0, class _A1>\nstruct __is_constructible2_imp<false, _Ap[], _A0, _A1>\n    : public false_type\n    {};\n\n#endif // __has_feature(is_constructible)\n\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\ntemplate <class _Tp, class ..._Args> _LIBCPP_CONSTEXPR bool is_constructible_v\n    = is_constructible<_Tp, _Args...>::value;\n#endif\n\n// is_default_constructible\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_default_constructible\n    : public is_constructible<_Tp>\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_default_constructible_v\n    = is_default_constructible<_Tp>::value;\n#endif\n\n// is_copy_constructible\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_copy_constructible\n    : public is_constructible<_Tp, \n                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_copy_constructible_v\n    = is_copy_constructible<_Tp>::value;\n#endif\n\n// is_move_constructible\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_move_constructible\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    : public is_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>\n#else\n    : public is_copy_constructible<_Tp>\n#endif\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_move_constructible_v\n    = is_move_constructible<_Tp>::value;\n#endif\n\n// is_trivially_constructible\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n#if __has_feature(is_trivially_constructible) || _GNUC_VER >= 501\n\ntemplate <class _Tp, class... _Args>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible\n    : integral_constant<bool, __is_trivially_constructible(_Tp, _Args...)>\n{\n};\n\n#else  // !__has_feature(is_trivially_constructible)\n\ntemplate <class _Tp, class... _Args>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible\n    : false_type\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp>\n#if __has_feature(has_trivial_constructor) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_trivial_constructor(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\ntemplate <class _Tp>\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp&&>\n#else\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp>\n#endif\n    : integral_constant<bool, is_scalar<_Tp>::value>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, const _Tp&>\n    : integral_constant<bool, is_scalar<_Tp>::value>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp&>\n    : integral_constant<bool, is_scalar<_Tp>::value>\n{\n};\n\n#endif  // !__has_feature(is_trivially_constructible)\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp, class _A0 = __is_construct::__nat,\n                     class _A1 = __is_construct::__nat>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible\n    : false_type\n{\n};\n\n#if __has_feature(is_trivially_constructible) || _GNUC_VER >= 501\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, __is_construct::__nat,\n                                                       __is_construct::__nat>\n    : integral_constant<bool, __is_trivially_constructible(_Tp)>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp,\n                                                       __is_construct::__nat>\n    : integral_constant<bool, __is_trivially_constructible(_Tp, _Tp)>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, const _Tp&,\n                                                       __is_construct::__nat>\n    : integral_constant<bool, __is_trivially_constructible(_Tp, const _Tp&)>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp&,\n                                                       __is_construct::__nat>\n    : integral_constant<bool, __is_trivially_constructible(_Tp, _Tp&)>\n{\n};\n\n#else  // !__has_feature(is_trivially_constructible)\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, __is_construct::__nat,\n                                                       __is_construct::__nat>\n    : integral_constant<bool, is_scalar<_Tp>::value>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp,\n                                                       __is_construct::__nat>\n    : integral_constant<bool, is_scalar<_Tp>::value>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, const _Tp&,\n                                                       __is_construct::__nat>\n    : integral_constant<bool, is_scalar<_Tp>::value>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp&,\n                                                       __is_construct::__nat>\n    : integral_constant<bool, is_scalar<_Tp>::value>\n{\n};\n\n#endif  // !__has_feature(is_trivially_constructible)\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\ntemplate <class _Tp, class... _Args> _LIBCPP_CONSTEXPR bool is_trivially_constructible_v\n    = is_trivially_constructible<_Tp, _Args...>::value;\n#endif\n\n// is_trivially_default_constructible\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_default_constructible\n    : public is_trivially_constructible<_Tp>\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_trivially_default_constructible_v\n    = is_trivially_default_constructible<_Tp>::value;\n#endif\n\n// is_trivially_copy_constructible\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copy_constructible\n    : public is_trivially_constructible<_Tp, typename add_lvalue_reference<const _Tp>::type>\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_trivially_copy_constructible_v\n    = is_trivially_copy_constructible<_Tp>::value;\n#endif\n\n// is_trivially_move_constructible\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_move_constructible\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    : public is_trivially_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>\n#else\n    : public is_trivially_copy_constructible<_Tp>\n#endif\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_trivially_move_constructible_v\n    = is_trivially_move_constructible<_Tp>::value;\n#endif\n\n// is_trivially_assignable\n\n#if __has_feature(is_trivially_assignable) || _GNUC_VER >= 501\n\ntemplate <class _Tp, class _Arg>\nstruct is_trivially_assignable\n    : integral_constant<bool, __is_trivially_assignable(_Tp, _Arg)>\n{\n};\n\n#else  // !__has_feature(is_trivially_assignable)\n\ntemplate <class _Tp, class _Arg>\nstruct is_trivially_assignable\n    : public false_type {};\n\ntemplate <class _Tp>\nstruct is_trivially_assignable<_Tp&, _Tp>\n    : integral_constant<bool, is_scalar<_Tp>::value> {};\n\ntemplate <class _Tp>\nstruct is_trivially_assignable<_Tp&, _Tp&>\n    : integral_constant<bool, is_scalar<_Tp>::value> {};\n\ntemplate <class _Tp>\nstruct is_trivially_assignable<_Tp&, const _Tp&>\n    : integral_constant<bool, is_scalar<_Tp>::value> {};\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp>\nstruct is_trivially_assignable<_Tp&, _Tp&&>\n    : integral_constant<bool, is_scalar<_Tp>::value> {};\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#endif  // !__has_feature(is_trivially_assignable)\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp, class _Arg> _LIBCPP_CONSTEXPR bool is_trivially_assignable_v\n    = is_trivially_assignable<_Tp, _Arg>::value;\n#endif\n\n// is_trivially_copy_assignable\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copy_assignable\n    : public is_trivially_assignable<typename add_lvalue_reference<_Tp>::type,\n                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_trivially_copy_assignable_v\n    = is_trivially_copy_assignable<_Tp>::value;\n#endif\n\n// is_trivially_move_assignable\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_move_assignable\n    : public is_trivially_assignable<typename add_lvalue_reference<_Tp>::type,\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n                                     typename add_rvalue_reference<_Tp>::type>\n#else\n                                     typename add_lvalue_reference<_Tp>::type>\n#endif\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_trivially_move_assignable_v\n    = is_trivially_move_assignable<_Tp>::value;\n#endif\n\n// is_trivially_destructible\n\n#if __has_feature(has_trivial_destructor) || (_GNUC_VER >= 403)\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible\n    : public integral_constant<bool, is_destructible<_Tp>::value && __has_trivial_destructor(_Tp)> {};\n\n#else\n\ntemplate <class _Tp> struct __libcpp_trivial_destructor\n    : public integral_constant<bool, is_scalar<_Tp>::value ||\n                                     is_reference<_Tp>::value> {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible\n    : public __libcpp_trivial_destructor<typename remove_all_extents<_Tp>::type> {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible<_Tp[]>\n    : public false_type {};\n\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_trivially_destructible_v\n    = is_trivially_destructible<_Tp>::value;\n#endif\n\n// is_nothrow_constructible\n\n#if 0\ntemplate <class _Tp, class... _Args>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible\n    : public integral_constant<bool, __is_nothrow_constructible(_Tp(_Args...))>\n{\n};\n\n#else\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n#if __has_feature(cxx_noexcept) || (_GNUC_VER >= 407 && __cplusplus >= 201103L)\n\ntemplate <bool, bool, class _Tp, class... _Args> struct __libcpp_is_nothrow_constructible;\n\ntemplate <class _Tp, class... _Args>\nstruct __libcpp_is_nothrow_constructible</*is constructible*/true, /*is reference*/false, _Tp, _Args...>\n    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>\n{\n};\n\ntemplate <class _Tp>\nvoid __implicit_conversion_to(_Tp) noexcept { }\n\ntemplate <class _Tp, class _Arg>\nstruct __libcpp_is_nothrow_constructible</*is constructible*/true, /*is reference*/true, _Tp, _Arg>\n    : public integral_constant<bool, noexcept(__implicit_conversion_to<_Tp>(declval<_Arg>()))>\n{\n};\n\ntemplate <class _Tp, bool _IsReference, class... _Args>\nstruct __libcpp_is_nothrow_constructible</*is constructible*/false, _IsReference, _Tp, _Args...>\n    : public false_type\n{\n};\n\ntemplate <class _Tp, class... _Args>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible\n    : __libcpp_is_nothrow_constructible<is_constructible<_Tp, _Args...>::value, is_reference<_Tp>::value, _Tp, _Args...>\n{\n};\n\ntemplate <class _Tp, size_t _Ns>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp[_Ns]>\n    : __libcpp_is_nothrow_constructible<is_constructible<_Tp>::value, is_reference<_Tp>::value, _Tp>\n{\n};\n\n#else  // __has_feature(cxx_noexcept)\n\ntemplate <class _Tp, class... _Args>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible\n    : false_type\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp>\n#if __has_feature(has_nothrow_constructor) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_constructor(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\ntemplate <class _Tp>\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp, _Tp&&>\n#else\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp, _Tp>\n#endif\n#if __has_feature(has_nothrow_copy) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_copy(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp, const _Tp&>\n#if __has_feature(has_nothrow_copy) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_copy(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp, _Tp&>\n#if __has_feature(has_nothrow_copy) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_copy(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\n#endif  // __has_feature(cxx_noexcept)\n\n#else  // _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp, class _A0 = __is_construct::__nat,\n                     class _A1 = __is_construct::__nat>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible\n    : false_type\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp, __is_construct::__nat,\n                                                       __is_construct::__nat>\n#if __has_feature(has_nothrow_constructor) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_constructor(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp, _Tp,\n                                                       __is_construct::__nat>\n#if __has_feature(has_nothrow_copy) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_copy(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp, const _Tp&,\n                                                       __is_construct::__nat>\n#if __has_feature(has_nothrow_copy) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_copy(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp, _Tp&,\n                                                       __is_construct::__nat>\n#if __has_feature(has_nothrow_copy) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_copy(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value>\n#endif\n{\n};\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n#endif  // __has_feature(is_nothrow_constructible)\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\ntemplate <class _Tp, class ..._Args> _LIBCPP_CONSTEXPR bool is_nothrow_constructible_v\n    = is_nothrow_constructible<_Tp, _Args...>::value;\n#endif\n\n// is_nothrow_default_constructible\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_default_constructible\n    : public is_nothrow_constructible<_Tp>\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_nothrow_default_constructible_v\n    = is_nothrow_default_constructible<_Tp>::value;\n#endif\n\n// is_nothrow_copy_constructible\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_copy_constructible\n    : public is_nothrow_constructible<_Tp,\n                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_nothrow_copy_constructible_v\n    = is_nothrow_copy_constructible<_Tp>::value;\n#endif\n\n// is_nothrow_move_constructible\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_move_constructible\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    : public is_nothrow_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>\n#else\n    : public is_nothrow_copy_constructible<_Tp>\n#endif\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_nothrow_move_constructible_v\n    = is_nothrow_move_constructible<_Tp>::value;\n#endif\n\n// is_nothrow_assignable\n\n#if __has_feature(cxx_noexcept) || (_GNUC_VER >= 407 && __cplusplus >= 201103L)\n\ntemplate <bool, class _Tp, class _Arg> struct __libcpp_is_nothrow_assignable;\n\ntemplate <class _Tp, class _Arg>\nstruct __libcpp_is_nothrow_assignable<false, _Tp, _Arg>\n    : public false_type\n{\n};\n\ntemplate <class _Tp, class _Arg>\nstruct __libcpp_is_nothrow_assignable<true, _Tp, _Arg>\n    : public integral_constant<bool, noexcept(_VSTD::declval<_Tp>() = _VSTD::declval<_Arg>()) >\n{\n};\n\ntemplate <class _Tp, class _Arg>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable\n    : public __libcpp_is_nothrow_assignable<is_assignable<_Tp, _Arg>::value, _Tp, _Arg>\n{\n};\n\n#else  // __has_feature(cxx_noexcept)\n\ntemplate <class _Tp, class _Arg>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable\n    : public false_type {};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable<_Tp&, _Tp>\n#if __has_feature(has_nothrow_assign) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_assign(_Tp)> {};\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value> {};\n#endif\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable<_Tp&, _Tp&>\n#if __has_feature(has_nothrow_assign) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_assign(_Tp)> {};\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value> {};\n#endif\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable<_Tp&, const _Tp&>\n#if __has_feature(has_nothrow_assign) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_assign(_Tp)> {};\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value> {};\n#endif\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp>\nstruct is_nothrow_assignable<_Tp&, _Tp&&>\n#if __has_feature(has_nothrow_assign) || (_GNUC_VER >= 403)\n    : integral_constant<bool, __has_nothrow_assign(_Tp)> {};\n#else\n    : integral_constant<bool, is_scalar<_Tp>::value> {};\n#endif\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#endif  // __has_feature(cxx_noexcept)\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp, class _Arg> _LIBCPP_CONSTEXPR bool is_nothrow_assignable_v\n    = is_nothrow_assignable<_Tp, _Arg>::value;\n#endif\n\n// is_nothrow_copy_assignable\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_copy_assignable\n    : public is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type,\n                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_nothrow_copy_assignable_v\n    = is_nothrow_copy_assignable<_Tp>::value;\n#endif\n\n// is_nothrow_move_assignable\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_move_assignable\n    : public is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type,\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n                                     typename add_rvalue_reference<_Tp>::type>\n#else\n                                     typename add_lvalue_reference<_Tp>::type>\n#endif\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_nothrow_move_assignable_v\n    = is_nothrow_move_assignable<_Tp>::value;\n#endif\n\n// is_nothrow_destructible\n\n#if __has_feature(cxx_noexcept) || (_GNUC_VER >= 407 && __cplusplus >= 201103L)\n\ntemplate <bool, class _Tp> struct __libcpp_is_nothrow_destructible;\n\ntemplate <class _Tp>\nstruct __libcpp_is_nothrow_destructible<false, _Tp>\n    : public false_type\n{\n};\n\ntemplate <class _Tp>\nstruct __libcpp_is_nothrow_destructible<true, _Tp>\n    : public integral_constant<bool, noexcept(_VSTD::declval<_Tp>().~_Tp()) >\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible\n    : public __libcpp_is_nothrow_destructible<is_destructible<_Tp>::value, _Tp>\n{\n};\n\ntemplate <class _Tp, size_t _Ns>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp[_Ns]>\n    : public is_nothrow_destructible<_Tp>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp&>\n    : public true_type\n{\n};\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp&&>\n    : public true_type\n{\n};\n\n#endif\n\n#else\n\ntemplate <class _Tp> struct __libcpp_nothrow_destructor\n    : public integral_constant<bool, is_scalar<_Tp>::value ||\n                                     is_reference<_Tp>::value> {};\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible\n    : public __libcpp_nothrow_destructor<typename remove_all_extents<_Tp>::type> {};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp[]>\n    : public false_type {};\n\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_nothrow_destructible_v\n    = is_nothrow_destructible<_Tp>::value;\n#endif\n\n// is_pod\n\n#if __has_feature(is_pod) || (_GNUC_VER >= 403)\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pod\n    : public integral_constant<bool, __is_pod(_Tp)> {};\n\n#else\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pod\n    : public integral_constant<bool, is_trivially_default_constructible<_Tp>::value   &&\n                                     is_trivially_copy_constructible<_Tp>::value      &&\n                                     is_trivially_copy_assignable<_Tp>::value    &&\n                                     is_trivially_destructible<_Tp>::value> {};\n\n#endif\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_pod_v\n    = is_pod<_Tp>::value;\n#endif\n\n// is_literal_type;\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_literal_type\n#ifdef _LIBCPP_IS_LITERAL\n    : public integral_constant<bool, _LIBCPP_IS_LITERAL(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<typename remove_all_extents<_Tp>::type>::value ||\n                              is_reference<typename remove_all_extents<_Tp>::type>::value>\n#endif\n    {};\n    \n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_literal_type_v\n    = is_literal_type<_Tp>::value;\n#endif\n\n// is_standard_layout;\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_standard_layout\n#if __has_feature(is_standard_layout) || (_GNUC_VER >= 407)\n    : public integral_constant<bool, __is_standard_layout(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<typename remove_all_extents<_Tp>::type>::value>\n#endif\n    {};\n    \n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_standard_layout_v\n    = is_standard_layout<_Tp>::value;\n#endif\n\n// is_trivially_copyable;\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copyable\n#if __has_feature(is_trivially_copyable)\n    : public integral_constant<bool, __is_trivially_copyable(_Tp)>\n#elif _GNUC_VER >= 501\n    : public integral_constant<bool, !is_volatile<_Tp>::value && __is_trivially_copyable(_Tp)>\n#else\n    : integral_constant<bool, is_scalar<typename remove_all_extents<_Tp>::type>::value>\n#endif\n    {};\n    \n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_trivially_copyable_v\n    = is_trivially_copyable<_Tp>::value;\n#endif\n\n// is_trivial;\n\ntemplate <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivial\n#if __has_feature(is_trivial) || _GNUC_VER >= 407\n    : public integral_constant<bool, __is_trivial(_Tp)>\n#else\n    : integral_constant<bool, is_trivially_copyable<_Tp>::value &&\n                                 is_trivially_default_constructible<_Tp>::value>\n#endif\n    {};\n\n#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)\ntemplate <class _Tp> _LIBCPP_CONSTEXPR bool is_trivial_v\n    = is_trivial<_Tp>::value;\n#endif\n\ntemplate <class _Tp> struct __is_reference_wrapper_impl : public false_type {};\ntemplate <class _Tp> struct __is_reference_wrapper_impl<reference_wrapper<_Tp> > : public true_type {};\ntemplate <class _Tp> struct __is_reference_wrapper\n    : public __is_reference_wrapper_impl<typename remove_cv<_Tp>::type> {};\n\n#ifndef _LIBCPP_CXX03_LANG\n\n// Check for complete types\n\ntemplate <class ..._Tp> struct __check_complete;\n\ntemplate <>\nstruct __check_complete<>\n{\n};\n\ntemplate <class _Hp, class _T0, class ..._Tp>\nstruct __check_complete<_Hp, _T0, _Tp...>\n    : private __check_complete<_Hp>,\n      private __check_complete<_T0, _Tp...>\n{\n};\n\ntemplate <class _Hp>\nstruct __check_complete<_Hp, _Hp>\n    : private __check_complete<_Hp>\n{\n};\n\ntemplate <class _Tp>\nstruct __check_complete<_Tp>\n{\n    static_assert(sizeof(_Tp) > 0, \"Type must be complete.\");\n};\n\ntemplate <class _Tp>\nstruct __check_complete<_Tp&>\n    : private __check_complete<_Tp>\n{\n};\n\ntemplate <class _Tp>\nstruct __check_complete<_Tp&&>\n    : private __check_complete<_Tp>\n{\n};\n\ntemplate <class _Rp, class ..._Param>\nstruct __check_complete<_Rp (*)(_Param...)>\n    : private __check_complete<_Rp>\n{\n};\n\ntemplate <class ..._Param>\nstruct __check_complete<void (*)(_Param...)>\n{\n};\n\ntemplate <class _Rp, class ..._Param>\nstruct __check_complete<_Rp (_Param...)>\n    : private __check_complete<_Rp>\n{\n};\n\ntemplate <class ..._Param>\nstruct __check_complete<void (_Param...)>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...)>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) const>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) volatile>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) const volatile>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) &>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) const&>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) volatile&>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) const volatile&>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) &&>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) const&&>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) volatile&&>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class, class ..._Param>\nstruct __check_complete<_Rp (_Class::*)(_Param...) const volatile&&>\n    : private __check_complete<_Class>\n{\n};\n\ntemplate <class _Rp, class _Class>\nstruct __check_complete<_Rp _Class::*>\n    : private __check_complete<_Class>\n{\n};\n\n\ntemplate <class _Fp, class _A0,\n         class _DecayFp = typename decay<_Fp>::type,\n         class _DecayA0 = typename decay<_A0>::type,\n         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>\nusing __enable_if_bullet1 = typename enable_if\n    <\n        is_member_function_pointer<_DecayFp>::value\n        && is_base_of<_ClassT, _DecayA0>::value\n    >::type;\n\ntemplate <class _Fp, class _A0,\n         class _DecayFp = typename decay<_Fp>::type,\n         class _DecayA0 = typename decay<_A0>::type>\nusing __enable_if_bullet2 = typename enable_if\n    <\n        is_member_function_pointer<_DecayFp>::value\n        && __is_reference_wrapper<_DecayA0>::value\n    >::type;\n\ntemplate <class _Fp, class _A0,\n         class _DecayFp = typename decay<_Fp>::type,\n         class _DecayA0 = typename decay<_A0>::type,\n         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>\nusing __enable_if_bullet3 = typename enable_if\n    <\n        is_member_function_pointer<_DecayFp>::value\n        && !is_base_of<_ClassT, _DecayA0>::value\n        && !__is_reference_wrapper<_DecayA0>::value\n    >::type;\n\ntemplate <class _Fp, class _A0,\n         class _DecayFp = typename decay<_Fp>::type,\n         class _DecayA0 = typename decay<_A0>::type,\n         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>\nusing __enable_if_bullet4 = typename enable_if\n    <\n        is_member_object_pointer<_DecayFp>::value\n        && is_base_of<_ClassT, _DecayA0>::value\n    >::type;\n\ntemplate <class _Fp, class _A0,\n         class _DecayFp = typename decay<_Fp>::type,\n         class _DecayA0 = typename decay<_A0>::type>\nusing __enable_if_bullet5 = typename enable_if\n    <\n        is_member_object_pointer<_DecayFp>::value\n        && __is_reference_wrapper<_DecayA0>::value\n    >::type;\n\ntemplate <class _Fp, class _A0,\n         class _DecayFp = typename decay<_Fp>::type,\n         class _DecayA0 = typename decay<_A0>::type,\n         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>\nusing __enable_if_bullet6 = typename enable_if\n    <\n        is_member_object_pointer<_DecayFp>::value\n        && !is_base_of<_ClassT, _DecayA0>::value\n        && !__is_reference_wrapper<_DecayA0>::value\n    >::type;\n\n// __invoke forward declarations\n\n// fall back - none of the bullets\n\n#define _LIBCPP_INVOKE_RETURN(...) \\\n    noexcept(noexcept(__VA_ARGS__)) -> decltype(__VA_ARGS__) \\\n    { return __VA_ARGS__; }\n\ntemplate <class ..._Args>\nauto __invoke(__any, _Args&& ...__args) -> __nat;\n\ntemplate <class ..._Args>\nauto __invoke_constexpr(__any, _Args&& ...__args) -> __nat;\n\n// bullets 1, 2 and 3\n\ntemplate <class _Fp, class _A0, class ..._Args,\n          class = __enable_if_bullet1<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\nauto\n__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)\n_LIBCPP_INVOKE_RETURN((_VSTD::forward<_A0>(__a0).*__f)(_VSTD::forward<_Args>(__args)...))\n\ntemplate <class _Fp, class _A0, class ..._Args,\n          class = __enable_if_bullet1<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\n_LIBCPP_CONSTEXPR auto\n__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)\n_LIBCPP_INVOKE_RETURN((_VSTD::forward<_A0>(__a0).*__f)(_VSTD::forward<_Args>(__args)...))\n\ntemplate <class _Fp, class _A0, class ..._Args,\n          class = __enable_if_bullet2<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\nauto\n__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)\n_LIBCPP_INVOKE_RETURN((__a0.get().*__f)(_VSTD::forward<_Args>(__args)...))\n\ntemplate <class _Fp, class _A0, class ..._Args,\n          class = __enable_if_bullet2<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\n_LIBCPP_CONSTEXPR auto\n__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)\n_LIBCPP_INVOKE_RETURN((__a0.get().*__f)(_VSTD::forward<_Args>(__args)...))\n\ntemplate <class _Fp, class _A0, class ..._Args,\n          class = __enable_if_bullet3<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\nauto\n__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)\n_LIBCPP_INVOKE_RETURN(((*_VSTD::forward<_A0>(__a0)).*__f)(_VSTD::forward<_Args>(__args)...))\n\ntemplate <class _Fp, class _A0, class ..._Args,\n          class = __enable_if_bullet3<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\n_LIBCPP_CONSTEXPR auto\n__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)\n_LIBCPP_INVOKE_RETURN(((*_VSTD::forward<_A0>(__a0)).*__f)(_VSTD::forward<_Args>(__args)...))\n\n// bullets 4, 5 and 6\n\ntemplate <class _Fp, class _A0,\n          class = __enable_if_bullet4<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\nauto\n__invoke(_Fp&& __f, _A0&& __a0)\n_LIBCPP_INVOKE_RETURN(_VSTD::forward<_A0>(__a0).*__f)\n\ntemplate <class _Fp, class _A0,\n          class = __enable_if_bullet4<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\n_LIBCPP_CONSTEXPR auto\n__invoke_constexpr(_Fp&& __f, _A0&& __a0)\n_LIBCPP_INVOKE_RETURN(_VSTD::forward<_A0>(__a0).*__f)\n\ntemplate <class _Fp, class _A0,\n          class = __enable_if_bullet5<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\nauto\n__invoke(_Fp&& __f, _A0&& __a0)\n_LIBCPP_INVOKE_RETURN(__a0.get().*__f)\n\ntemplate <class _Fp, class _A0,\n          class = __enable_if_bullet5<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\n_LIBCPP_CONSTEXPR auto\n__invoke_constexpr(_Fp&& __f, _A0&& __a0)\n_LIBCPP_INVOKE_RETURN(__a0.get().*__f)\n\ntemplate <class _Fp, class _A0,\n          class = __enable_if_bullet6<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\nauto\n__invoke(_Fp&& __f, _A0&& __a0)\n_LIBCPP_INVOKE_RETURN((*_VSTD::forward<_A0>(__a0)).*__f)\n\ntemplate <class _Fp, class _A0,\n          class = __enable_if_bullet6<_Fp, _A0>>\ninline _LIBCPP_INLINE_VISIBILITY\n_LIBCPP_CONSTEXPR auto\n__invoke_constexpr(_Fp&& __f, _A0&& __a0)\n_LIBCPP_INVOKE_RETURN((*_VSTD::forward<_A0>(__a0)).*__f)\n\n// bullet 7\n\ntemplate <class _Fp, class ..._Args>\ninline _LIBCPP_INLINE_VISIBILITY\nauto\n__invoke(_Fp&& __f, _Args&& ...__args)\n_LIBCPP_INVOKE_RETURN(_VSTD::forward<_Fp>(__f)(_VSTD::forward<_Args>(__args)...))\n\ntemplate <class _Fp, class ..._Args>\ninline _LIBCPP_INLINE_VISIBILITY\n_LIBCPP_CONSTEXPR auto\n__invoke_constexpr(_Fp&& __f, _Args&& ...__args)\n_LIBCPP_INVOKE_RETURN(_VSTD::forward<_Fp>(__f)(_VSTD::forward<_Args>(__args)...))\n\n#undef _LIBCPP_INVOKE_RETURN\n\n// __invokable\n\ntemplate <class _Ret, class _Fp, class ..._Args>\nstruct __invokable_r\n    : private __check_complete<_Fp>\n{\n    using _Result = decltype(\n        _VSTD::__invoke(_VSTD::declval<_Fp>(), _VSTD::declval<_Args>()...));\n\n    static const bool value =\n        conditional<\n            !is_same<_Result, __nat>::value,\n            typename conditional<\n                is_void<_Ret>::value,\n                true_type,\n                is_convertible<_Result, _Ret>\n            >::type,\n            false_type\n        >::type::value;\n};\n\ntemplate <class _Fp, class ..._Args>\nusing __invokable = __invokable_r<void, _Fp, _Args...>;\n\ntemplate <bool _IsInvokable, bool _IsCVVoid, class _Ret, class _Fp, class ..._Args>\nstruct __nothrow_invokable_r_imp {\n  static const bool value = false;\n};\n\ntemplate <class _Ret, class _Fp, class ..._Args>\nstruct __nothrow_invokable_r_imp<true, false, _Ret, _Fp, _Args...>\n{\n    typedef __nothrow_invokable_r_imp _ThisT;\n\n    template <class _Tp>\n    static void __test_noexcept(_Tp) noexcept;\n\n    static const bool value = noexcept(_ThisT::__test_noexcept<_Ret>(\n        _VSTD::__invoke(_VSTD::declval<_Fp>(), _VSTD::declval<_Args>()...)));\n};\n\ntemplate <class _Ret, class _Fp, class ..._Args>\nstruct __nothrow_invokable_r_imp<true, true, _Ret, _Fp, _Args...>\n{\n    static const bool value = noexcept(\n        _VSTD::__invoke(_VSTD::declval<_Fp>(), _VSTD::declval<_Args>()...));\n};\n\ntemplate <class _Ret, class _Fp, class ..._Args>\nusing __nothrow_invokable_r =\n    __nothrow_invokable_r_imp<\n            __invokable_r<_Ret, _Fp, _Args...>::value,\n            is_void<_Ret>::value,\n            _Ret, _Fp, _Args...\n    >;\n\ntemplate <class _Fp, class ..._Args>\nstruct __invoke_of\n    : public enable_if<\n        __invokable<_Fp, _Args...>::value,\n        typename __invokable_r<void, _Fp, _Args...>::_Result>\n{\n};\n\n// result_of\n\ntemplate <class _Fp, class ..._Args>\nclass _LIBCPP_TEMPLATE_VIS result_of<_Fp(_Args...)>\n    : public __invoke_of<_Fp, _Args...>\n{\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using result_of_t = typename result_of<_Tp>::type;\n#endif\n\n#if _LIBCPP_STD_VER > 14\n\n// is_callable\n\ntemplate <class _Fn, class _Ret = void>\nstruct _LIBCPP_TEMPLATE_VIS is_callable;\n\ntemplate <class _Fn, class ..._Args, class _Ret>\nstruct _LIBCPP_TEMPLATE_VIS is_callable<_Fn(_Args...), _Ret>\n    : integral_constant<bool, __invokable_r<_Ret, _Fn, _Args...>::value> {};\n\ntemplate <class _Fn, class _Ret = void>\nconstexpr bool is_callable_v = is_callable<_Fn, _Ret>::value;\n\n// is_nothrow_callable\n\ntemplate <class _Fn, class _Ret = void>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_callable;\n\ntemplate <class _Fn, class ..._Args, class _Ret>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_callable<_Fn(_Args...), _Ret>\n    : integral_constant<bool, __nothrow_invokable_r<_Ret, _Fn, _Args...>::value>\n{};\n\ntemplate <class _Fn, class _Ret = void>\nconstexpr bool is_nothrow_callable_v = is_nothrow_callable<_Fn, _Ret>::value;\n\n#endif // _LIBCPP_STD_VER > 14\n\n#endif  // !defined(_LIBCPP_CXX03_LANG)\n\ntemplate <class _Tp> struct __is_swappable;\ntemplate <class _Tp> struct __is_nothrow_swappable;\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n#ifndef _LIBCPP_CXX03_LANG\ntypename enable_if\n<\n    is_move_constructible<_Tp>::value &&\n    is_move_assignable<_Tp>::value\n>::type\n#else\nvoid\n#endif\nswap(_Tp& __x, _Tp& __y) _NOEXCEPT_(is_nothrow_move_constructible<_Tp>::value &&\n                                    is_nothrow_move_assignable<_Tp>::value)\n{\n    _Tp __t(_VSTD::move(__x));\n    __x = _VSTD::move(__y);\n    __y = _VSTD::move(__t);\n}\n\ntemplate<class _Tp, size_t _Np>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if<\n    __is_swappable<_Tp>::value\n>::type\nswap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value);\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\niter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n    //                                  _NOEXCEPT_(_NOEXCEPT_(swap(*__a, *__b)))\n               _NOEXCEPT_(_NOEXCEPT_(swap(*_VSTD::declval<_ForwardIterator1>(),\n                                          *_VSTD::declval<_ForwardIterator2>())))\n{\n    swap(*__a, *__b);\n}\n\n// __swappable\n\nnamespace __detail\n{\n// ALL generic swap overloads MUST already have a declaration available at this point.\n\ntemplate <class _Tp, class _Up = _Tp,\n          bool _NotVoid = !is_void<_Tp>::value && !is_void<_Up>::value>\nstruct __swappable_with\n{\n    template <class _LHS, class _RHS>\n    static decltype(swap(_VSTD::declval<_LHS>(), _VSTD::declval<_RHS>()))\n    __test_swap(int);\n    template <class, class>\n    static __nat __test_swap(long);\n\n    // Extra parens are needed for the C++03 definition of decltype.\n    typedef decltype((__test_swap<_Tp, _Up>(0))) __swap1;\n    typedef decltype((__test_swap<_Up, _Tp>(0))) __swap2;\n\n    static const bool value = !is_same<__swap1, __nat>::value\n                           && !is_same<__swap2, __nat>::value;\n};\n\ntemplate <class _Tp, class _Up>\nstruct __swappable_with<_Tp, _Up,  false> : false_type {};\n\ntemplate <class _Tp, class _Up = _Tp, bool _Swappable = __swappable_with<_Tp, _Up>::value>\nstruct __nothrow_swappable_with {\n  static const bool value =\n#ifndef _LIBCPP_HAS_NO_NOEXCEPT\n      noexcept(swap(_VSTD::declval<_Tp>(), _VSTD::declval<_Up>()))\n  &&  noexcept(swap(_VSTD::declval<_Up>(), _VSTD::declval<_Tp>()));\n#else\n      false;\n#endif\n};\n\ntemplate <class _Tp, class _Up>\nstruct __nothrow_swappable_with<_Tp, _Up, false> : false_type {};\n\n}  // __detail\n\ntemplate <class _Tp>\nstruct __is_swappable\n    : public integral_constant<bool, __detail::__swappable_with<_Tp&>::value>\n{\n};\n\ntemplate <class _Tp>\nstruct __is_nothrow_swappable\n    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp&>::value>\n{\n};\n\n#if _LIBCPP_STD_VER > 14\n\ntemplate <class _Tp, class _Up>\nstruct _LIBCPP_TEMPLATE_VIS is_swappable_with\n    : public integral_constant<bool, __detail::__swappable_with<_Tp, _Up>::value>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_swappable\n    : public conditional<\n        __is_referenceable<_Tp>::value,\n        is_swappable_with<\n            typename add_lvalue_reference<_Tp>::type,\n            typename add_lvalue_reference<_Tp>::type>,\n        false_type\n    >::type\n{\n};\n\ntemplate <class _Tp, class _Up>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_swappable_with\n    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp, _Up>::value>\n{\n};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS is_nothrow_swappable\n    : public conditional<\n        __is_referenceable<_Tp>::value,\n        is_nothrow_swappable_with<\n            typename add_lvalue_reference<_Tp>::type,\n            typename add_lvalue_reference<_Tp>::type>,\n        false_type\n    >::type\n{\n};\n\ntemplate <class _Tp, class _Up>\nconstexpr bool is_swappable_with_v = is_swappable_with<_Tp, _Up>::value;\n\ntemplate <class _Tp>\nconstexpr bool is_swappable_v = is_swappable<_Tp>::value;\n\ntemplate <class _Tp, class _Up>\nconstexpr bool is_nothrow_swappable_with_v = is_nothrow_swappable_with<_Tp, _Up>::value;\n\ntemplate <class _Tp>\nconstexpr bool is_nothrow_swappable_v = is_nothrow_swappable<_Tp>::value;\n\n#endif // _LIBCPP_STD_VER > 14\n\n#ifdef _LIBCPP_UNDERLYING_TYPE\n\ntemplate <class _Tp>\nstruct underlying_type\n{\n    typedef _LIBCPP_UNDERLYING_TYPE(_Tp) type;\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp> using underlying_type_t = typename underlying_type<_Tp>::type;\n#endif\n\n#else  // _LIBCPP_UNDERLYING_TYPE\n\ntemplate <class _Tp, bool _Support = false>\nstruct underlying_type\n{\n    static_assert(_Support, \"The underyling_type trait requires compiler \"\n                            \"support. Either no such support exists or \"\n                            \"libc++ does not know how to use it.\");\n};\n\n#endif // _LIBCPP_UNDERLYING_TYPE\n\n\ntemplate <class _Tp, bool = is_enum<_Tp>::value>\nstruct __sfinae_underlying_type\n{\n    typedef typename underlying_type<_Tp>::type type;\n    typedef decltype(((type)1) + 0) __promoted_type;\n};\n\ntemplate <class _Tp>\nstruct __sfinae_underlying_type<_Tp, false> {};\n\ninline _LIBCPP_INLINE_VISIBILITY\nint __convert_to_integral(int __val) { return __val; }\n\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned __convert_to_integral(unsigned __val) { return __val; }\n\ninline _LIBCPP_INLINE_VISIBILITY\nlong __convert_to_integral(long __val) { return __val; }\n\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned long __convert_to_integral(unsigned long __val) { return __val; }\n\ninline _LIBCPP_INLINE_VISIBILITY\nlong long __convert_to_integral(long long __val) { return __val; }\n\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned long long __convert_to_integral(unsigned long long __val) {return __val; }\n\n#ifndef _LIBCPP_HAS_NO_INT128\ninline _LIBCPP_INLINE_VISIBILITY\n__int128_t __convert_to_integral(__int128_t __val) { return __val; }\n\ninline _LIBCPP_INLINE_VISIBILITY\n__uint128_t __convert_to_integral(__uint128_t __val) { return __val; }\n#endif\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename __sfinae_underlying_type<_Tp>::__promoted_type\n__convert_to_integral(_Tp __val) { return __val; }\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp>\nstruct __has_operator_addressof_member_imp\n{\n    template <class _Up>\n        static auto __test(int)\n            -> typename __select_2nd<decltype(_VSTD::declval<_Up>().operator&()), true_type>::type;\n    template <class>\n        static auto __test(long) -> false_type;\n\n    static const bool value = decltype(__test<_Tp>(0))::value;\n};\n\ntemplate <class _Tp>\nstruct __has_operator_addressof_free_imp\n{\n    template <class _Up>\n        static auto __test(int)\n            -> typename __select_2nd<decltype(operator&(_VSTD::declval<_Up>())), true_type>::type;\n    template <class>\n        static auto __test(long) -> false_type;\n\n    static const bool value = decltype(__test<_Tp>(0))::value;\n};\n\ntemplate <class _Tp>\nstruct __has_operator_addressof\n    : public integral_constant<bool, __has_operator_addressof_member_imp<_Tp>::value\n                                  || __has_operator_addressof_free_imp<_Tp>::value>\n{};\n\n#endif  // _LIBCPP_CXX03_LANG\n\n#if _LIBCPP_STD_VER > 14\n\n#define __cpp_lib_void_t 201411\ntemplate <class...> using void_t = void;\n\n# ifndef _LIBCPP_HAS_NO_VARIADICS\ntemplate <class... _Args>\nstruct conjunction : __and_<_Args...> {};\ntemplate<class... _Args> constexpr bool conjunction_v = conjunction<_Args...>::value;\n\ntemplate <class... _Args>\nstruct disjunction : __or_<_Args...> {};\ntemplate<class... _Args> constexpr bool disjunction_v = disjunction<_Args...>::value;\n\ntemplate <class _Tp>\nstruct negation : __not_<_Tp> {};\ntemplate<class _Tp> constexpr bool negation_v = negation<_Tp>::value;\n# endif // _LIBCPP_HAS_NO_VARIADICS\n#endif  // _LIBCPP_STD_VER > 14\n\n// These traits are used in __tree and __hash_table\n#ifndef _LIBCPP_CXX03_LANG\nstruct __extract_key_fail_tag {};\nstruct __extract_key_self_tag {};\nstruct __extract_key_first_tag {};\n\ntemplate <class _ValTy, class _Key,\n          class _RawValTy = typename __unconstref<_ValTy>::type>\nstruct __can_extract_key\n    : conditional<is_same<_RawValTy, _Key>::value, __extract_key_self_tag,\n                  __extract_key_fail_tag>::type {};\n\ntemplate <class _Pair, class _Key, class _First, class _Second>\nstruct __can_extract_key<_Pair, _Key, pair<_First, _Second>>\n    : conditional<is_same<typename remove_const<_First>::type, _Key>::value,\n                  __extract_key_first_tag, __extract_key_fail_tag>::type {};\n\n// __can_extract_map_key uses true_type/false_type instead of the tags.\n// It returns true if _Key != _ContainerValueTy (the container is a map not a set)\n// and _ValTy == _Key.\ntemplate <class _ValTy, class _Key, class _ContainerValueTy,\n          class _RawValTy = typename __unconstref<_ValTy>::type>\nstruct __can_extract_map_key\n    : integral_constant<bool, is_same<_RawValTy, _Key>::value> {};\n\n// This specialization returns __extract_key_fail_tag for non-map containers\n// because _Key == _ContainerValueTy\ntemplate <class _ValTy, class _Key, class _RawValTy>\nstruct __can_extract_map_key<_ValTy, _Key, _Key, _RawValTy>\n    : false_type {};\n\n#endif\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_TYPE_TRAITS\n","#ifndef __MAP_ELITES_GP_H__\n#define __MAP_ELITES_GP_H__\n\n#include <set>\n#include <sys/stat.h>\n\n#include \"Evolve/World.h\"\n#include \"hardware/AvidaGP.h\"\n#include \"config/ArgManager.h\"\n#include \"base/vector.h\"\n#include \"tools/Random.h\"\n#include \"tools/stats.h\"\n#include \"Evolve/World_select.h\"\n\n#include \"MapElitesGP_Config.h\"\n#include \"TestcaseSet.h\"\n\nclass MapElitesScopeGPWorld : public emp::World<emp::AvidaGP> {\n\npublic:\n\n\n    enum class STRUCTURE { MIXED=0, MAPE=1 };\n    enum class PROBLEM_TYPE { CHG_ENV=0, TESTCASES=1, LOGIC=2 };\n    enum class SELECTION_METHOD { TOURNAMENT=0, LEXICASE=1, RANDOM=2 };\n\n    size_t EVAL_TIME;\n    size_t MAX_SIZE;\n    size_t WORLD_STRUCTURE;\n    long unsigned int SCOPE_RES;\n    long unsigned int ENTROPY_RES;\n    double INST_MUT_RATE;\n    double ARG_MUT_RATE;\n    double INS_MUT_RATE;\n    double DEL_MUT_RATE;\n    size_t TOURNAMENT_SIZE;\n    size_t POP_SIZE;\n    size_t GENERATIONS;\n    size_t N_TEST_CASES;    \n    size_t SELECTION;\n    size_t PROBLEM_TYPE;\n    std::string TESTCASES_FPATH;\n\n    emp::DataNode<double, emp::data::Range> evolutionary_distinctiveness;\n\n    TestcaseSet<int, double> testcases;\n\n    emp::vector<std::function<double(emp::AvidaGP&)> > fit_set;\n\n    std::function<double(emp::AvidaGP&)> goal_function = [this](emp::AvidaGP & org){\n        double score = 0;\n        emp::Random rand = GetRandom();\n        // for (int testcase : testcases.GetSubset(N_TEST_CASES, &rand)) {\n        emp_assert(N_TEST_CASES <= testcases.GetTestcases().size(), N_TEST_CASES, testcases.GetTestcases().size());\n        for (size_t testcase = 0; testcase < N_TEST_CASES; ++testcase) {\n            org.ResetHardware();\n            for (size_t i = 0; i < testcases[testcase].first.size(); i++) {\n                org.SetInput((int)i, testcases[testcase].first[i]);\n            }\n            org.Process(EVAL_TIME);\n            double divisor = testcases[testcase].second;\n            if (divisor == 0) {\n                divisor = 1;\n            }\n            const std::unordered_map<int, double> & outputs = org.GetOutputs();\n            int min_output = 0;\n            double result;\n            for (auto out : outputs) {\n                if (out.first < min_output) {\n                    min_output = out.first;\n                }\n            }\n\n            if (outputs.size() != 0) {\n                result = 1 / (std::abs(org.GetOutput(min_output) - testcases[testcase].second)/std::abs(divisor));\n            } else {\n                result = 0;\n            }\n\n            // emp_assert(std::abs(result) != INFINITY);\n            if (result > 1000) {\n                result = 1000;\n            }\n            score += result;\n        }\n        return score;\n    };\n\n    std::function<double(size_t id)> goal_function_ptr = [this](size_t id){\n        return CalcFitnessID(id);\n    };\n\n    MapElitesScopeGPWorld() {;}\n    MapElitesScopeGPWorld(emp::Random & rnd) : emp::World<emp::AvidaGP>(rnd) {;}\n\n    std::function<int(emp::AvidaGP &)> scope_count_fun = [this](emp::AvidaGP & val){ \n        std::set<size_t> scopes;\n        val.ResetHardware();\n        val.SetInput(0, 1);\n        scopes.insert(val.CurScope());\n\n        for (int i = 0; i < EVAL_TIME; i++) {\n            val.SingleProcess();\n            scopes.insert(val.CurScope());\n        }\n        return scopes.size(); \n    };\n\n   std::function<int(size_t id)> scope_count_fun_ptr = [this](size_t id){ \n        return scope_count_fun(*pop[id]);\n    };\n\n    std::function<size_t(emp::AvidaGP::Instruction&)> GetInstID = [](emp::AvidaGP::Instruction & inst){return inst.id;};\n\n    std::function<double(emp::AvidaGP &)> inst_ent_fun = [this](emp::AvidaGP & val){ \n        emp::vector<size_t> inst_list = emp::ApplyFunction(GetInstID, val.GetGenome().sequence);\n        return emp::ShannonEntropy(inst_list); \n    };\n\n    std::function<double(size_t id)> inst_ent_fun_ptr = [this](size_t id){ \n        return inst_ent_fun(*pop[id]);\n    };\n\n    std::function<size_t(size_t id)> inst_ent_bin = [this](size_t id) {\n      return GetPhenotypes()[1].EvalBin(*pop[id], ENTROPY_RES);\n    };\n\n    std::function<size_t(size_t id)> scope_count_bin = [this](size_t id) {\n      return GetPhenotypes()[0].EvalBin(*pop[id], SCOPE_RES);\n    };\n\n    std::function<emp::vector<size_t>() > get_pop = [this](){return GetValidOrgIDs();};\n\n    std::function<size_t(size_t)> return_id = [](size_t id){return id;};\n\n    void Setup(MapElitesGPConfig & config) {\n        Reset();\n        SetCache();\n        InitConfigs(config);\n        SetMutFun([this](emp::AvidaGP & org, emp::Random & r){\n            int count = 0;\n            for (size_t i = 0; i < org.GetSize(); ++i) {\n                if (r.P(INST_MUT_RATE)) {\n                    org.RandomizeInst(i, r);\n                    count++;\n                }\n                for (size_t j = 0; j < emp::AvidaGP::base_t::INST_ARGS; j++) {\n                    if (r.P(ARG_MUT_RATE)) {\n                        org.genome.sequence[i].args[j] = r.GetUInt(org.CPU_SIZE);        \n                        count++;\n                    }\n                }\n                if (r.P(INS_MUT_RATE)) {\n                    if (org.GetSize() < MAX_SIZE) {\n                        org.genome.sequence.insert(org.genome.sequence.begin() + (int)i, emp::AvidaGP::genome_t::sequence_t::value_type());\n                        org.RandomizeInst(i, r);\n                        count++;\n                    }\n                }\n                if (r.P(DEL_MUT_RATE)) {\n                    if (org.GetSize() > 1) {\n                        org.genome.sequence.erase(org.genome.sequence.begin() + (int)i);\n                        count++;\n                    }\n                }\n\n            }\n            return count;\n        });\n        SetPopStruct_Mixed();\n        SetAutoMutate();\n        \n        #ifndef EMSCRIPTEN\n        SetupFitnessFile().SetTimingRepeat(10);\n        // SetupSystematicsFile().SetTimingRepeat(10);\n        SetupPopulationFile().SetTimingRepeat(10);\n\n        emp::Ptr<emp::ContainerDataFile<emp::vector<size_t> > > tfile;\n        tfile.New(\"traits.dat\");\n\n        auto & trait_file = static_cast<emp::ContainerDataFile<emp::vector<size_t> >& >(AddDataFile(tfile));\n        trait_file.SetUpdateContainerFun(get_pop);\n        trait_file.AddContainerFun(inst_ent_fun_ptr, \"instruction_entropy\", \"Entropy of instructions\");\n        trait_file.AddContainerFun(scope_count_fun_ptr, \"scope_count\", \"Number of scopes used\");\n        trait_file.AddContainerFun(goal_function_ptr, \"fitness\", \"Fitness\");\n        trait_file.AddContainerFun(return_id, \"id\", \"ID\");\n\t    trait_file.AddContainerFun(scope_count_bin, \"scope_count_bin\", \"Bin that scope count falls into\");\n\t    trait_file.AddContainerFun(inst_ent_bin, \"inst_ent_bin\", \"Bin that instruction entropy falls into\");\n        trait_file.AddVar(update, \"update\", \"Update\");\n        trait_file.SetTimingRepeat(10);\n        trait_file.PrintHeaderKeys();\n\n        OnUpdate([this](size_t ud){if (ud % 100 == 0){SnapshotSingleFile(ud);}});\n        #endif\n\n        testcases.LoadTestcases(TESTCASES_FPATH);\n        SetFitFun(goal_function);\n        emp::AvidaGP org;\n        AddPhenotype(\"Num Scopes\", scope_count_fun, 1, 17);\n        AddPhenotype(\"Entropy\", inst_ent_fun, 0, -1*emp::Log2(1.0/org.GetInstLib()->GetSize())+1);\n        if (WORLD_STRUCTURE == (size_t)STRUCTURE::MAPE) {\n            emp::SetMapElites(*this, {SCOPE_RES, ENTROPY_RES});\n        }\n\n        if (SELECTION == (size_t)SELECTION_METHOD::LEXICASE) {\n\n            for (size_t testcase = 0; testcase < N_TEST_CASES; ++testcase) {\n                fit_set.push_back([testcase, this](emp::AvidaGP & org) {\n                    org.ResetHardware();\n                    for (size_t i = 0; i < testcases[testcase].first.size(); i++) {\n                        org.SetInput((int)i, testcases[testcase].first[i]);\n                    }\n                    org.Process(EVAL_TIME);\n                    double divisor = testcases[testcase].second;\n                    if (divisor == 0) {\n                        divisor = 1;\n                    }\n                    const std::unordered_map<int, double> & outputs = org.GetOutputs();\n                    int min_output = 0;\n                    double result;\n                    for (auto out : outputs) {\n                        if (out.first < min_output) {\n                            min_output = out.first;\n                        }\n                    }\n\n                    if (outputs.size() != 0) {\n                        result = 1 / (std::abs(org.GetOutput(min_output) - testcases[testcase].second)/std::abs(divisor));\n                    } else {\n                        result = 0;\n                    }\n\n                    // emp_assert(std::abs(result) != INFINITY);\n                    if (result > 1000) {\n                        result = 1000;\n                    }\n                    return result;\n                });\n\n            }\n        }\n\n        InitPop();\n    }\n\n    void SnapshotSingleFile(size_t update) {\n        std::string snapshot_dir = \"pop_\" + emp::to_string((int)update);\n        #ifndef EMSCRIPTEN\n        mkdir(snapshot_dir.c_str(), ACCESSPERMS);\n        #endif        \n        // For each program in the population, dump the full program description in a single file.\n        std::ofstream prog_ofstream(snapshot_dir + \"/pop_\" + emp::to_string((int)update) + \".pop\");\n        for (size_t i : GetValidOrgIDs())\n        {\n            if (i)\n            prog_ofstream << \"===\\n\";\n            prog_ofstream << \"id: \" << i << std::endl;\n            pop[i]->PrintGenome(prog_ofstream);\n        }\n        prog_ofstream.close();\n    }\n\n    void InitConfigs(MapElitesGPConfig & config) {\n        TOURNAMENT_SIZE = config.TOURNAMENT_SIZE();\n        EVAL_TIME = config.EVAL_TIME();\n        MAX_SIZE = config.PROG_MAX_TOTAL_LEN();\n        SCOPE_RES = config.MAPE_AXIS_SIZE__FUNC_ENTERED_ENTROPY();\n        ENTROPY_RES = config.MAPE_AXIS_SIZE__INST_ENTROPY();\n        INST_MUT_RATE = config.INST_SUB__PER_INST();\n        ARG_MUT_RATE = config.ARG_SUB__PER_ARG();\n        INS_MUT_RATE = config.INST_INS__PER_INST();\n        DEL_MUT_RATE = config.INST_DEL__PER_INST();\n        POP_SIZE = config.POP_SIZE();\n        GENERATIONS = config.GENERATIONS();\n        N_TEST_CASES = config.NUM_TEST_CASES();    \n        SELECTION = config.SELECTION_METHOD();\n        PROBLEM_TYPE = config.PROBLEM_TYPE();        \n        TESTCASES_FPATH = config.TESTCASES_FPATH();\n        WORLD_STRUCTURE = config.WORLD_STRUCTURE();        \n    }\n\n    void InitPop() {\n        emp::Random & random = GetRandom();\n        for (int i = 0 ; i < POP_SIZE; i++) {\n            size_t len = random.GetUInt(1, MAX_SIZE);\n            emp::AvidaGP cpu;\n            for (int j = 0; j < len; j++) {\n                cpu.PushRandom(random, 1);\n            }\n            Inject(cpu.GetGenome());\n        }\n    }\n\n    void RunStep() {\n        evolutionary_distinctiveness.Reset();\n        std::cout << update << std::endl;\n        if (WORLD_STRUCTURE == (size_t)STRUCTURE::MAPE) {\n            if (num_orgs < .5*GetSize()) {\n                emp::RandomSelectSparse(*this, POP_SIZE);\n            } else {\n                emp::RandomSelect(*this, POP_SIZE);                \n            }\n        } else if (SELECTION == (size_t)SELECTION_METHOD::TOURNAMENT) {\n            emp::TournamentSelect(*this, TOURNAMENT_SIZE, POP_SIZE);\n        } else if (SELECTION == (size_t)SELECTION_METHOD::RANDOM) {\n            emp::RandomSelect(*this, POP_SIZE);\n        } else if (SELECTION == (size_t)SELECTION_METHOD::LEXICASE) {\n            emp::LexicaseSelect(*this, fit_set, POP_SIZE);\n        } else {\n            emp_assert(false && \"INVALID SELECTION SCEHME\", SELECTION);\n        }\n\n        Update();\n    }\n\n    void Run() {\n        for (size_t u = 0; u <= GENERATIONS; u++) {\n            RunStep();\n        }  \n    }\n\n};\n\n#endif\n","// -*- C++ -*-\n//===----------------------------------------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_FUNCTIONAL_BASE\n#define _LIBCPP_FUNCTIONAL_BASE\n\n#include <__config>\n#include <type_traits>\n#include <typeinfo>\n#include <exception>\n#include <new>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _Arg, class _Result>\nstruct _LIBCPP_TEMPLATE_VIS unary_function\n{\n    typedef _Arg    argument_type;\n    typedef _Result result_type;\n};\n\ntemplate <class _Arg1, class _Arg2, class _Result>\nstruct _LIBCPP_TEMPLATE_VIS binary_function\n{\n    typedef _Arg1   first_argument_type;\n    typedef _Arg2   second_argument_type;\n    typedef _Result result_type;\n};\n\ntemplate <class _Tp>\nstruct __has_result_type\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::result_type* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp = void>\n#else\ntemplate <class _Tp>\n#endif\nstruct _LIBCPP_TEMPLATE_VIS less : binary_function<_Tp, _Tp, bool>\n{\n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY \n    bool operator()(const _Tp& __x, const _Tp& __y) const\n        {return __x < __y;}\n};\n\n#if _LIBCPP_STD_VER > 11\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS less<void>\n{\n    template <class _T1, class _T2> \n    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n    auto operator()(_T1&& __t, _T2&& __u) const\n    _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) < _VSTD::forward<_T2>(__u)))\n    -> decltype        (_VSTD::forward<_T1>(__t) < _VSTD::forward<_T2>(__u))\n        { return        _VSTD::forward<_T1>(__t) < _VSTD::forward<_T2>(__u); }\n    typedef void is_transparent;\n};\n#endif\n\n// __weak_result_type\n\ntemplate <class _Tp>\nstruct __derives_from_unary_function\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    static __two __test(...);\n    template <class _Ap, class _Rp>\n        static unary_function<_Ap, _Rp>\n        __test(const volatile unary_function<_Ap, _Rp>*);\npublic:\n    static const bool value = !is_same<decltype(__test((_Tp*)0)), __two>::value;\n    typedef decltype(__test((_Tp*)0)) type;\n};\n\ntemplate <class _Tp>\nstruct __derives_from_binary_function\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    static __two __test(...);\n    template <class _A1, class _A2, class _Rp>\n        static binary_function<_A1, _A2, _Rp>\n        __test(const volatile binary_function<_A1, _A2, _Rp>*);\npublic:\n    static const bool value = !is_same<decltype(__test((_Tp*)0)), __two>::value;\n    typedef decltype(__test((_Tp*)0)) type;\n};\n\ntemplate <class _Tp, bool = __derives_from_unary_function<_Tp>::value>\nstruct __maybe_derive_from_unary_function  // bool is true\n    : public __derives_from_unary_function<_Tp>::type\n{\n};\n\ntemplate <class _Tp>\nstruct __maybe_derive_from_unary_function<_Tp, false>\n{\n};\n\ntemplate <class _Tp, bool = __derives_from_binary_function<_Tp>::value>\nstruct __maybe_derive_from_binary_function  // bool is true\n    : public __derives_from_binary_function<_Tp>::type\n{\n};\n\ntemplate <class _Tp>\nstruct __maybe_derive_from_binary_function<_Tp, false>\n{\n};\n\ntemplate <class _Tp, bool = __has_result_type<_Tp>::value>\nstruct __weak_result_type_imp // bool is true\n    : public __maybe_derive_from_unary_function<_Tp>,\n      public __maybe_derive_from_binary_function<_Tp>\n{\n    typedef typename _Tp::result_type result_type;\n};\n\ntemplate <class _Tp>\nstruct __weak_result_type_imp<_Tp, false>\n    : public __maybe_derive_from_unary_function<_Tp>,\n      public __maybe_derive_from_binary_function<_Tp>\n{\n};\n\ntemplate <class _Tp>\nstruct __weak_result_type\n    : public __weak_result_type_imp<_Tp>\n{\n};\n\n// 0 argument case\n\ntemplate <class _Rp>\nstruct __weak_result_type<_Rp ()>\n{\n    typedef _Rp result_type;\n};\n\ntemplate <class _Rp>\nstruct __weak_result_type<_Rp (&)()>\n{\n    typedef _Rp result_type;\n};\n\ntemplate <class _Rp>\nstruct __weak_result_type<_Rp (*)()>\n{\n    typedef _Rp result_type;\n};\n\n// 1 argument case\n\ntemplate <class _Rp, class _A1>\nstruct __weak_result_type<_Rp (_A1)>\n    : public unary_function<_A1, _Rp>\n{\n};\n\ntemplate <class _Rp, class _A1>\nstruct __weak_result_type<_Rp (&)(_A1)>\n    : public unary_function<_A1, _Rp>\n{\n};\n\ntemplate <class _Rp, class _A1>\nstruct __weak_result_type<_Rp (*)(_A1)>\n    : public unary_function<_A1, _Rp>\n{\n};\n\ntemplate <class _Rp, class _Cp>\nstruct __weak_result_type<_Rp (_Cp::*)()>\n    : public unary_function<_Cp*, _Rp>\n{\n};\n\ntemplate <class _Rp, class _Cp>\nstruct __weak_result_type<_Rp (_Cp::*)() const>\n    : public unary_function<const _Cp*, _Rp>\n{\n};\n\ntemplate <class _Rp, class _Cp>\nstruct __weak_result_type<_Rp (_Cp::*)() volatile>\n    : public unary_function<volatile _Cp*, _Rp>\n{\n};\n\ntemplate <class _Rp, class _Cp>\nstruct __weak_result_type<_Rp (_Cp::*)() const volatile>\n    : public unary_function<const volatile _Cp*, _Rp>\n{\n};\n\n// 2 argument case\n\ntemplate <class _Rp, class _A1, class _A2>\nstruct __weak_result_type<_Rp (_A1, _A2)>\n    : public binary_function<_A1, _A2, _Rp>\n{\n};\n\ntemplate <class _Rp, class _A1, class _A2>\nstruct __weak_result_type<_Rp (*)(_A1, _A2)>\n    : public binary_function<_A1, _A2, _Rp>\n{\n};\n\ntemplate <class _Rp, class _A1, class _A2>\nstruct __weak_result_type<_Rp (&)(_A1, _A2)>\n    : public binary_function<_A1, _A2, _Rp>\n{\n};\n\ntemplate <class _Rp, class _Cp, class _A1>\nstruct __weak_result_type<_Rp (_Cp::*)(_A1)>\n    : public binary_function<_Cp*, _A1, _Rp>\n{\n};\n\ntemplate <class _Rp, class _Cp, class _A1>\nstruct __weak_result_type<_Rp (_Cp::*)(_A1) const>\n    : public binary_function<const _Cp*, _A1, _Rp>\n{\n};\n\ntemplate <class _Rp, class _Cp, class _A1>\nstruct __weak_result_type<_Rp (_Cp::*)(_A1) volatile>\n    : public binary_function<volatile _Cp*, _A1, _Rp>\n{\n};\n\ntemplate <class _Rp, class _Cp, class _A1>\nstruct __weak_result_type<_Rp (_Cp::*)(_A1) const volatile>\n    : public binary_function<const volatile _Cp*, _A1, _Rp>\n{\n};\n\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n// 3 or more arguments\n\ntemplate <class _Rp, class _A1, class _A2, class _A3, class ..._A4>\nstruct __weak_result_type<_Rp (_A1, _A2, _A3, _A4...)>\n{\n    typedef _Rp result_type;\n};\n\ntemplate <class _Rp, class _A1, class _A2, class _A3, class ..._A4>\nstruct __weak_result_type<_Rp (&)(_A1, _A2, _A3, _A4...)>\n{\n    typedef _Rp result_type;\n};\n\ntemplate <class _Rp, class _A1, class _A2, class _A3, class ..._A4>\nstruct __weak_result_type<_Rp (*)(_A1, _A2, _A3, _A4...)>\n{\n    typedef _Rp result_type;\n};\n\ntemplate <class _Rp, class _Cp, class _A1, class _A2, class ..._A3>\nstruct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...)>\n{\n    typedef _Rp result_type;\n};\n\ntemplate <class _Rp, class _Cp, class _A1, class _A2, class ..._A3>\nstruct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) const>\n{\n    typedef _Rp result_type;\n};\n\ntemplate <class _Rp, class _Cp, class _A1, class _A2, class ..._A3>\nstruct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) volatile>\n{\n    typedef _Rp result_type;\n};\n\ntemplate <class _Rp, class _Cp, class _A1, class _A2, class ..._A3>\nstruct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) const volatile>\n{\n    typedef _Rp result_type;\n};\n\n#endif // _LIBCPP_HAS_NO_VARIADICS\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class ..._Args>\nstruct __invoke_return\n{\n    typedef decltype(__invoke(_VSTD::declval<_Tp>(), _VSTD::declval<_Args>()...)) type;\n};\n\n#else // defined(_LIBCPP_CXX03_LANG)\n\n#include <__functional_base_03>\n\n#endif  // !defined(_LIBCPP_CXX03_LANG)\n\n\ntemplate <class _Ret>\nstruct __invoke_void_return_wrapper\n{\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n    template <class ..._Args>\n    static _Ret __call(_Args&&... __args) {\n        return __invoke(_VSTD::forward<_Args>(__args)...);\n    }\n#else\n    template <class _Fn>\n    static _Ret __call(_Fn __f) {\n        return __invoke(__f);\n    }\n\n    template <class _Fn, class _A0>\n    static _Ret __call(_Fn __f, _A0& __a0) {\n        return __invoke(__f, __a0);\n    }\n\n    template <class _Fn, class _A0, class _A1>\n    static _Ret __call(_Fn __f, _A0& __a0, _A1& __a1) {\n        return __invoke(__f, __a0, __a1);\n    }\n\n    template <class _Fn, class _A0, class _A1, class _A2>\n    static _Ret __call(_Fn __f, _A0& __a0, _A1& __a1, _A2& __a2){\n        return __invoke(__f, __a0, __a1, __a2);\n    }\n#endif\n};\n\ntemplate <>\nstruct __invoke_void_return_wrapper<void>\n{\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n    template <class ..._Args>\n    static void __call(_Args&&... __args) {\n        __invoke(_VSTD::forward<_Args>(__args)...);\n    }\n#else\n    template <class _Fn>\n    static void __call(_Fn __f) {\n        __invoke(__f);\n    }\n\n    template <class _Fn, class _A0>\n    static void __call(_Fn __f, _A0& __a0) {\n        __invoke(__f, __a0);\n    }\n\n    template <class _Fn, class _A0, class _A1>\n    static void __call(_Fn __f, _A0& __a0, _A1& __a1) {\n        __invoke(__f, __a0, __a1);\n    }\n\n    template <class _Fn, class _A0, class _A1, class _A2>\n    static void __call(_Fn __f, _A0& __a0, _A1& __a1, _A2& __a2) {\n        __invoke(__f, __a0, __a1, __a2);\n    }\n#endif\n};\n\ntemplate <class _Tp>\nclass _LIBCPP_TEMPLATE_VIS reference_wrapper\n    : public __weak_result_type<_Tp>\n{\npublic:\n    // types\n    typedef _Tp type;\nprivate:\n    type* __f_;\n\npublic:\n    // construct/copy/destroy\n    _LIBCPP_INLINE_VISIBILITY reference_wrapper(type& __f) _NOEXCEPT\n        : __f_(_VSTD::addressof(__f)) {}\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    private: reference_wrapper(type&&); public: // = delete; // do not bind to temps\n#endif\n\n    // access\n    _LIBCPP_INLINE_VISIBILITY operator type&    () const _NOEXCEPT {return *__f_;}\n    _LIBCPP_INLINE_VISIBILITY          type& get() const _NOEXCEPT {return *__f_;}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n    // invoke\n    template <class... _ArgTypes>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_of<type&, _ArgTypes...>::type\n    operator() (_ArgTypes&&... __args) const {\n        return __invoke(get(), _VSTD::forward<_ArgTypes>(__args)...);\n    }\n#else\n\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return<type>::type\n    operator() () const {\n        return __invoke(get());\n    }\n\n    template <class _A0>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return0<type, _A0>::type\n    operator() (_A0& __a0) const {\n        return __invoke(get(), __a0);\n    }\n\n    template <class _A0>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return0<type, _A0 const>::type\n    operator() (_A0 const& __a0) const {\n        return __invoke(get(), __a0);\n    }\n\n    template <class _A0, class _A1>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return1<type, _A0, _A1>::type\n    operator() (_A0& __a0, _A1& __a1) const {\n        return __invoke(get(), __a0, __a1);\n    }\n\n    template <class _A0, class _A1>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return1<type, _A0 const, _A1>::type\n    operator() (_A0 const& __a0, _A1& __a1) const {\n        return __invoke(get(), __a0, __a1);\n    }\n\n    template <class _A0, class _A1>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return1<type, _A0, _A1 const>::type\n    operator() (_A0& __a0, _A1 const& __a1) const {\n        return __invoke(get(), __a0, __a1);\n    }\n\n    template <class _A0, class _A1>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return1<type, _A0 const, _A1 const>::type\n    operator() (_A0 const& __a0, _A1 const& __a1) const {\n        return __invoke(get(), __a0, __a1);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0, _A1, _A2>::type\n    operator() (_A0& __a0, _A1& __a1, _A2& __a2) const {\n        return __invoke(get(), __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0 const, _A1, _A2>::type\n    operator() (_A0 const& __a0, _A1& __a1, _A2& __a2) const {\n        return __invoke(get(), __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0, _A1 const, _A2>::type\n    operator() (_A0& __a0, _A1 const& __a1, _A2& __a2) const {\n        return __invoke(get(), __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0, _A1, _A2 const>::type\n    operator() (_A0& __a0, _A1& __a1, _A2 const& __a2) const {\n        return __invoke(get(), __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0 const, _A1 const, _A2>::type\n    operator() (_A0 const& __a0, _A1 const& __a1, _A2& __a2) const {\n        return __invoke(get(), __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0 const, _A1, _A2 const>::type\n    operator() (_A0 const& __a0, _A1& __a1, _A2 const& __a2) const {\n        return __invoke(get(), __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0, _A1 const, _A2 const>::type\n    operator() (_A0& __a0, _A1 const& __a1, _A2 const& __a2) const {\n        return __invoke(get(), __a0, __a1, __a2);\n    }\n\n    template <class _A0, class _A1, class _A2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename __invoke_return2<type, _A0 const, _A1 const, _A2 const>::type\n    operator() (_A0 const& __a0, _A1 const& __a1, _A2 const& __a2) const {\n        return __invoke(get(), __a0, __a1, __a2);\n    }\n#endif // _LIBCPP_HAS_NO_VARIADICS\n};\n\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nreference_wrapper<_Tp>\nref(_Tp& __t) _NOEXCEPT\n{\n    return reference_wrapper<_Tp>(__t);\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nreference_wrapper<_Tp>\nref(reference_wrapper<_Tp> __t) _NOEXCEPT\n{\n    return ref(__t.get());\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nreference_wrapper<const _Tp>\ncref(const _Tp& __t) _NOEXCEPT\n{\n    return reference_wrapper<const _Tp>(__t);\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nreference_wrapper<const _Tp>\ncref(reference_wrapper<_Tp> __t) _NOEXCEPT\n{\n    return cref(__t.get());\n}\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Tp> void ref(const _Tp&&) = delete;\ntemplate <class _Tp> void cref(const _Tp&&) = delete;\n#endif\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Tp1, class _Tp2 = void>\nstruct __is_transparent\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::is_transparent* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp1>(0)) == 1;\n};\n#endif\n\n// allocator_arg_t\n\nstruct _LIBCPP_TEMPLATE_VIS allocator_arg_t { };\n\n#if defined(_LIBCPP_HAS_NO_CONSTEXPR) || defined(_LIBCPP_BUILDING_MEMORY)\nextern const allocator_arg_t allocator_arg;\n#else\nconstexpr allocator_arg_t allocator_arg = allocator_arg_t();\n#endif\n\n// uses_allocator\n\ntemplate <class _Tp>\nstruct __has_allocator_type\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::allocator_type* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Tp, class _Alloc, bool = __has_allocator_type<_Tp>::value>\nstruct __uses_allocator\n    : public integral_constant<bool,\n        is_convertible<_Alloc, typename _Tp::allocator_type>::value>\n{\n};\n\ntemplate <class _Tp, class _Alloc>\nstruct __uses_allocator<_Tp, _Alloc, false>\n    : public false_type\n{\n};\n\ntemplate <class _Tp, class _Alloc>\nstruct _LIBCPP_TEMPLATE_VIS uses_allocator\n    : public __uses_allocator<_Tp, _Alloc>\n{\n};\n\n#if _LIBCPP_STD_VER > 14\ntemplate <class _Tp, class _Alloc>\nconstexpr size_t uses_allocator_v = uses_allocator<_Tp, _Alloc>::value;\n#endif\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\n// allocator construction\n\ntemplate <class _Tp, class _Alloc, class ..._Args>\nstruct __uses_alloc_ctor_imp\n{\n    typedef typename __uncvref<_Alloc>::type _RawAlloc;\n    static const bool __ua = uses_allocator<_Tp, _RawAlloc>::value;\n    static const bool __ic =\n        is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value;\n    static const int value = __ua ? 2 - __ic : 0;\n};\n\ntemplate <class _Tp, class _Alloc, class ..._Args>\nstruct __uses_alloc_ctor\n    : integral_constant<int, __uses_alloc_ctor_imp<_Tp, _Alloc, _Args...>::value>\n    {};\n\ntemplate <class _Tp, class _Allocator, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __user_alloc_construct_impl (integral_constant<int, 0>, _Tp *__storage, const _Allocator &, _Args &&... __args )\n{\n    new (__storage) _Tp (_VSTD::forward<_Args>(__args)...);\n}\n\n// FIXME: This should have a version which takes a non-const alloc.\ntemplate <class _Tp, class _Allocator, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __user_alloc_construct_impl (integral_constant<int, 1>, _Tp *__storage, const _Allocator &__a, _Args &&... __args )\n{\n    new (__storage) _Tp (allocator_arg, __a, _VSTD::forward<_Args>(__args)...);\n}\n\n// FIXME: This should have a version which takes a non-const alloc.\ntemplate <class _Tp, class _Allocator, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __user_alloc_construct_impl (integral_constant<int, 2>, _Tp *__storage, const _Allocator &__a, _Args &&... __args )\n{\n    new (__storage) _Tp (_VSTD::forward<_Args>(__args)..., __a);\n}\n\n// FIXME: Theis should have a version which takes a non-const alloc.\ntemplate <class _Tp, class _Allocator, class... _Args>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __user_alloc_construct (_Tp *__storage, const _Allocator &__a, _Args &&... __args)\n{ \n    __user_alloc_construct_impl( \n             __uses_alloc_ctor<_Tp, _Allocator>(), \n             __storage, __a, _VSTD::forward<_Args>(__args)...\n        );\n}\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_FUNCTIONAL_BASE\n","// -*- C++ -*-\n//===----------------------------------------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP___TREE\n#define _LIBCPP___TREE\n\n#include <__config>\n#include <iterator>\n#include <memory>\n#include <stdexcept>\n#include <algorithm>\n\n#include <__undef_min_max>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _Tp, class _Compare, class _Allocator> class __tree;\ntemplate <class _Tp, class _NodePtr, class _DiffType>\n    class _LIBCPP_TEMPLATE_VIS __tree_iterator;\ntemplate <class _Tp, class _ConstNodePtr, class _DiffType>\n    class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;\n\ntemplate <class _Pointer> class __tree_end_node;\ntemplate <class _VoidPtr> class __tree_node_base;\ntemplate <class _Tp, class _VoidPtr> class __tree_node;\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Key, class _Value>\nunion __value_type;\n#else\ntemplate <class _Key, class _Value>\nstruct __value_type;\n#endif\n\ntemplate <class _Allocator> class __map_node_destructor;\ntemplate <class _TreeIterator> class _LIBCPP_TEMPLATE_VIS __map_iterator;\ntemplate <class _TreeIterator> class _LIBCPP_TEMPLATE_VIS __map_const_iterator;\n\n/*\n\n_NodePtr algorithms\n\nThe algorithms taking _NodePtr are red black tree algorithms.  Those\nalgorithms taking a parameter named __root should assume that __root\npoints to a proper red black tree (unless otherwise specified).\n\nEach algorithm herein assumes that __root->__parent_ points to a non-null\nstructure which has a member __left_ which points back to __root.  No other\nmember is read or written to at __root->__parent_.\n\n__root->__parent_ will be referred to below (in comments only) as end_node.\nend_node->__left_ is an externably accessible lvalue for __root, and can be\nchanged by node insertion and removal (without explicit reference to end_node).\n\nAll nodes (with the exception of end_node), even the node referred to as\n__root, have a non-null __parent_ field.\n\n*/\n\n// Returns:  true if __x is a left child of its parent, else false\n// Precondition:  __x != nullptr.\ntemplate <class _NodePtr>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\n__tree_is_left_child(_NodePtr __x) _NOEXCEPT\n{\n    return __x == __x->__parent_->__left_;\n}\n\n// Determintes if the subtree rooted at __x is a proper red black subtree.  If\n//    __x is a proper subtree, returns the black height (null counts as 1).  If\n//    __x is an improper subtree, returns 0.\ntemplate <class _NodePtr>\nunsigned\n__tree_sub_invariant(_NodePtr __x)\n{\n    if (__x == nullptr)\n        return 1;\n    // parent consistency checked by caller\n    // check __x->__left_ consistency\n    if (__x->__left_ != nullptr && __x->__left_->__parent_ != __x)\n        return 0;\n    // check __x->__right_ consistency\n    if (__x->__right_ != nullptr && __x->__right_->__parent_ != __x)\n        return 0;\n    // check __x->__left_ != __x->__right_ unless both are nullptr\n    if (__x->__left_ == __x->__right_ && __x->__left_ != nullptr)\n        return 0;\n    // If this is red, neither child can be red\n    if (!__x->__is_black_)\n    {\n        if (__x->__left_ && !__x->__left_->__is_black_)\n            return 0;\n        if (__x->__right_ && !__x->__right_->__is_black_)\n            return 0;\n    }\n    unsigned __h = __tree_sub_invariant(__x->__left_);\n    if (__h == 0)\n        return 0;  // invalid left subtree\n    if (__h != __tree_sub_invariant(__x->__right_))\n        return 0;  // invalid or different height right subtree\n    return __h + __x->__is_black_;  // return black height of this node\n}\n\n// Determintes if the red black tree rooted at __root is a proper red black tree.\n//    __root == nullptr is a proper tree.  Returns true is __root is a proper\n//    red black tree, else returns false.\ntemplate <class _NodePtr>\nbool\n__tree_invariant(_NodePtr __root)\n{\n    if (__root == nullptr)\n        return true;\n    // check __x->__parent_ consistency\n    if (__root->__parent_ == nullptr)\n        return false;\n    if (!__tree_is_left_child(__root))\n        return false;\n    // root must be black\n    if (!__root->__is_black_)\n        return false;\n    // do normal node checks\n    return __tree_sub_invariant(__root) != 0;\n}\n\n// Returns:  pointer to the left-most node under __x.\n// Precondition:  __x != nullptr.\ntemplate <class _NodePtr>\ninline _LIBCPP_INLINE_VISIBILITY\n_NodePtr\n__tree_min(_NodePtr __x) _NOEXCEPT\n{\n    while (__x->__left_ != nullptr)\n        __x = __x->__left_;\n    return __x;\n}\n\n// Returns:  pointer to the right-most node under __x.\n// Precondition:  __x != nullptr.\ntemplate <class _NodePtr>\ninline _LIBCPP_INLINE_VISIBILITY\n_NodePtr\n__tree_max(_NodePtr __x) _NOEXCEPT\n{\n    while (__x->__right_ != nullptr)\n        __x = __x->__right_;\n    return __x;\n}\n\n// Returns:  pointer to the next in-order node after __x.\n// Precondition:  __x != nullptr.\ntemplate <class _NodePtr>\n_NodePtr\n__tree_next(_NodePtr __x) _NOEXCEPT\n{\n    if (__x->__right_ != nullptr)\n        return __tree_min(__x->__right_);\n    while (!__tree_is_left_child(__x))\n        __x = __x->__parent_unsafe();\n    return __x->__parent_unsafe();\n}\n\ntemplate <class _EndNodePtr, class _NodePtr>\ninline _LIBCPP_INLINE_VISIBILITY\n_EndNodePtr\n__tree_next_iter(_NodePtr __x) _NOEXCEPT\n{\n    if (__x->__right_ != nullptr)\n        return static_cast<_EndNodePtr>(__tree_min(__x->__right_));\n    while (!__tree_is_left_child(__x))\n        __x = __x->__parent_unsafe();\n    return static_cast<_EndNodePtr>(__x->__parent_);\n}\n\n// Returns:  pointer to the previous in-order node before __x.\n// Precondition:  __x != nullptr.\n// Note: __x may be the end node.\ntemplate <class _NodePtr, class _EndNodePtr>\ninline _LIBCPP_INLINE_VISIBILITY\n_NodePtr\n__tree_prev_iter(_EndNodePtr __x) _NOEXCEPT\n{\n    if (__x->__left_ != nullptr)\n        return __tree_max(__x->__left_);\n    _NodePtr __xx = static_cast<_NodePtr>(__x);\n    while (__tree_is_left_child(__xx))\n        __xx = __xx->__parent_unsafe();\n    return __xx->__parent_unsafe();\n}\n\n// Returns:  pointer to a node which has no children\n// Precondition:  __x != nullptr.\ntemplate <class _NodePtr>\n_NodePtr\n__tree_leaf(_NodePtr __x) _NOEXCEPT\n{\n    while (true)\n    {\n        if (__x->__left_ != nullptr)\n        {\n            __x = __x->__left_;\n            continue;\n        }\n        if (__x->__right_ != nullptr)\n        {\n            __x = __x->__right_;\n            continue;\n        }\n        break;\n    }\n    return __x;\n}\n\n// Effects:  Makes __x->__right_ the subtree root with __x as its left child\n//           while preserving in-order order.\n// Precondition:  __x->__right_ != nullptr\ntemplate <class _NodePtr>\nvoid\n__tree_left_rotate(_NodePtr __x) _NOEXCEPT\n{\n    _NodePtr __y = __x->__right_;\n    __x->__right_ = __y->__left_;\n    if (__x->__right_ != nullptr)\n        __x->__right_->__set_parent(__x);\n    __y->__parent_ = __x->__parent_;\n    if (__tree_is_left_child(__x))\n        __x->__parent_->__left_ = __y;\n    else\n        __x->__parent_unsafe()->__right_ = __y;\n    __y->__left_ = __x;\n    __x->__set_parent(__y);\n}\n\n// Effects:  Makes __x->__left_ the subtree root with __x as its right child\n//           while preserving in-order order.\n// Precondition:  __x->__left_ != nullptr\ntemplate <class _NodePtr>\nvoid\n__tree_right_rotate(_NodePtr __x) _NOEXCEPT\n{\n    _NodePtr __y = __x->__left_;\n    __x->__left_ = __y->__right_;\n    if (__x->__left_ != nullptr)\n        __x->__left_->__set_parent(__x);\n    __y->__parent_ = __x->__parent_;\n    if (__tree_is_left_child(__x))\n        __x->__parent_->__left_ = __y;\n    else\n        __x->__parent_unsafe()->__right_ = __y;\n    __y->__right_ = __x;\n    __x->__set_parent(__y);\n}\n\n// Effects:  Rebalances __root after attaching __x to a leaf.\n// Precondition:  __root != nulptr && __x != nullptr.\n//                __x has no children.\n//                __x == __root or == a direct or indirect child of __root.\n//                If __x were to be unlinked from __root (setting __root to\n//                  nullptr if __root == __x), __tree_invariant(__root) == true.\n// Postcondition: __tree_invariant(end_node->__left_) == true.  end_node->__left_\n//                may be different than the value passed in as __root.\ntemplate <class _NodePtr>\nvoid\n__tree_balance_after_insert(_NodePtr __root, _NodePtr __x) _NOEXCEPT\n{\n    __x->__is_black_ = __x == __root;\n    while (__x != __root && !__x->__parent_unsafe()->__is_black_)\n    {\n        // __x->__parent_ != __root because __x->__parent_->__is_black == false\n        if (__tree_is_left_child(__x->__parent_unsafe()))\n        {\n            _NodePtr __y = __x->__parent_unsafe()->__parent_unsafe()->__right_;\n            if (__y != nullptr && !__y->__is_black_)\n            {\n                __x = __x->__parent_unsafe();\n                __x->__is_black_ = true;\n                __x = __x->__parent_unsafe();\n                __x->__is_black_ = __x == __root;\n                __y->__is_black_ = true;\n            }\n            else\n            {\n                if (!__tree_is_left_child(__x))\n                {\n                    __x = __x->__parent_unsafe();\n                    __tree_left_rotate(__x);\n                }\n                __x = __x->__parent_unsafe();\n                __x->__is_black_ = true;\n                __x = __x->__parent_unsafe();\n                __x->__is_black_ = false;\n                __tree_right_rotate(__x);\n                break;\n            }\n        }\n        else\n        {\n            _NodePtr __y = __x->__parent_unsafe()->__parent_->__left_;\n            if (__y != nullptr && !__y->__is_black_)\n            {\n                __x = __x->__parent_unsafe();\n                __x->__is_black_ = true;\n                __x = __x->__parent_unsafe();\n                __x->__is_black_ = __x == __root;\n                __y->__is_black_ = true;\n            }\n            else\n            {\n                if (__tree_is_left_child(__x))\n                {\n                    __x = __x->__parent_unsafe();\n                    __tree_right_rotate(__x);\n                }\n                __x = __x->__parent_unsafe();\n                __x->__is_black_ = true;\n                __x = __x->__parent_unsafe();\n                __x->__is_black_ = false;\n                __tree_left_rotate(__x);\n                break;\n            }\n        }\n    }\n}\n\n// Precondition:  __root != nullptr && __z != nullptr.\n//                __tree_invariant(__root) == true.\n//                __z == __root or == a direct or indirect child of __root.\n// Effects:  unlinks __z from the tree rooted at __root, rebalancing as needed.\n// Postcondition: __tree_invariant(end_node->__left_) == true && end_node->__left_\n//                nor any of its children refer to __z.  end_node->__left_\n//                may be different than the value passed in as __root.\ntemplate <class _NodePtr>\nvoid\n__tree_remove(_NodePtr __root, _NodePtr __z) _NOEXCEPT\n{\n    // __z will be removed from the tree.  Client still needs to destruct/deallocate it\n    // __y is either __z, or if __z has two children, __tree_next(__z).\n    // __y will have at most one child.\n    // __y will be the initial hole in the tree (make the hole at a leaf)\n    _NodePtr __y = (__z->__left_ == nullptr || __z->__right_ == nullptr) ?\n                    __z : __tree_next(__z);\n    // __x is __y's possibly null single child\n    _NodePtr __x = __y->__left_ != nullptr ? __y->__left_ : __y->__right_;\n    // __w is __x's possibly null uncle (will become __x's sibling)\n    _NodePtr __w = nullptr;\n    // link __x to __y's parent, and find __w\n    if (__x != nullptr)\n        __x->__parent_ = __y->__parent_;\n    if (__tree_is_left_child(__y))\n    {\n        __y->__parent_->__left_ = __x;\n        if (__y != __root)\n            __w = __y->__parent_unsafe()->__right_;\n        else\n            __root = __x;  // __w == nullptr\n    }\n    else\n    {\n        __y->__parent_unsafe()->__right_ = __x;\n        // __y can't be root if it is a right child\n        __w = __y->__parent_->__left_;\n    }\n    bool __removed_black = __y->__is_black_;\n    // If we didn't remove __z, do so now by splicing in __y for __z,\n    //    but copy __z's color.  This does not impact __x or __w.\n    if (__y != __z)\n    {\n        // __z->__left_ != nulptr but __z->__right_ might == __x == nullptr\n        __y->__parent_ = __z->__parent_;\n        if (__tree_is_left_child(__z))\n            __y->__parent_->__left_ = __y;\n        else\n            __y->__parent_unsafe()->__right_ = __y;\n        __y->__left_ = __z->__left_;\n        __y->__left_->__set_parent(__y);\n        __y->__right_ = __z->__right_;\n        if (__y->__right_ != nullptr)\n            __y->__right_->__set_parent(__y);\n        __y->__is_black_ = __z->__is_black_;\n        if (__root == __z)\n            __root = __y;\n    }\n    // There is no need to rebalance if we removed a red, or if we removed\n    //     the last node.\n    if (__removed_black && __root != nullptr)\n    {\n        // Rebalance:\n        // __x has an implicit black color (transferred from the removed __y)\n        //    associated with it, no matter what its color is.\n        // If __x is __root (in which case it can't be null), it is supposed\n        //    to be black anyway, and if it is doubly black, then the double\n        //    can just be ignored.\n        // If __x is red (in which case it can't be null), then it can absorb\n        //    the implicit black just by setting its color to black.\n        // Since __y was black and only had one child (which __x points to), __x\n        //   is either red with no children, else null, otherwise __y would have\n        //   different black heights under left and right pointers.\n        // if (__x == __root || __x != nullptr && !__x->__is_black_)\n        if (__x != nullptr)\n            __x->__is_black_ = true;\n        else\n        {\n            //  Else __x isn't root, and is \"doubly black\", even though it may\n            //     be null.  __w can not be null here, else the parent would\n            //     see a black height >= 2 on the __x side and a black height\n            //     of 1 on the __w side (__w must be a non-null black or a red\n            //     with a non-null black child).\n            while (true)\n            {\n                if (!__tree_is_left_child(__w))  // if x is left child\n                {\n                    if (!__w->__is_black_)\n                    {\n                        __w->__is_black_ = true;\n                        __w->__parent_unsafe()->__is_black_ = false;\n                        __tree_left_rotate(__w->__parent_unsafe());\n                        // __x is still valid\n                        // reset __root only if necessary\n                        if (__root == __w->__left_)\n                            __root = __w;\n                        // reset sibling, and it still can't be null\n                        __w = __w->__left_->__right_;\n                    }\n                    // __w->__is_black_ is now true, __w may have null children\n                    if ((__w->__left_  == nullptr || __w->__left_->__is_black_) &&\n                        (__w->__right_ == nullptr || __w->__right_->__is_black_))\n                    {\n                        __w->__is_black_ = false;\n                        __x = __w->__parent_unsafe();\n                        // __x can no longer be null\n                        if (__x == __root || !__x->__is_black_)\n                        {\n                            __x->__is_black_ = true;\n                            break;\n                        }\n                        // reset sibling, and it still can't be null\n                        __w = __tree_is_left_child(__x) ?\n                                    __x->__parent_unsafe()->__right_ :\n                                    __x->__parent_->__left_;\n                        // continue;\n                    }\n                    else  // __w has a red child\n                    {\n                        if (__w->__right_ == nullptr || __w->__right_->__is_black_)\n                        {\n                            // __w left child is non-null and red\n                            __w->__left_->__is_black_ = true;\n                            __w->__is_black_ = false;\n                            __tree_right_rotate(__w);\n                            // __w is known not to be root, so root hasn't changed\n                            // reset sibling, and it still can't be null\n                            __w = __w->__parent_unsafe();\n                        }\n                        // __w has a right red child, left child may be null\n                        __w->__is_black_ = __w->__parent_unsafe()->__is_black_;\n                        __w->__parent_unsafe()->__is_black_ = true;\n                        __w->__right_->__is_black_ = true;\n                        __tree_left_rotate(__w->__parent_unsafe());\n                        break;\n                    }\n                }\n                else\n                {\n                    if (!__w->__is_black_)\n                    {\n                        __w->__is_black_ = true;\n                        __w->__parent_unsafe()->__is_black_ = false;\n                        __tree_right_rotate(__w->__parent_unsafe());\n                        // __x is still valid\n                        // reset __root only if necessary\n                        if (__root == __w->__right_)\n                            __root = __w;\n                        // reset sibling, and it still can't be null\n                        __w = __w->__right_->__left_;\n                    }\n                    // __w->__is_black_ is now true, __w may have null children\n                    if ((__w->__left_  == nullptr || __w->__left_->__is_black_) &&\n                        (__w->__right_ == nullptr || __w->__right_->__is_black_))\n                    {\n                        __w->__is_black_ = false;\n                        __x = __w->__parent_unsafe();\n                        // __x can no longer be null\n                        if (!__x->__is_black_ || __x == __root)\n                        {\n                            __x->__is_black_ = true;\n                            break;\n                        }\n                        // reset sibling, and it still can't be null\n                        __w = __tree_is_left_child(__x) ?\n                                    __x->__parent_unsafe()->__right_ :\n                                    __x->__parent_->__left_;\n                        // continue;\n                    }\n                    else  // __w has a red child\n                    {\n                        if (__w->__left_ == nullptr || __w->__left_->__is_black_)\n                        {\n                            // __w right child is non-null and red\n                            __w->__right_->__is_black_ = true;\n                            __w->__is_black_ = false;\n                            __tree_left_rotate(__w);\n                            // __w is known not to be root, so root hasn't changed\n                            // reset sibling, and it still can't be null\n                            __w = __w->__parent_unsafe();\n                        }\n                        // __w has a left red child, right child may be null\n                        __w->__is_black_ = __w->__parent_unsafe()->__is_black_;\n                        __w->__parent_unsafe()->__is_black_ = true;\n                        __w->__left_->__is_black_ = true;\n                        __tree_right_rotate(__w->__parent_unsafe());\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n\n// node traits\n\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Tp>\nstruct __is_tree_value_type_imp : false_type {};\n\ntemplate <class _Key, class _Value>\nstruct __is_tree_value_type_imp<__value_type<_Key, _Value>> : true_type {};\n\ntemplate <class ..._Args>\nstruct __is_tree_value_type : false_type {};\n\ntemplate <class _One>\nstruct __is_tree_value_type<_One> : __is_tree_value_type_imp<typename __uncvref<_One>::type> {};\n#endif\n\ntemplate <class _Tp>\nstruct __tree_key_value_types {\n  typedef _Tp key_type;\n  typedef _Tp __node_value_type;\n  typedef _Tp __container_value_type;\n  static const bool __is_map = false;\n\n  _LIBCPP_INLINE_VISIBILITY\n  static key_type const& __get_key(_Tp const& __v) {\n    return __v;\n  }\n  _LIBCPP_INLINE_VISIBILITY\n  static __container_value_type const& __get_value(__node_value_type const& __v) {\n    return __v;\n  }\n  _LIBCPP_INLINE_VISIBILITY\n  static __container_value_type* __get_ptr(__node_value_type& __n) {\n    return _VSTD::addressof(__n);\n  }\n\n#ifndef _LIBCPP_CXX03_LANG\n  _LIBCPP_INLINE_VISIBILITY\n  static  __container_value_type&& __move(__node_value_type& __v) {\n    return _VSTD::move(__v);\n  }\n#endif\n};\n\ntemplate <class _Key, class _Tp>\nstruct __tree_key_value_types<__value_type<_Key, _Tp> > {\n  typedef _Key                                         key_type;\n  typedef _Tp                                          mapped_type;\n  typedef __value_type<_Key, _Tp>                      __node_value_type;\n  typedef pair<const _Key, _Tp>                        __container_value_type;\n  typedef pair<_Key, _Tp>                              __nc_value_type;\n  typedef __container_value_type                       __map_value_type;\n  static const bool __is_map = true;\n\n  _LIBCPP_INLINE_VISIBILITY\n  static key_type const&\n  __get_key(__node_value_type const& __t) {\n    return __t.__cc.first;\n  }\n\n  template <class _Up>\n  _LIBCPP_INLINE_VISIBILITY\n  static typename enable_if<__is_same_uncvref<_Up, __container_value_type>::value,\n      key_type const&>::type\n  __get_key(_Up& __t) {\n    return __t.first;\n  }\n\n  _LIBCPP_INLINE_VISIBILITY\n  static __container_value_type const&\n  __get_value(__node_value_type const& __t) {\n    return __t.__cc;\n  }\n\n  template <class _Up>\n  _LIBCPP_INLINE_VISIBILITY\n  static typename enable_if<__is_same_uncvref<_Up, __container_value_type>::value,\n      __container_value_type const&>::type\n  __get_value(_Up& __t) {\n    return __t;\n  }\n\n  _LIBCPP_INLINE_VISIBILITY\n  static __container_value_type* __get_ptr(__node_value_type& __n) {\n    return _VSTD::addressof(__n.__cc);\n  }\n\n#ifndef _LIBCPP_CXX03_LANG\n  _LIBCPP_INLINE_VISIBILITY\n  static  __nc_value_type&& __move(__node_value_type& __v) {\n    return _VSTD::move(__v.__nc);\n  }\n#endif\n};\n\ntemplate <class _VoidPtr>\nstruct __tree_node_base_types {\n  typedef _VoidPtr                                               __void_pointer;\n\n  typedef __tree_node_base<__void_pointer>                      __node_base_type;\n  typedef typename __rebind_pointer<_VoidPtr, __node_base_type>::type\n                                                             __node_base_pointer;\n\n  typedef __tree_end_node<__node_base_pointer>                  __end_node_type;\n  typedef typename __rebind_pointer<_VoidPtr, __end_node_type>::type\n                                                             __end_node_pointer;\n#if defined(_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB)\n  typedef __end_node_pointer __parent_pointer;\n#else\n  typedef typename conditional<\n      is_pointer<__end_node_pointer>::value,\n        __end_node_pointer,\n        __node_base_pointer>::type __parent_pointer;\n#endif\n\nprivate:\n  static_assert((is_same<typename pointer_traits<_VoidPtr>::element_type, void>::value),\n                  \"_VoidPtr does not point to unqualified void type\");\n};\n\ntemplate <class _Tp, class _AllocPtr, class _KVTypes = __tree_key_value_types<_Tp>,\n         bool = _KVTypes::__is_map>\nstruct __tree_map_pointer_types {};\n\ntemplate <class _Tp, class _AllocPtr, class _KVTypes>\nstruct __tree_map_pointer_types<_Tp, _AllocPtr, _KVTypes, true> {\n  typedef typename _KVTypes::__map_value_type   _Mv;\n  typedef typename __rebind_pointer<_AllocPtr, _Mv>::type\n                                                       __map_value_type_pointer;\n  typedef typename __rebind_pointer<_AllocPtr, const _Mv>::type\n                                                 __const_map_value_type_pointer;\n};\n\ntemplate <class _NodePtr, class _NodeT = typename pointer_traits<_NodePtr>::element_type>\nstruct __tree_node_types;\n\ntemplate <class _NodePtr, class _Tp, class _VoidPtr>\nstruct __tree_node_types<_NodePtr, __tree_node<_Tp, _VoidPtr> >\n    : public __tree_node_base_types<_VoidPtr>,\n             __tree_key_value_types<_Tp>,\n             __tree_map_pointer_types<_Tp, _VoidPtr>\n{\n  typedef __tree_node_base_types<_VoidPtr> __base;\n  typedef __tree_key_value_types<_Tp>      __key_base;\n  typedef __tree_map_pointer_types<_Tp, _VoidPtr> __map_pointer_base;\npublic:\n\n  typedef typename pointer_traits<_NodePtr>::element_type       __node_type;\n  typedef _NodePtr                                              __node_pointer;\n\n  typedef _Tp                                                 __node_value_type;\n  typedef typename __rebind_pointer<_VoidPtr, __node_value_type>::type\n                                                      __node_value_type_pointer;\n  typedef typename __rebind_pointer<_VoidPtr, const __node_value_type>::type\n                                                __const_node_value_type_pointer;\n#if defined(_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB)\n  typedef typename __base::__end_node_pointer __iter_pointer;\n#else\n  typedef typename conditional<\n      is_pointer<__node_pointer>::value,\n        typename __base::__end_node_pointer,\n        __node_pointer>::type __iter_pointer;\n#endif\nprivate:\n    static_assert(!is_const<__node_type>::value,\n                \"_NodePtr should never be a pointer to const\");\n    static_assert((is_same<typename __rebind_pointer<_VoidPtr, __node_type>::type,\n                          _NodePtr>::value), \"_VoidPtr does not rebind to _NodePtr.\");\n};\n\ntemplate <class _ValueTp, class _VoidPtr>\nstruct __make_tree_node_types {\n  typedef typename __rebind_pointer<_VoidPtr, __tree_node<_ValueTp, _VoidPtr> >::type\n                                                                        _NodePtr;\n  typedef __tree_node_types<_NodePtr> type;\n};\n\n// node\n\ntemplate <class _Pointer>\nclass __tree_end_node\n{\npublic:\n    typedef _Pointer pointer;\n    pointer __left_;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_end_node() _NOEXCEPT : __left_() {}\n};\n\ntemplate <class _VoidPtr>\nclass __tree_node_base\n    : public __tree_node_base_types<_VoidPtr>::__end_node_type\n{\n    typedef __tree_node_base_types<_VoidPtr> _NodeBaseTypes;\n\npublic:\n    typedef typename _NodeBaseTypes::__node_base_pointer pointer;\n    typedef typename _NodeBaseTypes::__parent_pointer __parent_pointer;\n\n    pointer          __right_;\n    __parent_pointer __parent_;\n    bool __is_black_;\n\n    _LIBCPP_INLINE_VISIBILITY\n    pointer __parent_unsafe() const { return static_cast<pointer>(__parent_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __set_parent(pointer __p) {\n        __parent_ = static_cast<__parent_pointer>(__p);\n    }\n\nprivate:\n  ~__tree_node_base() _LIBCPP_EQUAL_DELETE;\n  __tree_node_base(__tree_node_base const&) _LIBCPP_EQUAL_DELETE;\n  __tree_node_base& operator=(__tree_node_base const&) _LIBCPP_EQUAL_DELETE;\n};\n\ntemplate <class _Tp, class _VoidPtr>\nclass __tree_node\n    : public __tree_node_base<_VoidPtr>\n{\npublic:\n    typedef _Tp __node_value_type;\n\n    __node_value_type __value_;\n\nprivate:\n  ~__tree_node() _LIBCPP_EQUAL_DELETE;\n  __tree_node(__tree_node const&) _LIBCPP_EQUAL_DELETE;\n  __tree_node& operator=(__tree_node const&) _LIBCPP_EQUAL_DELETE;\n};\n\n\ntemplate <class _Allocator>\nclass __tree_node_destructor\n{\n    typedef _Allocator                                      allocator_type;\n    typedef allocator_traits<allocator_type>                __alloc_traits;\n\npublic:\n    typedef typename __alloc_traits::pointer                pointer;\nprivate:\n    typedef __tree_node_types<pointer> _NodeTypes;\n    allocator_type& __na_;\n\n    __tree_node_destructor& operator=(const __tree_node_destructor&);\n\npublic:\n    bool __value_constructed;\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __tree_node_destructor(allocator_type& __na, bool __val = false) _NOEXCEPT\n        : __na_(__na),\n          __value_constructed(__val)\n        {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void operator()(pointer __p) _NOEXCEPT\n    {\n        if (__value_constructed)\n            __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_));\n        if (__p)\n            __alloc_traits::deallocate(__na_, __p, 1);\n    }\n\n    template <class> friend class __map_node_destructor;\n};\n\n\ntemplate <class _Tp, class _NodePtr, class _DiffType>\nclass _LIBCPP_TEMPLATE_VIS __tree_iterator\n{\n    typedef __tree_node_types<_NodePtr>                     _NodeTypes;\n    typedef _NodePtr                                        __node_pointer;\n    typedef typename _NodeTypes::__node_base_pointer        __node_base_pointer;\n    typedef typename _NodeTypes::__end_node_pointer         __end_node_pointer;\n    typedef typename _NodeTypes::__iter_pointer             __iter_pointer;\n    typedef pointer_traits<__node_pointer> __pointer_traits;\n\n    __iter_pointer __ptr_;\n\npublic:\n    typedef bidirectional_iterator_tag                     iterator_category;\n    typedef _Tp                                            value_type;\n    typedef _DiffType                                      difference_type;\n    typedef value_type&                                    reference;\n    typedef typename _NodeTypes::__node_value_type_pointer pointer;\n\n    _LIBCPP_INLINE_VISIBILITY __tree_iterator() _NOEXCEPT\n#if _LIBCPP_STD_VER > 11\n    : __ptr_(nullptr)\n#endif\n    {}\n\n    _LIBCPP_INLINE_VISIBILITY reference operator*() const\n        {return __get_np()->__value_;}\n    _LIBCPP_INLINE_VISIBILITY pointer operator->() const\n        {return pointer_traits<pointer>::pointer_to(__get_np()->__value_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_iterator& operator++() {\n      __ptr_ = static_cast<__iter_pointer>(\n          __tree_next_iter<__end_node_pointer>(static_cast<__node_base_pointer>(__ptr_)));\n      return *this;\n    }\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_iterator operator++(int)\n        {__tree_iterator __t(*this); ++(*this); return __t;}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_iterator& operator--() {\n      __ptr_ = static_cast<__iter_pointer>(__tree_prev_iter<__node_base_pointer>(\n          static_cast<__end_node_pointer>(__ptr_)));\n      return *this;\n    }\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_iterator operator--(int)\n        {__tree_iterator __t(*this); --(*this); return __t;}\n\n    friend _LIBCPP_INLINE_VISIBILITY \n        bool operator==(const __tree_iterator& __x, const __tree_iterator& __y)\n        {return __x.__ptr_ == __y.__ptr_;}\n    friend _LIBCPP_INLINE_VISIBILITY\n        bool operator!=(const __tree_iterator& __x, const __tree_iterator& __y)\n        {return !(__x == __y);}\n\nprivate:\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __tree_iterator(__node_pointer __p) _NOEXCEPT : __ptr_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __tree_iterator(__end_node_pointer __p) _NOEXCEPT : __ptr_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY\n    __node_pointer __get_np() const { return static_cast<__node_pointer>(__ptr_); }\n    template <class, class, class> friend class __tree;\n    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_iterator;\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;\n    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS set;\n    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS multiset;\n};\n\ntemplate <class _Tp, class _NodePtr, class _DiffType>\nclass _LIBCPP_TEMPLATE_VIS __tree_const_iterator\n{\n    typedef __tree_node_types<_NodePtr>                     _NodeTypes;\n    typedef typename _NodeTypes::__node_pointer             __node_pointer;\n    typedef typename _NodeTypes::__node_base_pointer        __node_base_pointer;\n    typedef typename _NodeTypes::__end_node_pointer         __end_node_pointer;\n    typedef typename _NodeTypes::__iter_pointer             __iter_pointer;\n    typedef pointer_traits<__node_pointer> __pointer_traits;\n\n    __iter_pointer __ptr_;\n\npublic:\n    typedef bidirectional_iterator_tag                           iterator_category;\n    typedef _Tp                                                  value_type;\n    typedef _DiffType                                            difference_type;\n    typedef const value_type&                                    reference;\n    typedef typename _NodeTypes::__const_node_value_type_pointer pointer;\n\n    _LIBCPP_INLINE_VISIBILITY __tree_const_iterator() _NOEXCEPT\n#if _LIBCPP_STD_VER > 11\n    : __ptr_(nullptr)\n#endif\n    {}\n\nprivate:\n    typedef __tree_iterator<value_type, __node_pointer, difference_type>\n                                                           __non_const_iterator;\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_const_iterator(__non_const_iterator __p) _NOEXCEPT\n        : __ptr_(__p.__ptr_) {}\n\n    _LIBCPP_INLINE_VISIBILITY reference operator*() const\n        {return __get_np()->__value_;}\n    _LIBCPP_INLINE_VISIBILITY pointer operator->() const\n        {return pointer_traits<pointer>::pointer_to(__get_np()->__value_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_const_iterator& operator++() {\n      __ptr_ = static_cast<__iter_pointer>(\n          __tree_next_iter<__end_node_pointer>(static_cast<__node_base_pointer>(__ptr_)));\n      return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_const_iterator operator++(int)\n        {__tree_const_iterator __t(*this); ++(*this); return __t;}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_const_iterator& operator--() {\n      __ptr_ = static_cast<__iter_pointer>(__tree_prev_iter<__node_base_pointer>(\n          static_cast<__end_node_pointer>(__ptr_)));\n      return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __tree_const_iterator operator--(int)\n        {__tree_const_iterator __t(*this); --(*this); return __t;}\n\n    friend _LIBCPP_INLINE_VISIBILITY\n        bool operator==(const __tree_const_iterator& __x, const __tree_const_iterator& __y)\n        {return __x.__ptr_ == __y.__ptr_;}\n    friend _LIBCPP_INLINE_VISIBILITY\n        bool operator!=(const __tree_const_iterator& __x, const __tree_const_iterator& __y)\n        {return !(__x == __y);}\n\nprivate:\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __tree_const_iterator(__node_pointer __p) _NOEXCEPT\n        : __ptr_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __tree_const_iterator(__end_node_pointer __p) _NOEXCEPT\n        : __ptr_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY\n    __node_pointer __get_np() const { return static_cast<__node_pointer>(__ptr_); }\n\n    template <class, class, class> friend class __tree;\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;\n    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS set;\n    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS multiset;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_const_iterator;\n\n};\n\ntemplate <class _Tp, class _Compare, class _Allocator>\nclass __tree\n{\npublic:\n    typedef _Tp                                      value_type;\n    typedef _Compare                                 value_compare;\n    typedef _Allocator                               allocator_type;\n\nprivate:\n    typedef allocator_traits<allocator_type>         __alloc_traits;\n    typedef typename __make_tree_node_types<value_type,\n        typename __alloc_traits::void_pointer>::type\n                                                    _NodeTypes;\n    typedef typename _NodeTypes::key_type           key_type;\npublic:\n    typedef typename _NodeTypes::__node_value_type      __node_value_type;\n    typedef typename _NodeTypes::__container_value_type __container_value_type;\n\n    typedef typename __alloc_traits::pointer         pointer;\n    typedef typename __alloc_traits::const_pointer   const_pointer;\n    typedef typename __alloc_traits::size_type       size_type;\n    typedef typename __alloc_traits::difference_type difference_type;\n\npublic:\n    typedef typename _NodeTypes::__void_pointer        __void_pointer;\n\n    typedef typename _NodeTypes::__node_type           __node;\n    typedef typename _NodeTypes::__node_pointer        __node_pointer;\n\n    typedef typename _NodeTypes::__node_base_type      __node_base;\n    typedef typename _NodeTypes::__node_base_pointer   __node_base_pointer;\n\n    typedef typename _NodeTypes::__end_node_type       __end_node_t;\n    typedef typename _NodeTypes::__end_node_pointer    __end_node_ptr;\n\n    typedef typename _NodeTypes::__parent_pointer      __parent_pointer;\n    typedef typename _NodeTypes::__iter_pointer        __iter_pointer;\n\n    typedef typename __rebind_alloc_helper<__alloc_traits, __node>::type __node_allocator;\n    typedef allocator_traits<__node_allocator>         __node_traits;\n\nprivate:\n    // check for sane allocator pointer rebinding semantics. Rebinding the\n    // allocator for a new pointer type should be exactly the same as rebinding\n    // the pointer using 'pointer_traits'.\n    static_assert((is_same<__node_pointer, typename __node_traits::pointer>::value),\n                  \"Allocator does not rebind pointers in a sane manner.\");\n    typedef typename __rebind_alloc_helper<__node_traits, __node_base>::type\n        __node_base_allocator;\n    typedef allocator_traits<__node_base_allocator> __node_base_traits;\n    static_assert((is_same<__node_base_pointer, typename __node_base_traits::pointer>::value),\n                 \"Allocator does not rebind pointers in a sane manner.\");\n\nprivate:\n    __iter_pointer                                     __begin_node_;\n    __compressed_pair<__end_node_t, __node_allocator>  __pair1_;\n    __compressed_pair<size_type, value_compare>        __pair3_;\n\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __iter_pointer __end_node() _NOEXCEPT\n    {\n        return static_cast<__iter_pointer>(\n                pointer_traits<__end_node_ptr>::pointer_to(__pair1_.first())\n        );\n    }\n    _LIBCPP_INLINE_VISIBILITY\n    __iter_pointer __end_node() const _NOEXCEPT\n    {\n        return static_cast<__iter_pointer>(\n            pointer_traits<__end_node_ptr>::pointer_to(\n                const_cast<__end_node_t&>(__pair1_.first())\n            )\n        );\n    }\n    _LIBCPP_INLINE_VISIBILITY\n          __node_allocator& __node_alloc() _NOEXCEPT {return __pair1_.second();}\nprivate:\n    _LIBCPP_INLINE_VISIBILITY\n    const __node_allocator& __node_alloc() const _NOEXCEPT\n        {return __pair1_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n          __iter_pointer& __begin_node() _NOEXCEPT {return __begin_node_;}\n    _LIBCPP_INLINE_VISIBILITY\n    const __iter_pointer& __begin_node() const _NOEXCEPT {return __begin_node_;}\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type __alloc() const _NOEXCEPT\n        {return allocator_type(__node_alloc());}\nprivate:\n    _LIBCPP_INLINE_VISIBILITY\n          size_type& size() _NOEXCEPT {return __pair3_.first();}\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    const size_type& size() const _NOEXCEPT {return __pair3_.first();}\n    _LIBCPP_INLINE_VISIBILITY\n          value_compare& value_comp() _NOEXCEPT {return __pair3_.second();}\n    _LIBCPP_INLINE_VISIBILITY\n    const value_compare& value_comp() const _NOEXCEPT\n        {return __pair3_.second();}\npublic:\n\n    _LIBCPP_INLINE_VISIBILITY\n    __node_pointer __root() const _NOEXCEPT\n        {return static_cast<__node_pointer>(__end_node()->__left_);}\n\n    __node_base_pointer* __root_ptr() const _NOEXCEPT {\n        return _VSTD::addressof(__end_node()->__left_);\n    }\n\n    typedef __tree_iterator<value_type, __node_pointer, difference_type>             iterator;\n    typedef __tree_const_iterator<value_type, __node_pointer, difference_type> const_iterator;\n\n    explicit __tree(const value_compare& __comp)\n        _NOEXCEPT_(\n            is_nothrow_default_constructible<__node_allocator>::value &&\n            is_nothrow_copy_constructible<value_compare>::value);\n    explicit __tree(const allocator_type& __a);\n    __tree(const value_compare& __comp, const allocator_type& __a);\n    __tree(const __tree& __t);\n    __tree& operator=(const __tree& __t);\n    template <class _InputIterator>\n        void __assign_unique(_InputIterator __first, _InputIterator __last);\n    template <class _InputIterator>\n        void __assign_multi(_InputIterator __first, _InputIterator __last);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    __tree(__tree&& __t)\n        _NOEXCEPT_(\n            is_nothrow_move_constructible<__node_allocator>::value &&\n            is_nothrow_move_constructible<value_compare>::value);\n    __tree(__tree&& __t, const allocator_type& __a);\n    __tree& operator=(__tree&& __t)\n        _NOEXCEPT_(\n            __node_traits::propagate_on_container_move_assignment::value &&\n            is_nothrow_move_assignable<value_compare>::value &&\n            is_nothrow_move_assignable<__node_allocator>::value);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    ~__tree();\n\n    _LIBCPP_INLINE_VISIBILITY\n          iterator begin()  _NOEXCEPT {return       iterator(__begin_node());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin() const _NOEXCEPT {return const_iterator(__begin_node());}\n    _LIBCPP_INLINE_VISIBILITY\n          iterator end() _NOEXCEPT {return       iterator(__end_node());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end() const _NOEXCEPT {return const_iterator(__end_node());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_size() const _NOEXCEPT\n        {return std::min<size_type>(\n                __node_traits::max_size(__node_alloc()),\n                numeric_limits<difference_type >::max());}\n\n    void clear() _NOEXCEPT;\n\n    void swap(__tree& __t)\n#if _LIBCPP_STD_VER <= 11\n        _NOEXCEPT_(\n            __is_nothrow_swappable<value_compare>::value\n            && (!__node_traits::propagate_on_container_swap::value ||\n                 __is_nothrow_swappable<__node_allocator>::value)\n            );\n#else\n        _NOEXCEPT_(__is_nothrow_swappable<value_compare>::value);\n#endif\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class _Key, class ..._Args>\n    pair<iterator, bool>\n    __emplace_unique_key_args(_Key const&, _Args&&... __args);\n    template <class _Key, class ..._Args>\n    iterator\n    __emplace_hint_unique_key_args(const_iterator, _Key const&, _Args&&...);\n\n    template <class... _Args>\n    pair<iterator, bool> __emplace_unique_impl(_Args&&... __args);\n\n    template <class... _Args>\n    iterator __emplace_hint_unique_impl(const_iterator __p, _Args&&... __args);\n\n    template <class... _Args>\n    iterator __emplace_multi(_Args&&... __args);\n\n    template <class... _Args>\n    iterator __emplace_hint_multi(const_iterator __p, _Args&&... __args);\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __emplace_unique(_Pp&& __x) {\n        return __emplace_unique_extract_key(_VSTD::forward<_Pp>(__x),\n                                            __can_extract_key<_Pp, key_type>());\n    }\n\n    template <class _First, class _Second>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<\n        __can_extract_map_key<_First, key_type, __container_value_type>::value,\n        pair<iterator, bool>\n    >::type __emplace_unique(_First&& __f, _Second&& __s) {\n        return __emplace_unique_key_args(__f, _VSTD::forward<_First>(__f),\n                                              _VSTD::forward<_Second>(__s));\n    }\n\n    template <class... _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __emplace_unique(_Args&&... __args) {\n        return __emplace_unique_impl(_VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n    __emplace_unique_extract_key(_Pp&& __x, __extract_key_fail_tag) {\n      return __emplace_unique_impl(_VSTD::forward<_Pp>(__x));\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n    __emplace_unique_extract_key(_Pp&& __x, __extract_key_self_tag) {\n      return __emplace_unique_key_args(__x, _VSTD::forward<_Pp>(__x));\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n    __emplace_unique_extract_key(_Pp&& __x, __extract_key_first_tag) {\n      return __emplace_unique_key_args(__x.first, _VSTD::forward<_Pp>(__x));\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __emplace_hint_unique(const_iterator __p, _Pp&& __x) {\n        return __emplace_hint_unique_extract_key(__p, _VSTD::forward<_Pp>(__x),\n                                            __can_extract_key<_Pp, key_type>());\n    }\n\n    template <class _First, class _Second>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<\n        __can_extract_map_key<_First, key_type, __container_value_type>::value,\n        iterator\n    >::type __emplace_hint_unique(const_iterator __p, _First&& __f, _Second&& __s) {\n        return __emplace_hint_unique_key_args(__p, __f,\n                                              _VSTD::forward<_First>(__f),\n                                              _VSTD::forward<_Second>(__s));\n    }\n\n    template <class... _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __emplace_hint_unique(const_iterator __p, _Args&&... __args) {\n        return __emplace_hint_unique_impl(__p, _VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator\n    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_fail_tag) {\n      return __emplace_hint_unique_impl(__p, _VSTD::forward<_Pp>(__x));\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator\n    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_self_tag) {\n      return __emplace_hint_unique_key_args(__p, __x, _VSTD::forward<_Pp>(__x));\n    }\n\n    template <class _Pp>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator\n    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_first_tag) {\n      return __emplace_hint_unique_key_args(__p, __x.first, _VSTD::forward<_Pp>(__x));\n    }\n\n#else\n    template <class _Key, class _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __emplace_unique_key_args(_Key const&, _Args& __args);\n    template <class _Key, class _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __emplace_hint_unique_key_args(const_iterator, _Key const&, _Args&);\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __insert_unique(const __container_value_type& __v) {\n        return __emplace_unique_key_args(_NodeTypes::__get_key(__v), __v);\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_unique(const_iterator __p, const __container_value_type& __v) {\n        return __emplace_hint_unique_key_args(__p, _NodeTypes::__get_key(__v), __v);\n    }\n\n#ifdef _LIBCPP_CXX03_LANG\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_multi(const __container_value_type& __v);\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_multi(const_iterator __p, const __container_value_type& __v);\n#else\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __insert_unique(__container_value_type&& __v) {\n        return __emplace_unique_key_args(_NodeTypes::__get_key(__v), _VSTD::move(__v));\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_unique(const_iterator __p, __container_value_type&& __v) {\n        return __emplace_hint_unique_key_args(__p, _NodeTypes::__get_key(__v), _VSTD::move(__v));\n    }\n\n    template <class _Vp, class = typename enable_if<\n            !is_same<typename __unconstref<_Vp>::type,\n                     __container_value_type\n            >::value\n        >::type>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> __insert_unique(_Vp&& __v) {\n        return __emplace_unique(_VSTD::forward<_Vp>(__v));\n    }\n\n    template <class _Vp, class = typename enable_if<\n            !is_same<typename __unconstref<_Vp>::type,\n                     __container_value_type\n            >::value\n        >::type>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_unique(const_iterator __p, _Vp&& __v) {\n        return __emplace_hint_unique(__p, _VSTD::forward<_Vp>(__v));\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_multi(__container_value_type&& __v) {\n        return __emplace_multi(_VSTD::move(__v));\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_multi(const_iterator __p, __container_value_type&& __v) {\n        return __emplace_hint_multi(__p, _VSTD::move(__v));\n    }\n\n    template <class _Vp>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_multi(_Vp&& __v) {\n        return __emplace_multi(_VSTD::forward<_Vp>(__v));\n    }\n\n    template <class _Vp>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator __insert_multi(const_iterator __p, _Vp&& __v) {\n        return __emplace_hint_multi(__p, _VSTD::forward<_Vp>(__v));\n    }\n\n#endif // !_LIBCPP_CXX03_LANG\n\n    pair<iterator, bool> __node_insert_unique(__node_pointer __nd);\n    iterator             __node_insert_unique(const_iterator __p,\n                                              __node_pointer __nd);\n\n    iterator __node_insert_multi(__node_pointer __nd);\n    iterator __node_insert_multi(const_iterator __p, __node_pointer __nd);\n\n    iterator erase(const_iterator __p);\n    iterator erase(const_iterator __f, const_iterator __l);\n    template <class _Key>\n        size_type __erase_unique(const _Key& __k);\n    template <class _Key>\n        size_type __erase_multi(const _Key& __k);\n\n    void __insert_node_at(__parent_pointer     __parent,\n                          __node_base_pointer& __child,\n                          __node_base_pointer __new_node);\n\n    template <class _Key>\n        iterator find(const _Key& __v);\n    template <class _Key>\n        const_iterator find(const _Key& __v) const;\n\n    template <class _Key>\n        size_type __count_unique(const _Key& __k) const;\n    template <class _Key>\n        size_type __count_multi(const _Key& __k) const;\n\n    template <class _Key>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator lower_bound(const _Key& __v)\n            {return __lower_bound(__v, __root(), __end_node());}\n    template <class _Key>\n        iterator __lower_bound(const _Key& __v,\n                               __node_pointer __root,\n                               __iter_pointer __result);\n    template <class _Key>\n        _LIBCPP_INLINE_VISIBILITY\n        const_iterator lower_bound(const _Key& __v) const\n            {return __lower_bound(__v, __root(), __end_node());}\n    template <class _Key>\n        const_iterator __lower_bound(const _Key& __v,\n                                     __node_pointer __root,\n                                     __iter_pointer __result) const;\n    template <class _Key>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator upper_bound(const _Key& __v)\n            {return __upper_bound(__v, __root(), __end_node());}\n    template <class _Key>\n        iterator __upper_bound(const _Key& __v,\n                               __node_pointer __root,\n                               __iter_pointer __result);\n    template <class _Key>\n        _LIBCPP_INLINE_VISIBILITY\n        const_iterator upper_bound(const _Key& __v) const\n            {return __upper_bound(__v, __root(), __end_node());}\n    template <class _Key>\n        const_iterator __upper_bound(const _Key& __v,\n                                     __node_pointer __root,\n                                     __iter_pointer __result) const;\n    template <class _Key>\n        pair<iterator, iterator>\n        __equal_range_unique(const _Key& __k);\n    template <class _Key>\n        pair<const_iterator, const_iterator>\n        __equal_range_unique(const _Key& __k) const;\n\n    template <class _Key>\n        pair<iterator, iterator>\n        __equal_range_multi(const _Key& __k);\n    template <class _Key>\n        pair<const_iterator, const_iterator>\n        __equal_range_multi(const _Key& __k) const;\n\n    typedef __tree_node_destructor<__node_allocator> _Dp;\n    typedef unique_ptr<__node, _Dp> __node_holder;\n\n    __node_holder remove(const_iterator __p) _NOEXCEPT;\nprivate:\n    __node_base_pointer&\n        __find_leaf_low(__parent_pointer& __parent, const key_type& __v);\n    __node_base_pointer&\n        __find_leaf_high(__parent_pointer& __parent, const key_type& __v);\n    __node_base_pointer&\n        __find_leaf(const_iterator __hint,\n                    __parent_pointer& __parent, const key_type& __v);\n    // FIXME: Make this function const qualified. Unfortunetly doing so\n    // breaks existing code which uses non-const callable comparators.\n    template <class _Key>\n    __node_base_pointer&\n        __find_equal(__parent_pointer& __parent, const _Key& __v);\n    template <class _Key>\n    _LIBCPP_INLINE_VISIBILITY __node_base_pointer&\n    __find_equal(__parent_pointer& __parent, const _Key& __v) const {\n      return const_cast<__tree*>(this)->__find_equal(__parent, __v);\n    }\n    template <class _Key>\n    __node_base_pointer&\n        __find_equal(const_iterator __hint, __parent_pointer& __parent,\n                     __node_base_pointer& __dummy,\n                     const _Key& __v);\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class ..._Args>\n    __node_holder __construct_node(_Args&& ...__args);\n#else\n    __node_holder __construct_node(const __container_value_type& __v);\n#endif\n\n    void destroy(__node_pointer __nd) _NOEXCEPT;\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const __tree& __t)\n        {__copy_assign_alloc(__t, integral_constant<bool,\n             __node_traits::propagate_on_container_copy_assignment::value>());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const __tree& __t, true_type)\n        {\n        if (__node_alloc() != __t.__node_alloc())\n        \tclear();\n        __node_alloc() = __t.__node_alloc();\n        }\n    _LIBCPP_INLINE_VISIBILITY\n    void __copy_assign_alloc(const __tree&, false_type) {}\n\n    void __move_assign(__tree& __t, false_type);\n    void __move_assign(__tree& __t, true_type)\n        _NOEXCEPT_(is_nothrow_move_assignable<value_compare>::value &&\n                   is_nothrow_move_assignable<__node_allocator>::value);\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__tree& __t)\n        _NOEXCEPT_(\n            !__node_traits::propagate_on_container_move_assignment::value ||\n            is_nothrow_move_assignable<__node_allocator>::value)\n        {__move_assign_alloc(__t, integral_constant<bool,\n             __node_traits::propagate_on_container_move_assignment::value>());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__tree& __t, true_type)\n        _NOEXCEPT_(is_nothrow_move_assignable<__node_allocator>::value)\n        {__node_alloc() = _VSTD::move(__t.__node_alloc());}\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__tree&, false_type) _NOEXCEPT {}\n\n    __node_pointer __detach();\n    static __node_pointer __detach(__node_pointer);\n\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;\n};\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>::__tree(const value_compare& __comp)\n        _NOEXCEPT_(\n            is_nothrow_default_constructible<__node_allocator>::value &&\n            is_nothrow_copy_constructible<value_compare>::value)\n    : __pair3_(0, __comp)\n{\n    __begin_node() = __end_node();\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>::__tree(const allocator_type& __a)\n    : __begin_node_(__iter_pointer()),\n      __pair1_(__node_allocator(__a)),\n      __pair3_(0)\n{\n    __begin_node() = __end_node();\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>::__tree(const value_compare& __comp,\n                                           const allocator_type& __a)\n    : __begin_node_(__iter_pointer()),\n      __pair1_(__node_allocator(__a)),\n      __pair3_(0, __comp)\n{\n    __begin_node() = __end_node();\n}\n\n// Precondition:  size() != 0\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_pointer\n__tree<_Tp, _Compare, _Allocator>::__detach()\n{\n    __node_pointer __cache = static_cast<__node_pointer>(__begin_node());\n    __begin_node() = __end_node();\n    __end_node()->__left_->__parent_ = nullptr;\n    __end_node()->__left_ = nullptr;\n    size() = 0;\n    // __cache->__left_ == nullptr\n    if (__cache->__right_ != nullptr)\n        __cache = static_cast<__node_pointer>(__cache->__right_);\n    // __cache->__left_ == nullptr\n    // __cache->__right_ == nullptr\n    return __cache;\n}\n\n// Precondition:  __cache != nullptr\n//    __cache->left_ == nullptr\n//    __cache->right_ == nullptr\n//    This is no longer a red-black tree\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_pointer\n__tree<_Tp, _Compare, _Allocator>::__detach(__node_pointer __cache)\n{\n    if (__cache->__parent_ == nullptr)\n        return nullptr;\n    if (__tree_is_left_child(static_cast<__node_base_pointer>(__cache)))\n    {\n        __cache->__parent_->__left_ = nullptr;\n        __cache = static_cast<__node_pointer>(__cache->__parent_);\n        if (__cache->__right_ == nullptr)\n            return __cache;\n        return static_cast<__node_pointer>(__tree_leaf(__cache->__right_));\n    }\n    // __cache is right child\n    __cache->__parent_unsafe()->__right_ = nullptr;\n    __cache = static_cast<__node_pointer>(__cache->__parent_);\n    if (__cache->__left_ == nullptr)\n        return __cache;\n    return static_cast<__node_pointer>(__tree_leaf(__cache->__left_));\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>&\n__tree<_Tp, _Compare, _Allocator>::operator=(const __tree& __t)\n{\n    if (this != &__t)\n    {\n        value_comp() = __t.value_comp();\n        __copy_assign_alloc(__t);\n        __assign_multi(__t.begin(), __t.end());\n    }\n    return *this;\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _InputIterator>\nvoid\n__tree<_Tp, _Compare, _Allocator>::__assign_unique(_InputIterator __first, _InputIterator __last)\n{\n    typedef iterator_traits<_InputIterator> _ITraits;\n    typedef typename _ITraits::value_type _ItValueType;\n    static_assert((is_same<_ItValueType, __container_value_type>::value),\n                  \"__assign_unique may only be called with the containers value type\");\n\n    if (size() != 0)\n    {\n        __node_pointer __cache = __detach();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            for (; __cache != nullptr && __first != __last; ++__first)\n            {\n                __cache->__value_ = *__first;\n                __node_pointer __next = __detach(__cache);\n                __node_insert_unique(__cache);\n                __cache = __next;\n            }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n            while (__cache->__parent_ != nullptr)\n                __cache = static_cast<__node_pointer>(__cache->__parent_);\n            destroy(__cache);\n            throw;\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        if (__cache != nullptr)\n        {\n            while (__cache->__parent_ != nullptr)\n                __cache = static_cast<__node_pointer>(__cache->__parent_);\n            destroy(__cache);\n        }\n    }\n    for (; __first != __last; ++__first)\n        __insert_unique(*__first);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _InputIterator>\nvoid\n__tree<_Tp, _Compare, _Allocator>::__assign_multi(_InputIterator __first, _InputIterator __last)\n{\n    typedef iterator_traits<_InputIterator> _ITraits;\n    typedef typename _ITraits::value_type _ItValueType;\n    static_assert((is_same<_ItValueType, __container_value_type>::value ||\n                  is_same<_ItValueType, __node_value_type>::value),\n                  \"__assign_multi may only be called with the containers value type\"\n                  \" or the nodes value type\");\n    if (size() != 0)\n    {\n        __node_pointer __cache = __detach();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            for (; __cache != nullptr && __first != __last; ++__first)\n            {\n                __cache->__value_ = *__first;\n                __node_pointer __next = __detach(__cache);\n                __node_insert_multi(__cache);\n                __cache = __next;\n            }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n            while (__cache->__parent_ != nullptr)\n                __cache = static_cast<__node_pointer>(__cache->__parent_);\n            destroy(__cache);\n            throw;\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        if (__cache != nullptr)\n        {\n            while (__cache->__parent_ != nullptr)\n                __cache = static_cast<__node_pointer>(__cache->__parent_);\n            destroy(__cache);\n        }\n    }\n    for (; __first != __last; ++__first)\n        __insert_multi(_NodeTypes::__get_value(*__first));\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>::__tree(const __tree& __t)\n    : __begin_node_(__iter_pointer()),\n      __pair1_(__node_traits::select_on_container_copy_construction(__t.__node_alloc())),\n      __pair3_(0, __t.value_comp())\n{\n    __begin_node() = __end_node();\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>::__tree(__tree&& __t)\n    _NOEXCEPT_(\n        is_nothrow_move_constructible<__node_allocator>::value &&\n        is_nothrow_move_constructible<value_compare>::value)\n    : __begin_node_(_VSTD::move(__t.__begin_node_)),\n      __pair1_(_VSTD::move(__t.__pair1_)),\n      __pair3_(_VSTD::move(__t.__pair3_))\n{\n    if (size() == 0)\n        __begin_node() = __end_node();\n    else\n    {\n        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());\n        __t.__begin_node() = __t.__end_node();\n        __t.__end_node()->__left_ = nullptr;\n        __t.size() = 0;\n    }\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>::__tree(__tree&& __t, const allocator_type& __a)\n    : __pair1_(__node_allocator(__a)),\n      __pair3_(0, _VSTD::move(__t.value_comp()))\n{\n    if (__a == __t.__alloc())\n    {\n        if (__t.size() == 0)\n            __begin_node() = __end_node();\n        else\n        {\n            __begin_node() = __t.__begin_node();\n            __end_node()->__left_ = __t.__end_node()->__left_;\n            __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());\n            size() = __t.size();\n            __t.__begin_node() = __t.__end_node();\n            __t.__end_node()->__left_ = nullptr;\n            __t.size() = 0;\n        }\n    }\n    else\n    {\n        __begin_node() = __end_node();\n    }\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\nvoid\n__tree<_Tp, _Compare, _Allocator>::__move_assign(__tree& __t, true_type)\n    _NOEXCEPT_(is_nothrow_move_assignable<value_compare>::value &&\n               is_nothrow_move_assignable<__node_allocator>::value)\n{\n    destroy(static_cast<__node_pointer>(__end_node()->__left_));\n    __begin_node_ = __t.__begin_node_;\n    __pair1_.first() = __t.__pair1_.first();\n    __move_assign_alloc(__t);\n    __pair3_ = _VSTD::move(__t.__pair3_);\n    if (size() == 0)\n        __begin_node() = __end_node();\n    else\n    {\n        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());\n        __t.__begin_node() = __t.__end_node();\n        __t.__end_node()->__left_ = nullptr;\n        __t.size() = 0;\n    }\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\nvoid\n__tree<_Tp, _Compare, _Allocator>::__move_assign(__tree& __t, false_type)\n{\n    if (__node_alloc() == __t.__node_alloc())\n        __move_assign(__t, true_type());\n    else\n    {\n        value_comp() = _VSTD::move(__t.value_comp());\n        const_iterator __e = end();\n        if (size() != 0)\n        {\n            __node_pointer __cache = __detach();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n            try\n            {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n                while (__cache != nullptr && __t.size() != 0)\n                {\n                    __cache->__value_ = _VSTD::move(__t.remove(__t.begin())->__value_);\n                    __node_pointer __next = __detach(__cache);\n                    __node_insert_multi(__cache);\n                    __cache = __next;\n                }\n#ifndef _LIBCPP_NO_EXCEPTIONS\n            }\n            catch (...)\n            {\n                while (__cache->__parent_ != nullptr)\n                    __cache = static_cast<__node_pointer>(__cache->__parent_);\n                destroy(__cache);\n                throw;\n            }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            if (__cache != nullptr)\n            {\n                while (__cache->__parent_ != nullptr)\n                    __cache = static_cast<__node_pointer>(__cache->__parent_);\n                destroy(__cache);\n            }\n        }\n        while (__t.size() != 0)\n            __insert_multi(__e, _NodeTypes::__move(__t.remove(__t.begin())->__value_));\n    }\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>&\n__tree<_Tp, _Compare, _Allocator>::operator=(__tree&& __t)\n    _NOEXCEPT_(\n        __node_traits::propagate_on_container_move_assignment::value &&\n        is_nothrow_move_assignable<value_compare>::value &&\n        is_nothrow_move_assignable<__node_allocator>::value)\n        \n{\n    __move_assign(__t, integral_constant<bool,\n                  __node_traits::propagate_on_container_move_assignment::value>());\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Compare, class _Allocator>\n__tree<_Tp, _Compare, _Allocator>::~__tree()\n{\n    static_assert((is_copy_constructible<value_compare>::value),\n                 \"Comparator must be copy-constructible.\");\n    destroy(__root());\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\nvoid\n__tree<_Tp, _Compare, _Allocator>::destroy(__node_pointer __nd) _NOEXCEPT\n{\n    if (__nd != nullptr)\n    {\n        destroy(static_cast<__node_pointer>(__nd->__left_));\n        destroy(static_cast<__node_pointer>(__nd->__right_));\n        __node_allocator& __na = __node_alloc();\n        __node_traits::destroy(__na, _NodeTypes::__get_ptr(__nd->__value_));\n        __node_traits::deallocate(__na, __nd, 1);\n    }\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\nvoid\n__tree<_Tp, _Compare, _Allocator>::swap(__tree& __t)\n#if _LIBCPP_STD_VER <= 11\n        _NOEXCEPT_(\n            __is_nothrow_swappable<value_compare>::value\n            && (!__node_traits::propagate_on_container_swap::value ||\n                 __is_nothrow_swappable<__node_allocator>::value)\n            )\n#else\n        _NOEXCEPT_(__is_nothrow_swappable<value_compare>::value)\n#endif\n{\n    using _VSTD::swap;\n    swap(__begin_node_, __t.__begin_node_);\n    swap(__pair1_.first(), __t.__pair1_.first());\n    __swap_allocator(__node_alloc(), __t.__node_alloc());\n    __pair3_.swap(__t.__pair3_);\n    if (size() == 0)\n        __begin_node() = __end_node();\n    else\n        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());\n    if (__t.size() == 0)\n        __t.__begin_node() = __t.__end_node();\n    else\n        __t.__end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__t.__end_node());\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\nvoid\n__tree<_Tp, _Compare, _Allocator>::clear() _NOEXCEPT\n{\n    destroy(__root());\n    size() = 0;\n    __begin_node() = __end_node();\n    __end_node()->__left_ = nullptr;\n}\n\n// Find lower_bound place to insert\n// Set __parent to parent of null leaf\n// Return reference to null leaf\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&\n__tree<_Tp, _Compare, _Allocator>::__find_leaf_low(__parent_pointer& __parent,\n                                                   const key_type& __v)\n{\n    __node_pointer __nd = __root();\n    if (__nd != nullptr)\n    {\n        while (true)\n        {\n            if (value_comp()(__nd->__value_, __v))\n            {\n                if (__nd->__right_ != nullptr)\n                    __nd = static_cast<__node_pointer>(__nd->__right_);\n                else\n                {\n                    __parent = static_cast<__parent_pointer>(__nd);\n                    return __nd->__right_;\n                }\n            }\n            else\n            {\n                if (__nd->__left_ != nullptr)\n                    __nd = static_cast<__node_pointer>(__nd->__left_);\n                else\n                {\n                    __parent = static_cast<__parent_pointer>(__nd);\n                    return __parent->__left_;\n                }\n            }\n        }\n    }\n    __parent = static_cast<__parent_pointer>(__end_node());\n    return __parent->__left_;\n}\n\n// Find upper_bound place to insert\n// Set __parent to parent of null leaf\n// Return reference to null leaf\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&\n__tree<_Tp, _Compare, _Allocator>::__find_leaf_high(__parent_pointer& __parent,\n                                                    const key_type& __v)\n{\n    __node_pointer __nd = __root();\n    if (__nd != nullptr)\n    {\n        while (true)\n        {\n            if (value_comp()(__v, __nd->__value_))\n            {\n                if (__nd->__left_ != nullptr)\n                    __nd = static_cast<__node_pointer>(__nd->__left_);\n                else\n                {\n                    __parent = static_cast<__parent_pointer>(__nd);\n                    return __parent->__left_;\n                }\n            }\n            else\n            {\n                if (__nd->__right_ != nullptr)\n                    __nd = static_cast<__node_pointer>(__nd->__right_);\n                else\n                {\n                    __parent = static_cast<__parent_pointer>(__nd);\n                    return __nd->__right_;\n                }\n            }\n        }\n    }\n    __parent = static_cast<__parent_pointer>(__end_node());\n    return __parent->__left_;\n}\n\n// Find leaf place to insert closest to __hint\n// First check prior to __hint.\n// Next check after __hint.\n// Next do O(log N) search.\n// Set __parent to parent of null leaf\n// Return reference to null leaf\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&\n__tree<_Tp, _Compare, _Allocator>::__find_leaf(const_iterator __hint,\n                                               __parent_pointer& __parent,\n                                               const key_type& __v)\n{\n    if (__hint == end() || !value_comp()(*__hint, __v))  // check before\n    {\n        // __v <= *__hint\n        const_iterator __prior = __hint;\n        if (__prior == begin() || !value_comp()(__v, *--__prior))\n        {\n            // *prev(__hint) <= __v <= *__hint\n            if (__hint.__ptr_->__left_ == nullptr)\n            {\n                __parent = static_cast<__parent_pointer>(__hint.__ptr_);\n                return __parent->__left_;\n            }\n            else\n            {\n                __parent = static_cast<__parent_pointer>(__prior.__ptr_);\n                return static_cast<__node_base_pointer>(__prior.__ptr_)->__right_;\n            }\n        }\n        // __v < *prev(__hint)\n        return __find_leaf_high(__parent, __v);\n    }\n    // else __v > *__hint\n    return __find_leaf_low(__parent, __v);\n}\n\n// Find place to insert if __v doesn't exist\n// Set __parent to parent of null leaf\n// Return reference to null leaf\n// If __v exists, set parent to node of __v and return reference to node of __v\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&\n__tree<_Tp, _Compare, _Allocator>::__find_equal(__parent_pointer& __parent,\n                                                const _Key& __v)\n{\n    __node_pointer __nd = __root();\n    __node_base_pointer* __nd_ptr = __root_ptr();\n    if (__nd != nullptr)\n    {\n        while (true)\n        {\n            if (value_comp()(__v, __nd->__value_))\n            {\n                if (__nd->__left_ != nullptr) {\n                    __nd_ptr = _VSTD::addressof(__nd->__left_);\n                    __nd = static_cast<__node_pointer>(__nd->__left_);\n                } else {\n                    __parent = static_cast<__parent_pointer>(__nd);\n                    return __parent->__left_;\n                }\n            }\n            else if (value_comp()(__nd->__value_, __v))\n            {\n                if (__nd->__right_ != nullptr) {\n                    __nd_ptr = _VSTD::addressof(__nd->__right_);\n                    __nd = static_cast<__node_pointer>(__nd->__right_);\n                } else {\n                    __parent = static_cast<__parent_pointer>(__nd);\n                    return __nd->__right_;\n                }\n            }\n            else\n            {\n                __parent = static_cast<__parent_pointer>(__nd);\n                return *__nd_ptr;\n            }\n        }\n    }\n    __parent = static_cast<__parent_pointer>(__end_node());\n    return __parent->__left_;\n}\n\n// Find place to insert if __v doesn't exist\n// First check prior to __hint.\n// Next check after __hint.\n// Next do O(log N) search.\n// Set __parent to parent of null leaf\n// Return reference to null leaf\n// If __v exists, set parent to node of __v and return reference to node of __v\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&\n__tree<_Tp, _Compare, _Allocator>::__find_equal(const_iterator __hint,\n                                                __parent_pointer& __parent,\n                                                __node_base_pointer& __dummy,\n                                                const _Key& __v)\n{\n    if (__hint == end() || value_comp()(__v, *__hint))  // check before\n    {\n        // __v < *__hint\n        const_iterator __prior = __hint;\n        if (__prior == begin() || value_comp()(*--__prior, __v))\n        {\n            // *prev(__hint) < __v < *__hint\n            if (__hint.__ptr_->__left_ == nullptr)\n            {\n                __parent = static_cast<__parent_pointer>(__hint.__ptr_);\n                return __parent->__left_;\n            }\n            else\n            {\n                __parent = static_cast<__parent_pointer>(__prior.__ptr_);\n                return static_cast<__node_base_pointer>(__prior.__ptr_)->__right_;\n            }\n        }\n        // __v <= *prev(__hint)\n        return __find_equal(__parent, __v);\n    }\n    else if (value_comp()(*__hint, __v))  // check after\n    {\n        // *__hint < __v\n        const_iterator __next = _VSTD::next(__hint);\n        if (__next == end() || value_comp()(__v, *__next))\n        {\n            // *__hint < __v < *_VSTD::next(__hint)\n            if (__hint.__get_np()->__right_ == nullptr)\n            {\n                __parent = static_cast<__parent_pointer>(__hint.__ptr_);\n                return static_cast<__node_base_pointer>(__hint.__ptr_)->__right_;\n            }\n            else\n            {\n                __parent = static_cast<__parent_pointer>(__next.__ptr_);\n                return __parent->__left_;\n            }\n        }\n        // *next(__hint) <= __v\n        return __find_equal(__parent, __v);\n    }\n    // else __v == *__hint\n    __parent = static_cast<__parent_pointer>(__hint.__ptr_);\n    __dummy = static_cast<__node_base_pointer>(__hint.__ptr_);\n    return __dummy;\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\nvoid\n__tree<_Tp, _Compare, _Allocator>::__insert_node_at(__parent_pointer     __parent,\n                                                    __node_base_pointer& __child,\n                                                    __node_base_pointer  __new_node)\n{\n    __new_node->__left_   = nullptr;\n    __new_node->__right_  = nullptr;\n    __new_node->__parent_ = __parent;\n    // __new_node->__is_black_ is initialized in __tree_balance_after_insert\n    __child = __new_node;\n    if (__begin_node()->__left_ != nullptr)\n        __begin_node() = static_cast<__iter_pointer>(__begin_node()->__left_);\n    __tree_balance_after_insert(__end_node()->__left_, __child);\n    ++size();\n}\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key, class... _Args>\npair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>\n__tree<_Tp, _Compare, _Allocator>::__emplace_unique_key_args(_Key const& __k, _Args&&... __args)\n#else\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key, class _Args>\npair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>\n__tree<_Tp, _Compare, _Allocator>::__emplace_unique_key_args(_Key const& __k, _Args& __args)\n#endif\n{\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_equal(__parent, __k);\n    __node_pointer __r = static_cast<__node_pointer>(__child);\n    bool __inserted = false;\n    if (__child == nullptr)\n    {\n#ifndef _LIBCPP_CXX03_LANG\n        __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n#else\n        __node_holder __h = __construct_node(__args);\n#endif\n        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n        __r = __h.release();\n        __inserted = true;\n    }\n    return pair<iterator, bool>(iterator(__r), __inserted);\n}\n\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key, class... _Args>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_key_args(\n    const_iterator __p, _Key const& __k, _Args&&... __args)\n#else\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key, class _Args>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_key_args(\n    const_iterator __p, _Key const& __k, _Args& __args)\n#endif\n{\n    __parent_pointer __parent;\n    __node_base_pointer __dummy;\n    __node_base_pointer& __child = __find_equal(__p, __parent, __dummy, __k);\n    __node_pointer __r = static_cast<__node_pointer>(__child);\n    if (__child == nullptr)\n    {\n#ifndef _LIBCPP_CXX03_LANG\n        __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n#else\n        __node_holder __h = __construct_node(__args);\n#endif\n        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n        __r = __h.release();\n    }\n    return iterator(__r);\n}\n\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class ..._Args>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_holder\n__tree<_Tp, _Compare, _Allocator>::__construct_node(_Args&& ...__args)\n{\n    static_assert(!__is_tree_value_type<_Args...>::value,\n                  \"Cannot construct from __value_type\");\n    __node_allocator& __na = __node_alloc();\n    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));\n    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), _VSTD::forward<_Args>(__args)...);\n    __h.get_deleter().__value_constructed = true;\n    return __h;\n}\n\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class... _Args>\npair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>\n__tree<_Tp, _Compare, _Allocator>::__emplace_unique_impl(_Args&&... __args)\n{\n    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_equal(__parent, __h->__value_);\n    __node_pointer __r = static_cast<__node_pointer>(__child);\n    bool __inserted = false;\n    if (__child == nullptr)\n    {\n        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n        __r = __h.release();\n        __inserted = true;\n    }\n    return pair<iterator, bool>(iterator(__r), __inserted);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class... _Args>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_impl(const_iterator __p, _Args&&... __args)\n{\n    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n    __parent_pointer __parent;\n    __node_base_pointer __dummy;\n    __node_base_pointer& __child = __find_equal(__p, __parent, __dummy, __h->__value_);\n    __node_pointer __r = static_cast<__node_pointer>(__child);\n    if (__child == nullptr)\n    {\n        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n        __r = __h.release();\n    }\n    return iterator(__r);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class... _Args>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__emplace_multi(_Args&&... __args)\n{\n    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__h->__value_));\n    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n    return iterator(static_cast<__node_pointer>(__h.release()));\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class... _Args>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__emplace_hint_multi(const_iterator __p,\n                                                        _Args&&... __args)\n{\n    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__h->__value_));\n    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n    return iterator(static_cast<__node_pointer>(__h.release()));\n}\n\n\n#else  // _LIBCPP_CXX03_LANG\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_holder\n__tree<_Tp, _Compare, _Allocator>::__construct_node(const __container_value_type& __v)\n{\n    __node_allocator& __na = __node_alloc();\n    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));\n    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), __v);\n    __h.get_deleter().__value_constructed = true;\n    return _LIBCPP_EXPLICIT_MOVE(__h);  // explicitly moved for C++03\n}\n\n#endif  // _LIBCPP_CXX03_LANG\n\n#ifdef _LIBCPP_CXX03_LANG\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__insert_multi(const __container_value_type& __v)\n{\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__v));\n    __node_holder __h = __construct_node(__v);\n    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n    return iterator(__h.release());\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__insert_multi(const_iterator __p, const __container_value_type& __v)\n{\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__v));\n    __node_holder __h = __construct_node(__v);\n    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n    return iterator(__h.release());\n}\n#endif\n\ntemplate <class _Tp, class _Compare, class _Allocator>\npair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>\n__tree<_Tp, _Compare, _Allocator>::__node_insert_unique(__node_pointer __nd)\n{\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_equal(__parent, __nd->__value_);\n    __node_pointer __r = static_cast<__node_pointer>(__child);\n    bool __inserted = false;\n    if (__child == nullptr)\n    {\n        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));\n        __r = __nd;\n        __inserted = true;\n    }\n    return pair<iterator, bool>(iterator(__r), __inserted);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__node_insert_unique(const_iterator __p,\n                                                        __node_pointer __nd)\n{\n    __parent_pointer __parent;\n    __node_base_pointer __dummy;\n    __node_base_pointer& __child = __find_equal(__p, __parent, __nd->__value_);\n    __node_pointer __r = static_cast<__node_pointer>(__child);\n    if (__child == nullptr)\n    {\n        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));\n        __r = __nd;\n    }\n    return iterator(__r);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__node_insert_multi(__node_pointer __nd)\n{\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__nd->__value_));\n    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));\n    return iterator(__nd);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__node_insert_multi(const_iterator __p,\n                                                       __node_pointer __nd)\n{\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__nd->__value_));\n    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));\n    return iterator(__nd);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::erase(const_iterator __p)\n{\n    __node_pointer __np = __p.__get_np();\n    iterator __r(__p.__ptr_);\n    ++__r;\n    if (__begin_node() == __p.__ptr_)\n        __begin_node() = __r.__ptr_;\n    --size();\n    __node_allocator& __na = __node_alloc();\n    __tree_remove(__end_node()->__left_,\n                  static_cast<__node_base_pointer>(__np));\n    __node_traits::destroy(__na, _NodeTypes::__get_ptr(\n        const_cast<__node_value_type&>(*__p)));\n    __node_traits::deallocate(__na, __np, 1);\n    return __r;\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::erase(const_iterator __f, const_iterator __l)\n{\n    while (__f != __l)\n        __f = erase(__f);\n    return iterator(__l.__ptr_);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::size_type\n__tree<_Tp, _Compare, _Allocator>::__erase_unique(const _Key& __k)\n{\n    iterator __i = find(__k);\n    if (__i == end())\n        return 0;\n    erase(__i);\n    return 1;\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::size_type\n__tree<_Tp, _Compare, _Allocator>::__erase_multi(const _Key& __k)\n{\n    pair<iterator, iterator> __p = __equal_range_multi(__k);\n    size_type __r = 0;\n    for (; __p.first != __p.second; ++__r)\n        __p.first = erase(__p.first);\n    return __r;\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::find(const _Key& __v)\n{\n    iterator __p = __lower_bound(__v, __root(), __end_node());\n    if (__p != end() && !value_comp()(__v, *__p))\n        return __p;\n    return end();\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::const_iterator\n__tree<_Tp, _Compare, _Allocator>::find(const _Key& __v) const\n{\n    const_iterator __p = __lower_bound(__v, __root(), __end_node());\n    if (__p != end() && !value_comp()(__v, *__p))\n        return __p;\n    return end();\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::size_type\n__tree<_Tp, _Compare, _Allocator>::__count_unique(const _Key& __k) const\n{\n    __node_pointer __rt = __root();\n    while (__rt != nullptr)\n    {\n        if (value_comp()(__k, __rt->__value_))\n        {\n            __rt = static_cast<__node_pointer>(__rt->__left_);\n        }\n        else if (value_comp()(__rt->__value_, __k))\n            __rt = static_cast<__node_pointer>(__rt->__right_);\n        else\n            return 1;\n    }\n    return 0;\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::size_type\n__tree<_Tp, _Compare, _Allocator>::__count_multi(const _Key& __k) const\n{\n    __iter_pointer __result = __end_node();\n    __node_pointer __rt = __root();\n    while (__rt != nullptr)\n    {\n        if (value_comp()(__k, __rt->__value_))\n        {\n            __result = static_cast<__iter_pointer>(__rt);\n            __rt = static_cast<__node_pointer>(__rt->__left_);\n        }\n        else if (value_comp()(__rt->__value_, __k))\n            __rt = static_cast<__node_pointer>(__rt->__right_);\n        else\n            return _VSTD::distance(\n                __lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),\n                __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result)\n            );\n    }\n    return 0;\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__lower_bound(const _Key& __v,\n                                                 __node_pointer __root,\n                                                 __iter_pointer __result)\n{\n    while (__root != nullptr)\n    {\n        if (!value_comp()(__root->__value_, __v))\n        {\n            __result = static_cast<__iter_pointer>(__root);\n            __root = static_cast<__node_pointer>(__root->__left_);\n        }\n        else\n            __root = static_cast<__node_pointer>(__root->__right_);\n    }\n    return iterator(__result);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::const_iterator\n__tree<_Tp, _Compare, _Allocator>::__lower_bound(const _Key& __v,\n                                                 __node_pointer __root,\n                                                 __iter_pointer __result) const\n{\n    while (__root != nullptr)\n    {\n        if (!value_comp()(__root->__value_, __v))\n        {\n            __result = static_cast<__iter_pointer>(__root);\n            __root = static_cast<__node_pointer>(__root->__left_);\n        }\n        else\n            __root = static_cast<__node_pointer>(__root->__right_);\n    }\n    return const_iterator(__result);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::iterator\n__tree<_Tp, _Compare, _Allocator>::__upper_bound(const _Key& __v,\n                                                 __node_pointer __root,\n                                                 __iter_pointer __result)\n{\n    while (__root != nullptr)\n    {\n        if (value_comp()(__v, __root->__value_))\n        {\n            __result = static_cast<__iter_pointer>(__root);\n            __root = static_cast<__node_pointer>(__root->__left_);\n        }\n        else\n            __root = static_cast<__node_pointer>(__root->__right_);\n    }\n    return iterator(__result);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\ntypename __tree<_Tp, _Compare, _Allocator>::const_iterator\n__tree<_Tp, _Compare, _Allocator>::__upper_bound(const _Key& __v,\n                                                 __node_pointer __root,\n                                                 __iter_pointer __result) const\n{\n    while (__root != nullptr)\n    {\n        if (value_comp()(__v, __root->__value_))\n        {\n            __result = static_cast<__iter_pointer>(__root);\n            __root = static_cast<__node_pointer>(__root->__left_);\n        }\n        else\n            __root = static_cast<__node_pointer>(__root->__right_);\n    }\n    return const_iterator(__result);\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\npair<typename __tree<_Tp, _Compare, _Allocator>::iterator,\n     typename __tree<_Tp, _Compare, _Allocator>::iterator>\n__tree<_Tp, _Compare, _Allocator>::__equal_range_unique(const _Key& __k)\n{\n    typedef pair<iterator, iterator> _Pp;\n    __iter_pointer __result = __end_node();\n    __node_pointer __rt = __root();\n    while (__rt != nullptr)\n    {\n        if (value_comp()(__k, __rt->__value_))\n        {\n            __result = static_cast<__iter_pointer>(__rt);\n            __rt = static_cast<__node_pointer>(__rt->__left_);\n        }\n        else if (value_comp()(__rt->__value_, __k))\n            __rt = static_cast<__node_pointer>(__rt->__right_);\n        else\n            return _Pp(iterator(__rt),\n                      iterator(\n                          __rt->__right_ != nullptr ?\n                              static_cast<__iter_pointer>(__tree_min(__rt->__right_))\n                            : __result));\n    }\n    return _Pp(iterator(__result), iterator(__result));\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\npair<typename __tree<_Tp, _Compare, _Allocator>::const_iterator,\n     typename __tree<_Tp, _Compare, _Allocator>::const_iterator>\n__tree<_Tp, _Compare, _Allocator>::__equal_range_unique(const _Key& __k) const\n{\n    typedef pair<const_iterator, const_iterator> _Pp;\n    __iter_pointer __result = __end_node();\n    __node_pointer __rt = __root();\n    while (__rt != nullptr)\n    {\n        if (value_comp()(__k, __rt->__value_))\n        {\n            __result = static_cast<__iter_pointer>(__rt);\n            __rt = static_cast<__node_pointer>(__rt->__left_);\n        }\n        else if (value_comp()(__rt->__value_, __k))\n            __rt = static_cast<__node_pointer>(__rt->__right_);\n        else\n            return _Pp(const_iterator(__rt),\n                      const_iterator(\n                          __rt->__right_ != nullptr ?\n                              static_cast<__iter_pointer>(__tree_min(__rt->__right_))\n                            : __result));\n    }\n    return _Pp(const_iterator(__result), const_iterator(__result));\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\npair<typename __tree<_Tp, _Compare, _Allocator>::iterator,\n     typename __tree<_Tp, _Compare, _Allocator>::iterator>\n__tree<_Tp, _Compare, _Allocator>::__equal_range_multi(const _Key& __k)\n{\n    typedef pair<iterator, iterator> _Pp;\n    __iter_pointer __result = __end_node();\n    __node_pointer __rt = __root();\n    while (__rt != nullptr)\n    {\n        if (value_comp()(__k, __rt->__value_))\n        {\n            __result = static_cast<__iter_pointer>(__rt);\n            __rt = static_cast<__node_pointer>(__rt->__left_);\n        }\n        else if (value_comp()(__rt->__value_, __k))\n            __rt = static_cast<__node_pointer>(__rt->__right_);\n        else\n            return _Pp(__lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),\n                      __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result));\n    }\n    return _Pp(iterator(__result), iterator(__result));\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntemplate <class _Key>\npair<typename __tree<_Tp, _Compare, _Allocator>::const_iterator,\n     typename __tree<_Tp, _Compare, _Allocator>::const_iterator>\n__tree<_Tp, _Compare, _Allocator>::__equal_range_multi(const _Key& __k) const\n{\n    typedef pair<const_iterator, const_iterator> _Pp;\n    __iter_pointer __result = __end_node();\n    __node_pointer __rt = __root();\n    while (__rt != nullptr)\n    {\n        if (value_comp()(__k, __rt->__value_))\n        {\n            __result = static_cast<__iter_pointer>(__rt);\n            __rt = static_cast<__node_pointer>(__rt->__left_);\n        }\n        else if (value_comp()(__rt->__value_, __k))\n            __rt = static_cast<__node_pointer>(__rt->__right_);\n        else\n            return _Pp(__lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),\n                      __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result));\n    }\n    return _Pp(const_iterator(__result), const_iterator(__result));\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ntypename __tree<_Tp, _Compare, _Allocator>::__node_holder\n__tree<_Tp, _Compare, _Allocator>::remove(const_iterator __p) _NOEXCEPT\n{\n    __node_pointer __np = __p.__get_np();\n    if (__begin_node() == __p.__ptr_)\n    {\n        if (__np->__right_ != nullptr)\n            __begin_node() = static_cast<__iter_pointer>(__np->__right_);\n        else\n            __begin_node() = static_cast<__iter_pointer>(__np->__parent_);\n    }\n    --size();\n    __tree_remove(__end_node()->__left_,\n                  static_cast<__node_base_pointer>(__np));\n    return __node_holder(__np, _Dp(__node_alloc(), true));\n}\n\ntemplate <class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(__tree<_Tp, _Compare, _Allocator>& __x,\n     __tree<_Tp, _Compare, _Allocator>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP___TREE\n","// -*- C++ -*-\n//===----------------------------- map ------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_MAP\n#define _LIBCPP_MAP\n\n/*\n\n    map synopsis\n\nnamespace std\n{\n\ntemplate <class Key, class T, class Compare = less<Key>,\n          class Allocator = allocator<pair<const Key, T>>>\nclass map\n{\npublic:\n    // types:\n    typedef Key                                      key_type;\n    typedef T                                        mapped_type;\n    typedef pair<const key_type, mapped_type>        value_type;\n    typedef Compare                                  key_compare;\n    typedef Allocator                                allocator_type;\n    typedef typename allocator_type::reference       reference;\n    typedef typename allocator_type::const_reference const_reference;\n    typedef typename allocator_type::pointer         pointer;\n    typedef typename allocator_type::const_pointer   const_pointer;\n    typedef typename allocator_type::size_type       size_type;\n    typedef typename allocator_type::difference_type difference_type;\n\n    typedef implementation-defined                   iterator;\n    typedef implementation-defined                   const_iterator;\n    typedef std::reverse_iterator<iterator>          reverse_iterator;\n    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;\n\n    class value_compare\n        : public binary_function<value_type, value_type, bool>\n    {\n        friend class map;\n    protected:\n        key_compare comp;\n\n        value_compare(key_compare c);\n    public:\n        bool operator()(const value_type& x, const value_type& y) const;\n    };\n\n    // construct/copy/destroy:\n    map()\n        noexcept(\n            is_nothrow_default_constructible<allocator_type>::value &&\n            is_nothrow_default_constructible<key_compare>::value &&\n            is_nothrow_copy_constructible<key_compare>::value);\n    explicit map(const key_compare& comp);\n    map(const key_compare& comp, const allocator_type& a);\n    template <class InputIterator>\n        map(InputIterator first, InputIterator last,\n            const key_compare& comp = key_compare());\n    template <class InputIterator>\n        map(InputIterator first, InputIterator last,\n            const key_compare& comp, const allocator_type& a);\n    map(const map& m);\n    map(map&& m)\n        noexcept(\n            is_nothrow_move_constructible<allocator_type>::value &&\n            is_nothrow_move_constructible<key_compare>::value);\n    explicit map(const allocator_type& a);\n    map(const map& m, const allocator_type& a);\n    map(map&& m, const allocator_type& a);\n    map(initializer_list<value_type> il, const key_compare& comp = key_compare());\n    map(initializer_list<value_type> il, const key_compare& comp, const allocator_type& a);\n    template <class InputIterator>\n        map(InputIterator first, InputIterator last, const allocator_type& a)\n            : map(first, last, Compare(), a) {}  // C++14\n    map(initializer_list<value_type> il, const allocator_type& a)\n        : map(il, Compare(), a) {}  // C++14\n   ~map();\n\n    map& operator=(const map& m);\n    map& operator=(map&& m)\n        noexcept(\n            allocator_type::propagate_on_container_move_assignment::value &&\n            is_nothrow_move_assignable<allocator_type>::value &&\n            is_nothrow_move_assignable<key_compare>::value);\n    map& operator=(initializer_list<value_type> il);\n\n    // iterators:\n          iterator begin() noexcept;\n    const_iterator begin() const noexcept;\n          iterator end() noexcept;\n    const_iterator end()   const noexcept;\n\n          reverse_iterator rbegin() noexcept;\n    const_reverse_iterator rbegin() const noexcept;\n          reverse_iterator rend() noexcept;\n    const_reverse_iterator rend()   const noexcept;\n\n    const_iterator         cbegin()  const noexcept;\n    const_iterator         cend()    const noexcept;\n    const_reverse_iterator crbegin() const noexcept;\n    const_reverse_iterator crend()   const noexcept;\n\n    // capacity:\n    bool      empty()    const noexcept;\n    size_type size()     const noexcept;\n    size_type max_size() const noexcept;\n\n    // element access:\n    mapped_type& operator[](const key_type& k);\n    mapped_type& operator[](key_type&& k);\n\n          mapped_type& at(const key_type& k);\n    const mapped_type& at(const key_type& k) const;\n\n    // modifiers:\n    template <class... Args>\n        pair<iterator, bool> emplace(Args&&... args);\n    template <class... Args>\n        iterator emplace_hint(const_iterator position, Args&&... args);\n    pair<iterator, bool> insert(const value_type& v);\n    pair<iterator, bool> insert(      value_type&& v);                                // C++17\n    template <class P>\n        pair<iterator, bool> insert(P&& p);\n    iterator insert(const_iterator position, const value_type& v);\n    iterator insert(const_iterator position,       value_type&& v);                   // C++17\n    template <class P>\n        iterator insert(const_iterator position, P&& p);\n    template <class InputIterator>\n        void insert(InputIterator first, InputIterator last);\n    void insert(initializer_list<value_type> il);\n\n    template <class... Args>\n        pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);          // C++17\n    template <class... Args>\n        pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);               // C++17\n    template <class... Args>\n        iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args); // C++17\n    template <class... Args>\n        iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);      // C++17\n    template <class M>\n        pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);            // C++17\n    template <class M>\n        pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);                 // C++17\n    template <class M>\n        iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);   // C++17\n    template <class M>\n        iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);        // C++17\n\n    iterator  erase(const_iterator position);\n    iterator  erase(iterator position); // C++14\n    size_type erase(const key_type& k);\n    iterator  erase(const_iterator first, const_iterator last);\n    void clear() noexcept;\n\n    void swap(map& m)\n        noexcept(allocator_traits<allocator_type>::is_always_equal::value &&\n            is_nothrow_swappable<key_compare>::value); // C++17\n\n    // observers:\n    allocator_type get_allocator() const noexcept;\n    key_compare    key_comp()      const;\n    value_compare  value_comp()    const;\n\n    // map operations:\n          iterator find(const key_type& k);\n    const_iterator find(const key_type& k) const;\n    template<typename K>\n        iterator find(const K& x);              // C++14\n    template<typename K>\n        const_iterator find(const K& x) const;  // C++14\n    template<typename K>\n      size_type count(const K& x) const;        // C++14\n\n    size_type      count(const key_type& k) const;\n          iterator lower_bound(const key_type& k);\n    const_iterator lower_bound(const key_type& k) const;\n    template<typename K>\n        iterator lower_bound(const K& x);              // C++14\n    template<typename K>\n        const_iterator lower_bound(const K& x) const;  // C++14\n\n          iterator upper_bound(const key_type& k);\n    const_iterator upper_bound(const key_type& k) const;\n    template<typename K>\n        iterator upper_bound(const K& x);              // C++14\n    template<typename K>\n        const_iterator upper_bound(const K& x) const;  // C++14\n\n    pair<iterator,iterator>             equal_range(const key_type& k);\n    pair<const_iterator,const_iterator> equal_range(const key_type& k) const;\n    template<typename K>\n        pair<iterator,iterator>             equal_range(const K& x);        // C++14\n    template<typename K>\n        pair<const_iterator,const_iterator> equal_range(const K& x) const;  // C++14\n};\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator==(const map<Key, T, Compare, Allocator>& x,\n           const map<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator< (const map<Key, T, Compare, Allocator>& x,\n           const map<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator!=(const map<Key, T, Compare, Allocator>& x,\n           const map<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator> (const map<Key, T, Compare, Allocator>& x,\n           const map<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator>=(const map<Key, T, Compare, Allocator>& x,\n           const map<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator<=(const map<Key, T, Compare, Allocator>& x,\n           const map<Key, T, Compare, Allocator>& y);\n\n// specialized algorithms:\ntemplate <class Key, class T, class Compare, class Allocator>\nvoid\nswap(map<Key, T, Compare, Allocator>& x, map<Key, T, Compare, Allocator>& y)\n    noexcept(noexcept(x.swap(y)));\n\ntemplate <class Key, class T, class Compare = less<Key>,\n          class Allocator = allocator<pair<const Key, T>>>\nclass multimap\n{\npublic:\n    // types:\n    typedef Key                                      key_type;\n    typedef T                                        mapped_type;\n    typedef pair<const key_type,mapped_type>         value_type;\n    typedef Compare                                  key_compare;\n    typedef Allocator                                allocator_type;\n    typedef typename allocator_type::reference       reference;\n    typedef typename allocator_type::const_reference const_reference;\n    typedef typename allocator_type::size_type       size_type;\n    typedef typename allocator_type::difference_type difference_type;\n    typedef typename allocator_type::pointer         pointer;\n    typedef typename allocator_type::const_pointer   const_pointer;\n\n    typedef implementation-defined                   iterator;\n    typedef implementation-defined                   const_iterator;\n    typedef std::reverse_iterator<iterator>          reverse_iterator;\n    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;\n\n    class value_compare\n        : public binary_function<value_type,value_type,bool>\n    {\n        friend class multimap;\n    protected:\n        key_compare comp;\n        value_compare(key_compare c);\n    public:\n        bool operator()(const value_type& x, const value_type& y) const;\n    };\n\n    // construct/copy/destroy:\n    multimap()\n        noexcept(\n            is_nothrow_default_constructible<allocator_type>::value &&\n            is_nothrow_default_constructible<key_compare>::value &&\n            is_nothrow_copy_constructible<key_compare>::value);\n    explicit multimap(const key_compare& comp);\n    multimap(const key_compare& comp, const allocator_type& a);\n    template <class InputIterator>\n        multimap(InputIterator first, InputIterator last, const key_compare& comp);\n    template <class InputIterator>\n        multimap(InputIterator first, InputIterator last, const key_compare& comp,\n                 const allocator_type& a);\n    multimap(const multimap& m);\n    multimap(multimap&& m)\n        noexcept(\n            is_nothrow_move_constructible<allocator_type>::value &&\n            is_nothrow_move_constructible<key_compare>::value);\n    explicit multimap(const allocator_type& a);\n    multimap(const multimap& m, const allocator_type& a);\n    multimap(multimap&& m, const allocator_type& a);\n    multimap(initializer_list<value_type> il, const key_compare& comp = key_compare());\n    multimap(initializer_list<value_type> il, const key_compare& comp,\n             const allocator_type& a);\n    template <class InputIterator>\n        multimap(InputIterator first, InputIterator last, const allocator_type& a)\n            : multimap(first, last, Compare(), a) {} // C++14\n    multimap(initializer_list<value_type> il, const allocator_type& a)\n        : multimap(il, Compare(), a) {} // C++14\n    ~multimap();\n\n    multimap& operator=(const multimap& m);\n    multimap& operator=(multimap&& m)\n        noexcept(\n            allocator_type::propagate_on_container_move_assignment::value &&\n            is_nothrow_move_assignable<allocator_type>::value &&\n            is_nothrow_move_assignable<key_compare>::value);\n    multimap& operator=(initializer_list<value_type> il);\n\n    // iterators:\n          iterator begin() noexcept;\n    const_iterator begin() const noexcept;\n          iterator end() noexcept;\n    const_iterator end()   const noexcept;\n\n          reverse_iterator rbegin() noexcept;\n    const_reverse_iterator rbegin() const noexcept;\n          reverse_iterator rend() noexcept;\n    const_reverse_iterator rend()   const noexcept;\n\n    const_iterator         cbegin()  const noexcept;\n    const_iterator         cend()    const noexcept;\n    const_reverse_iterator crbegin() const noexcept;\n    const_reverse_iterator crend()   const noexcept;\n\n    // capacity:\n    bool      empty()    const noexcept;\n    size_type size()     const noexcept;\n    size_type max_size() const noexcept;\n\n    // modifiers:\n    template <class... Args>\n        iterator emplace(Args&&... args);\n    template <class... Args>\n        iterator emplace_hint(const_iterator position, Args&&... args);\n    iterator insert(const value_type& v);\n    iterator insert(      value_type&& v);                                            // C++17\n    template <class P>\n        iterator insert(P&& p);\n    iterator insert(const_iterator position, const value_type& v);\n    iterator insert(const_iterator position,       value_type&& v);                   // C++17\n    template <class P>\n        iterator insert(const_iterator position, P&& p);\n    template <class InputIterator>\n        void insert(InputIterator first, InputIterator last);\n    void insert(initializer_list<value_type> il);\n\n    iterator  erase(const_iterator position);\n    iterator  erase(iterator position); // C++14\n    size_type erase(const key_type& k);\n    iterator  erase(const_iterator first, const_iterator last);\n    void clear() noexcept;\n\n    void swap(multimap& m)\n        noexcept(allocator_traits<allocator_type>::is_always_equal::value &&\n            is_nothrow_swappable<key_compare>::value); // C++17\n\n    // observers:\n    allocator_type get_allocator() const noexcept;\n    key_compare    key_comp()      const;\n    value_compare  value_comp()    const;\n\n    // map operations:\n          iterator find(const key_type& k);\n    const_iterator find(const key_type& k) const;\n    template<typename K>\n        iterator find(const K& x);              // C++14\n    template<typename K>\n        const_iterator find(const K& x) const;  // C++14\n    template<typename K>\n      size_type count(const K& x) const;        // C++14\n\n    size_type      count(const key_type& k) const;\n          iterator lower_bound(const key_type& k);\n    const_iterator lower_bound(const key_type& k) const;\n    template<typename K>\n        iterator lower_bound(const K& x);              // C++14\n    template<typename K>\n        const_iterator lower_bound(const K& x) const;  // C++14\n\n          iterator upper_bound(const key_type& k);\n    const_iterator upper_bound(const key_type& k) const;\n    template<typename K>\n        iterator upper_bound(const K& x);              // C++14\n    template<typename K>\n        const_iterator upper_bound(const K& x) const;  // C++14\n\n    pair<iterator,iterator>             equal_range(const key_type& k);\n    pair<const_iterator,const_iterator> equal_range(const key_type& k) const;\n    template<typename K>\n        pair<iterator,iterator>             equal_range(const K& x);        // C++14\n    template<typename K>\n        pair<const_iterator,const_iterator> equal_range(const K& x) const;  // C++14\n};\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator==(const multimap<Key, T, Compare, Allocator>& x,\n           const multimap<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator< (const multimap<Key, T, Compare, Allocator>& x,\n           const multimap<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator!=(const multimap<Key, T, Compare, Allocator>& x,\n           const multimap<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator> (const multimap<Key, T, Compare, Allocator>& x,\n           const multimap<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator>=(const multimap<Key, T, Compare, Allocator>& x,\n           const multimap<Key, T, Compare, Allocator>& y);\n\ntemplate <class Key, class T, class Compare, class Allocator>\nbool\noperator<=(const multimap<Key, T, Compare, Allocator>& x,\n           const multimap<Key, T, Compare, Allocator>& y);\n\n// specialized algorithms:\ntemplate <class Key, class T, class Compare, class Allocator>\nvoid\nswap(multimap<Key, T, Compare, Allocator>& x,\n     multimap<Key, T, Compare, Allocator>& y)\n    noexcept(noexcept(x.swap(y)));\n\n}  // std\n\n*/\n\n#include <__config>\n#include <__tree>\n#include <iterator>\n#include <memory>\n#include <utility>\n#include <functional>\n#include <initializer_list>\n#include <type_traits>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _Key, class _CP, class _Compare,\n          bool = is_empty<_Compare>::value && !__libcpp_is_final<_Compare>::value\n         >\nclass __map_value_compare\n    : private _Compare\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __map_value_compare()\n        _NOEXCEPT_(is_nothrow_default_constructible<_Compare>::value)\n        : _Compare() {}\n    _LIBCPP_INLINE_VISIBILITY\n    __map_value_compare(_Compare c)\n        _NOEXCEPT_(is_nothrow_copy_constructible<_Compare>::value)\n        : _Compare(c) {}\n    _LIBCPP_INLINE_VISIBILITY\n    const _Compare& key_comp() const _NOEXCEPT {return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _CP& __x, const _CP& __y) const\n        {return static_cast<const _Compare&>(*this)(__x.__cc.first, __y.__cc.first);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _CP& __x, const _Key& __y) const\n        {return static_cast<const _Compare&>(*this)(__x.__cc.first, __y);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Key& __x, const _CP& __y) const\n        {return static_cast<const _Compare&>(*this)(__x, __y.__cc.first);}\n    void swap(__map_value_compare&__y)\n        _NOEXCEPT_(__is_nothrow_swappable<_Compare>::value)\n    {\n        using _VSTD::swap;\n        swap(static_cast<const _Compare&>(*this), static_cast<const _Compare&>(__y));\n    }\n\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type\n    operator () ( const _K2& __x, const _CP& __y ) const\n        {return static_cast<const _Compare&>(*this) (__x, __y.__cc.first);}\n\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type\n    operator () (const _CP& __x, const _K2& __y) const\n        {return static_cast<const _Compare&>(*this) (__x.__cc.first, __y);}\n#endif\n};\n\ntemplate <class _Key, class _CP, class _Compare>\nclass __map_value_compare<_Key, _CP, _Compare, false>\n{\n    _Compare comp;\n\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __map_value_compare()\n        _NOEXCEPT_(is_nothrow_default_constructible<_Compare>::value)\n        : comp() {}\n    _LIBCPP_INLINE_VISIBILITY\n    __map_value_compare(_Compare c)\n        _NOEXCEPT_(is_nothrow_copy_constructible<_Compare>::value)\n        : comp(c) {}\n    _LIBCPP_INLINE_VISIBILITY\n    const _Compare& key_comp() const _NOEXCEPT {return comp;}\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _CP& __x, const _CP& __y) const\n        {return comp(__x.__cc.first, __y.__cc.first);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _CP& __x, const _Key& __y) const\n        {return comp(__x.__cc.first, __y);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Key& __x, const _CP& __y) const\n        {return comp(__x, __y.__cc.first);}\n    void swap(__map_value_compare&__y)\n        _NOEXCEPT_(__is_nothrow_swappable<_Compare>::value)\n    {\n        using _VSTD::swap;\n        swap(comp, __y.comp);\n    }\n\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type\n    operator () ( const _K2& __x, const _CP& __y ) const\n        {return comp (__x, __y.__cc.first);}\n\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type\n    operator () (const _CP& __x, const _K2& __y) const\n        {return comp (__x.__cc.first, __y);}\n#endif\n};\n\ntemplate <class _Key, class _CP, class _Compare, bool __b>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(__map_value_compare<_Key, _CP, _Compare, __b>& __x,\n     __map_value_compare<_Key, _CP, _Compare, __b>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\ntemplate <class _Allocator>\nclass __map_node_destructor\n{\n    typedef _Allocator                          allocator_type;\n    typedef allocator_traits<allocator_type>    __alloc_traits;\n\npublic:\n    typedef typename __alloc_traits::pointer    pointer;\n\nprivate:\n    allocator_type& __na_;\n\n    __map_node_destructor& operator=(const __map_node_destructor&);\n\npublic:\n    bool __first_constructed;\n    bool __second_constructed;\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __map_node_destructor(allocator_type& __na) _NOEXCEPT\n        : __na_(__na),\n          __first_constructed(false),\n          __second_constructed(false)\n        {}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    __map_node_destructor(__tree_node_destructor<allocator_type>&& __x) _NOEXCEPT\n        : __na_(__x.__na_),\n          __first_constructed(__x.__value_constructed),\n          __second_constructed(__x.__value_constructed)\n        {\n            __x.__value_constructed = false;\n        }\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY\n    void operator()(pointer __p) _NOEXCEPT\n    {\n        if (__second_constructed)\n            __alloc_traits::destroy(__na_, _VSTD::addressof(__p->__value_.__cc.second));\n        if (__first_constructed)\n            __alloc_traits::destroy(__na_, _VSTD::addressof(__p->__value_.__cc.first));\n        if (__p)\n            __alloc_traits::deallocate(__na_, __p, 1);\n    }\n};\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\n    class map;\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\n    class multimap;\ntemplate <class _TreeIterator> class __map_const_iterator;\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Key, class _Tp>\nunion __value_type\n{\n    typedef _Key                                     key_type;\n    typedef _Tp                                      mapped_type;\n    typedef pair<const key_type, mapped_type>        value_type;\n    typedef pair<key_type, mapped_type>              __nc_value_type;\n\n    value_type __cc;\n    __nc_value_type __nc;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __value_type& operator=(const __value_type& __v)\n        {__nc = __v.__cc; return *this;}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __value_type& operator=(__value_type&& __v)\n        {__nc = _VSTD::move(__v.__nc); return *this;}\n\n    template <class _ValueTp,\n              class = typename enable_if<\n                    __is_same_uncvref<_ValueTp, value_type>::value\n                 >::type\n             >\n    _LIBCPP_INLINE_VISIBILITY\n    __value_type& operator=(_ValueTp&& __v) {\n        __nc = _VSTD::forward<_ValueTp>(__v); return *this;\n    }\n\nprivate:\n    __value_type() _LIBCPP_EQUAL_DELETE;\n    ~__value_type() _LIBCPP_EQUAL_DELETE;\n    __value_type(const __value_type& __v) _LIBCPP_EQUAL_DELETE;\n    __value_type(__value_type&& __v) _LIBCPP_EQUAL_DELETE;\n};\n\n#else\n\ntemplate <class _Key, class _Tp>\nstruct __value_type\n{\n    typedef _Key                                     key_type;\n    typedef _Tp                                      mapped_type;\n    typedef pair<const key_type, mapped_type>        value_type;\n\n    value_type __cc;\n\nprivate:\n   __value_type();\n   __value_type(__value_type const&);\n   __value_type& operator=(__value_type const&);\n   ~__value_type();\n};\n\n#endif\n\ntemplate <class _Tp>\nstruct __extract_key_value_types;\n\ntemplate <class _Key, class _Tp>\nstruct __extract_key_value_types<__value_type<_Key, _Tp> >\n{\n  typedef _Key const __key_type;\n  typedef _Tp        __mapped_type;\n};\n\ntemplate <class _TreeIterator>\nclass _LIBCPP_TEMPLATE_VIS __map_iterator\n{\n    typedef typename _TreeIterator::_NodeTypes                   _NodeTypes;\n    typedef typename _TreeIterator::__pointer_traits             __pointer_traits;\n\n    _TreeIterator __i_;\n\npublic:\n    typedef bidirectional_iterator_tag                           iterator_category;\n    typedef typename _NodeTypes::__map_value_type                value_type;\n    typedef typename _TreeIterator::difference_type              difference_type;\n    typedef value_type&                                          reference;\n    typedef typename _NodeTypes::__map_value_type_pointer        pointer;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __map_iterator() _NOEXCEPT {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __map_iterator(_TreeIterator __i) _NOEXCEPT : __i_(__i) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    reference operator*() const {return __i_->__cc;}\n    _LIBCPP_INLINE_VISIBILITY\n    pointer operator->() const {return pointer_traits<pointer>::pointer_to(__i_->__cc);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __map_iterator& operator++() {++__i_; return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    __map_iterator operator++(int)\n    {\n        __map_iterator __t(*this);\n        ++(*this);\n        return __t;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __map_iterator& operator--() {--__i_; return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    __map_iterator operator--(int)\n    {\n        __map_iterator __t(*this);\n        --(*this);\n        return __t;\n    }\n\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const __map_iterator& __x, const __map_iterator& __y)\n        {return __x.__i_ == __y.__i_;}\n    friend\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator!=(const __map_iterator& __x, const __map_iterator& __y)\n        {return __x.__i_ != __y.__i_;}\n\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_const_iterator;\n};\n\ntemplate <class _TreeIterator>\nclass _LIBCPP_TEMPLATE_VIS __map_const_iterator\n{\n    typedef typename _TreeIterator::_NodeTypes                   _NodeTypes;\n    typedef typename _TreeIterator::__pointer_traits             __pointer_traits;\n\n    _TreeIterator __i_;\n\npublic:\n    typedef bidirectional_iterator_tag                           iterator_category;\n    typedef typename _NodeTypes::__map_value_type                value_type;\n    typedef typename _TreeIterator::difference_type              difference_type;\n    typedef const value_type&                                    reference;\n    typedef typename _NodeTypes::__const_map_value_type_pointer  pointer;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __map_const_iterator() _NOEXCEPT {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __map_const_iterator(_TreeIterator __i) _NOEXCEPT : __i_(__i) {}\n    _LIBCPP_INLINE_VISIBILITY\n    __map_const_iterator(__map_iterator<\n        typename _TreeIterator::__non_const_iterator> __i) _NOEXCEPT\n        : __i_(__i.__i_) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    reference operator*() const {return __i_->__cc;}\n    _LIBCPP_INLINE_VISIBILITY\n    pointer operator->() const {return pointer_traits<pointer>::pointer_to(__i_->__cc);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __map_const_iterator& operator++() {++__i_; return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    __map_const_iterator operator++(int)\n    {\n        __map_const_iterator __t(*this);\n        ++(*this);\n        return __t;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    __map_const_iterator& operator--() {--__i_; return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    __map_const_iterator operator--(int)\n    {\n        __map_const_iterator __t(*this);\n        --(*this);\n        return __t;\n    }\n\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const __map_const_iterator& __x, const __map_const_iterator& __y)\n        {return __x.__i_ == __y.__i_;}\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator!=(const __map_const_iterator& __x, const __map_const_iterator& __y)\n        {return __x.__i_ != __y.__i_;}\n\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;\n    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;\n    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;\n};\n\ntemplate <class _Key, class _Tp, class _Compare = less<_Key>,\n          class _Allocator = allocator<pair<const _Key, _Tp> > >\nclass _LIBCPP_TEMPLATE_VIS map\n{\npublic:\n    // types:\n    typedef _Key                                     key_type;\n    typedef _Tp                                      mapped_type;\n    typedef pair<const key_type, mapped_type>        value_type;\n    typedef pair<key_type, mapped_type>              __nc_value_type;\n    typedef _Compare                                 key_compare;\n    typedef _Allocator                               allocator_type;\n    typedef value_type&                              reference;\n    typedef const value_type&                        const_reference;\n\n    static_assert((is_same<typename allocator_type::value_type, value_type>::value),\n                  \"Allocator::value_type must be same type as value_type\");\n\n    class _LIBCPP_TEMPLATE_VIS value_compare\n        : public binary_function<value_type, value_type, bool>\n    {\n        friend class map;\n    protected:\n        key_compare comp;\n\n        _LIBCPP_INLINE_VISIBILITY value_compare(key_compare c) : comp(c) {}\n    public:\n        _LIBCPP_INLINE_VISIBILITY\n        bool operator()(const value_type& __x, const value_type& __y) const\n            {return comp(__x.first, __y.first);}\n    };\n\nprivate:\n\n    typedef _VSTD::__value_type<key_type, mapped_type>             __value_type;\n    typedef __map_value_compare<key_type, __value_type, key_compare> __vc;\n    typedef typename __rebind_alloc_helper<allocator_traits<allocator_type>,\n                                                 __value_type>::type __allocator_type;\n    typedef __tree<__value_type, __vc, __allocator_type>   __base;\n    typedef typename __base::__node_traits                 __node_traits;\n    typedef allocator_traits<allocator_type>               __alloc_traits;\n\n    __base __tree_;\n\npublic:\n    typedef typename __alloc_traits::pointer               pointer;\n    typedef typename __alloc_traits::const_pointer         const_pointer;\n    typedef typename __alloc_traits::size_type             size_type;\n    typedef typename __alloc_traits::difference_type       difference_type;\n    typedef __map_iterator<typename __base::iterator>             iterator;\n    typedef __map_const_iterator<typename __base::const_iterator> const_iterator;\n    typedef _VSTD::reverse_iterator<iterator>               reverse_iterator;\n    typedef _VSTD::reverse_iterator<const_iterator>         const_reverse_iterator;\n\n    _LIBCPP_INLINE_VISIBILITY\n    map()\n        _NOEXCEPT_(\n            is_nothrow_default_constructible<allocator_type>::value &&\n            is_nothrow_default_constructible<key_compare>::value &&\n            is_nothrow_copy_constructible<key_compare>::value)\n        : __tree_(__vc(key_compare())) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit map(const key_compare& __comp)\n        _NOEXCEPT_(\n            is_nothrow_default_constructible<allocator_type>::value &&\n            is_nothrow_copy_constructible<key_compare>::value)\n        : __tree_(__vc(__comp)) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit map(const key_compare& __comp, const allocator_type& __a)\n        : __tree_(__vc(__comp), typename __base::allocator_type(__a)) {}\n\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n        map(_InputIterator __f, _InputIterator __l,\n            const key_compare& __comp = key_compare())\n        : __tree_(__vc(__comp))\n        {\n            insert(__f, __l);\n        }\n\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n        map(_InputIterator __f, _InputIterator __l,\n            const key_compare& __comp, const allocator_type& __a)\n        : __tree_(__vc(__comp), typename __base::allocator_type(__a))\n        {\n            insert(__f, __l);\n        }\n\n#if _LIBCPP_STD_VER > 11\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n    map(_InputIterator __f, _InputIterator __l, const allocator_type& __a)\n        : map(__f, __l, key_compare(), __a) {}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    map(const map& __m)\n        : __tree_(__m.__tree_)\n        {\n            insert(__m.begin(), __m.end());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    map& operator=(const map& __m)\n        {\n#ifndef _LIBCPP_CXX03_LANG\n            __tree_ = __m.__tree_;\n#else\n            if (this != &__m) {\n                __tree_.clear();\n                __tree_.value_comp() = __m.__tree_.value_comp();\n                __tree_.__copy_assign_alloc(__m.__tree_);\n                insert(__m.begin(), __m.end());\n            }\n#endif\n            return *this;\n        }\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY\n    map(map&& __m)\n        _NOEXCEPT_(is_nothrow_move_constructible<__base>::value)\n        : __tree_(_VSTD::move(__m.__tree_))\n        {\n        }\n\n    map(map&& __m, const allocator_type& __a);\n\n    _LIBCPP_INLINE_VISIBILITY\n    map& operator=(map&& __m)\n        _NOEXCEPT_(is_nothrow_move_assignable<__base>::value)\n        {\n            __tree_ = _VSTD::move(__m.__tree_);\n            return *this;\n        }\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    map(initializer_list<value_type> __il, const key_compare& __comp = key_compare())\n        : __tree_(__vc(__comp))\n        {\n            insert(__il.begin(), __il.end());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    map(initializer_list<value_type> __il, const key_compare& __comp, const allocator_type& __a)\n        : __tree_(__vc(__comp), typename __base::allocator_type(__a))\n        {\n            insert(__il.begin(), __il.end());\n        }\n\n#if _LIBCPP_STD_VER > 11\n    _LIBCPP_INLINE_VISIBILITY\n    map(initializer_list<value_type> __il, const allocator_type& __a)\n        : map(__il, key_compare(), __a) {}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    map& operator=(initializer_list<value_type> __il)\n        {\n            __tree_.__assign_unique(__il.begin(), __il.end());\n            return *this;\n        }\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit map(const allocator_type& __a)\n        : __tree_(typename __base::allocator_type(__a))\n        {\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    map(const map& __m, const allocator_type& __a)\n        : __tree_(__m.__tree_.value_comp(), typename __base::allocator_type(__a))\n        {\n            insert(__m.begin(), __m.end());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n          iterator begin() _NOEXCEPT {return __tree_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin() const _NOEXCEPT {return __tree_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n          iterator end() _NOEXCEPT {return __tree_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end() const _NOEXCEPT {return __tree_.end();}\n\n    _LIBCPP_INLINE_VISIBILITY\n          reverse_iterator rbegin() _NOEXCEPT {return reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rbegin() const _NOEXCEPT\n        {return const_reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n          reverse_iterator rend() _NOEXCEPT\n            {return       reverse_iterator(begin());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rend() const _NOEXCEPT\n        {return const_reverse_iterator(begin());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cbegin() const _NOEXCEPT {return begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cend() const _NOEXCEPT {return end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crbegin() const _NOEXCEPT {return rbegin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crend() const _NOEXCEPT {return rend();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool      empty() const _NOEXCEPT {return __tree_.size() == 0;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type size() const _NOEXCEPT {return __tree_.size();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_size() const _NOEXCEPT {return __tree_.max_size();}\n\n    mapped_type& operator[](const key_type& __k);\n#ifndef _LIBCPP_CXX03_LANG\n    mapped_type& operator[](key_type&& __k);\n#endif\n\n          mapped_type& at(const key_type& __k);\n    const mapped_type& at(const key_type& __k) const;\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type get_allocator() const _NOEXCEPT {return allocator_type(__tree_.__alloc());}\n    _LIBCPP_INLINE_VISIBILITY\n    key_compare    key_comp()      const {return __tree_.value_comp().key_comp();}\n    _LIBCPP_INLINE_VISIBILITY\n    value_compare  value_comp()    const {return value_compare(__tree_.value_comp().key_comp());}\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> emplace(_Args&& ...__args) {\n        return __tree_.__emplace_unique(_VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator emplace_hint(const_iterator __p, _Args&& ...__args) {\n        return __tree_.__emplace_hint_unique(__p.__i_, _VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class _Pp,\n              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> insert(_Pp&& __p)\n            {return __tree_.__insert_unique(_VSTD::forward<_Pp>(__p));}\n\n    template <class _Pp,\n              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator insert(const_iterator __pos, _Pp&& __p)\n            {return __tree_.__insert_unique(__pos.__i_, _VSTD::forward<_Pp>(__p));}\n\n#endif  // _LIBCPP_CXX03_LANG\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n        insert(const value_type& __v) {return __tree_.__insert_unique(__v);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator\n        insert(const_iterator __p, const value_type& __v)\n            {return __tree_.__insert_unique(__p.__i_, __v);}\n\n#ifndef _LIBCPP_CXX03_LANG\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool>\n    insert(value_type&& __v) {return __tree_.__insert_unique(_VSTD::move(__v));}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __p,  value_type&& __v)\n    {return __tree_.__insert_unique(__p.__i_, _VSTD::move(__v));}\n#endif\n\n    template <class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        void insert(_InputIterator __f, _InputIterator __l)\n        {\n            for (const_iterator __e = cend(); __f != __l; ++__f)\n                insert(__e.__i_, *__f);\n        }\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    void insert(initializer_list<value_type> __il)\n        {insert(__il.begin(), __il.end());}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#if _LIBCPP_STD_VER > 14\n\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> try_emplace(const key_type& __k, _Args&&... __args)\n    {\n        return __tree_.__emplace_unique_key_args(__k,\n            _VSTD::piecewise_construct,\n            _VSTD::forward_as_tuple(__k),\n            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));\n    }\n\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> try_emplace(key_type&& __k, _Args&&... __args)\n    {\n        return __tree_.__emplace_unique_key_args(__k,\n            _VSTD::piecewise_construct,\n            _VSTD::forward_as_tuple(_VSTD::move(__k)),\n            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));\n    }\n\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator try_emplace(const_iterator __h, const key_type& __k, _Args&&... __args)\n    {\n        return __tree_.__emplace_hint_unique_key_args(__h.__i_, __k,\n            _VSTD::piecewise_construct,\n            _VSTD::forward_as_tuple(__k),\n            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));\n    }\n\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator try_emplace(const_iterator __h, key_type&& __k, _Args&&... __args)\n    {\n        return __tree_.__emplace_hint_unique_key_args(__h.__i_, __k,\n            _VSTD::piecewise_construct,\n            _VSTD::forward_as_tuple(_VSTD::move(__k)),\n            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));\n    }\n\n    template <class _Vp>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> insert_or_assign(const key_type& __k, _Vp&& __v)\n    {\n        iterator __p = lower_bound(__k);\n        if ( __p != end() && !key_comp()(__k, __p->first))\n        {\n            __p->second = _VSTD::forward<_Vp>(__v);\n            return _VSTD::make_pair(__p, false);\n        }\n        return _VSTD::make_pair(emplace_hint(__p, __k, _VSTD::forward<_Vp>(__v)), true);\n    }\n\n    template <class _Vp>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> insert_or_assign(key_type&& __k, _Vp&& __v)\n    {\n        iterator __p = lower_bound(__k);\n        if ( __p != end() && !key_comp()(__k, __p->first))\n        {\n            __p->second = _VSTD::forward<_Vp>(__v);\n            return _VSTD::make_pair(__p, false);\n        }\n        return _VSTD::make_pair(emplace_hint(__p, _VSTD::move(__k), _VSTD::forward<_Vp>(__v)), true);\n    }\n\n    template <class _Vp>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator insert_or_assign(const_iterator __h, const key_type& __k, _Vp&& __v)\n     {\n        iterator __p = lower_bound(__k);\n        if ( __p != end() && !key_comp()(__k, __p->first))\n        {\n            __p->second = _VSTD::forward<_Vp>(__v);\n            return __p;\n        }\n        return emplace_hint(__h, __k, _VSTD::forward<_Vp>(__v));\n     }\n\n    template <class _Vp>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator insert_or_assign(const_iterator __h, key_type&& __k, _Vp&& __v)\n     {\n        iterator __p = lower_bound(__k);\n        if ( __p != end() && !key_comp()(__k, __p->first))\n        {\n            __p->second = _VSTD::forward<_Vp>(__v);\n            return __p;\n        }\n        return emplace_hint(__h, _VSTD::move(__k), _VSTD::forward<_Vp>(__v));\n     }\n\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __p) {return __tree_.erase(__p.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(iterator __p)       {return __tree_.erase(__p.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type erase(const key_type& __k)\n        {return __tree_.__erase_unique(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator  erase(const_iterator __f, const_iterator __l)\n        {return __tree_.erase(__f.__i_, __l.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT {__tree_.clear();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(map& __m)\n        _NOEXCEPT_(__is_nothrow_swappable<__base>::value)\n        {__tree_.swap(__m.__tree_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator find(const key_type& __k)             {return __tree_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator find(const key_type& __k) const {return __tree_.find(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type\n    find(const _K2& __k)                           {return __tree_.find(__k);}\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type\n    find(const _K2& __k) const                     {return __tree_.find(__k);}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type      count(const key_type& __k) const\n        {return __tree_.__count_unique(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,size_type>::type\n    count(const _K2& __k) const {return __tree_.__count_unique(__k);}\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    iterator lower_bound(const key_type& __k)\n        {return __tree_.lower_bound(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator lower_bound(const key_type& __k) const\n        {return __tree_.lower_bound(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type\n    lower_bound(const _K2& __k)       {return __tree_.lower_bound(__k);}\n\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type\n    lower_bound(const _K2& __k) const {return __tree_.lower_bound(__k);}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator upper_bound(const key_type& __k)\n        {return __tree_.upper_bound(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator upper_bound(const key_type& __k) const\n        {return __tree_.upper_bound(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type\n    upper_bound(const _K2& __k)       {return __tree_.upper_bound(__k);}\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type\n    upper_bound(const _K2& __k) const {return __tree_.upper_bound(__k);}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator,iterator> equal_range(const key_type& __k)\n        {return __tree_.__equal_range_unique(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<const_iterator,const_iterator> equal_range(const key_type& __k) const\n        {return __tree_.__equal_range_unique(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,pair<iterator,iterator>>::type\n    equal_range(const _K2& __k)       {return __tree_.__equal_range_unique(__k);}\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,pair<const_iterator,const_iterator>>::type\n    equal_range(const _K2& __k) const {return __tree_.__equal_range_unique(__k);}\n#endif\n\nprivate:\n    typedef typename __base::__node                    __node;\n    typedef typename __base::__node_allocator          __node_allocator;\n    typedef typename __base::__node_pointer            __node_pointer;\n    typedef typename __base::__node_base_pointer       __node_base_pointer;\n    typedef typename __base::__parent_pointer          __parent_pointer;\n\n    typedef __map_node_destructor<__node_allocator> _Dp;\n    typedef unique_ptr<__node, _Dp> __node_holder;\n\n#ifdef _LIBCPP_CXX03_LANG\n    __node_holder __construct_node_with_key(const key_type& __k);\n#endif\n};\n\n\n#ifndef _LIBCPP_CXX03_LANG\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\nmap<_Key, _Tp, _Compare, _Allocator>::map(map&& __m, const allocator_type& __a)\n    : __tree_(_VSTD::move(__m.__tree_), typename __base::allocator_type(__a))\n{\n    if (__a != __m.get_allocator())\n    {\n        const_iterator __e = cend();\n        while (!__m.empty())\n            __tree_.__insert_unique(__e.__i_,\n                    _VSTD::move(__m.__tree_.remove(__m.begin().__i_)->__value_.__nc));\n    }\n}\n\n#endif  // !_LIBCPP_CXX03_LANG\n\n\n#ifdef _LIBCPP_CXX03_LANG\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ntypename map<_Key, _Tp, _Compare, _Allocator>::__node_holder\nmap<_Key, _Tp, _Compare, _Allocator>::__construct_node_with_key(const key_type& __k)\n{\n    __node_allocator& __na = __tree_.__node_alloc();\n    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));\n    __node_traits::construct(__na, _VSTD::addressof(__h->__value_.__cc.first), __k);\n    __h.get_deleter().__first_constructed = true;\n    __node_traits::construct(__na, _VSTD::addressof(__h->__value_.__cc.second));\n    __h.get_deleter().__second_constructed = true;\n    return _LIBCPP_EXPLICIT_MOVE(__h);  // explicitly moved for C++03\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\n_Tp&\nmap<_Key, _Tp, _Compare, _Allocator>::operator[](const key_type& __k)\n{\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __tree_.__find_equal(__parent, __k);\n    __node_pointer __r = static_cast<__node_pointer>(__child);\n    if (__child == nullptr)\n    {\n        __node_holder __h = __construct_node_with_key(__k);\n        __tree_.__insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\n        __r = __h.release();\n    }\n    return __r->__value_.__cc.second;\n}\n\n#else\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\n_Tp&\nmap<_Key, _Tp, _Compare, _Allocator>::operator[](const key_type& __k)\n{\n    return __tree_.__emplace_unique_key_args(__k,\n        _VSTD::piecewise_construct,\n        _VSTD::forward_as_tuple(__k),\n        _VSTD::forward_as_tuple()).first->__cc.second;\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\n_Tp&\nmap<_Key, _Tp, _Compare, _Allocator>::operator[](key_type&& __k)\n{\n    return __tree_.__emplace_unique_key_args(__k,\n        _VSTD::piecewise_construct,\n        _VSTD::forward_as_tuple(_VSTD::move(__k)),\n        _VSTD::forward_as_tuple()).first->__cc.second;\n}\n\n#endif  // !_LIBCPP_CXX03_LANG\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\n_Tp&\nmap<_Key, _Tp, _Compare, _Allocator>::at(const key_type& __k)\n{\n    __parent_pointer __parent;\n    __node_base_pointer& __child = __tree_.__find_equal(__parent, __k);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    if (__child == nullptr)\n        throw out_of_range(\"map::at:  key not found\");\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return static_cast<__node_pointer>(__child)->__value_.__cc.second;\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\nconst _Tp&\nmap<_Key, _Tp, _Compare, _Allocator>::at(const key_type& __k) const\n{\n    __parent_pointer __parent;\n    __node_base_pointer __child = __tree_.__find_equal(__parent, __k);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    if (__child == nullptr)\n        throw out_of_range(\"map::at:  key not found\");\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return static_cast<__node_pointer>(__child)->__value_.__cc.second;\n}\n\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const map<_Key, _Tp, _Compare, _Allocator>& __x,\n           const map<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return __x.size() == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator< (const map<_Key, _Tp, _Compare, _Allocator>& __x,\n           const map<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const map<_Key, _Tp, _Compare, _Allocator>& __x,\n           const map<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return !(__x == __y);\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator> (const map<_Key, _Tp, _Compare, _Allocator>& __x,\n           const map<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return __y < __x;\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const map<_Key, _Tp, _Compare, _Allocator>& __x,\n           const map<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return !(__x < __y);\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const map<_Key, _Tp, _Compare, _Allocator>& __x,\n           const map<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return !(__y < __x);\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(map<_Key, _Tp, _Compare, _Allocator>& __x,\n     map<_Key, _Tp, _Compare, _Allocator>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\ntemplate <class _Key, class _Tp, class _Compare = less<_Key>,\n          class _Allocator = allocator<pair<const _Key, _Tp> > >\nclass _LIBCPP_TEMPLATE_VIS multimap\n{\npublic:\n    // types:\n    typedef _Key                                     key_type;\n    typedef _Tp                                      mapped_type;\n    typedef pair<const key_type, mapped_type>        value_type;\n    typedef pair<key_type, mapped_type>              __nc_value_type;\n    typedef _Compare                                 key_compare;\n    typedef _Allocator                               allocator_type;\n    typedef value_type&                              reference;\n    typedef const value_type&                        const_reference;\n\n    static_assert((is_same<typename allocator_type::value_type, value_type>::value),\n                  \"Allocator::value_type must be same type as value_type\");\n\n    class _LIBCPP_TEMPLATE_VIS value_compare\n        : public binary_function<value_type, value_type, bool>\n    {\n        friend class multimap;\n    protected:\n        key_compare comp;\n\n        _LIBCPP_INLINE_VISIBILITY\n        value_compare(key_compare c) : comp(c) {}\n    public:\n        _LIBCPP_INLINE_VISIBILITY\n        bool operator()(const value_type& __x, const value_type& __y) const\n            {return comp(__x.first, __y.first);}\n    };\n\nprivate:\n\n    typedef _VSTD::__value_type<key_type, mapped_type>             __value_type;\n    typedef __map_value_compare<key_type, __value_type, key_compare> __vc;\n    typedef typename __rebind_alloc_helper<allocator_traits<allocator_type>,\n                                                 __value_type>::type __allocator_type;\n    typedef __tree<__value_type, __vc, __allocator_type>            __base;\n    typedef typename __base::__node_traits                          __node_traits;\n    typedef allocator_traits<allocator_type>                        __alloc_traits;\n\n    __base __tree_;\n\npublic:\n    typedef typename __alloc_traits::pointer               pointer;\n    typedef typename __alloc_traits::const_pointer         const_pointer;\n    typedef typename __alloc_traits::size_type             size_type;\n    typedef typename __alloc_traits::difference_type       difference_type;\n    typedef __map_iterator<typename __base::iterator>      iterator;\n    typedef __map_const_iterator<typename __base::const_iterator> const_iterator;\n    typedef _VSTD::reverse_iterator<iterator>               reverse_iterator;\n    typedef _VSTD::reverse_iterator<const_iterator>         const_reverse_iterator;\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap()\n        _NOEXCEPT_(\n            is_nothrow_default_constructible<allocator_type>::value &&\n            is_nothrow_default_constructible<key_compare>::value &&\n            is_nothrow_copy_constructible<key_compare>::value)\n        : __tree_(__vc(key_compare())) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit multimap(const key_compare& __comp)\n        _NOEXCEPT_(\n            is_nothrow_default_constructible<allocator_type>::value &&\n            is_nothrow_copy_constructible<key_compare>::value)\n        : __tree_(__vc(__comp)) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit multimap(const key_compare& __comp, const allocator_type& __a)\n        : __tree_(__vc(__comp), typename __base::allocator_type(__a)) {}\n\n    template <class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        multimap(_InputIterator __f, _InputIterator __l,\n            const key_compare& __comp = key_compare())\n        : __tree_(__vc(__comp))\n        {\n            insert(__f, __l);\n        }\n\n    template <class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        multimap(_InputIterator __f, _InputIterator __l,\n            const key_compare& __comp, const allocator_type& __a)\n        : __tree_(__vc(__comp), typename __base::allocator_type(__a))\n        {\n            insert(__f, __l);\n        }\n\n#if _LIBCPP_STD_VER > 11\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n    multimap(_InputIterator __f, _InputIterator __l, const allocator_type& __a)\n        : multimap(__f, __l, key_compare(), __a) {}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap(const multimap& __m)\n        : __tree_(__m.__tree_.value_comp(),\n          __alloc_traits::select_on_container_copy_construction(__m.__tree_.__alloc()))\n        {\n            insert(__m.begin(), __m.end());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap& operator=(const multimap& __m)\n        {\n#ifndef _LIBCPP_CXX03_LANG\n            __tree_ = __m.__tree_;\n#else\n            if (this != &__m) {\n                __tree_.clear();\n                __tree_.value_comp() = __m.__tree_.value_comp();\n                __tree_.__copy_assign_alloc(__m.__tree_);\n                insert(__m.begin(), __m.end());\n            }\n#endif\n            return *this;\n        }\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap(multimap&& __m)\n        _NOEXCEPT_(is_nothrow_move_constructible<__base>::value)\n        : __tree_(_VSTD::move(__m.__tree_))\n        {\n        }\n\n    multimap(multimap&& __m, const allocator_type& __a);\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap& operator=(multimap&& __m)\n        _NOEXCEPT_(is_nothrow_move_assignable<__base>::value)\n        {\n            __tree_ = _VSTD::move(__m.__tree_);\n            return *this;\n        }\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap(initializer_list<value_type> __il, const key_compare& __comp = key_compare())\n        : __tree_(__vc(__comp))\n        {\n            insert(__il.begin(), __il.end());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap(initializer_list<value_type> __il, const key_compare& __comp, const allocator_type& __a)\n        : __tree_(__vc(__comp), typename __base::allocator_type(__a))\n        {\n            insert(__il.begin(), __il.end());\n        }\n\n#if _LIBCPP_STD_VER > 11\n    _LIBCPP_INLINE_VISIBILITY\n    multimap(initializer_list<value_type> __il, const allocator_type& __a)\n        : multimap(__il, key_compare(), __a) {}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap& operator=(initializer_list<value_type> __il)\n        {\n            __tree_.__assign_multi(__il.begin(), __il.end());\n            return *this;\n        }\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit multimap(const allocator_type& __a)\n        : __tree_(typename __base::allocator_type(__a))\n        {\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    multimap(const multimap& __m, const allocator_type& __a)\n        : __tree_(__m.__tree_.value_comp(), typename __base::allocator_type(__a))\n        {\n            insert(__m.begin(), __m.end());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n          iterator begin() _NOEXCEPT {return __tree_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin() const _NOEXCEPT {return __tree_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n          iterator end() _NOEXCEPT {return __tree_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end() const _NOEXCEPT {return __tree_.end();}\n\n    _LIBCPP_INLINE_VISIBILITY\n          reverse_iterator rbegin() _NOEXCEPT {return reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rbegin() const _NOEXCEPT\n        {return const_reverse_iterator(end());}\n    _LIBCPP_INLINE_VISIBILITY\n          reverse_iterator rend() _NOEXCEPT {return reverse_iterator(begin());}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator rend() const _NOEXCEPT\n        {return const_reverse_iterator(begin());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cbegin()  const _NOEXCEPT {return begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cend() const _NOEXCEPT {return end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crbegin() const _NOEXCEPT {return rbegin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_reverse_iterator crend() const _NOEXCEPT {return rend();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool empty() const _NOEXCEPT {return __tree_.size() == 0;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type size() const _NOEXCEPT {return __tree_.size();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_size() const _NOEXCEPT {return __tree_.max_size();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type get_allocator() const _NOEXCEPT {return allocator_type(__tree_.__alloc());}\n    _LIBCPP_INLINE_VISIBILITY\n    key_compare    key_comp() const {return __tree_.value_comp().key_comp();}\n    _LIBCPP_INLINE_VISIBILITY\n    value_compare  value_comp() const\n        {return value_compare(__tree_.value_comp().key_comp());}\n\n#ifndef _LIBCPP_CXX03_LANG\n\n    template <class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator emplace(_Args&& ...__args) {\n        return __tree_.__emplace_multi(_VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class ..._Args>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator emplace_hint(const_iterator __p, _Args&& ...__args) {\n        return __tree_.__emplace_hint_multi(__p.__i_, _VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class _Pp,\n              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator insert(_Pp&& __p)\n            {return __tree_.__insert_multi(_VSTD::forward<_Pp>(__p));}\n\n    template <class _Pp,\n              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator insert(const_iterator __pos, _Pp&& __p)\n            {return __tree_.__insert_multi(__pos.__i_, _VSTD::forward<_Pp>(__p));}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(value_type&& __v)\n        {return __tree_.__insert_multi(_VSTD::move(__v));}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __p, value_type&& __v)\n        {return __tree_.__insert_multi(__p.__i_, _VSTD::move(__v));}\n\n#endif  // _LIBCPP_CXX03_LANG\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const value_type& __v) {return __tree_.__insert_multi(__v);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __p, const value_type& __v)\n            {return __tree_.__insert_multi(__p.__i_, __v);}\n\n    template <class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        void insert(_InputIterator __f, _InputIterator __l)\n        {\n            for (const_iterator __e = cend(); __f != __l; ++__f)\n                __tree_.__insert_multi(__e.__i_, *__f);\n        }\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    void insert(initializer_list<value_type> __il)\n        {insert(__il.begin(), __il.end());}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __p) {return __tree_.erase(__p.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(iterator __p)       {return __tree_.erase(__p.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type erase(const key_type& __k) {return __tree_.__erase_multi(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator  erase(const_iterator __f, const_iterator __l)\n        {return __tree_.erase(__f.__i_, __l.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() {__tree_.clear();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(multimap& __m)\n        _NOEXCEPT_(__is_nothrow_swappable<__base>::value)\n        {__tree_.swap(__m.__tree_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator find(const key_type& __k)             {return __tree_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator find(const key_type& __k) const {return __tree_.find(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type\n    find(const _K2& __k)                           {return __tree_.find(__k);}\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type\n    find(const _K2& __k) const                     {return __tree_.find(__k);}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type      count(const key_type& __k) const\n        {return __tree_.__count_multi(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,size_type>::type\n    count(const _K2& __k) const {return __tree_.__count_multi(__k);}\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    iterator lower_bound(const key_type& __k)\n        {return __tree_.lower_bound(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator lower_bound(const key_type& __k) const\n            {return __tree_.lower_bound(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type\n    lower_bound(const _K2& __k)       {return __tree_.lower_bound(__k);}\n\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type\n    lower_bound(const _K2& __k) const {return __tree_.lower_bound(__k);}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator upper_bound(const key_type& __k)\n            {return __tree_.upper_bound(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator upper_bound(const key_type& __k) const\n            {return __tree_.upper_bound(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type\n    upper_bound(const _K2& __k)       {return __tree_.upper_bound(__k);}\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type\n    upper_bound(const _K2& __k) const {return __tree_.upper_bound(__k);}\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator,iterator>             equal_range(const key_type& __k)\n            {return __tree_.__equal_range_multi(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<const_iterator,const_iterator> equal_range(const key_type& __k) const\n            {return __tree_.__equal_range_multi(__k);}\n#if _LIBCPP_STD_VER > 11\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,pair<iterator,iterator>>::type\n    equal_range(const _K2& __k)       {return __tree_.__equal_range_multi(__k);}\n    template <typename _K2>\n    _LIBCPP_INLINE_VISIBILITY\n    typename enable_if<__is_transparent<_Compare, _K2>::value,pair<const_iterator,const_iterator>>::type\n    equal_range(const _K2& __k) const {return __tree_.__equal_range_multi(__k);}\n#endif\n\nprivate:\n    typedef typename __base::__node                    __node;\n    typedef typename __base::__node_allocator          __node_allocator;\n    typedef typename __base::__node_pointer            __node_pointer;\n\n    typedef __map_node_destructor<__node_allocator> _Dp;\n    typedef unique_ptr<__node, _Dp> __node_holder;\n};\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\nmultimap<_Key, _Tp, _Compare, _Allocator>::multimap(multimap&& __m, const allocator_type& __a)\n    : __tree_(_VSTD::move(__m.__tree_), typename __base::allocator_type(__a))\n{\n    if (__a != __m.get_allocator())\n    {\n        const_iterator __e = cend();\n        while (!__m.empty())\n            __tree_.__insert_multi(__e.__i_,\n                    _VSTD::move(__m.__tree_.remove(__m.begin().__i_)->__value_.__nc));\n    }\n}\n#endif\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const multimap<_Key, _Tp, _Compare, _Allocator>& __x,\n           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return __x.size() == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator< (const multimap<_Key, _Tp, _Compare, _Allocator>& __x,\n           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const multimap<_Key, _Tp, _Compare, _Allocator>& __x,\n           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return !(__x == __y);\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator> (const multimap<_Key, _Tp, _Compare, _Allocator>& __x,\n           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return __y < __x;\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const multimap<_Key, _Tp, _Compare, _Allocator>& __x,\n           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return !(__x < __y);\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const multimap<_Key, _Tp, _Compare, _Allocator>& __x,\n           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)\n{\n    return !(__y < __x);\n}\n\ntemplate <class _Key, class _Tp, class _Compare, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(multimap<_Key, _Tp, _Compare, _Allocator>& __x,\n     multimap<_Key, _Tp, _Compare, _Allocator>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_MAP\n","// -*- C++ -*-\n//===-------------------------- utility -----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_UTILITY\n#define _LIBCPP_UTILITY\n\n/*\n    utility synopsis\n\nnamespace std\n{\n\ntemplate <class T>\n    void\n    swap(T& a, T& b);\n\nnamespace rel_ops\n{\n    template<class T> bool operator!=(const T&, const T&);\n    template<class T> bool operator> (const T&, const T&);\n    template<class T> bool operator<=(const T&, const T&);\n    template<class T> bool operator>=(const T&, const T&);\n}\n\ntemplate<class T>\nvoid\nswap(T& a, T& b) noexcept(is_nothrow_move_constructible<T>::value &&\n                          is_nothrow_move_assignable<T>::value);\n\ntemplate <class T, size_t N>\nvoid\nswap(T (&a)[N], T (&b)[N]) noexcept(noexcept(swap(*a, *b)));\n\ntemplate <class T> T&& forward(typename remove_reference<T>::type& t) noexcept;  // constexpr in C++14\ntemplate <class T> T&& forward(typename remove_reference<T>::type&& t) noexcept; // constexpr in C++14\n\ntemplate <class T> typename remove_reference<T>::type&& move(T&&) noexcept;      // constexpr in C++14\n\ntemplate <class T>\n    typename conditional\n    <\n        !is_nothrow_move_constructible<T>::value && is_copy_constructible<T>::value,\n        const T&,\n        T&&\n    >::type\n    move_if_noexcept(T& x) noexcept; // constexpr in C++14\n\ntemplate <class T> constexpr add_const<T>_t& as_const(T& t) noexcept;      // C++17\ntemplate <class T>                      void as_const(const T&&) = delete; // C++17\n\ntemplate <class T> typename add_rvalue_reference<T>::type declval() noexcept;\n\ntemplate <class T1, class T2>\nstruct pair\n{\n    typedef T1 first_type;\n    typedef T2 second_type;\n\n    T1 first;\n    T2 second;\n\n    pair(const pair&) = default;\n    pair(pair&&) = default;\n    constexpr pair();\n    pair(const T1& x, const T2& y);                          // constexpr in C++14\n    template <class U, class V> pair(U&& x, V&& y);          // constexpr in C++14\n    template <class U, class V> pair(const pair<U, V>& p);   // constexpr in C++14\n    template <class U, class V> pair(pair<U, V>&& p);        // constexpr in C++14\n    template <class... Args1, class... Args2>\n        pair(piecewise_construct_t, tuple<Args1...> first_args,\n             tuple<Args2...> second_args);\n\n    template <class U, class V> pair& operator=(const pair<U, V>& p);\n    pair& operator=(pair&& p) noexcept(is_nothrow_move_assignable<T1>::value &&\n                                       is_nothrow_move_assignable<T2>::value);\n    template <class U, class V> pair& operator=(pair<U, V>&& p);\n\n    void swap(pair& p) noexcept(is_nothrow_swappable_v<T1> &&\n                                is_nothrow_swappable_v<T2>);\n};\n\ntemplate <class T1, class T2> bool operator==(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14\ntemplate <class T1, class T2> bool operator!=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14\ntemplate <class T1, class T2> bool operator< (const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14\ntemplate <class T1, class T2> bool operator> (const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14\ntemplate <class T1, class T2> bool operator>=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14\ntemplate <class T1, class T2> bool operator<=(const pair<T1,T2>&, const pair<T1,T2>&); // constexpr in C++14\n\ntemplate <class T1, class T2> pair<V1, V2> make_pair(T1&&, T2&&);   // constexpr in C++14\ntemplate <class T1, class T2>\nvoid\nswap(pair<T1, T2>& x, pair<T1, T2>& y) noexcept(noexcept(x.swap(y)));\n\nstruct piecewise_construct_t { };\nconstexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();\n\ntemplate <class T> class tuple_size;\ntemplate <size_t I, class T> class tuple_element;\n\ntemplate <class T1, class T2> struct tuple_size<pair<T1, T2> >;\ntemplate <class T1, class T2> struct tuple_element<0, pair<T1, T2> >;\ntemplate <class T1, class T2> struct tuple_element<1, pair<T1, T2> >;\n\ntemplate<size_t I, class T1, class T2>\n    typename tuple_element<I, pair<T1, T2> >::type&\n    get(pair<T1, T2>&) noexcept; // constexpr in C++14\n\ntemplate<size_t I, class T1, class T2>\n    const typename tuple_element<I, pair<T1, T2> >::type&\n    get(const pair<T1, T2>&) noexcept; // constexpr in C++14\n\ntemplate<size_t I, class T1, class T2>\n    typename tuple_element<I, pair<T1, T2> >::type&&\n    get(pair<T1, T2>&&) noexcept; // constexpr in C++14\n\ntemplate<size_t I, class T1, class T2>\n    const typename tuple_element<I, pair<T1, T2> >::type&&\n    get(const pair<T1, T2>&&) noexcept; // constexpr in C++14\n\ntemplate<class T1, class T2>\n    constexpr T1& get(pair<T1, T2>&) noexcept; // C++14\n\ntemplate<class T1, class T2>\n    constexpr const T1& get(const pair<T1, T2>&) noexcept; // C++14\n\ntemplate<class T1, class T2>\n    constexpr T1&& get(pair<T1, T2>&&) noexcept; // C++14\n\ntemplate<class T1, class T2>\n    constexpr const T1&& get(const pair<T1, T2>&&) noexcept; // C++14\n\ntemplate<class T1, class T2>\n    constexpr T1& get(pair<T2, T1>&) noexcept; // C++14\n\ntemplate<class T1, class T2>\n    constexpr const T1& get(const pair<T2, T1>&) noexcept; // C++14\n\ntemplate<class T1, class T2>\n    constexpr T1&& get(pair<T2, T1>&&) noexcept; // C++14\n\ntemplate<class T1, class T2>\n    constexpr const T1&& get(const pair<T2, T1>&&) noexcept; // C++14\n\n// C++14\n\ntemplate<class T, T... I>\nstruct integer_sequence\n{\n    typedef T value_type;\n\n    static constexpr size_t size() noexcept;\n};\n\ntemplate<size_t... I>\n  using index_sequence = integer_sequence<size_t, I...>;\n\ntemplate<class T, T N>\n  using make_integer_sequence = integer_sequence<T, 0, 1, ..., N-1>;\ntemplate<size_t N>\n  using make_index_sequence = make_integer_sequence<size_t, N>;\n\ntemplate<class... T>\n  using index_sequence_for = make_index_sequence<sizeof...(T)>;\n\ntemplate<class T, class U=T>\n    T exchange(T& obj, U&& new_value);\n\n// 20.2.7, in-place construction // C++17\nstruct in_place_t {\n  explicit in_place_t() = default;\n};\ninline constexpr in_place_t in_place{};\ntemplate <class T>\n  struct in_place_type_t {\n    explicit in_place_type_t() = default;\n  };\ntemplate <class T>\n  inline constexpr in_place_type_t<T> in_place_type{};\ntemplate <size_t I>\n  struct in_place_index_t {\n    explicit in_place_index_t() = default;\n  };\ntemplate <size_t I>\n  inline constexpr in_place_index_t<I> in_place_index{};\n\n}  // std\n\n*/\n\n#include <__config>\n#include <__tuple>\n#include <type_traits>\n#include <initializer_list>\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\nnamespace rel_ops\n{\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const _Tp& __x, const _Tp& __y)\n{\n    return !(__x == __y);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator> (const _Tp& __x, const _Tp& __y)\n{\n    return __y < __x;\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const _Tp& __x, const _Tp& __y)\n{\n    return !(__y < __x);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const _Tp& __x, const _Tp& __y)\n{\n    return !(__x < __y);\n}\n\n}  // rel_ops\n\n// swap_ranges\n\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator2\nswap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)\n{\n    for(; __first1 != __last1; ++__first1, (void) ++__first2)\n        swap(*__first1, *__first2);\n    return __first2;\n}\n\n// forward declared in <type_traits>\ntemplate<class _Tp, size_t _Np>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if<\n    __is_swappable<_Tp>::value\n>::type\nswap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value)\n{\n    _VSTD::swap_ranges(__a, __a + _Np, __b);\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\ntypename conditional\n<\n    !is_nothrow_move_constructible<_Tp>::value && is_copy_constructible<_Tp>::value,\n    const _Tp&,\n    _Tp&&\n>::type\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\nconst _Tp&\n#endif\nmove_if_noexcept(_Tp& __x) _NOEXCEPT\n{\n    return _VSTD::move(__x);\n}\n\n#if _LIBCPP_STD_VER > 14\ntemplate <class _Tp> constexpr add_const_t<_Tp>& as_const(_Tp& __t) noexcept { return __t; }\ntemplate <class _Tp>                        void as_const(const _Tp&&) = delete;\n#endif\n\nstruct _LIBCPP_TEMPLATE_VIS piecewise_construct_t { };\n#if defined(_LIBCPP_HAS_NO_CONSTEXPR) || defined(_LIBCPP_BUILDING_UTILITY)\nextern const piecewise_construct_t piecewise_construct;// = piecewise_construct_t();\n#else\nconstexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();\n#endif\n\n#if defined(_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR)\nstruct __non_trivially_copyable_base {\n  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY\n  __non_trivially_copyable_base() _NOEXCEPT {}\n  _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n  __non_trivially_copyable_base(__non_trivially_copyable_base const&) _NOEXCEPT {}\n};\n#endif\n\ntemplate <class _T1, class _T2>\nstruct _LIBCPP_TEMPLATE_VIS pair\n#if defined(_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR)\n: private __non_trivially_copyable_base\n#endif\n{\n    typedef _T1 first_type;\n    typedef _T2 second_type;\n\n    _T1 first;\n    _T2 second;\n\n#if !defined(_LIBCPP_CXX03_LANG)\n    pair(pair const&) = default;\n    pair(pair&&) = default;\n#else\n  // Use the implicitly declared copy constructor in C++03\n#endif\n\n#ifdef _LIBCPP_CXX03_LANG\n    _LIBCPP_INLINE_VISIBILITY\n    pair() : first(), second() {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair(_T1 const& __t1, _T2 const& __t2) : first(__t1), second(__t2) {}\n\n    template <class _U1, class _U2>\n    _LIBCPP_INLINE_VISIBILITY\n    pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair& operator=(pair const& __p) {\n        first = __p.first;\n        second = __p.second;\n        return *this;\n    }\n#else\n    template <bool _Val>\n    using _EnableB = typename enable_if<_Val, bool>::type;\n\n    struct _CheckArgs {\n      template <class _U1, class _U2>\n      static constexpr bool __enable_default() {\n          return is_default_constructible<_U1>::value\n              && is_default_constructible<_U2>::value;\n      }\n\n      template <class _U1, class _U2>\n      static constexpr bool __enable_explicit() {\n          return is_constructible<first_type, _U1>::value\n              && is_constructible<second_type, _U2>::value\n              && (!is_convertible<_U1, first_type>::value\n                  || !is_convertible<_U2, second_type>::value);\n      }\n\n      template <class _U1, class _U2>\n      static constexpr bool __enable_implicit() {\n          return is_constructible<first_type, _U1>::value\n              && is_constructible<second_type, _U2>::value\n              && is_convertible<_U1, first_type>::value\n              && is_convertible<_U2, second_type>::value;\n      }\n    };\n\n    template <bool _MaybeEnable>\n    using _CheckArgsDep = typename conditional<\n      _MaybeEnable, _CheckArgs, __check_tuple_constructor_fail>::type;\n\n    struct _CheckTupleLikeConstructor {\n        template <class _Tuple>\n        static constexpr bool __enable_implicit() {\n            return __tuple_convertible<_Tuple, pair>::value;\n        }\n\n        template <class _Tuple>\n        static constexpr bool __enable_explicit() {\n            return __tuple_constructible<_Tuple, pair>::value\n               && !__tuple_convertible<_Tuple, pair>::value;\n        }\n\n        template <class _Tuple>\n        static constexpr bool __enable_assign() {\n            return __tuple_assignable<_Tuple, pair>::value;\n        }\n    };\n\n    template <class _Tuple>\n    using _CheckTLC = typename conditional<\n        __tuple_like_with_size<_Tuple, 2>::value\n            && !is_same<typename decay<_Tuple>::type, pair>::value,\n        _CheckTupleLikeConstructor,\n        __check_tuple_constructor_fail\n    >::type;\n\n    template<bool _Dummy = true, _EnableB<\n            _CheckArgsDep<_Dummy>::template __enable_default<_T1, _T2>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR\n    pair() : first(), second() {}\n\n    template <bool _Dummy = true, _EnableB<\n             _CheckArgsDep<_Dummy>::template __enable_explicit<_T1 const&, _T2 const&>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    explicit pair(_T1 const& __t1, _T2 const& __t2)\n        : first(__t1), second(__t2) {}\n\n    template<bool _Dummy = true, _EnableB<\n            _CheckArgsDep<_Dummy>::template __enable_implicit<_T1 const&, _T2 const&>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    pair(_T1 const& __t1, _T2 const& __t2)\n        : first(__t1), second(__t2) {}\n\n    template<class _U1, class _U2, _EnableB<\n             _CheckArgs::template __enable_explicit<_U1, _U2>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    explicit pair(_U1&& __u1, _U2&& __u2)\n        : first(_VSTD::forward<_U1>(__u1)), second(_VSTD::forward<_U2>(__u2)) {}\n\n    template<class _U1, class _U2, _EnableB<\n            _CheckArgs::template __enable_implicit<_U1, _U2>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    pair(_U1&& __u1, _U2&& __u2)\n        : first(_VSTD::forward<_U1>(__u1)), second(_VSTD::forward<_U2>(__u2)) {}\n\n    template<class _U1, class _U2, _EnableB<\n            _CheckArgs::template __enable_explicit<_U1 const&, _U2 const&>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    explicit pair(pair<_U1, _U2> const& __p)\n        : first(__p.first), second(__p.second) {}\n\n    template<class _U1, class _U2, _EnableB<\n            _CheckArgs::template __enable_implicit<_U1 const&, _U2 const&>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    pair(pair<_U1, _U2> const& __p)\n        : first(__p.first), second(__p.second) {}\n\n    template<class _U1, class _U2, _EnableB<\n            _CheckArgs::template __enable_explicit<_U1, _U2>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    explicit pair(pair<_U1, _U2>&&__p)\n        : first(_VSTD::forward<_U1>(__p.first)), second(_VSTD::forward<_U2>(__p.second)) {}\n\n    template<class _U1, class _U2, _EnableB<\n            _CheckArgs::template __enable_implicit<_U1, _U2>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    pair(pair<_U1, _U2>&& __p)\n        : first(_VSTD::forward<_U1>(__p.first)), second(_VSTD::forward<_U2>(__p.second)) {}\n\n    template<class _Tuple, _EnableB<\n            _CheckTLC<_Tuple>::template __enable_explicit<_Tuple>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    explicit pair(_Tuple&& __p)\n        : first(_VSTD::get<0>(_VSTD::forward<_Tuple>(__p))),\n          second(_VSTD::get<1>(_VSTD::forward<_Tuple>(__p))) {}\n\n    template<class _Tuple, _EnableB<\n            _CheckTLC<_Tuple>::template __enable_implicit<_Tuple>()\n    > = false>\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    pair(_Tuple&& __p)\n        : first(_VSTD::get<0>(_VSTD::forward<_Tuple>(__p))),\n          second(_VSTD::get<1>(_VSTD::forward<_Tuple>(__p))) {}\n\n    template <class... _Args1, class... _Args2>\n    _LIBCPP_INLINE_VISIBILITY\n    pair(piecewise_construct_t __pc,\n         tuple<_Args1...> __first_args, tuple<_Args2...> __second_args)\n        : pair(__pc, __first_args, __second_args,\n                typename __make_tuple_indices<sizeof...(_Args1)>::type(),\n                typename __make_tuple_indices<sizeof...(_Args2) >::type()) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair& operator=(typename conditional<\n                        is_copy_assignable<first_type>::value &&\n                        is_copy_assignable<second_type>::value,\n                    pair, __nat>::type const& __p)\n        _NOEXCEPT_(is_nothrow_copy_assignable<first_type>::value &&\n                   is_nothrow_copy_assignable<second_type>::value)\n    {\n        first = __p.first;\n        second = __p.second;\n        return *this;\n    }\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair& operator=(typename conditional<\n                        is_move_assignable<first_type>::value &&\n                        is_move_assignable<second_type>::value,\n                    pair, __nat>::type&& __p)\n        _NOEXCEPT_(is_nothrow_move_assignable<first_type>::value &&\n                   is_nothrow_move_assignable<second_type>::value)\n    {\n        first = _VSTD::forward<first_type>(__p.first);\n        second = _VSTD::forward<second_type>(__p.second);\n        return *this;\n    }\n\n    template <class _Tuple, _EnableB<\n            _CheckTLC<_Tuple>::template __enable_assign<_Tuple>()\n     > = false>\n    _LIBCPP_INLINE_VISIBILITY\n    pair& operator=(_Tuple&& __p) {\n        first = _VSTD::get<0>(_VSTD::forward<_Tuple>(__p));\n        second = _VSTD::get<1>(_VSTD::forward<_Tuple>(__p));\n        return *this;\n    }\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    void\n    swap(pair& __p) _NOEXCEPT_(__is_nothrow_swappable<first_type>::value &&\n                               __is_nothrow_swappable<second_type>::value)\n    {\n        using _VSTD::swap;\n        swap(first,  __p.first);\n        swap(second, __p.second);\n    }\nprivate:\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>\n        _LIBCPP_INLINE_VISIBILITY\n        pair(piecewise_construct_t,\n             tuple<_Args1...>& __first_args, tuple<_Args2...>& __second_args,\n             __tuple_indices<_I1...>, __tuple_indices<_I2...>);\n#endif\n};\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator==(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)\n{\n    return __x.first == __y.first && __x.second == __y.second;\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator!=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)\n{\n    return !(__x == __y);\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator< (const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)\n{\n    return __x.first < __y.first || (!(__y.first < __x.first) && __x.second < __y.second);\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator> (const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)\n{\n    return __y < __x;\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator>=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)\n{\n    return !(__x < __y);\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nbool\noperator<=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)\n{\n    return !(__y < __x);\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    __is_swappable<_T1>::value &&\n    __is_swappable<_T2>::value,\n    void\n>::type\nswap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\n                     _NOEXCEPT_((__is_nothrow_swappable<_T1>::value &&\n                                 __is_nothrow_swappable<_T2>::value))\n{\n    __x.swap(__y);\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n\ntemplate <class _Tp>\nstruct __make_pair_return_impl\n{\n    typedef _Tp type;\n};\n\ntemplate <class _Tp>\nstruct __make_pair_return_impl<reference_wrapper<_Tp>>\n{\n    typedef _Tp& type;\n};\n\ntemplate <class _Tp>\nstruct __make_pair_return\n{\n    typedef typename __make_pair_return_impl<typename decay<_Tp>::type>::type type;\n};\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\npair<typename __make_pair_return<_T1>::type, typename __make_pair_return<_T2>::type>\nmake_pair(_T1&& __t1, _T2&& __t2)\n{\n    return pair<typename __make_pair_return<_T1>::type, typename __make_pair_return<_T2>::type>\n               (_VSTD::forward<_T1>(__t1), _VSTD::forward<_T2>(__t2));\n}\n\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_T1,_T2>\nmake_pair(_T1 __x, _T2 __y)\n{\n    return pair<_T1, _T2>(__x, __y);\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _T1, class _T2>\n  class _LIBCPP_TEMPLATE_VIS tuple_size<pair<_T1, _T2> >\n    : public integral_constant<size_t, 2> {};\n\ntemplate <class _T1, class _T2>\nclass _LIBCPP_TEMPLATE_VIS tuple_element<0, pair<_T1, _T2> >\n{\npublic:\n    typedef _T1 type;\n};\n\ntemplate <class _T1, class _T2>\nclass _LIBCPP_TEMPLATE_VIS tuple_element<1, pair<_T1, _T2> >\n{\npublic:\n    typedef _T2 type;\n};\n\ntemplate <size_t _Ip> struct __get_pair;\n\ntemplate <>\nstruct __get_pair<0>\n{\n    template <class _T1, class _T2>\n    static\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    _T1&\n    get(pair<_T1, _T2>& __p) _NOEXCEPT {return __p.first;}\n\n    template <class _T1, class _T2>\n    static\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    const _T1&\n    get(const pair<_T1, _T2>& __p) _NOEXCEPT {return __p.first;}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    template <class _T1, class _T2>\n    static\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    _T1&&\n    get(pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<_T1>(__p.first);}\n\n    template <class _T1, class _T2>\n    static\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    const _T1&&\n    get(const pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<const _T1>(__p.first);}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n};\n\ntemplate <>\nstruct __get_pair<1>\n{\n    template <class _T1, class _T2>\n    static\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    _T2&\n    get(pair<_T1, _T2>& __p) _NOEXCEPT {return __p.second;}\n\n    template <class _T1, class _T2>\n    static\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    const _T2&\n    get(const pair<_T1, _T2>& __p) _NOEXCEPT {return __p.second;}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    template <class _T1, class _T2>\n    static\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    _T2&&\n    get(pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<_T2>(__p.second);}\n\n    template <class _T1, class _T2>\n    static\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    const _T2&&\n    get(const pair<_T1, _T2>&& __p) _NOEXCEPT {return _VSTD::forward<const _T2>(__p.second);}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n};\n\ntemplate <size_t _Ip, class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntypename tuple_element<_Ip, pair<_T1, _T2> >::type&\nget(pair<_T1, _T2>& __p) _NOEXCEPT\n{\n    return __get_pair<_Ip>::get(__p);\n}\n\ntemplate <size_t _Ip, class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nconst typename tuple_element<_Ip, pair<_T1, _T2> >::type&\nget(const pair<_T1, _T2>& __p) _NOEXCEPT\n{\n    return __get_pair<_Ip>::get(__p);\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <size_t _Ip, class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\ntypename tuple_element<_Ip, pair<_T1, _T2> >::type&&\nget(pair<_T1, _T2>&& __p) _NOEXCEPT\n{\n    return __get_pair<_Ip>::get(_VSTD::move(__p));\n}\n\ntemplate <size_t _Ip, class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nconst typename tuple_element<_Ip, pair<_T1, _T2> >::type&&\nget(const pair<_T1, _T2>&& __p) _NOEXCEPT\n{\n    return __get_pair<_Ip>::get(_VSTD::move(__p));\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 & get(pair<_T1, _T2>& __p) _NOEXCEPT\n{\n    return __get_pair<0>::get(__p);\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 const & get(pair<_T1, _T2> const& __p) _NOEXCEPT\n{\n    return __get_pair<0>::get(__p);\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 && get(pair<_T1, _T2>&& __p) _NOEXCEPT\n{\n    return __get_pair<0>::get(_VSTD::move(__p));\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 const && get(pair<_T1, _T2> const&& __p) _NOEXCEPT\n{\n    return __get_pair<0>::get(_VSTD::move(__p));\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 & get(pair<_T2, _T1>& __p) _NOEXCEPT\n{\n    return __get_pair<1>::get(__p);\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 const & get(pair<_T2, _T1> const& __p) _NOEXCEPT\n{\n    return __get_pair<1>::get(__p);\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 && get(pair<_T2, _T1>&& __p) _NOEXCEPT\n{\n    return __get_pair<1>::get(_VSTD::move(__p));\n}\n\ntemplate <class _T1, class _T2>\ninline _LIBCPP_INLINE_VISIBILITY\nconstexpr _T1 const && get(pair<_T2, _T1> const&& __p) _NOEXCEPT\n{\n    return __get_pair<1>::get(_VSTD::move(__p));\n}\n\n#endif\n\n#if _LIBCPP_STD_VER > 11\n\ntemplate<class _Tp, _Tp... _Ip>\nstruct _LIBCPP_TEMPLATE_VIS integer_sequence\n{\n    typedef _Tp value_type;\n    static_assert( is_integral<_Tp>::value,\n                  \"std::integer_sequence can only be instantiated with an integral type\" );\n    static\n    _LIBCPP_INLINE_VISIBILITY\n    constexpr\n    size_t\n    size() noexcept { return sizeof...(_Ip); }\n};\n\ntemplate<size_t... _Ip>\n    using index_sequence = integer_sequence<size_t, _Ip...>;\n\n#if __has_builtin(__make_integer_seq) && !defined(_LIBCPP_TESTING_FALLBACK_MAKE_INTEGER_SEQUENCE)\n\ntemplate <class _Tp, _Tp _Ep>\nusing __make_integer_sequence = __make_integer_seq<integer_sequence, _Tp, _Ep>;\n\n#else\n\ntemplate<typename _Tp, _Tp _Np> using __make_integer_sequence_unchecked =\n  typename __detail::__make<_Np>::type::template __convert<integer_sequence, _Tp>;\n\ntemplate <class _Tp, _Tp _Ep>\nstruct __make_integer_sequence_checked\n{\n    static_assert(is_integral<_Tp>::value,\n                  \"std::make_integer_sequence can only be instantiated with an integral type\" );\n    static_assert(0 <= _Ep, \"std::make_integer_sequence must have a non-negative sequence length\");\n    // Workaround GCC bug by preventing bad installations when 0 <= _Ep\n    // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68929\n    typedef __make_integer_sequence_unchecked<_Tp, 0 <= _Ep ? _Ep : 0> type;\n};\n\ntemplate <class _Tp, _Tp _Ep>\nusing __make_integer_sequence = typename __make_integer_sequence_checked<_Tp, _Ep>::type;\n\n#endif\n\ntemplate<class _Tp, _Tp _Np>\n    using make_integer_sequence = __make_integer_sequence<_Tp, _Np>;\n\ntemplate<size_t _Np>\n    using make_index_sequence = make_integer_sequence<size_t, _Np>;\n\ntemplate<class... _Tp>\n    using index_sequence_for = make_index_sequence<sizeof...(_Tp)>;\n\n#endif  // _LIBCPP_STD_VER > 11\n\n#if _LIBCPP_STD_VER > 11\ntemplate<class _T1, class _T2 = _T1>\ninline _LIBCPP_INLINE_VISIBILITY\n_T1 exchange(_T1& __obj, _T2 && __new_value)\n{\n    _T1 __old_value = _VSTD::move(__obj);\n    __obj = _VSTD::forward<_T2>(__new_value);\n    return __old_value;\n}\n#endif  // _LIBCPP_STD_VER > 11\n\n#if _LIBCPP_STD_VER > 14\n\nstruct _LIBCPP_TYPE_VIS in_place_t {\n    explicit in_place_t() = default;\n};\n#ifndef _LIBCPP_HAS_NO_INLINE_VARIABLES\ninline\n#endif\nconstexpr in_place_t in_place{};\n\ntemplate <class _Tp>\nstruct _LIBCPP_TYPE_VIS in_place_type_t {\n    explicit in_place_type_t() = default;\n};\ntemplate <class _Tp>\n#ifndef _LIBCPP_HAS_NO_INLINE_VARIABLES\ninline\n#endif\nconstexpr in_place_type_t<_Tp> in_place_type{};\n\ntemplate <size_t _Idx>\nstruct _LIBCPP_TYPE_VIS in_place_index_t {\n    explicit in_place_index_t() = default;\n};\ntemplate <size_t _Idx>\n#ifndef _LIBCPP_HAS_NO_INLINE_VARIABLES\ninline\n#endif\nconstexpr in_place_index_t<_Idx> in_place_index{};\n\ntemplate <class _Tp> struct __is_inplace_type_imp : false_type {};\ntemplate <class _Tp> struct __is_inplace_type_imp<in_place_type_t<_Tp>> : true_type {};\n\ntemplate <class _Tp>\nusing __is_inplace_type = __is_inplace_type_imp<__uncvref_t<_Tp>>;\n\n#endif // _LIBCPP_STD_VER > 14\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_UTILITY\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2018\n *\n *  @file  Trait.h\n *  @brief Directly measure a target quality about a type of object.\n *\n *  These objects are able to measure a specific trait on another object.  They\n *  (will eventually) interface smoothly with DataNodes for data collection.\n */\n\n#ifndef EMP_DATA_TRAIT_H\n#define EMP_DATA_TRAIT_H\n\n#include <string>\n\n#include \"../base/assert.h\"\n#include \"../base/Ptr.h\"\n#include \"../base/vector.h\"\n#include \"../tools/Range.h\"\n#include \"../tools/string_utils.h\"\n\nnamespace emp {\n\n  // Pre-declaration of traits.\n  template <typename TARGET_T, typename VALUE_T> class Trait;\n\n  template <typename TARGET_T>\n  class BaseTrait {\n  public:\n    virtual ~BaseTrait() { ; }\n\n    virtual std::string EvalString(TARGET_T & target) const = 0;\n    virtual double EvalValue(TARGET_T & target) const = 0;\n    virtual size_t EvalBin(TARGET_T & target, size_t num_bins) const = 0;\n\n    virtual Ptr<BaseTrait<TARGET_T>> Clone() const = 0;\n\n    template <typename VALUE_T>\n    bool IsType() { return (bool) dynamic_cast<Trait<TARGET_T,VALUE_T>>(this); }\n  };\n\n  template <typename TARGET_T, typename VALUE_T=double>\n  class Trait : public BaseTrait<TARGET_T> {\n  public:\n    using this_t = Trait<TARGET_T, VALUE_T>;\n    using target_t = TARGET_T;\n    using value_t = VALUE_T;\n    using fun_t = std::function<value_t(target_t &)>;\n    using range_t = emp::Range<value_t>;\n\n  protected:\n    std::string name;   ///< Unique name for this trait.\n    std::string desc;   ///< Full description explaining this trait.\n    fun_t fun;          ///< Function to retrieve trait value from target.\n    range_t range;      ///< Limits on legal values (defaults to extremes)\n\n  public:\n    Trait(const std::string & _n, const fun_t & _f)\n      : name(_n), desc(\"\"), fun(_f), range() { ; }\n    Trait(const std::string & _n, const fun_t & _f, value_t min, value_t max)\n      : name(_n), desc(\"\"), fun(_f), range(min, max) { ; }\n    Trait(const std::string & _n, const fun_t & _f, const range_t & _r)\n      : name(_n), desc(\"\"), fun(_f), range(_r) { ; }\n    Trait(const Trait &) = default;\n    Trait(Trait &&) = default;\n\n    Trait & operator=(const Trait &) = default;\n    Trait & operator=(Trait &&) = default;\n\n    const std::string & GetName() const { return name; }\n    const std::string & GetDesc() const { return desc; }\n    const fun_t & GetFun() const { return fun; }\n    const range_t & GetRange() const { return range; }\n\n    void SetName(const std::string & _in) { name = _in; }\n    void SetDesc(const std::string & _in) { desc = _in; }\n    void SetFun(const fun_t & _in) { fun = _in; }\n    void SetRange(const range_t & _in) { range = _in; }\n    void SetRange(value_t min, value_t max) { range.Set(min, max); }\n    void SetMin(value_t min) { range.SetLower(min); }\n    void SetMax(value_t max) { range.SetUpper(max); }\n\n    value_t Eval(target_t & target) const { return fun(target); }\n    value_t EvalLimit(target_t & target) const { return range.Limit(fun(target)); }\n    std::string EvalString(target_t & target) const { return std::to_string(EvalLimit(target)); }\n    double EvalValue(target_t & target) const { return (double) EvalLimit(target); }\n\n    // Determine which bin a trait fits in based on the number of bins and the range.\n    size_t EvalBin(target_t & target, size_t num_bins) const {\n      const value_t val = fun(target);\n      return range.CalcBin(val, num_bins);\n    }\n\n    Ptr<BaseTrait<TARGET_T>> Clone() const {\n      return NewPtr<this_t>(*this);\n    };\n  };\n\n  /// A TraitSet houses a collection of traits and can trigger them to all be evaluated at once.\n  template <typename TARGET_T>\n  class TraitSet {\n  public:\n    using target_t = TARGET_T;\n    using trait_t = BaseTrait<target_t>;\n\n  protected:\n    emp::vector<emp::Ptr<trait_t>> traits;\n\n  public:\n    TraitSet() : traits(0) { ; }\n    TraitSet(TraitSet && in) : traits(in.traits) { in.traits.resize(0); }\n    TraitSet(const TraitSet & in) : traits(ClonePtrs(in.traits)) { ; }\n    ~TraitSet() { Clear(); }\n\n    TraitSet & operator=(TraitSet && in) {\n      Clear();\n      traits = in.traits;\n      in.traits.resize(0);\n      return *this;\n    }\n    TraitSet & operator=(const TraitSet & in) {\n      Clear();\n      traits = ClonePtrs(in.traits);\n      return *this;\n    }\n\n    trait_t & operator[](size_t id) { return *(traits[id]); }\n    const trait_t & operator[](size_t id) const { return *(traits[id]); }\n\n    size_t GetSize() const { return traits.size(); }\n\n    void Clear() { for (auto & ptr : traits) ptr.Delete(); traits.resize(0); }\n\n    size_t Find(const std::string & name) const {\n      for (size_t i = 0; i < traits.size(); i++) {\n        if (traits[i]->GetName() == name) return i;\n      }\n      return (size_t) -1;\n    }\n    bool Has(const std::string & name) const { return Find(name) < traits.size(); }\n\n    template <typename VALUE_T, typename... EXTRA>\n    void AddTrait(const std::string & name,\n                  const std::function<VALUE_T(target_t &)> & fun,\n                  EXTRA &&... extra) {\n      auto ptr = emp::NewPtr< Trait<target_t, VALUE_T> >(name, fun, std::forward<EXTRA>(extra)...);\n      traits.push_back(ptr);\n    }\n\n    std::string EvalString(size_t id, target_t & target) const { return traits[id]->EvalString(target); }\n    double EvalValue(size_t id, target_t & target) const { return traits[id]->EvalValue(target); }\n\n    emp::vector<std::string> EvalStrings(target_t & target) const {\n      emp::vector<std::string> results(traits.size());\n      for (size_t i = 0; i < traits.size(); i++) results[i] = traits[i]->EvalString(target);\n      return results;\n    }\n    emp::vector<double> EvalValues(target_t & target) const {\n      emp::vector<double> results(traits.size());\n      for (size_t i = 0; i < traits.size(); i++) results[i] = traits[i]->EvalValue(target);\n      return results;\n    }\n\n    // Determine which bin a trait fits in based on the number of bins and the range.\n    size_t EvalBin(target_t & target, emp::vector<size_t> bin_counts) const {\n      size_t mult = 1;\n      size_t id = 0;\n      for (size_t i = 0; i < traits.size(); i++) {\n        id += traits[i]->EvalBin(target, bin_counts[i]) * mult;\n        mult *= bin_counts[i];\n      }\n      return id;\n    }\n\n    emp::vector<double> CalcOffsets(target_t & target1, target_t & target2) const {\n      emp::vector<double> offsets(traits.size());\n      for (size_t i = 0; i < traits.size(); i++) {\n        offsets[i] = traits[i]->EvalValue(target2) - traits[i]->EvalValue(target1);\n      }\n      return offsets;\n    }\n  };\n\n}\n\n#endif\n","// -*- C++ -*-\n//===-------------------------- algorithm ---------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_ALGORITHM\n#define _LIBCPP_ALGORITHM\n\n/*\n    algorithm synopsis\n\n#include <initializer_list>\n\nnamespace std\n{\n\ntemplate <class InputIterator, class Predicate>\n    bool\n    all_of(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate <class InputIterator, class Predicate>\n    bool\n    any_of(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate <class InputIterator, class Predicate>\n    bool\n    none_of(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate <class InputIterator, class Function>\n    Function\n    for_each(InputIterator first, InputIterator last, Function f);\n\ntemplate <class InputIterator, class T>\n    InputIterator\n    find(InputIterator first, InputIterator last, const T& value);\n\ntemplate <class InputIterator, class Predicate>\n    InputIterator\n    find_if(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate<class InputIterator, class Predicate>\n    InputIterator\n    find_if_not(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate <class ForwardIterator1, class ForwardIterator2>\n    ForwardIterator1\n    find_end(ForwardIterator1 first1, ForwardIterator1 last1,\n             ForwardIterator2 first2, ForwardIterator2 last2);\n\ntemplate <class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>\n    ForwardIterator1\n    find_end(ForwardIterator1 first1, ForwardIterator1 last1,\n             ForwardIterator2 first2, ForwardIterator2 last2, BinaryPredicate pred);\n\ntemplate <class ForwardIterator1, class ForwardIterator2>\n    ForwardIterator1\n    find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,\n                  ForwardIterator2 first2, ForwardIterator2 last2);\n\ntemplate <class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>\n    ForwardIterator1\n    find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,\n                  ForwardIterator2 first2, ForwardIterator2 last2, BinaryPredicate pred);\n\ntemplate <class ForwardIterator>\n    ForwardIterator\n    adjacent_find(ForwardIterator first, ForwardIterator last);\n\ntemplate <class ForwardIterator, class BinaryPredicate>\n    ForwardIterator\n    adjacent_find(ForwardIterator first, ForwardIterator last, BinaryPredicate pred);\n\ntemplate <class InputIterator, class T>\n    typename iterator_traits<InputIterator>::difference_type\n    count(InputIterator first, InputIterator last, const T& value);\n\ntemplate <class InputIterator, class Predicate>\n    typename iterator_traits<InputIterator>::difference_type\n    count_if(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate <class InputIterator1, class InputIterator2>\n    pair<InputIterator1, InputIterator2>\n    mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2);\n\ntemplate <class InputIterator1, class InputIterator2>\n    pair<InputIterator1, InputIterator2>\n    mismatch(InputIterator1 first1, InputIterator1 last1,\n             InputIterator2 first2, InputIterator2 last2); // **C++14**\n\ntemplate <class InputIterator1, class InputIterator2, class BinaryPredicate>\n    pair<InputIterator1, InputIterator2>\n    mismatch(InputIterator1 first1, InputIterator1 last1,\n             InputIterator2 first2, BinaryPredicate pred);\n\ntemplate <class InputIterator1, class InputIterator2, class BinaryPredicate>\n    pair<InputIterator1, InputIterator2>\n    mismatch(InputIterator1 first1, InputIterator1 last1,\n             InputIterator2 first2, InputIterator2 last2,\n             BinaryPredicate pred); // **C++14**\n\ntemplate <class InputIterator1, class InputIterator2>\n    bool\n    equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2);\n\ntemplate <class InputIterator1, class InputIterator2>\n    bool\n    equal(InputIterator1 first1, InputIterator1 last1,\n          InputIterator2 first2, InputIterator2 last2); // **C++14**\n\ntemplate <class InputIterator1, class InputIterator2, class BinaryPredicate>\n    bool\n    equal(InputIterator1 first1, InputIterator1 last1,\n          InputIterator2 first2, BinaryPredicate pred);\n\ntemplate <class InputIterator1, class InputIterator2, class BinaryPredicate>\n    bool\n    equal(InputIterator1 first1, InputIterator1 last1,\n          InputIterator2 first2, InputIterator2 last2,\n          BinaryPredicate pred); // **C++14**\n\ntemplate<class ForwardIterator1, class ForwardIterator2>\n    bool\n    is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,\n                   ForwardIterator2 first2);\n\ntemplate<class ForwardIterator1, class ForwardIterator2>\n    bool\n    is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,\n                   ForwardIterator2 first2, ForwardIterator2 last2); // **C++14**\n\ntemplate<class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>\n    bool\n    is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,\n                   ForwardIterator2 first2, BinaryPredicate pred);\n\ntemplate<class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>\n    bool\n    is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,\n                   ForwardIterator2 first2, ForwardIterator2 last2,\n                   BinaryPredicate pred);  // **C++14**\n\ntemplate <class ForwardIterator1, class ForwardIterator2>\n    ForwardIterator1\n    search(ForwardIterator1 first1, ForwardIterator1 last1,\n           ForwardIterator2 first2, ForwardIterator2 last2);\n\ntemplate <class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>\n    ForwardIterator1\n    search(ForwardIterator1 first1, ForwardIterator1 last1,\n           ForwardIterator2 first2, ForwardIterator2 last2, BinaryPredicate pred);\n\ntemplate <class ForwardIterator, class Size, class T>\n    ForwardIterator\n    search_n(ForwardIterator first, ForwardIterator last, Size count, const T& value);\n\ntemplate <class ForwardIterator, class Size, class T, class BinaryPredicate>\n    ForwardIterator\n    search_n(ForwardIterator first, ForwardIterator last,\n             Size count, const T& value, BinaryPredicate pred);\n\ntemplate <class InputIterator, class OutputIterator>\n    OutputIterator\n    copy(InputIterator first, InputIterator last, OutputIterator result);\n\ntemplate<class InputIterator, class OutputIterator, class Predicate>\n    OutputIterator\n    copy_if(InputIterator first, InputIterator last,\n            OutputIterator result, Predicate pred);\n\ntemplate<class InputIterator, class Size, class OutputIterator>\n    OutputIterator\n    copy_n(InputIterator first, Size n, OutputIterator result);\n\ntemplate <class BidirectionalIterator1, class BidirectionalIterator2>\n    BidirectionalIterator2\n    copy_backward(BidirectionalIterator1 first, BidirectionalIterator1 last,\n                  BidirectionalIterator2 result);\n\ntemplate <class ForwardIterator1, class ForwardIterator2>\n    ForwardIterator2\n    swap_ranges(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2);\n\ntemplate <class ForwardIterator1, class ForwardIterator2>\n    void\n    iter_swap(ForwardIterator1 a, ForwardIterator2 b);\n\ntemplate <class InputIterator, class OutputIterator, class UnaryOperation>\n    OutputIterator\n    transform(InputIterator first, InputIterator last, OutputIterator result, UnaryOperation op);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator, class BinaryOperation>\n    OutputIterator\n    transform(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2,\n              OutputIterator result, BinaryOperation binary_op);\n\ntemplate <class ForwardIterator, class T>\n    void\n    replace(ForwardIterator first, ForwardIterator last, const T& old_value, const T& new_value);\n\ntemplate <class ForwardIterator, class Predicate, class T>\n    void\n    replace_if(ForwardIterator first, ForwardIterator last, Predicate pred, const T& new_value);\n\ntemplate <class InputIterator, class OutputIterator, class T>\n    OutputIterator\n    replace_copy(InputIterator first, InputIterator last, OutputIterator result,\n                 const T& old_value, const T& new_value);\n\ntemplate <class InputIterator, class OutputIterator, class Predicate, class T>\n    OutputIterator\n    replace_copy_if(InputIterator first, InputIterator last, OutputIterator result, Predicate pred, const T& new_value);\n\ntemplate <class ForwardIterator, class T>\n    void\n    fill(ForwardIterator first, ForwardIterator last, const T& value);\n\ntemplate <class OutputIterator, class Size, class T>\n    OutputIterator\n    fill_n(OutputIterator first, Size n, const T& value);\n\ntemplate <class ForwardIterator, class Generator>\n    void\n    generate(ForwardIterator first, ForwardIterator last, Generator gen);\n\ntemplate <class OutputIterator, class Size, class Generator>\n    OutputIterator\n    generate_n(OutputIterator first, Size n, Generator gen);\n\ntemplate <class ForwardIterator, class T>\n    ForwardIterator\n    remove(ForwardIterator first, ForwardIterator last, const T& value);\n\ntemplate <class ForwardIterator, class Predicate>\n    ForwardIterator\n    remove_if(ForwardIterator first, ForwardIterator last, Predicate pred);\n\ntemplate <class InputIterator, class OutputIterator, class T>\n    OutputIterator\n    remove_copy(InputIterator first, InputIterator last, OutputIterator result, const T& value);\n\ntemplate <class InputIterator, class OutputIterator, class Predicate>\n    OutputIterator\n    remove_copy_if(InputIterator first, InputIterator last, OutputIterator result, Predicate pred);\n\ntemplate <class ForwardIterator>\n    ForwardIterator\n    unique(ForwardIterator first, ForwardIterator last);\n\ntemplate <class ForwardIterator, class BinaryPredicate>\n    ForwardIterator\n    unique(ForwardIterator first, ForwardIterator last, BinaryPredicate pred);\n\ntemplate <class InputIterator, class OutputIterator>\n    OutputIterator\n    unique_copy(InputIterator first, InputIterator last, OutputIterator result);\n\ntemplate <class InputIterator, class OutputIterator, class BinaryPredicate>\n    OutputIterator\n    unique_copy(InputIterator first, InputIterator last, OutputIterator result, BinaryPredicate pred);\n\ntemplate <class BidirectionalIterator>\n    void\n    reverse(BidirectionalIterator first, BidirectionalIterator last);\n\ntemplate <class BidirectionalIterator, class OutputIterator>\n    OutputIterator\n    reverse_copy(BidirectionalIterator first, BidirectionalIterator last, OutputIterator result);\n\ntemplate <class ForwardIterator>\n    ForwardIterator\n    rotate(ForwardIterator first, ForwardIterator middle, ForwardIterator last);\n\ntemplate <class ForwardIterator, class OutputIterator>\n    OutputIterator\n    rotate_copy(ForwardIterator first, ForwardIterator middle, ForwardIterator last, OutputIterator result);\n\ntemplate <class RandomAccessIterator>\n    void\n    random_shuffle(RandomAccessIterator first, RandomAccessIterator last); // deprecated in C++14\n\ntemplate <class RandomAccessIterator, class RandomNumberGenerator>\n    void\n    random_shuffle(RandomAccessIterator first, RandomAccessIterator last,\n                   RandomNumberGenerator& rand);  // deprecated in C++14\n\ntemplate<class PopulationIterator, class SampleIterator,\n         class Distance, class UniformRandomBitGenerator>\n    SampleIterator sample(PopulationIterator first, PopulationIterator last,\n                          SampleIterator out, Distance n,\n                          UniformRandomBitGenerator&& g); // C++17\n\ntemplate<class RandomAccessIterator, class UniformRandomNumberGenerator>\n    void shuffle(RandomAccessIterator first, RandomAccessIterator last,\n                 UniformRandomNumberGenerator&& g);\n\ntemplate <class InputIterator, class Predicate>\n    bool\n    is_partitioned(InputIterator first, InputIterator last, Predicate pred);\n\ntemplate <class ForwardIterator, class Predicate>\n    ForwardIterator\n    partition(ForwardIterator first, ForwardIterator last, Predicate pred);\n\ntemplate <class InputIterator, class OutputIterator1,\n          class OutputIterator2, class Predicate>\n    pair<OutputIterator1, OutputIterator2>\n    partition_copy(InputIterator first, InputIterator last,\n                   OutputIterator1 out_true, OutputIterator2 out_false,\n                   Predicate pred);\n\ntemplate <class ForwardIterator, class Predicate>\n    ForwardIterator\n    stable_partition(ForwardIterator first, ForwardIterator last, Predicate pred);\n\ntemplate<class ForwardIterator, class Predicate>\n    ForwardIterator\n    partition_point(ForwardIterator first, ForwardIterator last, Predicate pred);\n\ntemplate <class ForwardIterator>\n    bool\n    is_sorted(ForwardIterator first, ForwardIterator last);\n\ntemplate <class ForwardIterator, class Compare>\n    bool\n    is_sorted(ForwardIterator first, ForwardIterator last, Compare comp);\n\ntemplate<class ForwardIterator>\n    ForwardIterator\n    is_sorted_until(ForwardIterator first, ForwardIterator last);\n\ntemplate <class ForwardIterator, class Compare>\n    ForwardIterator\n    is_sorted_until(ForwardIterator first, ForwardIterator last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    void\n    sort(RandomAccessIterator first, RandomAccessIterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    void\n    sort(RandomAccessIterator first, RandomAccessIterator last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    void\n    stable_sort(RandomAccessIterator first, RandomAccessIterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    void\n    stable_sort(RandomAccessIterator first, RandomAccessIterator last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    void\n    partial_sort(RandomAccessIterator first, RandomAccessIterator middle, RandomAccessIterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    void\n    partial_sort(RandomAccessIterator first, RandomAccessIterator middle, RandomAccessIterator last, Compare comp);\n\ntemplate <class InputIterator, class RandomAccessIterator>\n    RandomAccessIterator\n    partial_sort_copy(InputIterator first, InputIterator last,\n                      RandomAccessIterator result_first, RandomAccessIterator result_last);\n\ntemplate <class InputIterator, class RandomAccessIterator, class Compare>\n    RandomAccessIterator\n    partial_sort_copy(InputIterator first, InputIterator last,\n                      RandomAccessIterator result_first, RandomAccessIterator result_last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    void\n    nth_element(RandomAccessIterator first, RandomAccessIterator nth, RandomAccessIterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    void\n    nth_element(RandomAccessIterator first, RandomAccessIterator nth, RandomAccessIterator last, Compare comp);\n\ntemplate <class ForwardIterator, class T>\n    ForwardIterator\n    lower_bound(ForwardIterator first, ForwardIterator last, const T& value);\n\ntemplate <class ForwardIterator, class T, class Compare>\n    ForwardIterator\n    lower_bound(ForwardIterator first, ForwardIterator last, const T& value, Compare comp);\n\ntemplate <class ForwardIterator, class T>\n    ForwardIterator\n    upper_bound(ForwardIterator first, ForwardIterator last, const T& value);\n\ntemplate <class ForwardIterator, class T, class Compare>\n    ForwardIterator\n    upper_bound(ForwardIterator first, ForwardIterator last, const T& value, Compare comp);\n\ntemplate <class ForwardIterator, class T>\n    pair<ForwardIterator, ForwardIterator>\n    equal_range(ForwardIterator first, ForwardIterator last, const T& value);\n\ntemplate <class ForwardIterator, class T, class Compare>\n    pair<ForwardIterator, ForwardIterator>\n    equal_range(ForwardIterator first, ForwardIterator last, const T& value, Compare comp);\n\ntemplate <class ForwardIterator, class T>\n    bool\n    binary_search(ForwardIterator first, ForwardIterator last, const T& value);\n\ntemplate <class ForwardIterator, class T, class Compare>\n    bool\n    binary_search(ForwardIterator first, ForwardIterator last, const T& value, Compare comp);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator>\n    OutputIterator\n    merge(InputIterator1 first1, InputIterator1 last1,\n          InputIterator2 first2, InputIterator2 last2, OutputIterator result);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator, class Compare>\n    OutputIterator\n    merge(InputIterator1 first1, InputIterator1 last1,\n          InputIterator2 first2, InputIterator2 last2, OutputIterator result, Compare comp);\n\ntemplate <class BidirectionalIterator>\n    void\n    inplace_merge(BidirectionalIterator first, BidirectionalIterator middle, BidirectionalIterator last);\n\ntemplate <class BidirectionalIterator, class Compare>\n    void\n    inplace_merge(BidirectionalIterator first, BidirectionalIterator middle, BidirectionalIterator last, Compare comp);\n\ntemplate <class InputIterator1, class InputIterator2>\n    bool\n    includes(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2);\n\ntemplate <class InputIterator1, class InputIterator2, class Compare>\n    bool\n    includes(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, Compare comp);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator>\n    OutputIterator\n    set_union(InputIterator1 first1, InputIterator1 last1,\n              InputIterator2 first2, InputIterator2 last2, OutputIterator result);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator, class Compare>\n    OutputIterator\n    set_union(InputIterator1 first1, InputIterator1 last1,\n              InputIterator2 first2, InputIterator2 last2, OutputIterator result, Compare comp);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator>\n    OutputIterator\n    set_intersection(InputIterator1 first1, InputIterator1 last1,\n                     InputIterator2 first2, InputIterator2 last2, OutputIterator result);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator, class Compare>\n    OutputIterator\n    set_intersection(InputIterator1 first1, InputIterator1 last1,\n                     InputIterator2 first2, InputIterator2 last2, OutputIterator result, Compare comp);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator>\n    OutputIterator\n    set_difference(InputIterator1 first1, InputIterator1 last1,\n                   InputIterator2 first2, InputIterator2 last2, OutputIterator result);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator, class Compare>\n    OutputIterator\n    set_difference(InputIterator1 first1, InputIterator1 last1,\n                   InputIterator2 first2, InputIterator2 last2, OutputIterator result, Compare comp);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator>\n    OutputIterator\n    set_symmetric_difference(InputIterator1 first1, InputIterator1 last1,\n                             InputIterator2 first2, InputIterator2 last2, OutputIterator result);\n\ntemplate <class InputIterator1, class InputIterator2, class OutputIterator, class Compare>\n    OutputIterator\n    set_symmetric_difference(InputIterator1 first1, InputIterator1 last1,\n                             InputIterator2 first2, InputIterator2 last2, OutputIterator result, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    void\n    push_heap(RandomAccessIterator first, RandomAccessIterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    void\n    push_heap(RandomAccessIterator first, RandomAccessIterator last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    void\n    pop_heap(RandomAccessIterator first, RandomAccessIterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    void\n    pop_heap(RandomAccessIterator first, RandomAccessIterator last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    void\n    make_heap(RandomAccessIterator first, RandomAccessIterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    void\n    make_heap(RandomAccessIterator first, RandomAccessIterator last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    void\n    sort_heap(RandomAccessIterator first, RandomAccessIterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    void\n    sort_heap(RandomAccessIterator first, RandomAccessIterator last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    bool\n    is_heap(RandomAccessIterator first, RandomAccessiterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    bool\n    is_heap(RandomAccessIterator first, RandomAccessiterator last, Compare comp);\n\ntemplate <class RandomAccessIterator>\n    RandomAccessIterator\n    is_heap_until(RandomAccessIterator first, RandomAccessiterator last);\n\ntemplate <class RandomAccessIterator, class Compare>\n    RandomAccessIterator\n    is_heap_until(RandomAccessIterator first, RandomAccessiterator last, Compare comp);\n\ntemplate <class ForwardIterator>\n    ForwardIterator\n    min_element(ForwardIterator first, ForwardIterator last);  // constexpr in C++14\n\ntemplate <class ForwardIterator, class Compare>\n    ForwardIterator\n    min_element(ForwardIterator first, ForwardIterator last, Compare comp);  // constexpr in C++14\n\ntemplate <class T>\n    const T&\n    min(const T& a, const T& b);  // constexpr in C++14\n\ntemplate <class T, class Compare>\n    const T&\n    min(const T& a, const T& b, Compare comp);  // constexpr in C++14\n\ntemplate<class T>\n    T\n    min(initializer_list<T> t);  // constexpr in C++14\n\ntemplate<class T, class Compare>\n    T\n    min(initializer_list<T> t, Compare comp);  // constexpr in C++14\n\ntemplate<class T>\n    constexpr const T& clamp( const T& v, const T& lo, const T& hi );               // C++17\n\ntemplate<class T, class Compare>\n    constexpr const T& clamp( const T& v, const T& lo, const T& hi, Compare comp ); // C++17\n\ntemplate <class ForwardIterator>\n    ForwardIterator\n    max_element(ForwardIterator first, ForwardIterator last);  // constexpr in C++14\n\ntemplate <class ForwardIterator, class Compare>\n    ForwardIterator\n    max_element(ForwardIterator first, ForwardIterator last, Compare comp);  // constexpr in C++14\n\ntemplate <class T>\n    const T&\n    max(const T& a, const T& b); // constexpr in C++14\n\ntemplate <class T, class Compare>\n    const T&\n    max(const T& a, const T& b, Compare comp);  // constexpr in C++14\n\ntemplate<class T>\n    T\n    max(initializer_list<T> t);  // constexpr in C++14\n\ntemplate<class T, class Compare>\n    T\n    max(initializer_list<T> t, Compare comp);  // constexpr in C++14\n\ntemplate<class ForwardIterator>\n    pair<ForwardIterator, ForwardIterator>\n    minmax_element(ForwardIterator first, ForwardIterator last);   // constexpr in C++14\n\ntemplate<class ForwardIterator, class Compare>\n    pair<ForwardIterator, ForwardIterator>\n    minmax_element(ForwardIterator first, ForwardIterator last, Compare comp);   // constexpr in C++14\n\ntemplate<class T>\n    pair<const T&, const T&>\n    minmax(const T& a, const T& b);  // constexpr in C++14\n\ntemplate<class T, class Compare>\n    pair<const T&, const T&>\n    minmax(const T& a, const T& b, Compare comp);  // constexpr in C++14\n\ntemplate<class T>\n    pair<T, T>\n    minmax(initializer_list<T> t);  // constexpr in C++14\n\ntemplate<class T, class Compare>\n    pair<T, T>\n    minmax(initializer_list<T> t, Compare comp);  // constexpr in C++14\n\ntemplate <class InputIterator1, class InputIterator2>\n    bool\n    lexicographical_compare(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2);\n\ntemplate <class InputIterator1, class InputIterator2, class Compare>\n    bool\n    lexicographical_compare(InputIterator1 first1, InputIterator1 last1,\n                            InputIterator2 first2, InputIterator2 last2, Compare comp);\n\ntemplate <class BidirectionalIterator>\n    bool\n    next_permutation(BidirectionalIterator first, BidirectionalIterator last);\n\ntemplate <class BidirectionalIterator, class Compare>\n    bool\n    next_permutation(BidirectionalIterator first, BidirectionalIterator last, Compare comp);\n\ntemplate <class BidirectionalIterator>\n    bool\n    prev_permutation(BidirectionalIterator first, BidirectionalIterator last);\n\ntemplate <class BidirectionalIterator, class Compare>\n    bool\n    prev_permutation(BidirectionalIterator first, BidirectionalIterator last, Compare comp);\n\n}  // std\n\n*/\n\n#include <__config>\n#include <initializer_list>\n#include <type_traits>\n#include <cstring>\n#include <utility> // needed to provide swap_ranges.\n#include <memory>\n#include <iterator>\n#include <cstddef>\n\n#if defined(__IBMCPP__)\n#include \"support/ibm/support.h\"\n#endif\n#if defined(_LIBCPP_MSVCRT) || defined(__MINGW32__)\n#include \"support/win32/support.h\"\n#endif\n\n#include <__undef_min_max>\n\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\n// I'd like to replace these with _VSTD::equal_to<void>, but can't because:\n//   * That only works with C++14 and later, and\n//   * We haven't included <functional> here.\ntemplate <class _T1, class _T2 = _T1>\nstruct __equal_to\n{\n    _LIBCPP_INLINE_VISIBILITY bool operator()(const _T1& __x, const _T1& __y) const {return __x == __y;}\n    _LIBCPP_INLINE_VISIBILITY bool operator()(const _T1& __x, const _T2& __y) const {return __x == __y;}\n    _LIBCPP_INLINE_VISIBILITY bool operator()(const _T2& __x, const _T1& __y) const {return __x == __y;}\n    _LIBCPP_INLINE_VISIBILITY bool operator()(const _T2& __x, const _T2& __y) const {return __x == __y;}\n};\n\ntemplate <class _T1>\nstruct __equal_to<_T1, _T1>\n{\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T1& __x, const _T1& __y) const {return __x == __y;}\n};\n\ntemplate <class _T1>\nstruct __equal_to<const _T1, _T1>\n{\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T1& __x, const _T1& __y) const {return __x == __y;}\n};\n\ntemplate <class _T1>\nstruct __equal_to<_T1, const _T1>\n{\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T1& __x, const _T1& __y) const {return __x == __y;}\n};\n\ntemplate <class _T1, class _T2 = _T1>\nstruct __less\n{\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T1& __x, const _T1& __y) const {return __x < __y;}\n\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T1& __x, const _T2& __y) const {return __x < __y;}\n\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T2& __x, const _T1& __y) const {return __x < __y;}\n\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T2& __x, const _T2& __y) const {return __x < __y;}\n};\n\ntemplate <class _T1>\nstruct __less<_T1, _T1>\n{\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T1& __x, const _T1& __y) const {return __x < __y;}\n};\n\ntemplate <class _T1>\nstruct __less<const _T1, _T1>\n{\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T1& __x, const _T1& __y) const {return __x < __y;}\n};\n\ntemplate <class _T1>\nstruct __less<_T1, const _T1>\n{\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n    bool operator()(const _T1& __x, const _T1& __y) const {return __x < __y;}\n};\n\ntemplate <class _Predicate>\nclass __negate\n{\nprivate:\n    _Predicate __p_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY __negate() {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __negate(_Predicate __p) : __p_(__p) {}\n\n    template <class _T1>\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _T1& __x) {return !__p_(__x);}\n\n    template <class _T1, class _T2>\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _T1& __x, const _T2& __y) {return !__p_(__x, __y);}\n};\n\n#ifdef _LIBCPP_DEBUG\n\ntemplate <class _Compare>\nstruct __debug_less\n{\n    _Compare __comp_;\n    __debug_less(_Compare& __c) : __comp_(__c) {}\n\n    template <class _Tp, class _Up>\n    bool operator()(const _Tp& __x, const _Up& __y)\n    {\n        bool __r = __comp_(__x, __y);\n        if (__r)\n            __do_compare_assert(0, __y, __x);\n        return __r;\n    }\n\n    template <class _LHS, class _RHS>\n    inline _LIBCPP_INLINE_VISIBILITY\n    decltype((void)_VSTD::declval<_Compare&>()(\n        _VSTD::declval<_LHS const&>(), _VSTD::declval<_RHS const&>()))\n    __do_compare_assert(int, _LHS const& __l, _RHS const& __r) {\n        _LIBCPP_ASSERT(!__comp_(__l, __r),\n            \"Comparator does not induce a strict weak ordering\");\n    }\n\n    template <class _LHS, class _RHS>\n    inline _LIBCPP_INLINE_VISIBILITY\n    void __do_compare_assert(long, _LHS const&, _RHS const&) {}\n};\n\n#endif  // _LIBCPP_DEBUG\n\n// Precondition:  __x != 0\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned\n__ctz(unsigned __x)\n{\n    return static_cast<unsigned>(__builtin_ctz(__x));\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned long\n__ctz(unsigned long __x)\n{\n    return static_cast<unsigned long>(__builtin_ctzl(__x));\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned long long\n__ctz(unsigned long long __x)\n{\n    return static_cast<unsigned long long>(__builtin_ctzll(__x));\n}\n\n// Precondition:  __x != 0\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned\n__clz(unsigned __x)\n{\n    return static_cast<unsigned>(__builtin_clz(__x));\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned long\n__clz(unsigned long __x)\n{\n    return static_cast<unsigned long>(__builtin_clzl (__x));\n}\n\ninline _LIBCPP_INLINE_VISIBILITY\nunsigned long long\n__clz(unsigned long long __x)\n{\n    return static_cast<unsigned long long>(__builtin_clzll(__x));\n}\n\ninline _LIBCPP_INLINE_VISIBILITY int __pop_count(unsigned           __x) {return __builtin_popcount  (__x);}\ninline _LIBCPP_INLINE_VISIBILITY int __pop_count(unsigned      long __x) {return __builtin_popcountl (__x);}\ninline _LIBCPP_INLINE_VISIBILITY int __pop_count(unsigned long long __x) {return __builtin_popcountll(__x);}\n\n// all_of\n\ntemplate <class _InputIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nall_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n        if (!__pred(*__first))\n            return false;\n    return true;\n}\n\n// any_of\n\ntemplate <class _InputIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nany_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n        if (__pred(*__first))\n            return true;\n    return false;\n}\n\n// none_of\n\ntemplate <class _InputIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nnone_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n        if (__pred(*__first))\n            return false;\n    return true;\n}\n\n// for_each\n\ntemplate <class _InputIterator, class _Function>\ninline _LIBCPP_INLINE_VISIBILITY\n_Function\nfor_each(_InputIterator __first, _InputIterator __last, _Function __f)\n{\n    for (; __first != __last; ++__first)\n        __f(*__first);\n    return __f;\n}\n\n// find\n\ntemplate <class _InputIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_InputIterator\nfind(_InputIterator __first, _InputIterator __last, const _Tp& __value_)\n{\n    for (; __first != __last; ++__first)\n        if (*__first == __value_)\n            break;\n    return __first;\n}\n\n// find_if\n\ntemplate <class _InputIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_InputIterator\nfind_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n        if (__pred(*__first))\n            break;\n    return __first;\n}\n\n// find_if_not\n\ntemplate<class _InputIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_InputIterator\nfind_if_not(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n        if (!__pred(*__first))\n            break;\n    return __first;\n}\n\n// find_end\n\ntemplate <class _BinaryPredicate, class _ForwardIterator1, class _ForwardIterator2>\n_ForwardIterator1\n__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n           _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred,\n           forward_iterator_tag, forward_iterator_tag)\n{\n    // modeled after search algorithm\n    _ForwardIterator1 __r = __last1;  // __last1 is the \"default\" answer\n    if (__first2 == __last2)\n        return __r;\n    while (true)\n    {\n        while (true)\n        {\n            if (__first1 == __last1)         // if source exhausted return last correct answer\n                return __r;                  //    (or __last1 if never found)\n            if (__pred(*__first1, *__first2))\n                break;\n            ++__first1;\n        }\n        // *__first1 matches *__first2, now match elements after here\n        _ForwardIterator1 __m1 = __first1;\n        _ForwardIterator2 __m2 = __first2;\n        while (true)\n        {\n            if (++__m2 == __last2)\n            {                         // Pattern exhaused, record answer and search for another one\n                __r = __first1;\n                ++__first1;\n                break;\n            }\n            if (++__m1 == __last1)     // Source exhausted, return last answer\n                return __r;\n            if (!__pred(*__m1, *__m2))  // mismatch, restart with a new __first\n            {\n                ++__first1;\n                break;\n            }  // else there is a match, check next elements\n        }\n    }\n}\n\ntemplate <class _BinaryPredicate, class _BidirectionalIterator1, class _BidirectionalIterator2>\n_BidirectionalIterator1\n__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1,\n           _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BinaryPredicate __pred,\n           bidirectional_iterator_tag, bidirectional_iterator_tag)\n{\n    // modeled after search algorithm (in reverse)\n    if (__first2 == __last2)\n        return __last1;  // Everything matches an empty sequence\n    _BidirectionalIterator1 __l1 = __last1;\n    _BidirectionalIterator2 __l2 = __last2;\n    --__l2;\n    while (true)\n    {\n        // Find last element in sequence 1 that matchs *(__last2-1), with a mininum of loop checks\n        while (true)\n        {\n            if (__first1 == __l1)  // return __last1 if no element matches *__first2\n                return __last1;\n            if (__pred(*--__l1, *__l2))\n                break;\n        }\n        // *__l1 matches *__l2, now match elements before here\n        _BidirectionalIterator1 __m1 = __l1;\n        _BidirectionalIterator2 __m2 = __l2;\n        while (true)\n        {\n            if (__m2 == __first2)  // If pattern exhausted, __m1 is the answer (works for 1 element pattern)\n                return __m1;\n            if (__m1 == __first1)  // Otherwise if source exhaused, pattern not found\n                return __last1;\n            if (!__pred(*--__m1, *--__m2))  // if there is a mismatch, restart with a new __l1\n            {\n                break;\n            }  // else there is a match, check next elements\n        }\n    }\n}\n\ntemplate <class _BinaryPredicate, class _RandomAccessIterator1, class _RandomAccessIterator2>\n_LIBCPP_CONSTEXPR_AFTER_CXX11 _RandomAccessIterator1\n__find_end(_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1,\n           _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _BinaryPredicate __pred,\n           random_access_iterator_tag, random_access_iterator_tag)\n{\n    // Take advantage of knowing source and pattern lengths.  Stop short when source is smaller than pattern\n    typename iterator_traits<_RandomAccessIterator2>::difference_type __len2 = __last2 - __first2;\n    if (__len2 == 0)\n        return __last1;\n    typename iterator_traits<_RandomAccessIterator1>::difference_type __len1 = __last1 - __first1;\n    if (__len1 < __len2)\n        return __last1;\n    const _RandomAccessIterator1 __s = __first1 + (__len2 - 1);  // End of pattern match can't go before here\n    _RandomAccessIterator1 __l1 = __last1;\n    _RandomAccessIterator2 __l2 = __last2;\n    --__l2;\n    while (true)\n    {\n        while (true)\n        {\n            if (__s == __l1)\n                return __last1;\n            if (__pred(*--__l1, *__l2))\n                break;\n        }\n        _RandomAccessIterator1 __m1 = __l1;\n        _RandomAccessIterator2 __m2 = __l2;\n        while (true)\n        {\n            if (__m2 == __first2)\n                return __m1;\n                                 // no need to check range on __m1 because __s guarantees we have enough source\n            if (!__pred(*--__m1, *--__m2))\n            {\n                break;\n            }\n        }\n    }\n}\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator1\nfind_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n         _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)\n{\n    return _VSTD::__find_end<typename add_lvalue_reference<_BinaryPredicate>::type>\n                         (__first1, __last1, __first2, __last2, __pred,\n                          typename iterator_traits<_ForwardIterator1>::iterator_category(),\n                          typename iterator_traits<_ForwardIterator2>::iterator_category());\n}\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator1\nfind_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n         _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n{\n    typedef typename iterator_traits<_ForwardIterator1>::value_type __v1;\n    typedef typename iterator_traits<_ForwardIterator2>::value_type __v2;\n    return _VSTD::find_end(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>());\n}\n\n// find_first_of\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\n_LIBCPP_CONSTEXPR_AFTER_CXX11 _ForwardIterator1\n__find_first_of_ce(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n              _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)\n{\n    for (; __first1 != __last1; ++__first1)\n        for (_ForwardIterator2 __j = __first2; __j != __last2; ++__j)\n            if (__pred(*__first1, *__j))\n                return __first1;\n    return __last1;\n}\n\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator1\nfind_first_of(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n              _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)\n{\n    return _VSTD::__find_first_of_ce(__first1, __last1, __first2, __last2, __pred);\n}\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator1\nfind_first_of(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n              _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n{\n    typedef typename iterator_traits<_ForwardIterator1>::value_type __v1;\n    typedef typename iterator_traits<_ForwardIterator2>::value_type __v2;\n    return _VSTD::__find_first_of_ce(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>());\n}\n\n// adjacent_find\n\ntemplate <class _ForwardIterator, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nadjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)\n{\n    if (__first != __last)\n    {\n        _ForwardIterator __i = __first;\n        while (++__i != __last)\n        {\n            if (__pred(*__first, *__i))\n                return __first;\n            __first = __i;\n        }\n    }\n    return __last;\n}\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nadjacent_find(_ForwardIterator __first, _ForwardIterator __last)\n{\n    typedef typename iterator_traits<_ForwardIterator>::value_type __v;\n    return _VSTD::adjacent_find(__first, __last, __equal_to<__v>());\n}\n\n// count\n\ntemplate <class _InputIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename iterator_traits<_InputIterator>::difference_type\ncount(_InputIterator __first, _InputIterator __last, const _Tp& __value_)\n{\n    typename iterator_traits<_InputIterator>::difference_type __r(0);\n    for (; __first != __last; ++__first)\n        if (*__first == __value_)\n            ++__r;\n    return __r;\n}\n\n// count_if\n\ntemplate <class _InputIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename iterator_traits<_InputIterator>::difference_type\ncount_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n{\n    typename iterator_traits<_InputIterator>::difference_type __r(0);\n    for (; __first != __last; ++__first)\n        if (__pred(*__first))\n            ++__r;\n    return __r;\n}\n\n// mismatch\n\ntemplate <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_InputIterator1, _InputIterator2>\nmismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n         _InputIterator2 __first2, _BinaryPredicate __pred)\n{\n    for (; __first1 != __last1; ++__first1, (void) ++__first2)\n        if (!__pred(*__first1, *__first2))\n            break;\n    return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n}\n\ntemplate <class _InputIterator1, class _InputIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_InputIterator1, _InputIterator2>\nmismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\n{\n    typedef typename iterator_traits<_InputIterator1>::value_type __v1;\n    typedef typename iterator_traits<_InputIterator2>::value_type __v2;\n    return _VSTD::mismatch(__first1, __last1, __first2, __equal_to<__v1, __v2>());\n}\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_InputIterator1, _InputIterator2>\nmismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n         _InputIterator2 __first2, _InputIterator2 __last2,\n         _BinaryPredicate __pred)\n{\n    for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void) ++__first2)\n        if (!__pred(*__first1, *__first2))\n            break;\n    return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n}\n\ntemplate <class _InputIterator1, class _InputIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_InputIterator1, _InputIterator2>\nmismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n         _InputIterator2 __first2, _InputIterator2 __last2)\n{\n    typedef typename iterator_traits<_InputIterator1>::value_type __v1;\n    typedef typename iterator_traits<_InputIterator2>::value_type __v2;\n    return _VSTD::mismatch(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>());\n}\n#endif\n\n// equal\n\ntemplate <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nequal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __pred)\n{\n    for (; __first1 != __last1; ++__first1, (void) ++__first2)\n        if (!__pred(*__first1, *__first2))\n            return false;\n    return true;\n}\n\ntemplate <class _InputIterator1, class _InputIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nequal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)\n{\n    typedef typename iterator_traits<_InputIterator1>::value_type __v1;\n    typedef typename iterator_traits<_InputIterator2>::value_type __v2;\n    return _VSTD::equal(__first1, __last1, __first2, __equal_to<__v1, __v2>());\n}\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _BinaryPredicate, class _InputIterator1, class _InputIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\n__equal(_InputIterator1 __first1, _InputIterator1 __last1,\n        _InputIterator2 __first2, _InputIterator2 __last2, _BinaryPredicate __pred,\n        input_iterator_tag, input_iterator_tag )\n{\n    for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void) ++__first2)\n        if (!__pred(*__first1, *__first2))\n            return false;\n    return __first1 == __last1 && __first2 == __last2;\n}\n\ntemplate <class _BinaryPredicate, class _RandomAccessIterator1, class _RandomAccessIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\n__equal(_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1,\n        _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _BinaryPredicate __pred,\n      random_access_iterator_tag, random_access_iterator_tag )\n{\n    if ( _VSTD::distance(__first1, __last1) != _VSTD::distance(__first2, __last2))\n        return false;\n    return _VSTD::equal<_RandomAccessIterator1, _RandomAccessIterator2,\n                        typename add_lvalue_reference<_BinaryPredicate>::type>\n                       (__first1, __last1, __first2, __pred );\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nequal(_InputIterator1 __first1, _InputIterator1 __last1,\n      _InputIterator2 __first2, _InputIterator2 __last2, _BinaryPredicate __pred )\n{\n    return _VSTD::__equal<typename add_lvalue_reference<_BinaryPredicate>::type>\n       (__first1, __last1, __first2, __last2, __pred,\n        typename iterator_traits<_InputIterator1>::iterator_category(),\n        typename iterator_traits<_InputIterator2>::iterator_category());\n}\n\ntemplate <class _InputIterator1, class _InputIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nequal(_InputIterator1 __first1, _InputIterator1 __last1,\n      _InputIterator2 __first2, _InputIterator2 __last2)\n{\n    typedef typename iterator_traits<_InputIterator1>::value_type __v1;\n    typedef typename iterator_traits<_InputIterator2>::value_type __v2;\n    return _VSTD::__equal(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>(),\n        typename iterator_traits<_InputIterator1>::iterator_category(),\n        typename iterator_traits<_InputIterator2>::iterator_category());\n}\n#endif\n\n// is_permutation\n\ntemplate<class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\nbool\nis_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n               _ForwardIterator2 __first2, _BinaryPredicate __pred)\n{\n    // shorten sequences as much as possible by lopping of any equal parts\n    for (; __first1 != __last1; ++__first1, (void) ++__first2)\n        if (!__pred(*__first1, *__first2))\n            goto __not_done;\n    return true;\n__not_done:\n    // __first1 != __last1 && *__first1 != *__first2\n    typedef typename iterator_traits<_ForwardIterator1>::difference_type _D1;\n    _D1 __l1 = _VSTD::distance(__first1, __last1);\n    if (__l1 == _D1(1))\n        return false;\n    _ForwardIterator2 __last2 = _VSTD::next(__first2, __l1);\n    // For each element in [f1, l1) see if there are the same number of\n    //    equal elements in [f2, l2)\n    for (_ForwardIterator1 __i = __first1; __i != __last1; ++__i)\n    {\n        // Have we already counted the number of *__i in [f1, l1)?\n        for (_ForwardIterator1 __j = __first1; __j != __i; ++__j)\n            if (__pred(*__j, *__i))\n                goto __next_iter;\n        {\n            // Count number of *__i in [f2, l2)\n            _D1 __c2 = 0;\n            for (_ForwardIterator2 __j = __first2; __j != __last2; ++__j)\n                if (__pred(*__i, *__j))\n                    ++__c2;\n            if (__c2 == 0)\n                return false;\n            // Count number of *__i in [__i, l1) (we can start with 1)\n            _D1 __c1 = 1;\n            for (_ForwardIterator1 __j = _VSTD::next(__i); __j != __last1; ++__j)\n                if (__pred(*__i, *__j))\n                    ++__c1;\n            if (__c1 != __c2)\n                return false;\n        }\n__next_iter:;\n    }\n    return true;\n}\n\ntemplate<class _ForwardIterator1, class _ForwardIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nis_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n               _ForwardIterator2 __first2)\n{\n    typedef typename iterator_traits<_ForwardIterator1>::value_type __v1;\n    typedef typename iterator_traits<_ForwardIterator2>::value_type __v2;\n    return _VSTD::is_permutation(__first1, __last1, __first2, __equal_to<__v1, __v2>());\n}\n\n#if _LIBCPP_STD_VER > 11\ntemplate<class _BinaryPredicate, class _ForwardIterator1, class _ForwardIterator2>\nbool\n__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n                 _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n                 _BinaryPredicate __pred,\n                 forward_iterator_tag, forward_iterator_tag )\n{\n    // shorten sequences as much as possible by lopping of any equal parts\n    for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void) ++__first2)\n        if (!__pred(*__first1, *__first2))\n            goto __not_done;\n    return __first1 == __last1 && __first2 == __last2;\n__not_done:\n    // __first1 != __last1 && __first2 != __last2 && *__first1 != *__first2\n    typedef typename iterator_traits<_ForwardIterator1>::difference_type _D1;\n    _D1 __l1 = _VSTD::distance(__first1, __last1);\n\n    typedef typename iterator_traits<_ForwardIterator2>::difference_type _D2;\n    _D2 __l2 = _VSTD::distance(__first2, __last2);\n    if (__l1 != __l2)\n        return false;\n\n    // For each element in [f1, l1) see if there are the same number of\n    //    equal elements in [f2, l2)\n    for (_ForwardIterator1 __i = __first1; __i != __last1; ++__i)\n    {\n        // Have we already counted the number of *__i in [f1, l1)?\n        for (_ForwardIterator1 __j = __first1; __j != __i; ++__j)\n            if (__pred(*__j, *__i))\n                goto __next_iter;\n        {\n            // Count number of *__i in [f2, l2)\n            _D1 __c2 = 0;\n            for (_ForwardIterator2 __j = __first2; __j != __last2; ++__j)\n                if (__pred(*__i, *__j))\n                    ++__c2;\n            if (__c2 == 0)\n                return false;\n            // Count number of *__i in [__i, l1) (we can start with 1)\n            _D1 __c1 = 1;\n            for (_ForwardIterator1 __j = _VSTD::next(__i); __j != __last1; ++__j)\n                if (__pred(*__i, *__j))\n                    ++__c1;\n            if (__c1 != __c2)\n                return false;\n        }\n__next_iter:;\n    }\n    return true;\n}\n\ntemplate<class _BinaryPredicate, class _RandomAccessIterator1, class _RandomAccessIterator2>\nbool\n__is_permutation(_RandomAccessIterator1 __first1, _RandomAccessIterator2 __last1,\n               _RandomAccessIterator1 __first2, _RandomAccessIterator2 __last2,\n               _BinaryPredicate __pred,\n               random_access_iterator_tag, random_access_iterator_tag )\n{\n    if ( _VSTD::distance(__first1, __last1) != _VSTD::distance(__first2, __last2))\n        return false;\n    return _VSTD::is_permutation<_RandomAccessIterator1, _RandomAccessIterator2,\n                                 typename add_lvalue_reference<_BinaryPredicate>::type>\n                                (__first1, __last1, __first2, __pred );\n}\n\ntemplate<class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nis_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n               _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n               _BinaryPredicate __pred )\n{\n    return _VSTD::__is_permutation<typename add_lvalue_reference<_BinaryPredicate>::type>\n       (__first1, __last1, __first2, __last2, __pred,\n        typename iterator_traits<_ForwardIterator1>::iterator_category(),\n        typename iterator_traits<_ForwardIterator2>::iterator_category());\n}\n\ntemplate<class _ForwardIterator1, class _ForwardIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nis_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n               _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n{\n    typedef typename iterator_traits<_ForwardIterator1>::value_type __v1;\n    typedef typename iterator_traits<_ForwardIterator2>::value_type __v2;\n    return _VSTD::__is_permutation(__first1, __last1, __first2, __last2,\n        __equal_to<__v1, __v2>(),\n        typename iterator_traits<_ForwardIterator1>::iterator_category(),\n        typename iterator_traits<_ForwardIterator2>::iterator_category());\n}\n#endif\n\n// search\n\ntemplate <class _BinaryPredicate, class _ForwardIterator1, class _ForwardIterator2>\npair<_ForwardIterator1, _ForwardIterator1>\n__search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n         _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred,\n         forward_iterator_tag, forward_iterator_tag)\n{\n    if (__first2 == __last2)\n        return make_pair(__first1, __first1);  // Everything matches an empty sequence\n    while (true)\n    {\n        // Find first element in sequence 1 that matchs *__first2, with a mininum of loop checks\n        while (true)\n        {\n            if (__first1 == __last1)  // return __last1 if no element matches *__first2\n                return make_pair(__last1, __last1);\n            if (__pred(*__first1, *__first2))\n                break;\n            ++__first1;\n        }\n        // *__first1 matches *__first2, now match elements after here\n        _ForwardIterator1 __m1 = __first1;\n        _ForwardIterator2 __m2 = __first2;\n        while (true)\n        {\n            if (++__m2 == __last2)  // If pattern exhausted, __first1 is the answer (works for 1 element pattern)\n                return make_pair(__first1, __m1);\n            if (++__m1 == __last1)  // Otherwise if source exhaused, pattern not found\n                return make_pair(__last1, __last1);\n            if (!__pred(*__m1, *__m2))  // if there is a mismatch, restart with a new __first1\n            {\n                ++__first1;\n                break;\n            }  // else there is a match, check next elements\n        }\n    }\n}\n\ntemplate <class _BinaryPredicate, class _RandomAccessIterator1, class _RandomAccessIterator2>\n_LIBCPP_CONSTEXPR_AFTER_CXX11\npair<_RandomAccessIterator1, _RandomAccessIterator1>\n__search(_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1,\n         _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _BinaryPredicate __pred,\n           random_access_iterator_tag, random_access_iterator_tag)\n{\n    typedef typename iterator_traits<_RandomAccessIterator1>::difference_type _D1;\n    typedef typename iterator_traits<_RandomAccessIterator2>::difference_type _D2;\n    // Take advantage of knowing source and pattern lengths.  Stop short when source is smaller than pattern\n    const _D2 __len2 = __last2 - __first2;\n    if (__len2 == 0)\n        return make_pair(__first1, __first1);\n    const _D1 __len1 = __last1 - __first1;\n    if (__len1 < __len2)\n        return make_pair(__last1, __last1);\n    const _RandomAccessIterator1 __s = __last1 - (__len2 - 1);  // Start of pattern match can't go beyond here\n\n    while (true)\n    {\n        while (true)\n        {\n            if (__first1 == __s)\n                return make_pair(__last1, __last1);\n            if (__pred(*__first1, *__first2))\n                break;\n            ++__first1;\n        }\n\n        _RandomAccessIterator1 __m1 = __first1;\n        _RandomAccessIterator2 __m2 = __first2;\n         while (true)\n         {\n             if (++__m2 == __last2)\n                 return make_pair(__first1, __first1 + __len2);\n             ++__m1;          // no need to check range on __m1 because __s guarantees we have enough source\n             if (!__pred(*__m1, *__m2))\n             {\n                 ++__first1;\n                 break;\n             }\n         }\n    }\n}\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator1\nsearch(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n       _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)\n{\n    return _VSTD::__search<typename add_lvalue_reference<_BinaryPredicate>::type>\n                         (__first1, __last1, __first2, __last2, __pred,\n                          typename iterator_traits<_ForwardIterator1>::iterator_category(),\n                          typename iterator_traits<_ForwardIterator2>::iterator_category())\n            .first;\n}\n\ntemplate <class _ForwardIterator1, class _ForwardIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator1\nsearch(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n       _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n{\n    typedef typename iterator_traits<_ForwardIterator1>::value_type __v1;\n    typedef typename iterator_traits<_ForwardIterator2>::value_type __v2;\n    return _VSTD::search(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>());\n}\n\n// search_n\n\ntemplate <class _BinaryPredicate, class _ForwardIterator, class _Size, class _Tp>\n_ForwardIterator\n__search_n(_ForwardIterator __first, _ForwardIterator __last,\n           _Size __count, const _Tp& __value_, _BinaryPredicate __pred, forward_iterator_tag)\n{\n    if (__count <= 0)\n        return __first;\n    while (true)\n    {\n        // Find first element in sequence that matchs __value_, with a mininum of loop checks\n        while (true)\n        {\n            if (__first == __last)  // return __last if no element matches __value_\n                return __last;\n            if (__pred(*__first, __value_))\n                break;\n            ++__first;\n        }\n        // *__first matches __value_, now match elements after here\n        _ForwardIterator __m = __first;\n        _Size __c(0);\n        while (true)\n        {\n            if (++__c == __count)  // If pattern exhausted, __first is the answer (works for 1 element pattern)\n                return __first;\n            if (++__m == __last)  // Otherwise if source exhaused, pattern not found\n                return __last;\n            if (!__pred(*__m, __value_))  // if there is a mismatch, restart with a new __first\n            {\n                __first = __m;\n                ++__first;\n                break;\n            }  // else there is a match, check next elements\n        }\n    }\n}\n\ntemplate <class _BinaryPredicate, class _RandomAccessIterator, class _Size, class _Tp>\n_RandomAccessIterator\n__search_n(_RandomAccessIterator __first, _RandomAccessIterator __last,\n           _Size __count, const _Tp& __value_, _BinaryPredicate __pred, random_access_iterator_tag)\n{\n    if (__count <= 0)\n        return __first;\n    _Size __len = static_cast<_Size>(__last - __first);\n    if (__len < __count)\n        return __last;\n    const _RandomAccessIterator __s = __last - (__count - 1);  // Start of pattern match can't go beyond here\n    while (true)\n    {\n        // Find first element in sequence that matchs __value_, with a mininum of loop checks\n        while (true)\n        {\n            if (__first >= __s)  // return __last if no element matches __value_\n                return __last;\n            if (__pred(*__first, __value_))\n                break;\n            ++__first;\n        }\n        // *__first matches __value_, now match elements after here\n        _RandomAccessIterator __m = __first;\n        _Size __c(0);\n        while (true)\n        {\n            if (++__c == __count)  // If pattern exhausted, __first is the answer (works for 1 element pattern)\n                return __first;\n             ++__m;          // no need to check range on __m because __s guarantees we have enough source\n            if (!__pred(*__m, __value_))  // if there is a mismatch, restart with a new __first\n            {\n                __first = __m;\n                ++__first;\n                break;\n            }  // else there is a match, check next elements\n        }\n    }\n}\n\ntemplate <class _ForwardIterator, class _Size, class _Tp, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nsearch_n(_ForwardIterator __first, _ForwardIterator __last,\n         _Size __count, const _Tp& __value_, _BinaryPredicate __pred)\n{\n    return _VSTD::__search_n<typename add_lvalue_reference<_BinaryPredicate>::type>\n           (__first, __last, __convert_to_integral(__count), __value_, __pred,\n           typename iterator_traits<_ForwardIterator>::iterator_category());\n}\n\ntemplate <class _ForwardIterator, class _Size, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nsearch_n(_ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp& __value_)\n{\n    typedef typename iterator_traits<_ForwardIterator>::value_type __v;\n    return _VSTD::search_n(__first, __last, __convert_to_integral(__count),\n                           __value_, __equal_to<__v, _Tp>());\n}\n\n// copy\ntemplate <class _Iter>\ninline _LIBCPP_INLINE_VISIBILITY\n_Iter\n__unwrap_iter(_Iter __i)\n{\n    return __i;\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_trivially_copy_assignable<_Tp>::value,\n    _Tp*\n>::type\n__unwrap_iter(move_iterator<_Tp*> __i)\n{\n    return __i.base();\n}\n\n#if _LIBCPP_DEBUG_LEVEL < 2\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_trivially_copy_assignable<_Tp>::value,\n    _Tp*\n>::type\n__unwrap_iter(__wrap_iter<_Tp*> __i)\n{\n    return __i.base();\n}\n\n#else\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_trivially_copy_assignable<_Tp>::value,\n    __wrap_iter<_Tp*>\n>::type\n__unwrap_iter(__wrap_iter<_Tp*> __i)\n{\n    return __i;\n}\n\n#endif  // _LIBCPP_DEBUG_LEVEL < 2\n\ntemplate <class _InputIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\n__copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\n{\n    for (; __first != __last; ++__first, (void) ++__result)\n        *__result = *__first;\n    return __result;\n}\n\ntemplate <class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_same<typename remove_const<_Tp>::type, _Up>::value &&\n    is_trivially_copy_assignable<_Up>::value,\n    _Up*\n>::type\n__copy(_Tp* __first, _Tp* __last, _Up* __result)\n{\n    const size_t __n = static_cast<size_t>(__last - __first);\n    if (__n > 0)\n        _VSTD::memmove(__result, __first, __n * sizeof(_Up));\n    return __result + __n;\n}\n\ntemplate <class _InputIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\ncopy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\n{\n    return _VSTD::__copy(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result));\n}\n\n// copy_backward\n\ntemplate <class _BidirectionalIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\n__copy_backward(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)\n{\n    while (__first != __last)\n        *--__result = *--__last;\n    return __result;\n}\n\ntemplate <class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_same<typename remove_const<_Tp>::type, _Up>::value &&\n    is_trivially_copy_assignable<_Up>::value,\n    _Up*\n>::type\n__copy_backward(_Tp* __first, _Tp* __last, _Up* __result)\n{\n    const size_t __n = static_cast<size_t>(__last - __first);\n    if (__n > 0)\n    {\n        __result -= __n;\n        _VSTD::memmove(__result, __first, __n * sizeof(_Up));\n    }\n    return __result;\n}\n\ntemplate <class _BidirectionalIterator1, class _BidirectionalIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\n_BidirectionalIterator2\ncopy_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last,\n              _BidirectionalIterator2 __result)\n{\n    return _VSTD::__copy_backward(__unwrap_iter(__first),\n                                  __unwrap_iter(__last),\n                                  __unwrap_iter(__result));\n}\n\n// copy_if\n\ntemplate<class _InputIterator, class _OutputIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\ncopy_if(_InputIterator __first, _InputIterator __last,\n        _OutputIterator __result, _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n    {\n        if (__pred(*__first))\n        {\n            *__result = *__first;\n            ++__result;\n        }\n    }\n    return __result;\n}\n\n// copy_n\n\ntemplate<class _InputIterator, class _Size, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    __is_input_iterator<_InputIterator>::value &&\n   !__is_random_access_iterator<_InputIterator>::value,\n    _OutputIterator\n>::type\ncopy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result)\n{\n    typedef decltype(__convert_to_integral(__orig_n)) _IntegralSize;\n    _IntegralSize __n = __orig_n;\n    if (__n > 0)\n    {\n        *__result = *__first;\n        ++__result;\n        for (--__n; __n > 0; --__n)\n        {\n            ++__first;\n            *__result = *__first;\n            ++__result;\n        }\n    }\n    return __result;\n}\n\ntemplate<class _InputIterator, class _Size, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    __is_random_access_iterator<_InputIterator>::value,\n    _OutputIterator\n>::type\ncopy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result)\n{\n    typedef decltype(__convert_to_integral(__orig_n)) _IntegralSize;\n    _IntegralSize __n = __orig_n;\n    return _VSTD::copy(__first, __first + __n, __result);\n}\n\n// move\n\ntemplate <class _InputIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\n__move(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\n{\n    for (; __first != __last; ++__first, (void) ++__result)\n        *__result = _VSTD::move(*__first);\n    return __result;\n}\n\ntemplate <class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_same<typename remove_const<_Tp>::type, _Up>::value &&\n    is_trivially_copy_assignable<_Up>::value,\n    _Up*\n>::type\n__move(_Tp* __first, _Tp* __last, _Up* __result)\n{\n    const size_t __n = static_cast<size_t>(__last - __first);\n    if (__n > 0)\n        _VSTD::memmove(__result, __first, __n * sizeof(_Up));\n    return __result + __n;\n}\n\ntemplate <class _InputIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nmove(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\n{\n    return _VSTD::__move(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result));\n}\n\n// move_backward\n\ntemplate <class _InputIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\n__move_backward(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\n{\n    while (__first != __last)\n        *--__result = _VSTD::move(*--__last);\n    return __result;\n}\n\ntemplate <class _Tp, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_same<typename remove_const<_Tp>::type, _Up>::value &&\n    is_trivially_copy_assignable<_Up>::value,\n    _Up*\n>::type\n__move_backward(_Tp* __first, _Tp* __last, _Up* __result)\n{\n    const size_t __n = static_cast<size_t>(__last - __first);\n    if (__n > 0)\n    {\n        __result -= __n;\n        _VSTD::memmove(__result, __first, __n * sizeof(_Up));\n    }\n    return __result;\n}\n\ntemplate <class _BidirectionalIterator1, class _BidirectionalIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\n_BidirectionalIterator2\nmove_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last,\n              _BidirectionalIterator2 __result)\n{\n    return _VSTD::__move_backward(__unwrap_iter(__first), __unwrap_iter(__last), __unwrap_iter(__result));\n}\n\n// iter_swap\n\n// moved to <type_traits> for better swap / noexcept support\n\n// transform\n\ntemplate <class _InputIterator, class _OutputIterator, class _UnaryOperation>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\ntransform(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __op)\n{\n    for (; __first != __last; ++__first, (void) ++__result)\n        *__result = __op(*__first);\n    return __result;\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _BinaryOperation>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\ntransform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2,\n          _OutputIterator __result, _BinaryOperation __binary_op)\n{\n    for (; __first1 != __last1; ++__first1, (void) ++__first2, ++__result)\n        *__result = __binary_op(*__first1, *__first2);\n    return __result;\n}\n\n// replace\n\ntemplate <class _ForwardIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nreplace(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value, const _Tp& __new_value)\n{\n    for (; __first != __last; ++__first)\n        if (*__first == __old_value)\n            *__first = __new_value;\n}\n\n// replace_if\n\ntemplate <class _ForwardIterator, class _Predicate, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nreplace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp& __new_value)\n{\n    for (; __first != __last; ++__first)\n        if (__pred(*__first))\n            *__first = __new_value;\n}\n\n// replace_copy\n\ntemplate <class _InputIterator, class _OutputIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nreplace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result,\n             const _Tp& __old_value, const _Tp& __new_value)\n{\n    for (; __first != __last; ++__first, (void) ++__result)\n        if (*__first == __old_value)\n            *__result = __new_value;\n        else\n            *__result = *__first;\n    return __result;\n}\n\n// replace_copy_if\n\ntemplate <class _InputIterator, class _OutputIterator, class _Predicate, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nreplace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result,\n                _Predicate __pred, const _Tp& __new_value)\n{\n    for (; __first != __last; ++__first, (void) ++__result)\n        if (__pred(*__first))\n            *__result = __new_value;\n        else\n            *__result = *__first;\n    return __result;\n}\n\n// fill_n\n\ntemplate <class _OutputIterator, class _Size, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\n__fill_n(_OutputIterator __first, _Size __n, const _Tp& __value_)\n{\n    for (; __n > 0; ++__first, (void) --__n)\n        *__first = __value_;\n    return __first;\n}\n\ntemplate <class _Tp, class _Size, class _Up>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_integral<_Tp>::value && sizeof(_Tp) == 1 &&\n    !is_same<_Tp, bool>::value &&\n    is_integral<_Up>::value && sizeof(_Up) == 1,\n    _Tp*\n>::type\n__fill_n(_Tp* __first, _Size __n,_Up __value_)\n{\n    if (__n > 0)\n        _VSTD::memset(__first, (unsigned char)__value_, (size_t)(__n));\n    return __first + __n;\n}\n\ntemplate <class _OutputIterator, class _Size, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nfill_n(_OutputIterator __first, _Size __n, const _Tp& __value_)\n{\n   return _VSTD::__fill_n(__first, __convert_to_integral(__n), __value_);\n}\n\n// fill\n\ntemplate <class _ForwardIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, forward_iterator_tag)\n{\n    for (; __first != __last; ++__first)\n        *__first = __value_;\n}\n\ntemplate <class _RandomAccessIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__fill(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp& __value_, random_access_iterator_tag)\n{\n    _VSTD::fill_n(__first, __last - __first, __value_);\n}\n\ntemplate <class _ForwardIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nfill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_)\n{\n    _VSTD::__fill(__first, __last, __value_, typename iterator_traits<_ForwardIterator>::iterator_category());\n}\n\n// generate\n\ntemplate <class _ForwardIterator, class _Generator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\ngenerate(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)\n{\n    for (; __first != __last; ++__first)\n        *__first = __gen();\n}\n\n// generate_n\n\ntemplate <class _OutputIterator, class _Size, class _Generator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\ngenerate_n(_OutputIterator __first, _Size __orig_n, _Generator __gen)\n{\n    typedef decltype(__convert_to_integral(__orig_n)) _IntegralSize;\n    _IntegralSize __n = __orig_n;\n    for (; __n > 0; ++__first, (void) --__n)\n        *__first = __gen();\n    return __first;\n}\n\n// remove\n\ntemplate <class _ForwardIterator, class _Tp>\n_ForwardIterator\nremove(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_)\n{\n    __first = _VSTD::find(__first, __last, __value_);\n    if (__first != __last)\n    {\n        _ForwardIterator __i = __first;\n        while (++__i != __last)\n        {\n            if (!(*__i == __value_))\n            {\n                *__first = _VSTD::move(*__i);\n                ++__first;\n            }\n        }\n    }\n    return __first;\n}\n\n// remove_if\n\ntemplate <class _ForwardIterator, class _Predicate>\n_ForwardIterator\nremove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\n{\n    __first = _VSTD::find_if<_ForwardIterator, typename add_lvalue_reference<_Predicate>::type>\n                           (__first, __last, __pred);\n    if (__first != __last)\n    {\n        _ForwardIterator __i = __first;\n        while (++__i != __last)\n        {\n            if (!__pred(*__i))\n            {\n                *__first = _VSTD::move(*__i);\n                ++__first;\n            }\n        }\n    }\n    return __first;\n}\n\n// remove_copy\n\ntemplate <class _InputIterator, class _OutputIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nremove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __value_)\n{\n    for (; __first != __last; ++__first)\n    {\n        if (!(*__first == __value_))\n        {\n            *__result = *__first;\n            ++__result;\n        }\n    }\n    return __result;\n}\n\n// remove_copy_if\n\ntemplate <class _InputIterator, class _OutputIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nremove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n    {\n        if (!__pred(*__first))\n        {\n            *__result = *__first;\n            ++__result;\n        }\n    }\n    return __result;\n}\n\n// unique\n\ntemplate <class _ForwardIterator, class _BinaryPredicate>\n_ForwardIterator\nunique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)\n{\n    __first = _VSTD::adjacent_find<_ForwardIterator, typename add_lvalue_reference<_BinaryPredicate>::type>\n                                 (__first, __last, __pred);\n    if (__first != __last)\n    {\n        // ...  a  a  ?  ...\n        //      f     i\n        _ForwardIterator __i = __first;\n        for (++__i; ++__i != __last;)\n            if (!__pred(*__first, *__i))\n                *++__first = _VSTD::move(*__i);\n        ++__first;\n    }\n    return __first;\n}\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nunique(_ForwardIterator __first, _ForwardIterator __last)\n{\n    typedef typename iterator_traits<_ForwardIterator>::value_type __v;\n    return _VSTD::unique(__first, __last, __equal_to<__v>());\n}\n\n// unique_copy\n\ntemplate <class _BinaryPredicate, class _InputIterator, class _OutputIterator>\n_OutputIterator\n__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __pred,\n              input_iterator_tag, output_iterator_tag)\n{\n    if (__first != __last)\n    {\n        typename iterator_traits<_InputIterator>::value_type __t(*__first);\n        *__result = __t;\n        ++__result;\n        while (++__first != __last)\n        {\n            if (!__pred(__t, *__first))\n            {\n                __t = *__first;\n                *__result = __t;\n                ++__result;\n            }\n        }\n    }\n    return __result;\n}\n\ntemplate <class _BinaryPredicate, class _ForwardIterator, class _OutputIterator>\n_OutputIterator\n__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _BinaryPredicate __pred,\n              forward_iterator_tag, output_iterator_tag)\n{\n    if (__first != __last)\n    {\n        _ForwardIterator __i = __first;\n        *__result = *__i;\n        ++__result;\n        while (++__first != __last)\n        {\n            if (!__pred(*__i, *__first))\n            {\n                *__result = *__first;\n                ++__result;\n                __i = __first;\n            }\n        }\n    }\n    return __result;\n}\n\ntemplate <class _BinaryPredicate, class _InputIterator, class _ForwardIterator>\n_ForwardIterator\n__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _BinaryPredicate __pred,\n              input_iterator_tag, forward_iterator_tag)\n{\n    if (__first != __last)\n    {\n        *__result = *__first;\n        while (++__first != __last)\n            if (!__pred(*__result, *__first))\n                *++__result = *__first;\n        ++__result;\n    }\n    return __result;\n}\n\ntemplate <class _InputIterator, class _OutputIterator, class _BinaryPredicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nunique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __pred)\n{\n    return _VSTD::__unique_copy<typename add_lvalue_reference<_BinaryPredicate>::type>\n                              (__first, __last, __result, __pred,\n                               typename iterator_traits<_InputIterator>::iterator_category(),\n                               typename iterator_traits<_OutputIterator>::iterator_category());\n}\n\ntemplate <class _InputIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nunique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)\n{\n    typedef typename iterator_traits<_InputIterator>::value_type __v;\n    return _VSTD::unique_copy(__first, __last, __result, __equal_to<__v>());\n}\n\n// reverse\n\ntemplate <class _BidirectionalIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag)\n{\n    while (__first != __last)\n    {\n        if (__first == --__last)\n            break;\n        _VSTD::iter_swap(__first, __last);\n        ++__first;\n    }\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)\n{\n    if (__first != __last)\n        for (; __first < --__last; ++__first)\n            _VSTD::iter_swap(__first, __last);\n}\n\ntemplate <class _BidirectionalIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nreverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n{\n    _VSTD::__reverse(__first, __last, typename iterator_traits<_BidirectionalIterator>::iterator_category());\n}\n\n// reverse_copy\n\ntemplate <class _BidirectionalIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nreverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)\n{\n    for (; __first != __last; ++__result)\n        *__result = *--__last;\n    return __result;\n}\n\n// rotate\n\ntemplate <class _ForwardIterator>\n_ForwardIterator\n__rotate_left(_ForwardIterator __first, _ForwardIterator __last)\n{\n    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;\n    value_type __tmp = _VSTD::move(*__first);\n    _ForwardIterator __lm1 = _VSTD::move(_VSTD::next(__first), __last, __first);\n    *__lm1 = _VSTD::move(__tmp);\n    return __lm1;\n}\n\ntemplate <class _BidirectionalIterator>\n_BidirectionalIterator\n__rotate_right(_BidirectionalIterator __first, _BidirectionalIterator __last)\n{\n    typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;\n    _BidirectionalIterator __lm1 = _VSTD::prev(__last);\n    value_type __tmp = _VSTD::move(*__lm1);\n    _BidirectionalIterator __fp1 = _VSTD::move_backward(__first, __lm1, __last);\n    *__first = _VSTD::move(__tmp);\n    return __fp1;\n}\n\ntemplate <class _ForwardIterator>\n_ForwardIterator\n__rotate_forward(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)\n{\n    _ForwardIterator __i = __middle;\n    while (true)\n    {\n        swap(*__first, *__i);\n        ++__first;\n        if (++__i == __last)\n            break;\n        if (__first == __middle)\n            __middle = __i;\n    }\n    _ForwardIterator __r = __first;\n    if (__first != __middle)\n    {\n        __i = __middle;\n        while (true)\n        {\n            swap(*__first, *__i);\n            ++__first;\n            if (++__i == __last)\n            {\n                if (__first == __middle)\n                    break;\n                __i = __middle;\n            }\n            else if (__first == __middle)\n                __middle = __i;\n        }\n    }\n    return __r;\n}\n\ntemplate<typename _Integral>\ninline _LIBCPP_INLINE_VISIBILITY\n_Integral\n__algo_gcd(_Integral __x, _Integral __y)\n{\n    do\n    {\n        _Integral __t = __x % __y;\n        __x = __y;\n        __y = __t;\n    } while (__y);\n    return __x;\n}\n\ntemplate<typename _RandomAccessIterator>\n_RandomAccessIterator\n__rotate_gcd(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n\n    const difference_type __m1 = __middle - __first;\n    const difference_type __m2 = __last - __middle;\n    if (__m1 == __m2)\n    {\n        _VSTD::swap_ranges(__first, __middle, __middle);\n        return __middle;\n    }\n    const difference_type __g = _VSTD::__algo_gcd(__m1, __m2);\n    for (_RandomAccessIterator __p = __first + __g; __p != __first;)\n    {\n        value_type __t(_VSTD::move(*--__p));\n        _RandomAccessIterator __p1 = __p;\n        _RandomAccessIterator __p2 = __p1 + __m1;\n        do\n        {\n            *__p1 = _VSTD::move(*__p2);\n            __p1 = __p2;\n            const difference_type __d = __last - __p2;\n            if (__m1 < __d)\n                __p2 += __m1;\n            else\n                __p2 = __first + (__m1 - __d);\n        } while (__p2 != __p);\n        *__p1 = _VSTD::move(__t);\n    }\n    return __first + __m2;\n}\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\n__rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last,\n         _VSTD::forward_iterator_tag)\n{\n    typedef typename _VSTD::iterator_traits<_ForwardIterator>::value_type value_type;\n    if (_VSTD::is_trivially_move_assignable<value_type>::value)\n    {\n        if (_VSTD::next(__first) == __middle)\n            return _VSTD::__rotate_left(__first, __last);\n    }\n    return _VSTD::__rotate_forward(__first, __middle, __last);\n}\n\ntemplate <class _BidirectionalIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_BidirectionalIterator\n__rotate(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last,\n         _VSTD::bidirectional_iterator_tag)\n{\n    typedef typename _VSTD::iterator_traits<_BidirectionalIterator>::value_type value_type;\n    if (_VSTD::is_trivially_move_assignable<value_type>::value)\n    {\n        if (_VSTD::next(__first) == __middle)\n            return _VSTD::__rotate_left(__first, __last);\n        if (_VSTD::next(__middle) == __last)\n            return _VSTD::__rotate_right(__first, __last);\n    }\n    return _VSTD::__rotate_forward(__first, __middle, __last);\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_RandomAccessIterator\n__rotate(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last,\n         _VSTD::random_access_iterator_tag)\n{\n    typedef typename _VSTD::iterator_traits<_RandomAccessIterator>::value_type value_type;\n    if (_VSTD::is_trivially_move_assignable<value_type>::value)\n    {\n        if (_VSTD::next(__first) == __middle)\n            return _VSTD::__rotate_left(__first, __last);\n        if (_VSTD::next(__middle) == __last)\n            return _VSTD::__rotate_right(__first, __last);\n        return _VSTD::__rotate_gcd(__first, __middle, __last);\n    }\n    return _VSTD::__rotate_forward(__first, __middle, __last);\n}\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nrotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)\n{\n    if (__first == __middle)\n        return __last;\n    if (__middle == __last)\n        return __first;\n    return _VSTD::__rotate(__first, __middle, __last,\n                           typename _VSTD::iterator_traits<_ForwardIterator>::iterator_category());\n}\n\n// rotate_copy\n\ntemplate <class _ForwardIterator, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nrotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)\n{\n    return _VSTD::copy(__first, __middle, _VSTD::copy(__middle, __last, __result));\n}\n\n// min_element\n\ntemplate <class _ForwardIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_ForwardIterator\nmin_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\n{\n    if (__first != __last)\n    {\n        _ForwardIterator __i = __first;\n        while (++__i != __last)\n            if (__comp(*__i, *__first))\n                __first = __i;\n    }\n    return __first;\n}\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_ForwardIterator\nmin_element(_ForwardIterator __first, _ForwardIterator __last)\n{\n    return _VSTD::min_element(__first, __last,\n              __less<typename iterator_traits<_ForwardIterator>::value_type>());\n}\n\n// min\n\ntemplate <class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nconst _Tp&\nmin(const _Tp& __a, const _Tp& __b, _Compare __comp)\n{\n    return __comp(__b, __a) ? __b : __a;\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nconst _Tp&\nmin(const _Tp& __a, const _Tp& __b)\n{\n    return _VSTD::min(__a, __b, __less<_Tp>());\n}\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate<class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_Tp\nmin(initializer_list<_Tp> __t, _Compare __comp)\n{\n    return *_VSTD::min_element(__t.begin(), __t.end(), __comp);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_Tp\nmin(initializer_list<_Tp> __t)\n{\n    return *_VSTD::min_element(__t.begin(), __t.end(), __less<_Tp>());\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n// max_element\n\ntemplate <class _ForwardIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_ForwardIterator\nmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\n{\n    if (__first != __last)\n    {\n        _ForwardIterator __i = __first;\n        while (++__i != __last)\n            if (__comp(*__first, *__i))\n                __first = __i;\n    }\n    return __first;\n}\n\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_ForwardIterator\nmax_element(_ForwardIterator __first, _ForwardIterator __last)\n{\n    return _VSTD::max_element(__first, __last,\n              __less<typename iterator_traits<_ForwardIterator>::value_type>());\n}\n\n// max\n\ntemplate <class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nconst _Tp&\nmax(const _Tp& __a, const _Tp& __b, _Compare __comp)\n{\n    return __comp(__a, __b) ? __b : __a;\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nconst _Tp&\nmax(const _Tp& __a, const _Tp& __b)\n{\n    return _VSTD::max(__a, __b, __less<_Tp>());\n}\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate<class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_Tp\nmax(initializer_list<_Tp> __t, _Compare __comp)\n{\n    return *_VSTD::max_element(__t.begin(), __t.end(), __comp);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_Tp\nmax(initializer_list<_Tp> __t)\n{\n    return *_VSTD::max_element(__t.begin(), __t.end(), __less<_Tp>());\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#if _LIBCPP_STD_VER > 14\n// clamp\ntemplate<class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR\nconst _Tp&\nclamp(const _Tp& __v, const _Tp& __lo, const _Tp& __hi, _Compare __comp)\n{\n    _LIBCPP_ASSERT(!__comp(__hi, __lo), \"Bad bounds passed to std::clamp\");\n    return __comp(__v, __lo) ? __lo : __comp(__hi, __v) ? __hi : __v;\n\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR\nconst _Tp&\nclamp(const _Tp& __v, const _Tp& __lo, const _Tp& __hi)\n{\n    return _VSTD::clamp(__v, __lo, __hi, __less<_Tp>());\n}\n#endif\n\n// minmax_element\n\ntemplate <class _ForwardIterator, class _Compare>\n_LIBCPP_CONSTEXPR_AFTER_CXX11\nstd::pair<_ForwardIterator, _ForwardIterator>\nminmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\n{\n  std::pair<_ForwardIterator, _ForwardIterator> __result(__first, __first);\n  if (__first != __last)\n  {\n      if (++__first != __last)\n      {\n          if (__comp(*__first, *__result.first))\n              __result.first = __first;\n          else\n              __result.second = __first;\n          while (++__first != __last)\n          {\n              _ForwardIterator __i = __first;\n              if (++__first == __last)\n              {\n                  if (__comp(*__i, *__result.first))\n                      __result.first = __i;\n                  else if (!__comp(*__i, *__result.second))\n                      __result.second = __i;\n                  break;\n              }\n              else\n              {\n                  if (__comp(*__first, *__i))\n                  {\n                      if (__comp(*__first, *__result.first))\n                          __result.first = __first;\n                      if (!__comp(*__i, *__result.second))\n                          __result.second = __i;\n                  }\n                  else\n                  {\n                      if (__comp(*__i, *__result.first))\n                          __result.first = __i;\n                      if (!__comp(*__first, *__result.second))\n                          __result.second = __first;\n                  }\n              }\n          }\n      }\n  }\n  return __result;\n}\n\ntemplate <class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nstd::pair<_ForwardIterator, _ForwardIterator>\nminmax_element(_ForwardIterator __first, _ForwardIterator __last)\n{\n    return _VSTD::minmax_element(__first, __last,\n              __less<typename iterator_traits<_ForwardIterator>::value_type>());\n}\n\n// minmax\n\ntemplate<class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\npair<const _Tp&, const _Tp&>\nminmax(const _Tp& __a, const _Tp& __b, _Compare __comp)\n{\n    return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a) :\n                              pair<const _Tp&, const _Tp&>(__a, __b);\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\npair<const _Tp&, const _Tp&>\nminmax(const _Tp& __a, const _Tp& __b)\n{\n    return _VSTD::minmax(__a, __b, __less<_Tp>());\n}\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate<class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\npair<_Tp, _Tp>\nminmax(initializer_list<_Tp> __t, _Compare __comp)\n{\n    typedef typename initializer_list<_Tp>::const_iterator _Iter;\n    _Iter __first = __t.begin();\n    _Iter __last  = __t.end();\n    std::pair<_Tp, _Tp> __result(*__first, *__first);\n\n    ++__first;\n    if (__t.size() % 2 == 0)\n    {\n        if (__comp(*__first,  __result.first))\n            __result.first  = *__first;\n        else\n            __result.second = *__first;\n        ++__first;\n    }\n\n    while (__first != __last)\n    {\n        _Tp __prev = *__first++;\n        if (__comp(*__first, __prev)) {\n            if ( __comp(*__first, __result.first)) __result.first  = *__first;\n            if (!__comp(__prev, __result.second))  __result.second = __prev;\n            }\n        else {\n            if ( __comp(__prev, __result.first))    __result.first  = __prev;\n            if (!__comp(*__first, __result.second)) __result.second = *__first;\n            }\n\n        __first++;\n    }\n    return __result;\n}\n\ntemplate<class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\npair<_Tp, _Tp>\nminmax(initializer_list<_Tp> __t)\n{\n    return _VSTD::minmax(__t, __less<_Tp>());\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n// random_shuffle\n\n// __independent_bits_engine\n\ntemplate <unsigned long long _Xp, size_t _Rp>\nstruct __log2_imp\n{\n    static const size_t value = _Xp & ((unsigned long long)(1) << _Rp) ? _Rp\n                                           : __log2_imp<_Xp, _Rp - 1>::value;\n};\n\ntemplate <unsigned long long _Xp>\nstruct __log2_imp<_Xp, 0>\n{\n    static const size_t value = 0;\n};\n\ntemplate <size_t _Rp>\nstruct __log2_imp<0, _Rp>\n{\n    static const size_t value = _Rp + 1;\n};\n\ntemplate <class _UI, _UI _Xp>\nstruct __log2\n{\n    static const size_t value = __log2_imp<_Xp,\n                                         sizeof(_UI) * __CHAR_BIT__ - 1>::value;\n};\n\ntemplate<class _Engine, class _UIntType>\nclass __independent_bits_engine\n{\npublic:\n    // types\n    typedef _UIntType result_type;\n\nprivate:\n    typedef typename _Engine::result_type _Engine_result_type;\n    typedef typename conditional\n        <\n            sizeof(_Engine_result_type) <= sizeof(result_type),\n                result_type,\n                _Engine_result_type\n        >::type _Working_result_type;\n\n    _Engine& __e_;\n    size_t __w_;\n    size_t __w0_;\n    size_t __n_;\n    size_t __n0_;\n    _Working_result_type __y0_;\n    _Working_result_type __y1_;\n    _Engine_result_type __mask0_;\n    _Engine_result_type __mask1_;\n\n#ifdef _LIBCPP_HAS_NO_CONSTEXPR\n    static const _Working_result_type _Rp = _Engine::_Max - _Engine::_Min\n                                          + _Working_result_type(1);\n#else\n    static _LIBCPP_CONSTEXPR const _Working_result_type _Rp = _Engine::max() - _Engine::min()\n                                                      + _Working_result_type(1);\n#endif\n    static _LIBCPP_CONSTEXPR const size_t __m = __log2<_Working_result_type, _Rp>::value;\n    static _LIBCPP_CONSTEXPR const size_t _WDt = numeric_limits<_Working_result_type>::digits;\n    static _LIBCPP_CONSTEXPR const size_t _EDt = numeric_limits<_Engine_result_type>::digits;\n\npublic:\n    // constructors and seeding functions\n    __independent_bits_engine(_Engine& __e, size_t __w);\n\n    // generating functions\n    result_type operator()() {return __eval(integral_constant<bool, _Rp != 0>());}\n\nprivate:\n    result_type __eval(false_type);\n    result_type __eval(true_type);\n};\n\ntemplate<class _Engine, class _UIntType>\n__independent_bits_engine<_Engine, _UIntType>\n    ::__independent_bits_engine(_Engine& __e, size_t __w)\n        : __e_(__e),\n          __w_(__w)\n{\n    __n_ = __w_ / __m + (__w_ % __m != 0);\n    __w0_ = __w_ / __n_;\n    if (_Rp == 0)\n        __y0_ = _Rp;\n    else if (__w0_ < _WDt)\n        __y0_ = (_Rp >> __w0_) << __w0_;\n    else\n        __y0_ = 0;\n    if (_Rp - __y0_ > __y0_ / __n_)\n    {\n        ++__n_;\n        __w0_ = __w_ / __n_;\n        if (__w0_ < _WDt)\n            __y0_ = (_Rp >> __w0_) << __w0_;\n        else\n            __y0_ = 0;\n    }\n    __n0_ = __n_ - __w_ % __n_;\n    if (__w0_ < _WDt - 1)\n        __y1_ = (_Rp >> (__w0_ + 1)) << (__w0_ + 1);\n    else\n        __y1_ = 0;\n    __mask0_ = __w0_ > 0 ? _Engine_result_type(~0) >> (_EDt - __w0_) :\n                          _Engine_result_type(0);\n    __mask1_ = __w0_ < _EDt - 1 ?\n                               _Engine_result_type(~0) >> (_EDt - (__w0_ + 1)) :\n                               _Engine_result_type(~0);\n}\n\ntemplate<class _Engine, class _UIntType>\ninline\n_UIntType\n__independent_bits_engine<_Engine, _UIntType>::__eval(false_type)\n{\n    return static_cast<result_type>(__e_() & __mask0_);\n}\n\ntemplate<class _Engine, class _UIntType>\n_UIntType\n__independent_bits_engine<_Engine, _UIntType>::__eval(true_type)\n{\n    result_type _Sp = 0;\n    for (size_t __k = 0; __k < __n0_; ++__k)\n    {\n        _Engine_result_type __u;\n        do\n        {\n            __u = __e_() - _Engine::min();\n        } while (__u >= __y0_);\n        if (__w0_ < _WDt)\n            _Sp <<= __w0_;\n        else\n            _Sp = 0;\n        _Sp += __u & __mask0_;\n    }\n    for (size_t __k = __n0_; __k < __n_; ++__k)\n    {\n        _Engine_result_type __u;\n        do\n        {\n            __u = __e_() - _Engine::min();\n        } while (__u >= __y1_);\n        if (__w0_ < _WDt - 1)\n            _Sp <<= __w0_ + 1;\n        else\n            _Sp = 0;\n        _Sp += __u & __mask1_;\n    }\n    return _Sp;\n}\n\n// uniform_int_distribution\n\ntemplate<class _IntType = int>\nclass uniform_int_distribution\n{\npublic:\n    // types\n    typedef _IntType result_type;\n\n    class param_type\n    {\n        result_type __a_;\n        result_type __b_;\n    public:\n        typedef uniform_int_distribution distribution_type;\n\n        explicit param_type(result_type __a = 0,\n                            result_type __b = numeric_limits<result_type>::max())\n            : __a_(__a), __b_(__b) {}\n\n        result_type a() const {return __a_;}\n        result_type b() const {return __b_;}\n\n        friend bool operator==(const param_type& __x, const param_type& __y)\n            {return __x.__a_ == __y.__a_ && __x.__b_ == __y.__b_;}\n        friend bool operator!=(const param_type& __x, const param_type& __y)\n            {return !(__x == __y);}\n    };\n\nprivate:\n    param_type __p_;\n\npublic:\n    // constructors and reset functions\n    explicit uniform_int_distribution(result_type __a = 0,\n                                      result_type __b = numeric_limits<result_type>::max())\n        : __p_(param_type(__a, __b)) {}\n    explicit uniform_int_distribution(const param_type& __p) : __p_(__p) {}\n    void reset() {}\n\n    // generating functions\n    template<class _URNG> result_type operator()(_URNG& __g)\n        {return (*this)(__g, __p_);}\n    template<class _URNG> result_type operator()(_URNG& __g, const param_type& __p);\n\n    // property functions\n    result_type a() const {return __p_.a();}\n    result_type b() const {return __p_.b();}\n\n    param_type param() const {return __p_;}\n    void param(const param_type& __p) {__p_ = __p;}\n\n    result_type min() const {return a();}\n    result_type max() const {return b();}\n\n    friend bool operator==(const uniform_int_distribution& __x,\n                           const uniform_int_distribution& __y)\n        {return __x.__p_ == __y.__p_;}\n    friend bool operator!=(const uniform_int_distribution& __x,\n                           const uniform_int_distribution& __y)\n            {return !(__x == __y);}\n};\n\ntemplate<class _IntType>\ntemplate<class _URNG>\ntypename uniform_int_distribution<_IntType>::result_type\nuniform_int_distribution<_IntType>::operator()(_URNG& __g, const param_type& __p)\n{\n    typedef typename conditional<sizeof(result_type) <= sizeof(uint32_t),\n                                            uint32_t, uint64_t>::type _UIntType;\n    const _UIntType _Rp = __p.b() - __p.a() + _UIntType(1);\n    if (_Rp == 1)\n        return __p.a();\n    const size_t _Dt = numeric_limits<_UIntType>::digits;\n    typedef __independent_bits_engine<_URNG, _UIntType> _Eng;\n    if (_Rp == 0)\n        return static_cast<result_type>(_Eng(__g, _Dt)());\n    size_t __w = _Dt - __clz(_Rp) - 1;\n    if ((_Rp & (std::numeric_limits<_UIntType>::max() >> (_Dt - __w))) != 0)\n        ++__w;\n    _Eng __e(__g, __w);\n    _UIntType __u;\n    do\n    {\n        __u = __e();\n    } while (__u >= _Rp);\n    return static_cast<result_type>(__u + __p.a());\n}\n\nclass _LIBCPP_TYPE_VIS __rs_default;\n\n_LIBCPP_FUNC_VIS __rs_default __rs_get();\n\nclass _LIBCPP_TYPE_VIS __rs_default\n{\n    static unsigned __c_;\n\n    __rs_default();\npublic:\n    typedef uint_fast32_t result_type;\n\n    static const result_type _Min = 0;\n    static const result_type _Max = 0xFFFFFFFF;\n\n    __rs_default(const __rs_default&);\n    ~__rs_default();\n\n    result_type operator()();\n\n    static _LIBCPP_CONSTEXPR result_type min() {return _Min;}\n    static _LIBCPP_CONSTEXPR result_type max() {return _Max;}\n\n    friend _LIBCPP_FUNC_VIS __rs_default __rs_get();\n};\n\n_LIBCPP_FUNC_VIS __rs_default __rs_get();\n\ntemplate <class _RandomAccessIterator>\nvoid\nrandom_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    typedef uniform_int_distribution<ptrdiff_t> _Dp;\n    typedef typename _Dp::param_type _Pp;\n    difference_type __d = __last - __first;\n    if (__d > 1)\n    {\n        _Dp __uid;\n        __rs_default __g = __rs_get();\n        for (--__last, --__d; __first < __last; ++__first, --__d)\n        {\n            difference_type __i = __uid(__g, _Pp(0, __d));\n            if (__i != difference_type(0))\n                swap(*__first, *(__first + __i));\n        }\n    }\n}\n\ntemplate <class _RandomAccessIterator, class _RandomNumberGenerator>\nvoid\nrandom_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n               _RandomNumberGenerator&& __rand)\n#else\n               _RandomNumberGenerator& __rand)\n#endif\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    difference_type __d = __last - __first;\n    if (__d > 1)\n    {\n        for (--__last; __first < __last; ++__first, --__d)\n        {\n            difference_type __i = __rand(__d);\n            swap(*__first, *(__first + __i));\n        }\n    }\n}\n\ntemplate <class _PopulationIterator, class _SampleIterator, class _Distance,\n          class _UniformRandomNumberGenerator>\n_LIBCPP_INLINE_VISIBILITY\n_SampleIterator __sample(_PopulationIterator __first,\n                         _PopulationIterator __last, _SampleIterator __output,\n                         _Distance __n,\n                         _UniformRandomNumberGenerator & __g,\n                         input_iterator_tag) {\n\n  _Distance __k = 0;\n  for (; __first != __last && __k < __n; ++__first, (void)++__k)\n    __output[__k] = *__first;\n  _Distance __sz = __k;\n  for (; __first != __last; ++__first, (void)++__k) {\n    _Distance __r = _VSTD::uniform_int_distribution<_Distance>(0, __k)(__g);\n    if (__r < __sz)\n      __output[__r] = *__first;\n  }\n  return __output + _VSTD::min(__n, __k);\n}\n\ntemplate <class _PopulationIterator, class _SampleIterator, class _Distance,\n          class _UniformRandomNumberGenerator>\n_LIBCPP_INLINE_VISIBILITY\n_SampleIterator __sample(_PopulationIterator __first,\n                         _PopulationIterator __last, _SampleIterator __output,\n                         _Distance __n,\n                         _UniformRandomNumberGenerator& __g,\n                         forward_iterator_tag) {\n  _Distance __unsampled_sz = _VSTD::distance(__first, __last);\n  for (__n = _VSTD::min(__n, __unsampled_sz); __n != 0; ++__first) {\n    _Distance __r =\n        _VSTD::uniform_int_distribution<_Distance>(0, --__unsampled_sz)(__g);\n    if (__r < __n) {\n      *__output++ = *__first;\n      --__n;\n    }\n  }\n  return __output;\n}\n\ntemplate <class _PopulationIterator, class _SampleIterator, class _Distance,\n          class _UniformRandomNumberGenerator>\n_LIBCPP_INLINE_VISIBILITY\n_SampleIterator __sample(_PopulationIterator __first,\n                         _PopulationIterator __last, _SampleIterator __output,\n                         _Distance __n, _UniformRandomNumberGenerator& __g) {\n  typedef typename iterator_traits<_PopulationIterator>::iterator_category\n        _PopCategory;\n  typedef typename iterator_traits<_PopulationIterator>::difference_type\n        _Difference;\n  static_assert(__is_forward_iterator<_PopulationIterator>::value ||\n                __is_random_access_iterator<_SampleIterator>::value,\n                \"SampleIterator must meet the requirements of RandomAccessIterator\");\n  typedef typename common_type<_Distance, _Difference>::type _CommonType;\n  _LIBCPP_ASSERT(__n >= 0, \"N must be a positive number.\");\n  return _VSTD::__sample(\n      __first, __last, __output, _CommonType(__n),\n      __g, _PopCategory());\n}\n\n#if _LIBCPP_STD_VER > 14\ntemplate <class _PopulationIterator, class _SampleIterator, class _Distance,\n          class _UniformRandomNumberGenerator>\ninline _LIBCPP_INLINE_VISIBILITY\n_SampleIterator sample(_PopulationIterator __first,\n                       _PopulationIterator __last, _SampleIterator __output,\n                       _Distance __n, _UniformRandomNumberGenerator&& __g) {\n    return _VSTD::__sample(__first, __last, __output, __n, __g);\n}\n#endif // _LIBCPP_STD_VER > 14\n\ntemplate<class _RandomAccessIterator, class _UniformRandomNumberGenerator>\n    void shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n                 _UniformRandomNumberGenerator&& __g)\n#else\n                 _UniformRandomNumberGenerator& __g)\n#endif\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    typedef uniform_int_distribution<ptrdiff_t> _Dp;\n    typedef typename _Dp::param_type _Pp;\n    difference_type __d = __last - __first;\n    if (__d > 1)\n    {\n        _Dp __uid;\n        for (--__last, --__d; __first < __last; ++__first, --__d)\n        {\n            difference_type __i = __uid(__g, _Pp(0, __d));\n            if (__i != difference_type(0))\n                swap(*__first, *(__first + __i));\n        }\n    }\n}\n\ntemplate <class _InputIterator, class _Predicate>\nbool\nis_partitioned(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n        if (!__pred(*__first))\n            break;\n    if ( __first == __last )\n        return true;\n    ++__first;\n    for (; __first != __last; ++__first)\n        if (__pred(*__first))\n            return false;\n    return true;\n}\n\n// partition\n\ntemplate <class _Predicate, class _ForwardIterator>\n_ForwardIterator\n__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, forward_iterator_tag)\n{\n    while (true)\n    {\n        if (__first == __last)\n            return __first;\n        if (!__pred(*__first))\n            break;\n        ++__first;\n    }\n    for (_ForwardIterator __p = __first; ++__p != __last;)\n    {\n        if (__pred(*__p))\n        {\n            swap(*__first, *__p);\n            ++__first;\n        }\n    }\n    return __first;\n}\n\ntemplate <class _Predicate, class _BidirectionalIterator>\n_BidirectionalIterator\n__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred,\n            bidirectional_iterator_tag)\n{\n    while (true)\n    {\n        while (true)\n        {\n            if (__first == __last)\n                return __first;\n            if (!__pred(*__first))\n                break;\n            ++__first;\n        }\n        do\n        {\n            if (__first == --__last)\n                return __first;\n        } while (!__pred(*__last));\n        swap(*__first, *__last);\n        ++__first;\n    }\n}\n\ntemplate <class _ForwardIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\npartition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\n{\n    return _VSTD::__partition<typename add_lvalue_reference<_Predicate>::type>\n                            (__first, __last, __pred, typename iterator_traits<_ForwardIterator>::iterator_category());\n}\n\n// partition_copy\n\ntemplate <class _InputIterator, class _OutputIterator1,\n          class _OutputIterator2, class _Predicate>\npair<_OutputIterator1, _OutputIterator2>\npartition_copy(_InputIterator __first, _InputIterator __last,\n               _OutputIterator1 __out_true, _OutputIterator2 __out_false,\n               _Predicate __pred)\n{\n    for (; __first != __last; ++__first)\n    {\n        if (__pred(*__first))\n        {\n            *__out_true = *__first;\n            ++__out_true;\n        }\n        else\n        {\n            *__out_false = *__first;\n            ++__out_false;\n        }\n    }\n    return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);\n}\n\n// partition_point\n\ntemplate<class _ForwardIterator, class _Predicate>\n_ForwardIterator\npartition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\n{\n    typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;\n    difference_type __len = _VSTD::distance(__first, __last);\n    while (__len != 0)\n    {\n        difference_type __l2 = __len / 2;\n        _ForwardIterator __m = __first;\n        _VSTD::advance(__m, __l2);\n        if (__pred(*__m))\n        {\n            __first = ++__m;\n            __len -= __l2 + 1;\n        }\n        else\n            __len = __l2;\n    }\n    return __first;\n}\n\n// stable_partition\n\ntemplate <class _Predicate, class _ForwardIterator, class _Distance, class _Pair>\n_ForwardIterator\n__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred,\n                   _Distance __len, _Pair __p, forward_iterator_tag __fit)\n{\n    // *__first is known to be false\n    // __len >= 1\n    if (__len == 1)\n        return __first;\n    if (__len == 2)\n    {\n        _ForwardIterator __m = __first;\n        if (__pred(*++__m))\n        {\n            swap(*__first, *__m);\n            return __m;\n        }\n        return __first;\n    }\n    if (__len <= __p.second)\n    {   // The buffer is big enough to use\n        typedef typename iterator_traits<_ForwardIterator>::value_type value_type;\n        __destruct_n __d(0);\n        unique_ptr<value_type, __destruct_n&> __h(__p.first, __d);\n        // Move the falses into the temporary buffer, and the trues to the front of the line\n        // Update __first to always point to the end of the trues\n        value_type* __t = __p.first;\n        ::new(__t) value_type(_VSTD::move(*__first));\n        __d.__incr((value_type*)0);\n        ++__t;\n        _ForwardIterator __i = __first;\n        while (++__i != __last)\n        {\n            if (__pred(*__i))\n            {\n                *__first = _VSTD::move(*__i);\n                ++__first;\n            }\n            else\n            {\n                ::new(__t) value_type(_VSTD::move(*__i));\n                __d.__incr((value_type*)0);\n                ++__t;\n            }\n        }\n        // All trues now at start of range, all falses in buffer\n        // Move falses back into range, but don't mess up __first which points to first false\n        __i = __first;\n        for (value_type* __t2 = __p.first; __t2 < __t; ++__t2, ++__i)\n            *__i = _VSTD::move(*__t2);\n        // __h destructs moved-from values out of the temp buffer, but doesn't deallocate buffer\n        return __first;\n    }\n    // Else not enough buffer, do in place\n    // __len >= 3\n    _ForwardIterator __m = __first;\n    _Distance __len2 = __len / 2;  // __len2 >= 2\n    _VSTD::advance(__m, __len2);\n    // recurse on [__first, __m), *__first know to be false\n    // F?????????????????\n    // f       m         l\n    typedef typename add_lvalue_reference<_Predicate>::type _PredRef;\n    _ForwardIterator __first_false = __stable_partition<_PredRef>(__first, __m, __pred, __len2, __p, __fit);\n    // TTTFFFFF??????????\n    // f  ff   m         l\n    // recurse on [__m, __last], except increase __m until *(__m) is false, *__last know to be true\n    _ForwardIterator __m1 = __m;\n    _ForwardIterator __second_false = __last;\n    _Distance __len_half = __len - __len2;\n    while (__pred(*__m1))\n    {\n        if (++__m1 == __last)\n            goto __second_half_done;\n        --__len_half;\n    }\n    // TTTFFFFFTTTF??????\n    // f  ff   m  m1     l\n    __second_false = __stable_partition<_PredRef>(__m1, __last, __pred, __len_half, __p, __fit);\n__second_half_done:\n    // TTTFFFFFTTTTTFFFFF\n    // f  ff   m    sf   l\n    return _VSTD::rotate(__first_false, __m, __second_false);\n    // TTTTTTTTFFFFFFFFFF\n    //         |\n}\n\nstruct __return_temporary_buffer\n{\n    template <class _Tp>\n    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) const {_VSTD::return_temporary_buffer(__p);}\n};\n\ntemplate <class _Predicate, class _ForwardIterator>\n_ForwardIterator\n__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred,\n                   forward_iterator_tag)\n{\n    const unsigned __alloc_limit = 3;  // might want to make this a function of trivial assignment\n    // Either prove all true and return __first or point to first false\n    while (true)\n    {\n        if (__first == __last)\n            return __first;\n        if (!__pred(*__first))\n            break;\n        ++__first;\n    }\n    // We now have a reduced range [__first, __last)\n    // *__first is known to be false\n    typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;\n    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;\n    difference_type __len = _VSTD::distance(__first, __last);\n    pair<value_type*, ptrdiff_t> __p(0, 0);\n    unique_ptr<value_type, __return_temporary_buffer> __h;\n    if (__len >= __alloc_limit)\n    {\n        __p = _VSTD::get_temporary_buffer<value_type>(__len);\n        __h.reset(__p.first);\n    }\n    return __stable_partition<typename add_lvalue_reference<_Predicate>::type>\n                             (__first, __last, __pred, __len, __p, forward_iterator_tag());\n}\n\ntemplate <class _Predicate, class _BidirectionalIterator, class _Distance, class _Pair>\n_BidirectionalIterator\n__stable_partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred,\n                   _Distance __len, _Pair __p, bidirectional_iterator_tag __bit)\n{\n    // *__first is known to be false\n    // *__last is known to be true\n    // __len >= 2\n    if (__len == 2)\n    {\n        swap(*__first, *__last);\n        return __last;\n    }\n    if (__len == 3)\n    {\n        _BidirectionalIterator __m = __first;\n        if (__pred(*++__m))\n        {\n            swap(*__first, *__m);\n            swap(*__m, *__last);\n            return __last;\n        }\n        swap(*__m, *__last);\n        swap(*__first, *__m);\n        return __m;\n    }\n    if (__len <= __p.second)\n    {   // The buffer is big enough to use\n        typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;\n        __destruct_n __d(0);\n        unique_ptr<value_type, __destruct_n&> __h(__p.first, __d);\n        // Move the falses into the temporary buffer, and the trues to the front of the line\n        // Update __first to always point to the end of the trues\n        value_type* __t = __p.first;\n        ::new(__t) value_type(_VSTD::move(*__first));\n        __d.__incr((value_type*)0);\n        ++__t;\n        _BidirectionalIterator __i = __first;\n        while (++__i != __last)\n        {\n            if (__pred(*__i))\n            {\n                *__first = _VSTD::move(*__i);\n                ++__first;\n            }\n            else\n            {\n                ::new(__t) value_type(_VSTD::move(*__i));\n                __d.__incr((value_type*)0);\n                ++__t;\n            }\n        }\n        // move *__last, known to be true\n        *__first = _VSTD::move(*__i);\n        __i = ++__first;\n        // All trues now at start of range, all falses in buffer\n        // Move falses back into range, but don't mess up __first which points to first false\n        for (value_type* __t2 = __p.first; __t2 < __t; ++__t2, ++__i)\n            *__i = _VSTD::move(*__t2);\n        // __h destructs moved-from values out of the temp buffer, but doesn't deallocate buffer\n        return __first;\n    }\n    // Else not enough buffer, do in place\n    // __len >= 4\n    _BidirectionalIterator __m = __first;\n    _Distance __len2 = __len / 2;  // __len2 >= 2\n    _VSTD::advance(__m, __len2);\n    // recurse on [__first, __m-1], except reduce __m-1 until *(__m-1) is true, *__first know to be false\n    // F????????????????T\n    // f       m        l\n    _BidirectionalIterator __m1 = __m;\n    _BidirectionalIterator __first_false = __first;\n    _Distance __len_half = __len2;\n    while (!__pred(*--__m1))\n    {\n        if (__m1 == __first)\n            goto __first_half_done;\n        --__len_half;\n    }\n    // F???TFFF?????????T\n    // f   m1  m        l\n    typedef typename add_lvalue_reference<_Predicate>::type _PredRef;\n    __first_false = __stable_partition<_PredRef>(__first, __m1, __pred, __len_half, __p, __bit);\n__first_half_done:\n    // TTTFFFFF?????????T\n    // f  ff   m        l\n    // recurse on [__m, __last], except increase __m until *(__m) is false, *__last know to be true\n    __m1 = __m;\n    _BidirectionalIterator __second_false = __last;\n    ++__second_false;\n    __len_half = __len - __len2;\n    while (__pred(*__m1))\n    {\n        if (++__m1 == __last)\n            goto __second_half_done;\n        --__len_half;\n    }\n    // TTTFFFFFTTTF?????T\n    // f  ff   m  m1    l\n    __second_false = __stable_partition<_PredRef>(__m1, __last, __pred, __len_half, __p, __bit);\n__second_half_done:\n    // TTTFFFFFTTTTTFFFFF\n    // f  ff   m    sf  l\n    return _VSTD::rotate(__first_false, __m, __second_false);\n    // TTTTTTTTFFFFFFFFFF\n    //         |\n}\n\ntemplate <class _Predicate, class _BidirectionalIterator>\n_BidirectionalIterator\n__stable_partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred,\n                   bidirectional_iterator_tag)\n{\n    typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;\n    typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;\n    const difference_type __alloc_limit = 4;  // might want to make this a function of trivial assignment\n    // Either prove all true and return __first or point to first false\n    while (true)\n    {\n        if (__first == __last)\n            return __first;\n        if (!__pred(*__first))\n            break;\n        ++__first;\n    }\n    // __first points to first false, everything prior to __first is already set.\n    // Either prove [__first, __last) is all false and return __first, or point __last to last true\n    do\n    {\n        if (__first == --__last)\n            return __first;\n    } while (!__pred(*__last));\n    // We now have a reduced range [__first, __last]\n    // *__first is known to be false\n    // *__last is known to be true\n    // __len >= 2\n    difference_type __len = _VSTD::distance(__first, __last) + 1;\n    pair<value_type*, ptrdiff_t> __p(0, 0);\n    unique_ptr<value_type, __return_temporary_buffer> __h;\n    if (__len >= __alloc_limit)\n    {\n        __p = _VSTD::get_temporary_buffer<value_type>(__len);\n        __h.reset(__p.first);\n    }\n    return __stable_partition<typename add_lvalue_reference<_Predicate>::type>\n                             (__first, __last, __pred, __len, __p, bidirectional_iterator_tag());\n}\n\ntemplate <class _ForwardIterator, class _Predicate>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nstable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)\n{\n    return __stable_partition<typename add_lvalue_reference<_Predicate>::type>\n                             (__first, __last, __pred, typename iterator_traits<_ForwardIterator>::iterator_category());\n}\n\n// is_sorted_until\n\ntemplate <class _ForwardIterator, class _Compare>\n_ForwardIterator\nis_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\n{\n    if (__first != __last)\n    {\n        _ForwardIterator __i = __first;\n        while (++__i != __last)\n        {\n            if (__comp(*__i, *__first))\n                return __i;\n            __first = __i;\n        }\n    }\n    return __last;\n}\n\ntemplate<class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nis_sorted_until(_ForwardIterator __first, _ForwardIterator __last)\n{\n    return _VSTD::is_sorted_until(__first, __last, __less<typename iterator_traits<_ForwardIterator>::value_type>());\n}\n\n// is_sorted\n\ntemplate <class _ForwardIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nis_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)\n{\n    return _VSTD::is_sorted_until(__first, __last, __comp) == __last;\n}\n\ntemplate<class _ForwardIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nis_sorted(_ForwardIterator __first, _ForwardIterator __last)\n{\n    return _VSTD::is_sorted(__first, __last, __less<typename iterator_traits<_ForwardIterator>::value_type>());\n}\n\n// sort\n\n// stable, 2-3 compares, 0-2 swaps\n\ntemplate <class _Compare, class _ForwardIterator>\nunsigned\n__sort3(_ForwardIterator __x, _ForwardIterator __y, _ForwardIterator __z, _Compare __c)\n{\n    unsigned __r = 0;\n    if (!__c(*__y, *__x))          // if x <= y\n    {\n        if (!__c(*__z, *__y))      // if y <= z\n            return __r;            // x <= y && y <= z\n                                   // x <= y && y > z\n        swap(*__y, *__z);          // x <= z && y < z\n        __r = 1;\n        if (__c(*__y, *__x))       // if x > y\n        {\n            swap(*__x, *__y);      // x < y && y <= z\n            __r = 2;\n        }\n        return __r;                // x <= y && y < z\n    }\n    if (__c(*__z, *__y))           // x > y, if y > z\n    {\n        swap(*__x, *__z);          // x < y && y < z\n        __r = 1;\n        return __r;\n    }\n    swap(*__x, *__y);              // x > y && y <= z\n    __r = 1;                       // x < y && x <= z\n    if (__c(*__z, *__y))           // if y > z\n    {\n        swap(*__y, *__z);          // x <= y && y < z\n        __r = 2;\n    }\n    return __r;\n}                                  // x <= y && y <= z\n\n// stable, 3-6 compares, 0-5 swaps\n\ntemplate <class _Compare, class _ForwardIterator>\nunsigned\n__sort4(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3,\n            _ForwardIterator __x4, _Compare __c)\n{\n    unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c);\n    if (__c(*__x4, *__x3))\n    {\n        swap(*__x3, *__x4);\n        ++__r;\n        if (__c(*__x3, *__x2))\n        {\n            swap(*__x2, *__x3);\n            ++__r;\n            if (__c(*__x2, *__x1))\n            {\n                swap(*__x1, *__x2);\n                ++__r;\n            }\n        }\n    }\n    return __r;\n}\n\n// stable, 4-10 compares, 0-9 swaps\n\ntemplate <class _Compare, class _ForwardIterator>\nunsigned\n__sort5(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3,\n            _ForwardIterator __x4, _ForwardIterator __x5, _Compare __c)\n{\n    unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c);\n    if (__c(*__x5, *__x4))\n    {\n        swap(*__x4, *__x5);\n        ++__r;\n        if (__c(*__x4, *__x3))\n        {\n            swap(*__x3, *__x4);\n            ++__r;\n            if (__c(*__x3, *__x2))\n            {\n                swap(*__x2, *__x3);\n                ++__r;\n                if (__c(*__x2, *__x1))\n                {\n                    swap(*__x1, *__x2);\n                    ++__r;\n                }\n            }\n        }\n    }\n    return __r;\n}\n\n// Assumes size > 0\ntemplate <class _Compare, class _BirdirectionalIterator>\nvoid\n__selection_sort(_BirdirectionalIterator __first, _BirdirectionalIterator __last, _Compare __comp)\n{\n    _BirdirectionalIterator __lm1 = __last;\n    for (--__lm1; __first != __lm1; ++__first)\n    {\n        _BirdirectionalIterator __i = _VSTD::min_element<_BirdirectionalIterator,\n                                                        typename add_lvalue_reference<_Compare>::type>\n                                                       (__first, __last, __comp);\n        if (__i != __first)\n            swap(*__first, *__i);\n    }\n}\n\ntemplate <class _Compare, class _BirdirectionalIterator>\nvoid\n__insertion_sort(_BirdirectionalIterator __first, _BirdirectionalIterator __last, _Compare __comp)\n{\n    typedef typename iterator_traits<_BirdirectionalIterator>::value_type value_type;\n    if (__first != __last)\n    {\n        _BirdirectionalIterator __i = __first;\n        for (++__i; __i != __last; ++__i)\n        {\n            _BirdirectionalIterator __j = __i;\n            value_type __t(_VSTD::move(*__j));\n            for (_BirdirectionalIterator __k = __i; __k != __first && __comp(__t,  *--__k); --__j)\n                *__j = _VSTD::move(*__k);\n            *__j = _VSTD::move(__t);\n        }\n    }\n}\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__insertion_sort_3(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n    _RandomAccessIterator __j = __first+2;\n    __sort3<_Compare>(__first, __first+1, __j, __comp);\n    for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i)\n    {\n        if (__comp(*__i, *__j))\n        {\n            value_type __t(_VSTD::move(*__i));\n            _RandomAccessIterator __k = __j;\n            __j = __i;\n            do\n            {\n                *__j = _VSTD::move(*__k);\n                __j = __k;\n            } while (__j != __first && __comp(__t, *--__k));\n            *__j = _VSTD::move(__t);\n        }\n        __j = __i;\n    }\n}\n\ntemplate <class _Compare, class _RandomAccessIterator>\nbool\n__insertion_sort_incomplete(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n    switch (__last - __first)\n    {\n    case 0:\n    case 1:\n        return true;\n    case 2:\n        if (__comp(*--__last, *__first))\n            swap(*__first, *__last);\n        return true;\n    case 3:\n        _VSTD::__sort3<_Compare>(__first, __first+1, --__last, __comp);\n        return true;\n    case 4:\n        _VSTD::__sort4<_Compare>(__first, __first+1, __first+2, --__last, __comp);\n        return true;\n    case 5:\n        _VSTD::__sort5<_Compare>(__first, __first+1, __first+2, __first+3, --__last, __comp);\n        return true;\n    }\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n    _RandomAccessIterator __j = __first+2;\n    __sort3<_Compare>(__first, __first+1, __j, __comp);\n    const unsigned __limit = 8;\n    unsigned __count = 0;\n    for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i)\n    {\n        if (__comp(*__i, *__j))\n        {\n            value_type __t(_VSTD::move(*__i));\n            _RandomAccessIterator __k = __j;\n            __j = __i;\n            do\n            {\n                *__j = _VSTD::move(*__k);\n                __j = __k;\n            } while (__j != __first && __comp(__t, *--__k));\n            *__j = _VSTD::move(__t);\n            if (++__count == __limit)\n                return ++__i == __last;\n        }\n        __j = __i;\n    }\n    return true;\n}\n\ntemplate <class _Compare, class _BirdirectionalIterator>\nvoid\n__insertion_sort_move(_BirdirectionalIterator __first1, _BirdirectionalIterator __last1,\n                      typename iterator_traits<_BirdirectionalIterator>::value_type* __first2, _Compare __comp)\n{\n    typedef typename iterator_traits<_BirdirectionalIterator>::value_type value_type;\n    if (__first1 != __last1)\n    {\n        __destruct_n __d(0);\n        unique_ptr<value_type, __destruct_n&> __h(__first2, __d);\n        value_type* __last2 = __first2;\n        ::new(__last2) value_type(_VSTD::move(*__first1));\n        __d.__incr((value_type*)0);\n        for (++__last2; ++__first1 != __last1; ++__last2)\n        {\n            value_type* __j2 = __last2;\n            value_type* __i2 = __j2;\n            if (__comp(*__first1, *--__i2))\n            {\n                ::new(__j2) value_type(_VSTD::move(*__i2));\n                __d.__incr((value_type*)0);\n                for (--__j2; __i2 != __first2 && __comp(*__first1,  *--__i2); --__j2)\n                    *__j2 = _VSTD::move(*__i2);\n                *__j2 = _VSTD::move(*__first1);\n            }\n            else\n            {\n                ::new(__j2) value_type(_VSTD::move(*__first1));\n                __d.__incr((value_type*)0);\n            }\n        }\n        __h.release();\n    }\n}\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n    // _Compare is known to be a reference type\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n    const difference_type __limit = is_trivially_copy_constructible<value_type>::value &&\n                                    is_trivially_copy_assignable<value_type>::value ? 30 : 6;\n    while (true)\n    {\n    __restart:\n        difference_type __len = __last - __first;\n        switch (__len)\n        {\n        case 0:\n        case 1:\n            return;\n        case 2:\n            if (__comp(*--__last, *__first))\n                swap(*__first, *__last);\n            return;\n        case 3:\n            _VSTD::__sort3<_Compare>(__first, __first+1, --__last, __comp);\n            return;\n        case 4:\n            _VSTD::__sort4<_Compare>(__first, __first+1, __first+2, --__last, __comp);\n            return;\n        case 5:\n            _VSTD::__sort5<_Compare>(__first, __first+1, __first+2, __first+3, --__last, __comp);\n            return;\n        }\n        if (__len <= __limit)\n        {\n            _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp);\n            return;\n        }\n        // __len > 5\n        _RandomAccessIterator __m = __first;\n        _RandomAccessIterator __lm1 = __last;\n        --__lm1;\n        unsigned __n_swaps;\n        {\n        difference_type __delta;\n        if (__len >= 1000)\n        {\n            __delta = __len/2;\n            __m += __delta;\n            __delta /= 2;\n            __n_swaps = _VSTD::__sort5<_Compare>(__first, __first + __delta, __m, __m+__delta, __lm1, __comp);\n        }\n        else\n        {\n            __delta = __len/2;\n            __m += __delta;\n            __n_swaps = _VSTD::__sort3<_Compare>(__first, __m, __lm1, __comp);\n        }\n        }\n        // *__m is median\n        // partition [__first, __m) < *__m and *__m <= [__m, __last)\n        // (this inhibits tossing elements equivalent to __m around unnecessarily)\n        _RandomAccessIterator __i = __first;\n        _RandomAccessIterator __j = __lm1;\n        // j points beyond range to be tested, *__m is known to be <= *__lm1\n        // The search going up is known to be guarded but the search coming down isn't.\n        // Prime the downward search with a guard.\n        if (!__comp(*__i, *__m))  // if *__first == *__m\n        {\n            // *__first == *__m, *__first doesn't go in first part\n            // manually guard downward moving __j against __i\n            while (true)\n            {\n                if (__i == --__j)\n                {\n                    // *__first == *__m, *__m <= all other elements\n                    // Parition instead into [__first, __i) == *__first and *__first < [__i, __last)\n                    ++__i;  // __first + 1\n                    __j = __last;\n                    if (!__comp(*__first, *--__j))  // we need a guard if *__first == *(__last-1)\n                    {\n                        while (true)\n                        {\n                            if (__i == __j)\n                                return;  // [__first, __last) all equivalent elements\n                            if (__comp(*__first, *__i))\n                            {\n                                swap(*__i, *__j);\n                                ++__n_swaps;\n                                ++__i;\n                                break;\n                            }\n                            ++__i;\n                        }\n                    }\n                    // [__first, __i) == *__first and *__first < [__j, __last) and __j == __last - 1\n                    if (__i == __j)\n                        return;\n                    while (true)\n                    {\n                        while (!__comp(*__first, *__i))\n                            ++__i;\n                        while (__comp(*__first, *--__j))\n                            ;\n                        if (__i >= __j)\n                            break;\n                        swap(*__i, *__j);\n                        ++__n_swaps;\n                        ++__i;\n                    }\n                    // [__first, __i) == *__first and *__first < [__i, __last)\n                    // The first part is sorted, sort the secod part\n                    // _VSTD::__sort<_Compare>(__i, __last, __comp);\n                    __first = __i;\n                    goto __restart;\n                }\n                if (__comp(*__j, *__m))\n                {\n                    swap(*__i, *__j);\n                    ++__n_swaps;\n                    break;  // found guard for downward moving __j, now use unguarded partition\n                }\n            }\n        }\n        // It is known that *__i < *__m\n        ++__i;\n        // j points beyond range to be tested, *__m is known to be <= *__lm1\n        // if not yet partitioned...\n        if (__i < __j)\n        {\n            // known that *(__i - 1) < *__m\n            // known that __i <= __m\n            while (true)\n            {\n                // __m still guards upward moving __i\n                while (__comp(*__i, *__m))\n                    ++__i;\n                // It is now known that a guard exists for downward moving __j\n                while (!__comp(*--__j, *__m))\n                    ;\n                if (__i > __j)\n                    break;\n                swap(*__i, *__j);\n                ++__n_swaps;\n                // It is known that __m != __j\n                // If __m just moved, follow it\n                if (__m == __i)\n                    __m = __j;\n                ++__i;\n            }\n        }\n        // [__first, __i) < *__m and *__m <= [__i, __last)\n        if (__i != __m && __comp(*__m, *__i))\n        {\n            swap(*__i, *__m);\n            ++__n_swaps;\n        }\n        // [__first, __i) < *__i and *__i <= [__i+1, __last)\n        // If we were given a perfect partition, see if insertion sort is quick...\n        if (__n_swaps == 0)\n        {\n            bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp);\n            if (_VSTD::__insertion_sort_incomplete<_Compare>(__i+1, __last, __comp))\n            {\n                if (__fs)\n                    return;\n                __last = __i;\n                continue;\n            }\n            else\n            {\n                if (__fs)\n                {\n                    __first = ++__i;\n                    continue;\n                }\n            }\n        }\n        // sort smaller range with recursive call and larger with tail recursion elimination\n        if (__i - __first < __last - __i)\n        {\n            _VSTD::__sort<_Compare>(__first, __i, __comp);\n            // _VSTD::__sort<_Compare>(__i+1, __last, __comp);\n            __first = ++__i;\n        }\n        else\n        {\n            _VSTD::__sort<_Compare>(__i+1, __last, __comp);\n            // _VSTD::__sort<_Compare>(__first, __i, __comp);\n            __last = __i;\n        }\n    }\n}\n\n// This forwarder keeps the top call and the recursive calls using the same instantiation, forcing a reference _Compare\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nsort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    __sort<_Comp_ref>(__first, __last, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    __sort<_Comp_ref>(__first, __last, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nsort(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    _VSTD::sort(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nsort(_Tp** __first, _Tp** __last)\n{\n    _VSTD::sort((size_t*)__first, (size_t*)__last, __less<size_t>());\n}\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nsort(__wrap_iter<_Tp*> __first, __wrap_iter<_Tp*> __last)\n{\n    _VSTD::sort(__first.base(), __last.base());\n}\n\ntemplate <class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nsort(__wrap_iter<_Tp*> __first, __wrap_iter<_Tp*> __last, _Compare __comp)\n{\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    _VSTD::sort<_Tp*, _Comp_ref>(__first.base(), __last.base(), __comp);\n}\n\n#ifdef _LIBCPP_MSVC\n#pragma warning( push )\n#pragma warning( disable: 4231)\n#endif // _LIBCPP_MSVC\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<char>&, char*>(char*, char*, __less<char>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, __less<wchar_t>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<signed char>&, signed char*>(signed char*, signed char*, __less<signed char>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, __less<unsigned char>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<short>&, short*>(short*, short*, __less<short>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, __less<unsigned short>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<int>&, int*>(int*, int*, __less<int>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<unsigned>&, unsigned*>(unsigned*, unsigned*, __less<unsigned>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<long>&, long*>(long*, long*, __less<long>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, __less<unsigned long>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<long long>&, long long*>(long long*, long long*, __less<long long>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, __less<unsigned long long>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<float>&, float*>(float*, float*, __less<float>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<double>&, double*>(double*, double*, __less<double>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS void __sort<__less<long double>&, long double*>(long double*, long double*, __less<long double>&))\n\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<char>&, char*>(char*, char*, __less<char>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, __less<wchar_t>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<signed char>&, signed char*>(signed char*, signed char*, __less<signed char>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, __less<unsigned char>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<short>&, short*>(short*, short*, __less<short>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, __less<unsigned short>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<int>&, int*>(int*, int*, __less<int>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned>&, unsigned*>(unsigned*, unsigned*, __less<unsigned>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<long>&, long*>(long*, long*, __less<long>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, __less<unsigned long>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<long long>&, long long*>(long long*, long long*, __less<long long>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, __less<unsigned long long>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<float>&, float*>(float*, float*, __less<float>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<double>&, double*>(double*, double*, __less<double>&))\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<long double>&, long double*>(long double*, long double*, __less<long double>&))\n\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS unsigned __sort5<__less<long double>&, long double*>(long double*, long double*, long double*, long double*, long double*, __less<long double>&))\n#ifdef _LIBCPP_MSVC\n#pragma warning( pop )\n#endif  // _LIBCPP_MSVC\n\n// lower_bound\n\ntemplate <class _Compare, class _ForwardIterator, class _Tp>\n_ForwardIterator\n__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, _Compare __comp)\n{\n    typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;\n    difference_type __len = _VSTD::distance(__first, __last);\n    while (__len != 0)\n    {\n        difference_type __l2 = __len / 2;\n        _ForwardIterator __m = __first;\n        _VSTD::advance(__m, __l2);\n        if (__comp(*__m, __value_))\n        {\n            __first = ++__m;\n            __len -= __l2 + 1;\n        }\n        else\n            __len = __l2;\n    }\n    return __first;\n}\n\ntemplate <class _ForwardIterator, class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nlower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __lower_bound<_Comp_ref>(__first, __last, __value_, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __lower_bound<_Comp_ref>(__first, __last, __value_, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _ForwardIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nlower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_)\n{\n    return _VSTD::lower_bound(__first, __last, __value_,\n                             __less<typename iterator_traits<_ForwardIterator>::value_type, _Tp>());\n}\n\n// upper_bound\n\ntemplate <class _Compare, class _ForwardIterator, class _Tp>\n_ForwardIterator\n__upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, _Compare __comp)\n{\n    typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;\n    difference_type __len = _VSTD::distance(__first, __last);\n    while (__len != 0)\n    {\n        difference_type __l2 = __len / 2;\n        _ForwardIterator __m = __first;\n        _VSTD::advance(__m, __l2);\n        if (__comp(__value_, *__m))\n            __len = __l2;\n        else\n        {\n            __first = ++__m;\n            __len -= __l2 + 1;\n        }\n    }\n    return __first;\n}\n\ntemplate <class _ForwardIterator, class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nupper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __upper_bound<_Comp_ref>(__first, __last, __value_, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __upper_bound<_Comp_ref>(__first, __last, __value_, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _ForwardIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\n_ForwardIterator\nupper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_)\n{\n    return _VSTD::upper_bound(__first, __last, __value_,\n                             __less<_Tp, typename iterator_traits<_ForwardIterator>::value_type>());\n}\n\n// equal_range\n\ntemplate <class _Compare, class _ForwardIterator, class _Tp>\npair<_ForwardIterator, _ForwardIterator>\n__equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, _Compare __comp)\n{\n    typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;\n    difference_type __len = _VSTD::distance(__first, __last);\n    while (__len != 0)\n    {\n        difference_type __l2 = __len / 2;\n        _ForwardIterator __m = __first;\n        _VSTD::advance(__m, __l2);\n        if (__comp(*__m, __value_))\n        {\n            __first = ++__m;\n            __len -= __l2 + 1;\n        }\n        else if (__comp(__value_, *__m))\n        {\n            __last = __m;\n            __len = __l2;\n        }\n        else\n        {\n            _ForwardIterator __mp1 = __m;\n            return pair<_ForwardIterator, _ForwardIterator>\n                   (\n                      __lower_bound<_Compare>(__first, __m, __value_, __comp),\n                      __upper_bound<_Compare>(++__mp1, __last, __value_, __comp)\n                   );\n        }\n    }\n    return pair<_ForwardIterator, _ForwardIterator>(__first, __first);\n}\n\ntemplate <class _ForwardIterator, class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_ForwardIterator, _ForwardIterator>\nequal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __equal_range<_Comp_ref>(__first, __last, __value_, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __equal_range<_Comp_ref>(__first, __last, __value_, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _ForwardIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\npair<_ForwardIterator, _ForwardIterator>\nequal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_)\n{\n    return _VSTD::equal_range(__first, __last, __value_,\n                             __less<typename iterator_traits<_ForwardIterator>::value_type, _Tp>());\n}\n\n// binary_search\n\ntemplate <class _Compare, class _ForwardIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\n__binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, _Compare __comp)\n{\n    __first = __lower_bound<_Compare>(__first, __last, __value_, __comp);\n    return __first != __last && !__comp(__value_, *__first);\n}\n\ntemplate <class _ForwardIterator, class _Tp, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nbinary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __binary_search<_Comp_ref>(__first, __last, __value_, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __binary_search<_Comp_ref>(__first, __last, __value_, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _ForwardIterator, class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nbinary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value_)\n{\n    return _VSTD::binary_search(__first, __last, __value_,\n                             __less<typename iterator_traits<_ForwardIterator>::value_type, _Tp>());\n}\n\n// merge\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>\n_OutputIterator\n__merge(_InputIterator1 __first1, _InputIterator1 __last1,\n        _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n    for (; __first1 != __last1; ++__result)\n    {\n        if (__first2 == __last2)\n            return _VSTD::copy(__first1, __last1, __result);\n        if (__comp(*__first2, *__first1))\n        {\n            *__result = *__first2;\n            ++__first2;\n        }\n        else\n        {\n            *__result = *__first1;\n            ++__first1;\n        }\n    }\n    return _VSTD::copy(__first2, __last2, __result);\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nmerge(_InputIterator1 __first1, _InputIterator1 __last1,\n      _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return _VSTD::__merge<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return _VSTD::__merge<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nmerge(_InputIterator1 __first1, _InputIterator1 __last1,\n      _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\n{\n    typedef typename iterator_traits<_InputIterator1>::value_type __v1;\n    typedef typename iterator_traits<_InputIterator2>::value_type __v2;\n    return merge(__first1, __last1, __first2, __last2, __result, __less<__v1, __v2>());\n}\n\n// inplace_merge\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2,\n          class _OutputIterator>\nvoid __half_inplace_merge(_InputIterator1 __first1, _InputIterator1 __last1,\n                          _InputIterator2 __first2, _InputIterator2 __last2,\n                          _OutputIterator __result, _Compare __comp)\n{\n    for (; __first1 != __last1; ++__result)\n    {\n        if (__first2 == __last2)\n        {\n            _VSTD::move(__first1, __last1, __result);\n            return;\n        }\n\n        if (__comp(*__first2, *__first1))\n        {\n            *__result = _VSTD::move(*__first2);\n            ++__first2;\n        }\n        else\n        {\n            *__result = _VSTD::move(*__first1);\n            ++__first1;\n        }\n    }\n    // __first2 through __last2 are already in the right spot.\n}\n\ntemplate <class _Compare, class _BidirectionalIterator>\nvoid\n__buffered_inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last,\n                _Compare __comp, typename iterator_traits<_BidirectionalIterator>::difference_type __len1,\n                                 typename iterator_traits<_BidirectionalIterator>::difference_type __len2,\n                typename iterator_traits<_BidirectionalIterator>::value_type* __buff)\n{\n    typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;\n    __destruct_n __d(0);\n    unique_ptr<value_type, __destruct_n&> __h2(__buff, __d);\n    if (__len1 <= __len2)\n    {\n        value_type* __p = __buff;\n        for (_BidirectionalIterator __i = __first; __i != __middle; __d.__incr((value_type*)0), (void) ++__i, ++__p)\n            ::new(__p) value_type(_VSTD::move(*__i));\n        __half_inplace_merge(__buff, __p, __middle, __last, __first, __comp);\n    }\n    else\n    {\n        value_type* __p = __buff;\n        for (_BidirectionalIterator __i = __middle; __i != __last; __d.__incr((value_type*)0), (void) ++__i, ++__p)\n            ::new(__p) value_type(_VSTD::move(*__i));\n        typedef reverse_iterator<_BidirectionalIterator> _RBi;\n        typedef reverse_iterator<value_type*> _Rv;\n        __half_inplace_merge(_Rv(__p), _Rv(__buff),\n                             _RBi(__middle), _RBi(__first),\n                             _RBi(__last), __negate<_Compare>(__comp));\n    }\n}\n\ntemplate <class _Compare, class _BidirectionalIterator>\nvoid\n__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last,\n                _Compare __comp, typename iterator_traits<_BidirectionalIterator>::difference_type __len1,\n                                 typename iterator_traits<_BidirectionalIterator>::difference_type __len2,\n                typename iterator_traits<_BidirectionalIterator>::value_type* __buff, ptrdiff_t __buff_size)\n{\n    typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;\n    while (true)\n    {\n        // if __middle == __last, we're done\n        if (__len2 == 0)\n            return;\n        if (__len1 <= __buff_size || __len2 <= __buff_size)\n            return __buffered_inplace_merge<_Compare>\n                   (__first, __middle, __last, __comp, __len1, __len2, __buff);\n        // shrink [__first, __middle) as much as possible (with no moves), returning if it shrinks to 0\n        for (; true; ++__first, (void) --__len1)\n        {\n            if (__len1 == 0)\n                return;\n            if (__comp(*__middle, *__first))\n                break;\n        }\n        // __first < __middle < __last\n        // *__first > *__middle\n        // partition [__first, __m1) [__m1, __middle) [__middle, __m2) [__m2, __last) such that\n        //     all elements in:\n        //         [__first, __m1)  <= [__middle, __m2)\n        //         [__middle, __m2) <  [__m1, __middle)\n        //         [__m1, __middle) <= [__m2, __last)\n        //     and __m1 or __m2 is in the middle of its range\n        _BidirectionalIterator __m1;  // \"median\" of [__first, __middle)\n        _BidirectionalIterator __m2;  // \"median\" of [__middle, __last)\n        difference_type __len11;      // distance(__first, __m1)\n        difference_type __len21;      // distance(__middle, __m2)\n        // binary search smaller range\n        if (__len1 < __len2)\n        {   // __len >= 1, __len2 >= 2\n            __len21 = __len2 / 2;\n            __m2 = __middle;\n            _VSTD::advance(__m2, __len21);\n            __m1 = __upper_bound<_Compare>(__first, __middle, *__m2, __comp);\n            __len11 = _VSTD::distance(__first, __m1);\n        }\n        else\n        {\n            if (__len1 == 1)\n            {   // __len1 >= __len2 && __len2 > 0, therefore __len2 == 1\n                // It is known *__first > *__middle\n                swap(*__first, *__middle);\n                return;\n            }\n            // __len1 >= 2, __len2 >= 1\n            __len11 = __len1 / 2;\n            __m1 = __first;\n            _VSTD::advance(__m1, __len11);\n            __m2 = __lower_bound<_Compare>(__middle, __last, *__m1, __comp);\n            __len21 = _VSTD::distance(__middle, __m2);\n        }\n        difference_type __len12 = __len1 - __len11;  // distance(__m1, __middle)\n        difference_type __len22 = __len2 - __len21;  // distance(__m2, __last)\n        // [__first, __m1) [__m1, __middle) [__middle, __m2) [__m2, __last)\n        // swap middle two partitions\n        __middle = _VSTD::rotate(__m1, __middle, __m2);\n        // __len12 and __len21 now have swapped meanings\n        // merge smaller range with recurisve call and larger with tail recursion elimination\n        if (__len11 + __len21 < __len12 + __len22)\n        {\n            __inplace_merge<_Compare>(__first, __m1, __middle, __comp, __len11, __len21, __buff, __buff_size);\n//          __inplace_merge<_Compare>(__middle, __m2, __last, __comp, __len12, __len22, __buff, __buff_size);\n            __first = __middle;\n            __middle = __m2;\n            __len1 = __len12;\n            __len2 = __len22;\n        }\n        else\n        {\n            __inplace_merge<_Compare>(__middle, __m2, __last, __comp, __len12, __len22, __buff, __buff_size);\n//          __inplace_merge<_Compare>(__first, __m1, __middle, __comp, __len11, __len21, __buff, __buff_size);\n            __last = __middle;\n            __middle = __m1;\n            __len1 = __len11;\n            __len2 = __len21;\n        }\n    }\n}\n\ntemplate <class _BidirectionalIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\ninplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last,\n              _Compare __comp)\n{\n    typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;\n    typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;\n    difference_type __len1 = _VSTD::distance(__first, __middle);\n    difference_type __len2 = _VSTD::distance(__middle, __last);\n    difference_type __buf_size = _VSTD::min(__len1, __len2);\n    pair<value_type*, ptrdiff_t> __buf = _VSTD::get_temporary_buffer<value_type>(__buf_size);\n    unique_ptr<value_type, __return_temporary_buffer> __h(__buf.first);\n\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return _VSTD::__inplace_merge<_Comp_ref>(__first, __middle, __last, __c, __len1, __len2,\n                                            __buf.first, __buf.second);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return _VSTD::__inplace_merge<_Comp_ref>(__first, __middle, __last, __comp, __len1, __len2,\n                                            __buf.first, __buf.second);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _BidirectionalIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\ninplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)\n{\n    _VSTD::inplace_merge(__first, __middle, __last,\n                        __less<typename iterator_traits<_BidirectionalIterator>::value_type>());\n}\n\n// stable_sort\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2>\nvoid\n__merge_move_construct(_InputIterator1 __first1, _InputIterator1 __last1,\n        _InputIterator2 __first2, _InputIterator2 __last2,\n        typename iterator_traits<_InputIterator1>::value_type* __result, _Compare __comp)\n{\n    typedef typename iterator_traits<_InputIterator1>::value_type value_type;\n    __destruct_n __d(0);\n    unique_ptr<value_type, __destruct_n&> __h(__result, __d);\n    for (; true; ++__result)\n    {\n        if (__first1 == __last1)\n        {\n            for (; __first2 != __last2; ++__first2, ++__result, __d.__incr((value_type*)0))\n                ::new (__result) value_type(_VSTD::move(*__first2));\n            __h.release();\n            return;\n        }\n        if (__first2 == __last2)\n        {\n            for (; __first1 != __last1; ++__first1, ++__result, __d.__incr((value_type*)0))\n                ::new (__result) value_type(_VSTD::move(*__first1));\n            __h.release();\n            return;\n        }\n        if (__comp(*__first2, *__first1))\n        {\n            ::new (__result) value_type(_VSTD::move(*__first2));\n            __d.__incr((value_type*)0);\n            ++__first2;\n        }\n        else\n        {\n            ::new (__result) value_type(_VSTD::move(*__first1));\n            __d.__incr((value_type*)0);\n            ++__first1;\n        }\n    }\n}\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>\nvoid\n__merge_move_assign(_InputIterator1 __first1, _InputIterator1 __last1,\n        _InputIterator2 __first2, _InputIterator2 __last2,\n        _OutputIterator __result, _Compare __comp)\n{\n    for (; __first1 != __last1; ++__result)\n    {\n        if (__first2 == __last2)\n        {\n            for (; __first1 != __last1; ++__first1, ++__result)\n                *__result = _VSTD::move(*__first1);\n            return;\n        }\n        if (__comp(*__first2, *__first1))\n        {\n            *__result = _VSTD::move(*__first2);\n            ++__first2;\n        }\n        else\n        {\n            *__result = _VSTD::move(*__first1);\n            ++__first1;\n        }\n    }\n    for (; __first2 != __last2; ++__first2, ++__result)\n        *__result = _VSTD::move(*__first2);\n}\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp,\n              typename iterator_traits<_RandomAccessIterator>::difference_type __len,\n              typename iterator_traits<_RandomAccessIterator>::value_type* __buff, ptrdiff_t __buff_size);\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__stable_sort_move(_RandomAccessIterator __first1, _RandomAccessIterator __last1, _Compare __comp,\n                   typename iterator_traits<_RandomAccessIterator>::difference_type __len,\n                   typename iterator_traits<_RandomAccessIterator>::value_type* __first2)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n    switch (__len)\n    {\n    case 0:\n        return;\n    case 1:\n        ::new(__first2) value_type(_VSTD::move(*__first1));\n        return;\n    case 2:\n       __destruct_n __d(0);\n        unique_ptr<value_type, __destruct_n&> __h2(__first2, __d);\n         if (__comp(*--__last1, *__first1))\n        {\n            ::new(__first2) value_type(_VSTD::move(*__last1));\n            __d.__incr((value_type*)0);\n            ++__first2;\n            ::new(__first2) value_type(_VSTD::move(*__first1));\n        }\n        else\n        {\n            ::new(__first2) value_type(_VSTD::move(*__first1));\n            __d.__incr((value_type*)0);\n            ++__first2;\n            ::new(__first2) value_type(_VSTD::move(*__last1));\n        }\n        __h2.release();\n        return;\n    }\n    if (__len <= 8)\n    {\n        __insertion_sort_move<_Compare>(__first1, __last1, __first2, __comp);\n        return;\n    }\n    typename iterator_traits<_RandomAccessIterator>::difference_type __l2 = __len / 2;\n    _RandomAccessIterator __m = __first1 + __l2;\n    __stable_sort<_Compare>(__first1, __m, __comp, __l2, __first2, __l2);\n    __stable_sort<_Compare>(__m, __last1, __comp, __len - __l2, __first2 + __l2, __len - __l2);\n    __merge_move_construct<_Compare>(__first1, __m, __m, __last1, __first2, __comp);\n}\n\ntemplate <class _Tp>\nstruct __stable_sort_switch\n{\n    static const unsigned value = 128*is_trivially_copy_assignable<_Tp>::value;\n};\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp,\n              typename iterator_traits<_RandomAccessIterator>::difference_type __len,\n              typename iterator_traits<_RandomAccessIterator>::value_type* __buff, ptrdiff_t __buff_size)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    switch (__len)\n    {\n    case 0:\n    case 1:\n        return;\n    case 2:\n        if (__comp(*--__last, *__first))\n            swap(*__first, *__last);\n        return;\n    }\n    if (__len <= static_cast<difference_type>(__stable_sort_switch<value_type>::value))\n    {\n        __insertion_sort<_Compare>(__first, __last, __comp);\n        return;\n    }\n    typename iterator_traits<_RandomAccessIterator>::difference_type __l2 = __len / 2;\n    _RandomAccessIterator __m = __first + __l2;\n    if (__len <= __buff_size)\n    {\n        __destruct_n __d(0);\n        unique_ptr<value_type, __destruct_n&> __h2(__buff, __d);\n        __stable_sort_move<_Compare>(__first, __m, __comp, __l2, __buff);\n        __d.__set(__l2, (value_type*)0);\n        __stable_sort_move<_Compare>(__m, __last, __comp, __len - __l2, __buff + __l2);\n        __d.__set(__len, (value_type*)0);\n        __merge_move_assign<_Compare>(__buff, __buff + __l2, __buff + __l2, __buff + __len, __first, __comp);\n//         __merge<_Compare>(move_iterator<value_type*>(__buff),\n//                           move_iterator<value_type*>(__buff + __l2),\n//                           move_iterator<_RandomAccessIterator>(__buff + __l2),\n//                           move_iterator<_RandomAccessIterator>(__buff + __len),\n//                           __first, __comp);\n        return;\n    }\n    __stable_sort<_Compare>(__first, __m, __comp, __l2, __buff, __buff_size);\n    __stable_sort<_Compare>(__m, __last, __comp, __len - __l2, __buff, __buff_size);\n    __inplace_merge<_Compare>(__first, __m, __last, __comp, __l2, __len - __l2, __buff, __buff_size);\n}\n\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nstable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    difference_type __len = __last - __first;\n    pair<value_type*, ptrdiff_t> __buf(0, 0);\n    unique_ptr<value_type, __return_temporary_buffer> __h;\n    if (__len > static_cast<difference_type>(__stable_sort_switch<value_type>::value))\n    {\n        __buf = _VSTD::get_temporary_buffer<value_type>(__len);\n        __h.reset(__buf.first);\n    }\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    __stable_sort<_Comp_ref>(__first, __last, __c, __len, __buf.first, __buf.second);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    __stable_sort<_Comp_ref>(__first, __last, __comp, __len, __buf.first, __buf.second);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nstable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    _VSTD::stable_sort(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// is_heap_until\n\ntemplate <class _RandomAccessIterator, class _Compare>\n_RandomAccessIterator\nis_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n    typedef typename _VSTD::iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    difference_type __len = __last - __first;\n    difference_type __p = 0;\n    difference_type __c = 1;\n    _RandomAccessIterator __pp = __first;\n    while (__c < __len)\n    {\n        _RandomAccessIterator __cp = __first + __c;\n        if (__comp(*__pp, *__cp))\n            return __cp;\n        ++__c;\n        ++__cp;\n        if (__c == __len)\n            return __last;\n        if (__comp(*__pp, *__cp))\n            return __cp;\n        ++__p;\n        ++__pp;\n        __c = 2 * __p + 1;\n    }\n    return __last;\n}\n\ntemplate<class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_RandomAccessIterator\nis_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    return _VSTD::is_heap_until(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// is_heap\n\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nis_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n    return _VSTD::is_heap_until(__first, __last, __comp) == __last;\n}\n\ntemplate<class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nis_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    return _VSTD::is_heap(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// push_heap\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__sift_up(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp,\n          typename iterator_traits<_RandomAccessIterator>::difference_type __len)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n    if (__len > 1)\n    {\n        __len = (__len - 2) / 2;\n        _RandomAccessIterator __ptr = __first + __len;\n        if (__comp(*__ptr, *--__last))\n        {\n            value_type __t(_VSTD::move(*__last));\n            do\n            {\n                *__last = _VSTD::move(*__ptr);\n                __last = __ptr;\n                if (__len == 0)\n                    break;\n                __len = (__len - 1) / 2;\n                __ptr = __first + __len;\n            } while (__comp(*__ptr, __t));\n            *__last = _VSTD::move(__t);\n        }\n    }\n}\n\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\npush_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    __sift_up<_Comp_ref>(__first, __last, __c, __last - __first);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    __sift_up<_Comp_ref>(__first, __last, __comp, __last - __first);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\npush_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    _VSTD::push_heap(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// pop_heap\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__sift_down(_RandomAccessIterator __first, _RandomAccessIterator /*__last*/,\n            _Compare __comp,\n            typename iterator_traits<_RandomAccessIterator>::difference_type __len,\n            _RandomAccessIterator __start)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;\n    // left-child of __start is at 2 * __start + 1\n    // right-child of __start is at 2 * __start + 2\n    difference_type __child = __start - __first;\n\n    if (__len < 2 || (__len - 2) / 2 < __child)\n        return;\n\n    __child = 2 * __child + 1;\n    _RandomAccessIterator __child_i = __first + __child;\n\n    if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + 1))) {\n        // right-child exists and is greater than left-child\n        ++__child_i;\n        ++__child;\n    }\n\n    // check if we are in heap-order\n    if (__comp(*__child_i, *__start))\n        // we are, __start is larger than it's largest child\n        return;\n\n    value_type __top(_VSTD::move(*__start));\n    do\n    {\n        // we are not in heap-order, swap the parent with it's largest child\n        *__start = _VSTD::move(*__child_i);\n        __start = __child_i;\n\n        if ((__len - 2) / 2 < __child)\n            break;\n\n        // recompute the child based off of the updated parent\n        __child = 2 * __child + 1;\n        __child_i = __first + __child;\n\n        if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + 1))) {\n            // right-child exists and is greater than left-child\n            ++__child_i;\n            ++__child;\n        }\n\n        // check if we are in heap-order\n    } while (!__comp(*__child_i, __top));\n    *__start = _VSTD::move(__top);\n}\n\ntemplate <class _Compare, class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp,\n           typename iterator_traits<_RandomAccessIterator>::difference_type __len)\n{\n    if (__len > 1)\n    {\n        swap(*__first, *--__last);\n        __sift_down<_Compare>(__first, __last, __comp, __len - 1, __first);\n    }\n}\n\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\npop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    __pop_heap<_Comp_ref>(__first, __last, __c, __last - __first);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    __pop_heap<_Comp_ref>(__first, __last, __comp, __last - __first);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\npop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    _VSTD::pop_heap(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// make_heap\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    difference_type __n = __last - __first;\n    if (__n > 1)\n    {\n        // start from the first parent, there is no need to consider children\n        for (difference_type __start = (__n - 2) / 2; __start >= 0; --__start)\n        {\n            __sift_down<_Compare>(__first, __last, __comp, __n, __first + __start);\n        }\n    }\n}\n\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nmake_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    __make_heap<_Comp_ref>(__first, __last, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    __make_heap<_Comp_ref>(__first, __last, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nmake_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    _VSTD::make_heap(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// sort_heap\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    for (difference_type __n = __last - __first; __n > 1; --__last, --__n)\n        __pop_heap<_Compare>(__first, __last, __comp, __n);\n}\n\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nsort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    __sort_heap<_Comp_ref>(__first, __last, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    __sort_heap<_Comp_ref>(__first, __last, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nsort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n{\n    _VSTD::sort_heap(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// partial_sort\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last,\n             _Compare __comp)\n{\n    __make_heap<_Compare>(__first, __middle, __comp);\n    typename iterator_traits<_RandomAccessIterator>::difference_type __len = __middle - __first;\n    for (_RandomAccessIterator __i = __middle; __i != __last; ++__i)\n    {\n        if (__comp(*__i, *__first))\n        {\n            swap(*__i, *__first);\n            __sift_down<_Compare>(__first, __middle, __comp, __len, __first);\n        }\n    }\n    __sort_heap<_Compare>(__first, __middle, __comp);\n}\n\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\npartial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last,\n             _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    __partial_sort<_Comp_ref>(__first, __middle, __last, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    __partial_sort<_Comp_ref>(__first, __middle, __last, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\npartial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)\n{\n    _VSTD::partial_sort(__first, __middle, __last,\n                       __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// partial_sort_copy\n\ntemplate <class _Compare, class _InputIterator, class _RandomAccessIterator>\n_RandomAccessIterator\n__partial_sort_copy(_InputIterator __first, _InputIterator __last,\n                    _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)\n{\n    _RandomAccessIterator __r = __result_first;\n    if (__r != __result_last)\n    {\n        for (; __first != __last && __r != __result_last; (void) ++__first, ++__r)\n            *__r = *__first;\n        __make_heap<_Compare>(__result_first, __r, __comp);\n        typename iterator_traits<_RandomAccessIterator>::difference_type __len = __r - __result_first;\n        for (; __first != __last; ++__first)\n            if (__comp(*__first, *__result_first))\n            {\n                *__result_first = *__first;\n                __sift_down<_Compare>(__result_first, __r, __comp, __len, __result_first);\n            }\n        __sort_heap<_Compare>(__result_first, __r, __comp);\n    }\n    return __r;\n}\n\ntemplate <class _InputIterator, class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\n_RandomAccessIterator\npartial_sort_copy(_InputIterator __first, _InputIterator __last,\n                  _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __partial_sort_copy<_Comp_ref>(__first, __last, __result_first, __result_last, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __partial_sort_copy<_Comp_ref>(__first, __last, __result_first, __result_last, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _InputIterator, class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_RandomAccessIterator\npartial_sort_copy(_InputIterator __first, _InputIterator __last,\n                  _RandomAccessIterator __result_first, _RandomAccessIterator __result_last)\n{\n    return _VSTD::partial_sort_copy(__first, __last, __result_first, __result_last,\n                                   __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// nth_element\n\ntemplate <class _Compare, class _RandomAccessIterator>\nvoid\n__nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)\n{\n    // _Compare is known to be a reference type\n    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;\n    const difference_type __limit = 7;\n    while (true)\n    {\n    __restart:\n        if (__nth == __last)\n            return;\n        difference_type __len = __last - __first;\n        switch (__len)\n        {\n        case 0:\n        case 1:\n            return;\n        case 2:\n            if (__comp(*--__last, *__first))\n                swap(*__first, *__last);\n            return;\n        case 3:\n            {\n            _RandomAccessIterator __m = __first;\n            _VSTD::__sort3<_Compare>(__first, ++__m, --__last, __comp);\n            return;\n            }\n        }\n        if (__len <= __limit)\n        {\n            __selection_sort<_Compare>(__first, __last, __comp);\n            return;\n        }\n        // __len > __limit >= 3\n        _RandomAccessIterator __m = __first + __len/2;\n        _RandomAccessIterator __lm1 = __last;\n        unsigned __n_swaps = _VSTD::__sort3<_Compare>(__first, __m, --__lm1, __comp);\n        // *__m is median\n        // partition [__first, __m) < *__m and *__m <= [__m, __last)\n        // (this inhibits tossing elements equivalent to __m around unnecessarily)\n        _RandomAccessIterator __i = __first;\n        _RandomAccessIterator __j = __lm1;\n        // j points beyond range to be tested, *__lm1 is known to be <= *__m\n        // The search going up is known to be guarded but the search coming down isn't.\n        // Prime the downward search with a guard.\n        if (!__comp(*__i, *__m))  // if *__first == *__m\n        {\n            // *__first == *__m, *__first doesn't go in first part\n            // manually guard downward moving __j against __i\n            while (true)\n            {\n                if (__i == --__j)\n                {\n                    // *__first == *__m, *__m <= all other elements\n                    // Parition instead into [__first, __i) == *__first and *__first < [__i, __last)\n                    ++__i;  // __first + 1\n                    __j = __last;\n                    if (!__comp(*__first, *--__j))  // we need a guard if *__first == *(__last-1)\n                    {\n                        while (true)\n                        {\n                            if (__i == __j)\n                                return;  // [__first, __last) all equivalent elements\n                            if (__comp(*__first, *__i))\n                            {\n                                swap(*__i, *__j);\n                                ++__n_swaps;\n                                ++__i;\n                                break;\n                            }\n                            ++__i;\n                        }\n                    }\n                    // [__first, __i) == *__first and *__first < [__j, __last) and __j == __last - 1\n                    if (__i == __j)\n                        return;\n                    while (true)\n                    {\n                        while (!__comp(*__first, *__i))\n                            ++__i;\n                        while (__comp(*__first, *--__j))\n                            ;\n                        if (__i >= __j)\n                            break;\n                        swap(*__i, *__j);\n                        ++__n_swaps;\n                        ++__i;\n                    }\n                    // [__first, __i) == *__first and *__first < [__i, __last)\n                    // The first part is sorted,\n                    if (__nth < __i)\n                        return;\n                    // __nth_element the secod part\n                    // __nth_element<_Compare>(__i, __nth, __last, __comp);\n                    __first = __i;\n                    goto __restart;\n                }\n                if (__comp(*__j, *__m))\n                {\n                    swap(*__i, *__j);\n                    ++__n_swaps;\n                    break;  // found guard for downward moving __j, now use unguarded partition\n                }\n            }\n        }\n        ++__i;\n        // j points beyond range to be tested, *__lm1 is known to be <= *__m\n        // if not yet partitioned...\n        if (__i < __j)\n        {\n            // known that *(__i - 1) < *__m\n            while (true)\n            {\n                // __m still guards upward moving __i\n                while (__comp(*__i, *__m))\n                    ++__i;\n                // It is now known that a guard exists for downward moving __j\n                while (!__comp(*--__j, *__m))\n                    ;\n                if (__i >= __j)\n                    break;\n                swap(*__i, *__j);\n                ++__n_swaps;\n                // It is known that __m != __j\n                // If __m just moved, follow it\n                if (__m == __i)\n                    __m = __j;\n                ++__i;\n            }\n        }\n        // [__first, __i) < *__m and *__m <= [__i, __last)\n        if (__i != __m && __comp(*__m, *__i))\n        {\n            swap(*__i, *__m);\n            ++__n_swaps;\n        }\n        // [__first, __i) < *__i and *__i <= [__i+1, __last)\n        if (__nth == __i)\n            return;\n        if (__n_swaps == 0)\n        {\n            // We were given a perfectly partitioned sequence.  Coincidence?\n            if (__nth < __i)\n            {\n                // Check for [__first, __i) already sorted\n                __j = __m = __first;\n                while (++__j != __i)\n                {\n                    if (__comp(*__j, *__m))\n                        // not yet sorted, so sort\n                        goto not_sorted;\n                    __m = __j;\n                }\n                // [__first, __i) sorted\n                return;\n            }\n            else\n            {\n                // Check for [__i, __last) already sorted\n                __j = __m = __i;\n                while (++__j != __last)\n                {\n                    if (__comp(*__j, *__m))\n                        // not yet sorted, so sort\n                        goto not_sorted;\n                    __m = __j;\n                }\n                // [__i, __last) sorted\n                return;\n            }\n        }\nnot_sorted:\n        // __nth_element on range containing __nth\n        if (__nth < __i)\n        {\n            // __nth_element<_Compare>(__first, __nth, __i, __comp);\n            __last = __i;\n        }\n        else\n        {\n            // __nth_element<_Compare>(__i+1, __nth, __last, __comp);\n            __first = ++__i;\n        }\n    }\n}\n\ntemplate <class _RandomAccessIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nnth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    __nth_element<_Comp_ref>(__first, __nth, __last, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    __nth_element<_Comp_ref>(__first, __nth, __last, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _RandomAccessIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nnth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)\n{\n    _VSTD::nth_element(__first, __nth, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());\n}\n\n// includes\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2>\nbool\n__includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2,\n           _Compare __comp)\n{\n    for (; __first2 != __last2; ++__first1)\n    {\n        if (__first1 == __last1 || __comp(*__first2, *__first1))\n            return false;\n        if (!__comp(*__first1, *__first2))\n            ++__first2;\n    }\n    return true;\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nincludes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2,\n         _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __includes<_Comp_ref>(__first1, __last1, __first2, __last2, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __includes<_Comp_ref>(__first1, __last1, __first2, __last2, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _InputIterator1, class _InputIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nincludes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)\n{\n    return _VSTD::includes(__first1, __last1, __first2, __last2,\n                          __less<typename iterator_traits<_InputIterator1>::value_type,\n                                 typename iterator_traits<_InputIterator2>::value_type>());\n}\n\n// set_union\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>\n_OutputIterator\n__set_union(_InputIterator1 __first1, _InputIterator1 __last1,\n            _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n    for (; __first1 != __last1; ++__result)\n    {\n        if (__first2 == __last2)\n            return _VSTD::copy(__first1, __last1, __result);\n        if (__comp(*__first2, *__first1))\n        {\n            *__result = *__first2;\n            ++__first2;\n        }\n        else\n        {\n            *__result = *__first1;\n            if (!__comp(*__first1, *__first2))\n                ++__first2;\n            ++__first1;\n        }\n    }\n    return _VSTD::copy(__first2, __last2, __result);\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nset_union(_InputIterator1 __first1, _InputIterator1 __last1,\n          _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __set_union<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __set_union<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nset_union(_InputIterator1 __first1, _InputIterator1 __last1,\n          _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\n{\n    return _VSTD::set_union(__first1, __last1, __first2, __last2, __result,\n                          __less<typename iterator_traits<_InputIterator1>::value_type,\n                                 typename iterator_traits<_InputIterator2>::value_type>());\n}\n\n// set_intersection\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>\n_OutputIterator\n__set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,\n                   _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n    while (__first1 != __last1 && __first2 != __last2)\n    {\n        if (__comp(*__first1, *__first2))\n            ++__first1;\n        else\n        {\n            if (!__comp(*__first2, *__first1))\n            {\n                *__result = *__first1;\n                ++__result;\n                ++__first1;\n            }\n            ++__first2;\n        }\n    }\n    return __result;\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nset_intersection(_InputIterator1 __first1, _InputIterator1 __last1,\n                 _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __set_intersection<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __set_intersection<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nset_intersection(_InputIterator1 __first1, _InputIterator1 __last1,\n                 _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\n{\n    return _VSTD::set_intersection(__first1, __last1, __first2, __last2, __result,\n                                  __less<typename iterator_traits<_InputIterator1>::value_type,\n                                         typename iterator_traits<_InputIterator2>::value_type>());\n}\n\n// set_difference\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>\n_OutputIterator\n__set_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n                 _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n    while (__first1 != __last1)\n    {\n        if (__first2 == __last2)\n            return _VSTD::copy(__first1, __last1, __result);\n        if (__comp(*__first1, *__first2))\n        {\n            *__result = *__first1;\n            ++__result;\n            ++__first1;\n        }\n        else\n        {\n            if (!__comp(*__first2, *__first1))\n                ++__first1;\n            ++__first2;\n        }\n    }\n    return __result;\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nset_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n               _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __set_difference<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __set_difference<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nset_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n               _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\n{\n    return _VSTD::set_difference(__first1, __last1, __first2, __last2, __result,\n                                __less<typename iterator_traits<_InputIterator1>::value_type,\n                                       typename iterator_traits<_InputIterator2>::value_type>());\n}\n\n// set_symmetric_difference\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>\n_OutputIterator\n__set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n                           _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n    while (__first1 != __last1)\n    {\n        if (__first2 == __last2)\n            return _VSTD::copy(__first1, __last1, __result);\n        if (__comp(*__first1, *__first2))\n        {\n            *__result = *__first1;\n            ++__result;\n            ++__first1;\n        }\n        else\n        {\n            if (__comp(*__first2, *__first1))\n            {\n                *__result = *__first2;\n                ++__result;\n            }\n            else\n                ++__first1;\n            ++__first2;\n        }\n    }\n    return _VSTD::copy(__first2, __last2, __result);\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nset_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n                         _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __set_symmetric_difference<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __set_symmetric_difference<_Comp_ref>(__first1, __last1, __first2, __last2, __result, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _OutputIterator>\ninline _LIBCPP_INLINE_VISIBILITY\n_OutputIterator\nset_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n                         _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)\n{\n    return _VSTD::set_symmetric_difference(__first1, __last1, __first2, __last2, __result,\n                                          __less<typename iterator_traits<_InputIterator1>::value_type,\n                                                 typename iterator_traits<_InputIterator2>::value_type>());\n}\n\n// lexicographical_compare\n\ntemplate <class _Compare, class _InputIterator1, class _InputIterator2>\nbool\n__lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,\n                          _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\n{\n    for (; __first2 != __last2; ++__first1, (void) ++__first2)\n    {\n        if (__first1 == __last1 || __comp(*__first1, *__first2))\n            return true;\n        if (__comp(*__first2, *__first1))\n            return false;\n    }\n    return false;\n}\n\ntemplate <class _InputIterator1, class _InputIterator2, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nlexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,\n                        _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __lexicographical_compare<_Comp_ref>(__first1, __last1, __first2, __last2, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __lexicographical_compare<_Comp_ref>(__first1, __last1, __first2, __last2, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _InputIterator1, class _InputIterator2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nlexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,\n                        _InputIterator2 __first2, _InputIterator2 __last2)\n{\n    return _VSTD::lexicographical_compare(__first1, __last1, __first2, __last2,\n                                         __less<typename iterator_traits<_InputIterator1>::value_type,\n                                                typename iterator_traits<_InputIterator2>::value_type>());\n}\n\n// next_permutation\n\ntemplate <class _Compare, class _BidirectionalIterator>\nbool\n__next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)\n{\n    _BidirectionalIterator __i = __last;\n    if (__first == __last || __first == --__i)\n        return false;\n    while (true)\n    {\n        _BidirectionalIterator __ip1 = __i;\n        if (__comp(*--__i, *__ip1))\n        {\n            _BidirectionalIterator __j = __last;\n            while (!__comp(*__i, *--__j))\n                ;\n            swap(*__i, *__j);\n            _VSTD::reverse(__ip1, __last);\n            return true;\n        }\n        if (__i == __first)\n        {\n            _VSTD::reverse(__first, __last);\n            return false;\n        }\n    }\n}\n\ntemplate <class _BidirectionalIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nnext_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __next_permutation<_Comp_ref>(__first, __last, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __next_permutation<_Comp_ref>(__first, __last, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _BidirectionalIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nnext_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)\n{\n    return _VSTD::next_permutation(__first, __last,\n                                  __less<typename iterator_traits<_BidirectionalIterator>::value_type>());\n}\n\n// prev_permutation\n\ntemplate <class _Compare, class _BidirectionalIterator>\nbool\n__prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)\n{\n    _BidirectionalIterator __i = __last;\n    if (__first == __last || __first == --__i)\n        return false;\n    while (true)\n    {\n        _BidirectionalIterator __ip1 = __i;\n        if (__comp(*__ip1, *--__i))\n        {\n            _BidirectionalIterator __j = __last;\n            while (!__comp(*--__j, *__i))\n                ;\n            swap(*__i, *__j);\n            _VSTD::reverse(__ip1, __last);\n            return true;\n        }\n        if (__i == __first)\n        {\n            _VSTD::reverse(__first, __last);\n            return false;\n        }\n    }\n}\n\ntemplate <class _BidirectionalIterator, class _Compare>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nprev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)\n{\n#ifdef _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<__debug_less<_Compare> >::type _Comp_ref;\n    __debug_less<_Compare> __c(__comp);\n    return __prev_permutation<_Comp_ref>(__first, __last, __c);\n#else  // _LIBCPP_DEBUG\n    typedef typename add_lvalue_reference<_Compare>::type _Comp_ref;\n    return __prev_permutation<_Comp_ref>(__first, __last, __comp);\n#endif  // _LIBCPP_DEBUG\n}\n\ntemplate <class _BidirectionalIterator>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\nprev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)\n{\n    return _VSTD::prev_permutation(__first, __last,\n                                  __less<typename iterator_traits<_BidirectionalIterator>::value_type>());\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_ALGORITHM\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2017\n *\n *  @file  DynamicString.h\n *  @brief A string handler where sections update dynamically based on functions.\n *  @note Status: BETA\n */\n\n\n#ifndef EMP_DYNAMIC_STRING_H\n#define EMP_DYNAMIC_STRING_H\n\n#include <functional>\n#include <string>\n\n#include \"../base/vector.h\"\n\nnamespace emp {\n\n  /// A string handler where some sections can be fixed strings, while others update\n  /// dynamically based on functions.\n  class DynamicString {\n  public:\n    using value_t = std::function<std::string()>;\n  private:\n    emp::vector<value_t> fun_set;  // Functions to update strings.\n\n  public:\n    DynamicString() { ; }\n    DynamicString(const DynamicString &) = default;\n\n    /// How many string components (funcations or continuous substrings) are in this DynamicString?\n    size_t GetSize() const { return fun_set.size(); }\n\n    /// Index in to a specific component (not a specific character, since size is variable)\n    /// and return it's associated string.\n    std::string operator[](size_t id) const { return fun_set[id](); }\n\n    /// Index in to a specific component (not a specific character, since size is variable)\n    /// and return it's associated function.\n    const value_t & GetFunction(size_t id) const { return fun_set[id]; }\n\n    /// Remove all contents on this DynamicString\n    DynamicString & Clear() { fun_set.resize(0); return *this; }\n\n    /// Convert to an std::string.\n    std::string str() {\n      std::stringstream ss;\n      for (auto & cur_fun : fun_set) ss << cur_fun();\n      return ss.str();\n    }\n\n    /// Set the value of a specified component to the provided function.\n    DynamicString & Set(size_t id, const value_t & in_fun) {\n      fun_set[id] = in_fun;\n      return *this;\n    }\n\n    /// Set the value of a specified component to the provided std::string text.\n    DynamicString & Set(size_t id, const std::string & in_text) {\n      return Set( id, [in_text](){ return in_text; } );\n    }\n\n    /// Add a new function to the end of the DynamicString.\n    DynamicString & Append(const value_t & in_fun) {\n      fun_set.push_back(in_fun);\n      return *this;\n    }\n\n    /// Add new std::string text to the end of the DynamicString.\n    // (automatically create a function that just returns that string.)\n    DynamicString & Append(const std::string & in_text) {\n      return Append( [in_text](){ return in_text; } );\n    }\n\n    /// Allow operator<< to append to the back of a DynamicString.\n    template <typename IN_TYPE>\n    DynamicString & operator<<(IN_TYPE && _in) { return Append(_in); }\n\n  };\n\n}\n\nnamespace std {\n  /// Make sure that DynamicString works with with std::ostream.\n  std::ostream & operator<<( std::ostream & os, const emp::DynamicString & strings )\n  {\n    for (size_t i = 0; i < strings.GetSize(); ++i) {\n      os << strings[i];\n    }\n    return os;\n  }\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  Attributes.h\n *  @brief An Attributes class for tracking non-style features about HTML objects\n */\n\n#ifndef EMP_WEB_ATTRIBUTES_H\n#define EMP_WEB_ATTRIBUTES_H\n\n\n#ifdef EMSCRIPTEN\n#include <emscripten.h>\n#endif\n\n#include \"../tools/string_utils.h\"\n\n#include <map>\n#include <string>\n\nnamespace emp {\nnamespace web {\n\n  ///  @brief Maintains a map of attribute names to values for use in JavaScript\n  ///  Closely related to Style.h, which is for CSS-values.\n\n  class Attributes {\n  private:\n    std::map<std::string, std::string> settings;\n\n  public:\n    Attributes() { ; }\n    Attributes(const Attributes &) = default;\n    Attributes & operator=(const Attributes &) = default;\n\n    /// Return a count of the number of attributes that have been set.\n    int GetSize() const { return (int) settings.size(); }\n\n    Attributes & DoSet(const std::string & in_set, const std::string & in_val) {\n      settings[in_set] = in_val;\n      return *this;\n    }\n\n    /// Record that attribute \"a\" is set to value \"v\" (converted to string) and return this object.\n    template <typename SET_TYPE>\n    Attributes & Set(const std::string & s, SET_TYPE v) {\n      return DoSet(s, emp::to_string(v));\n    }\n\n    /// Set all values from in_attr here as well.  Return this object.\n    Attributes & Insert(const Attributes & in_attr) {\n      settings.insert(in_attr.settings.begin(), in_attr.settings.end());\n      return *this;\n    }\n\n    /// Return true/false based on whether \"setting\" has been given a value in this Attributes obj.\n    bool Has(const std::string & setting) const {\n      return settings.find(setting) != settings.end();\n    }\n\n    /// Return the (string) value of \"setting\" that has been recorded in this Attributes obj.\n    const std::string & Get(const std::string & setting) const {\n      // Note: if setting did not exist, this does return (but not create) an empty entry.\n      auto it = settings.find(setting);\n      return (it == settings.end()) ? emp::empty_string() : it->second;\n    }\n\n    const std::map<std::string, std::string> & GetMap() const {\n      return settings;\n    }\n\n    void Remove(const std::string & setting) {\n      settings.erase(setting);\n    }\n\n    /// Remove all setting values.\n    void Clear() { settings.clear(); }\n\n    /// Apply ALL of the Attribute's settings to dom element \"widget_id\".\n    void Apply(const std::string & widget_id) {\n      // Stop immediately if nothing to set.\n      if (settings.size() == 0) return;\n\n      // Find the current object only once.\n#ifdef EMSCRIPTEN\n      EM_ASM_ARGS({\n          var id = Pointer_stringify($0);\n          emp_i.cur_obj = $( '#' + id );\n        }, widget_id.c_str());\n#endif\n\n      for (auto attr_pair : settings) {\n        if (attr_pair.second == \"\") continue; // Ignore empty entries.\n#ifdef EMSCRIPTEN\n        EM_ASM_ARGS({\n            var name = Pointer_stringify($0);\n            var value = Pointer_stringify($1);\n            emp_i.cur_obj.attr( name, value);\n          }, attr_pair.first.c_str(), attr_pair.second.c_str());\n#else\n        std::cout << \"Setting '\" << widget_id << \"' attribute '\" << attr_pair.first\n                  << \"' to '\" << attr_pair.second << \"'.\";\n#endif\n      }\n    }\n\n    /// Apply onlay a SPECIFIC attributes setting from the setting library to widget_id.\n    void Apply(const std::string & widget_id, const std::string & setting) {\n      emp_assert(Has(setting));\n\n#ifdef EMSCRIPTEN\n      EM_ASM_ARGS({\n          var id = Pointer_stringify($0);\n          var setting = Pointer_stringify($1);\n          var value = Pointer_stringify($2);\n          $( '#' + id ).attr( setting, value);\n        }, widget_id.c_str(), setting.c_str(), settings[setting].c_str());\n#else\n      std::cout << \"Setting '\" << widget_id << \"' attribute '\" << setting\n                << \"' to '\" << settings[setting] << \"'.\";\n#endif\n    }\n\n    /// Apply onlay a SPECIFIC attributes setting with a specifid value!\n    static void Apply(const std::string & widget_id, const std::string & setting,\n                      const std::string & value) {\n#ifdef EMSCRIPTEN\n      EM_ASM_ARGS({\n          var id = Pointer_stringify($0);\n          var setting = Pointer_stringify($1);\n          var value = Pointer_stringify($2);\n          $( '#' + id ).attr( setting, value);\n        }, widget_id.c_str(), setting.c_str(), value.c_str());\n#else\n      std::cout << \"Setting '\" << widget_id << \"' attribute '\" << setting\n                << \"' to '\" << value << \"'.\";\n#endif\n    }\n\n    /// Convert to true if there are any setting, false otherwise.\n    operator bool() const { return (bool) settings.size(); }\n  };\n\n\n}\n}\n\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  Listeners.h\n *  @brief A class for tracking font event listeners for Widgets\n */\n\n\n#ifndef EMP_WEB_LISTENERS_H\n#define EMP_WEB_LISTENERS_H\n\n\n#ifdef EMSCRIPTEN\n#include <emscripten.h>\n#endif\n\n#include \"../tools/string_utils.h\"\n\n#include <map>\n#include <string>\n\nnamespace emp {\nnamespace web {\n\n  /// Track a set of JavaScript Listeners with their callback IDs.\n  class Listeners {\n  private:\n    std::map<std::string, size_t> listeners;  ///< Map triggers to callback IDs\n\n  public:\n    Listeners() { ; }\n    Listeners(const Listeners &) = default;\n    Listeners & operator=(const Listeners &) = default;\n\n    /// How many listeners are we tracking?\n    size_t GetSize() const { return listeners.size(); }\n\n    /// Use a pre-calculated function ID with a new listener.\n    Listeners & Set(const std::string & name, size_t fun_id) {\n      emp_assert(!Has(name));\n      listeners[name] = fun_id;\n      return *this;\n    }\n\n    /// Calculate its own function ID with JSWrap.\n    template <typename... Ts>\n    Listeners & Set(const std::string & name, const std::function<void(Ts... args)> & in_fun) {\n      emp_assert(!Has(name));\n      listeners[name] = JSWrap(in_fun);\n      return *this;\n    }\n\n    /// Determine if a specified listener exists.\n    bool Has(const std::string & event_name) const {\n      return listeners.find(event_name) != listeners.end();\n    }\n\n    /// Get the ID associated with a specific listener.\n    size_t GetID(const std::string & event_name) {\n      emp_assert(Has(event_name));\n      return listeners[event_name];\n    }\n\n    const std::map<std::string, size_t> & GetMap() const {\n      return listeners;\n    }\n\n    /// Remove all listeners\n    void Clear() {\n      // @CAO: Delete functions to be called.\n      listeners.clear();\n    }\n\n    /// Remove a specific listener.\n    void Remove(const std::string & event_name) {\n      // @CAO: Delete function to be called.\n      listeners.erase(event_name);\n    }\n\n    /// Apply all of the listeners being tracked.\n    void Apply(const std::string & widget_id) {\n      // Find the current object only once.\n#ifdef EMSCRIPTEN\n      EM_ASM_ARGS({\n          var id = Pointer_stringify($0);\n          emp_i.cur_obj = $( '#' + id );\n        }, widget_id.c_str());\n#endif\n\n      for (auto event_pair : listeners) {\n#ifdef EMSCRIPTEN\n        EM_ASM_ARGS({\n          var name = Pointer_stringify($0);\n          emp_i.cur_obj.on( name, function(evt) { emp.Callback($1, evt); } );\n        }, event_pair.first.c_str(), event_pair.second);\n#else\n        std::cout << \"Setting '\" << widget_id << \"' listener '\" << event_pair.first\n                  << \"' to '\" << event_pair.second << \"'.\";\n#endif\n      }\n    }\n\n\n    /// Apply a SPECIFIC listener.\n    static void Apply(const std::string & widget_id,\n                      const std::string event_name,\n                      size_t fun_id) {\n#ifdef EMSCRIPTEN\n        EM_ASM_ARGS({\n          var id = Pointer_stringify($0);\n          var name = Pointer_stringify($1);\n          $( '#' + id ).on( name, function(evt) { emp.Callback($2, evt); } );\n        }, widget_id.c_str(), event_name.c_str(), fun_id);\n#else\n        std::cout << \"Setting '\" << widget_id << \"' listener '\" << event_name\n                  << \"' to function id '\" << fun_id << \"'.\";\n#endif\n    }\n\n    /// true/false : do any listeners exist?\n    operator bool() const { return (bool) listeners.size(); }\n  };\n\n\n}\n}\n\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  CanvasShape.h\n *  @brief Define simple shapes to draw on a canvas.\n *\n *  Canvas shapes can be definied in detail, describing how they modify a canvas.\n *\n *  Other, more specific actions defined here are:\n *    CanvasCircle\n *    CanvasRect\n */\n\n\n#ifndef EMP_WEB_CANVAS_SHAPE_H\n#define EMP_WEB_CANVAS_SHAPE_H\n\n#include <string>\n\n#include \"../base/vector.h\"\n#include \"../geometry/Circle2D.h\"\n\n#include \"CanvasAction.h\"\n\nnamespace emp {\nnamespace web {\n\n  /// Define an arbitrary shape to draw on a canvas (base clase)\n  class CanvasShape : public CanvasAction {\n  protected:\n    Point p;                 ///< Anchor point for this shape.\n    std::string fill_color;  ///< Internal color to fill shape with.\n    std::string line_color;  ///< Border color for shape.\n    double line_width;       ///< How wide should lines be?\n\n  public:\n    CanvasShape(double _x, double _y, const std::string & fc=\"\", const std::string & lc=\"\", double lw=1.0)\n      : p(_x,_y), fill_color(fc), line_color(lc), line_width(lw) { ; }\n    CanvasShape(Point _p, const std::string & fc=\"\", const std::string & lc=\"\", double lw=1.0)\n      : p(_p), fill_color(fc), line_color(lc), line_width(lw) { ; }\n    virtual ~CanvasShape() { ; }\n\n    /// Shift the position of this shape to a point.\n    void MoveTo(Point _p) { p  = _p; }\n\n    /// Shift the position of this shape to coordinates.\n    void MoveTo(double _x, double _y) { p.Set(_x,_y); }\n\n    /// Setup details needed before drawing lines.\n    void SetLineWidth(double lw = 1.0) { line_width = lw; }\n\n    /// Change the fill color of this shape.\n    void SetFillColor(const std::string & color) { fill_color = color; }\n\n    /// Change the stroke color of this shape.\n    void SetLineColor(const std::string & color) { line_color = color; }\n\n    /// Actually change the color on screen.\n    void ApplyColor() {\n      LineWidth(line_width);\n      Fill(fill_color);\n      Stroke(line_color);\n    }\n  };\n\n  /// Track a circle shape to be drawn on a canvas.\n  class CanvasCircle : public CanvasShape {\n    double radius;  ///< Circle radius\n  public:\n    CanvasCircle(double _x, double _y, double _r,\n                 const std::string & fc=\"\", const std::string & lc=\"\", double lw=1.0)\n      : CanvasShape(_x, _y, fc, lc, lw), radius(_r) { ; }\n\n    CanvasCircle(Point _p, double _r, const std::string & fc=\"\", const std::string & lc=\"\", double lw=1.0)\n      : CanvasShape(_p, fc, lc, lw), radius(_r) { ; }\n\n    CanvasCircle(emp::Circle circle, const std::string & fc=\"\", const std::string & lc=\"\", double lw=1.0)\n      : CanvasShape(circle.GetCenterX(), circle.GetCenterY(), fc, lc, lw)\n      , radius(circle.GetRadius()) { ; }\n\n    void Apply() {\n      EM_ASM_ARGS({\n          emp_i.ctx.beginPath();\n          emp_i.ctx.arc($0, $1, $2, 0, Math.PI*2);\n        }, p.GetX(), p.GetY(), radius);  // Draw the circle\n        ApplyColor();\n    }\n    CanvasAction * Clone() const { return new CanvasCircle(*this); }\n  };\n\n  /// Track a rectangle shape to be drawn on a canvas.\n  class CanvasRect : public CanvasShape {\n    double w;  ///< Rectangle widgth.\n    double h;  ///< Rectangle height.\n  public:\n    CanvasRect(Point _p, double _w, double _h,\n               const std::string & fc=\"\", const std::string & lc=\"\")\n      : CanvasShape(_p, fc, lc), w(_w), h(_h) { ; }\n\n    CanvasRect(double _x, double _y, double _w, double _h,\n               const std::string & fc=\"\", const std::string & lc=\"\")\n      : CanvasShape(_x, _y, fc, lc), w(_w), h(_h) { ; }\n\n    void Apply() {\n      EM_ASM_ARGS({\n          emp_i.ctx.beginPath();\n          emp_i.ctx.rect($0, $1, $2, $3);\n        }, p.GetX(), p.GetY(), w, h);  // Draw the rectangle\n      ApplyColor();\n    }\n    CanvasAction * Clone() const { return new CanvasRect(*this); }\n  };\n\n  /// Clear a rectangular area in a canvas.\n  class CanvasClearRect : public CanvasShape {\n    double w;  ///< Rectangle widgth.\n    double h;  ///< Rectangle height.\n  public:\n    CanvasClearRect(Point _p, double _w, double _h)\n      : CanvasShape(_p), w(_w), h(_h) { ; }\n\n    void Apply() {\n      EM_ASM_ARGS({\n          emp_i.ctx.clearRect($0, $1, $2, $3);\n        }, p.GetX(), p.GetY(), w, h);  // Draw the rectangle\n    }\n    CanvasAction * Clone() const { return new CanvasClearRect(*this); }\n  };\n\n  /// An arbitrary-sized polygon to be drawn on a canvas.\n  class CanvasPolygon : public CanvasShape {\n  private:\n    emp::vector<Point> points;  ///< Series of points defining the perimiter of the Polygon.\n  public:\n    CanvasPolygon(const std::string & fc=\"\", const std::string & lc=\"\")\n      : CanvasShape(0, 0, fc, lc) { ; }\n    CanvasPolygon(const emp::vector<Point> & p, const std::string & fc=\"\", const std::string & lc=\"\")\n      : CanvasShape(0, 0, fc, lc), points(p) { ; }\n    CanvasPolygon(Point _p, const std::string & fc=\"\", const std::string & lc=\"\")\n      : CanvasShape(_p, fc, lc) { ; }\n    CanvasPolygon(double _x, double _y, const std::string & fc=\"\", const std::string & lc=\"\")\n      : CanvasShape(_x, _y, fc, lc) { ; }\n\n    CanvasPolygon & AddPoint(double x, double y) { points.emplace_back(x,y); return *this; }\n    CanvasPolygon & AddPoint(Point p) { points.emplace_back(p); return *this; }\n\n    void Apply() {\n      EM_ASM_ARGS({\n        emp_i.ctx.translate($0,$1);\n        emp_i.ctx.beginPath();\n        emp_i.ctx.moveTo($2, $3);\n      }, p.GetX(), p.GetY(), points[0].GetX(), points[0].GetY());  // Setup the polygon\n      for (size_t i = 1; i < points.size(); i++) {\n        EM_ASM_ARGS({\n          emp_i.ctx.lineTo($0, $1);\n        }, points[i].GetX(), points[i].GetY());  // Draw the lines for the polygon\n      }\n      EM_ASM_ARGS({\n        emp_i.ctx.closePath();\n        emp_i.ctx.translate($0,$1);\n      }, -p.GetX(), -p.GetY());  // Close the polygon\n      ApplyColor();\n    }\n    CanvasAction * Clone() const { return new CanvasPolygon(*this); }\n  };\n\n  /// A line segment on the canvas.\n  class CanvasLine : public CanvasShape {\n  private:\n    double x2;  /// X-position for second point of line segment.\n    double y2;  /// Y-position for second point of line segment.\n  public:\n    CanvasLine(double _x1, double _y1, double _x2, double _y2,\n               const std::string & lc=\"\", double lw=1.0)\n      : CanvasShape(_x1, _y1, \"\", lc, lw), x2(_x2), y2(_y2) { ; }\n    CanvasLine(Point p1, Point p2, const std::string & lc=\"\", double lw=1.0)\n      : CanvasLine(p1.GetX(), p1.GetY(), p2.GetX(), p2.GetY(), lc, lw) { ; }\n\n    void Apply() {\n      EM_ASM_ARGS({\n        emp_i.ctx.beginPath();\n        emp_i.ctx.moveTo($0, $1);\n        emp_i.ctx.lineTo($2, $3);\n//        emp_i.ctx.closePath();\n      }, p.GetX(), p.GetY(), x2, y2);\n      // ApplyColor();\n      LineWidth(line_width);\n      Stroke(line_color);\n    }\n    CanvasAction * Clone() const { return new CanvasLine(*this); }\n  };\n\n  /// A whole series of line segments on the canvas.\n  /// Currently not working...\n  class CanvasMultiLine : public CanvasShape {\n  private:\n    emp::vector<Point> points;\n\n  public:\n    CanvasMultiLine(double _x1, double _y1, const emp::vector<Point> & _points,\n                    const std::string & lc=\"\", double lw=1.0)\n      : CanvasShape(_x1, _y1, \"\", lc, lw), points(_points) { ; }\n    CanvasMultiLine(Point p1, const emp::vector<Point> & _points,\n                    const std::string & lc=\"\", double lw=1.0)\n      : CanvasMultiLine(p1.GetX(), p1.GetY(), _points, lc, lw) { ; }\n\n    void Apply() {\n      // Startup the line path.\n      EM_ASM_ARGS({\n        emp_i.ctx.beginPath();\n        emp_i.ctx.moveTo($0, $1);\n      }, p.GetX(), p.GetY());\n      // Loop through all internal points...\n      for (auto p : points) {\n        EM_ASM_ARGS({ emp_i.ctx.lineTo($0, $1); }, p.GetX(), p.GetY());\n      }\n\n      LineWidth(line_width);\n      Stroke(line_color);\n    }\n    CanvasAction * Clone() const { return new CanvasMultiLine(*this); }\n  };\n\n  /// Text to be written on a canvas.\n  class CanvasText : public CanvasShape {\n  protected:\n    std::string text;  ///< Specific text to be written.\n    bool center;       ///< Should this text be centered (or is anchor on left side)?\n  public:\n    CanvasText(Point p, const std::string & _text,\n               const std::string & fc=\"\", const std::string & lc=\"\")\n      : CanvasShape(p, fc, lc), text(_text), center(false) { ; }\n\n    void Apply() {\n      if (center) {\n        EM_ASM({ emp_i.ctx.textAlign = \"center\"; });\n        EM_ASM({ emp_i.ctx.textBaseline = \"middle\"; });\n      }\n      EM_ASM_ARGS({\n        emp_i.ctx.fillStyle = Pointer_stringify($3);\n        var text = Pointer_stringify($2);\n        emp_i.ctx.fillText(text,$0,$1);\n      }, p.GetX(), p.GetY(), text.c_str(), fill_color.c_str());\n    }\n\n    /// Center this text.\n    void Center(bool c=true) { center = c; }\n\n    /// Identify if text is centered.\n    bool GetCenter() const { return center; }\n\n    CanvasAction * Clone() const { return new CanvasText(*this); }\n  };\n\n}\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  CanvasAction.h\n *  @brief Define a base class for all actions that can be done to widgets, plus simple actions.\n *\n *  CanvasAction objects modify the appearance of a canvas and can be tracked to reconstruct the\n *  state of the canvas from scratch.\n *\n *  Other, more specific actions defined here are:\n *    CanvasStrokeColor\n *    CanvasRotate\n *    CanvasFont\n *\n *  See also CanvasShape.h for more actions.\n */\n\n\n#ifndef EMP_WEB_CANVAS_ACTION_H\n#define EMP_WEB_CANVAS_ACTION_H\n\n#include <string>\n\n#include \"RawImage.h\"\n#include \"Widget.h\"\n#include \"../geometry/Point2D.h\"\n\nnamespace emp {\nnamespace web {\n\n  /// Base class to maintain canvas actions.\n  class CanvasAction {\n  protected:\n    /// Helper function to set the fill status.\n    void Fill(const std::string & style=\"\") {\n      if (style != \"\") {\n        EM_ASM_ARGS({\n            emp_i.ctx.fillStyle = Pointer_stringify($0);\n          }, style.c_str());\n      }\n      EM_ASM({ emp_i.ctx.fill(); });\n    }\n\n    /// Helper function to set the stroke status.\n    void Stroke(const std::string & style=\"\") {\n      if (style != \"\") {\n        EM_ASM_ARGS({\n            emp_i.ctx.strokeStyle = Pointer_stringify($0);\n          }, style.c_str());\n      }\n      EM_ASM({ emp_i.ctx.stroke(); });\n    }\n\n    /// Helper function to set the stroke status.\n    void LineWidth(double line_width=1.0) {\n      EM_ASM_ARGS({\n          emp_i.ctx.lineWidth = $0;\n        }, line_width);\n    }\n\n  public:\n    CanvasAction() { EMP_TRACK_CONSTRUCT(CanvasAction); }\n    CanvasAction(const CanvasAction &) { EMP_TRACK_CONSTRUCT(CanvasAction); }\n    virtual ~CanvasAction() { EMP_TRACK_DESTRUCT(CanvasAction); }\n\n\n    virtual void Apply() = 0;                  ///< Apply current action to emp_i.ctx.\n    virtual CanvasAction * Clone() const = 0;  ///< Make a copy of the current action.\n  };\n\n\n  /// Set the line color on subsequent draw-related actions.\n  class CanvasStrokeColor : public CanvasAction {\n  protected:\n    std::string color;  ///< Color to use.\n  public:\n    CanvasStrokeColor(const std::string & c) : color(c) { ; }\n\n    void Apply() {\n      EM_ASM_ARGS({\n        var color = Pointer_stringify($0);\n        emp_i.ctx.strokeStyle = color;\n      }, color.c_str());\n    }\n    CanvasAction * Clone() const { return new CanvasStrokeColor(*this); }\n  };\n\n  /// Rotate the entire canvas for subsequent drawings.\n  class CanvasRotate : public CanvasAction {\n  protected:\n    double angle;\n  public:\n    CanvasRotate(double a) : angle(a) { ; }\n\n    void Apply() {\n      EM_ASM_ARGS({\n        emp_i.ctx.rotate($0);\n      }, angle);\n    }\n    CanvasAction * Clone() const { return new CanvasRotate(*this); }\n  };\n\n\n  /// Change the default font to be used.\n  class CanvasFont : public CanvasAction {\n  protected:\n    std::string font;\n  public:\n    CanvasFont(const std::string & f) : font(f) { ; }\n\n    void Apply() {\n      EM_ASM_ARGS({\n        emp_i.ctx.font = Pointer_stringify($0);\n      }, font.c_str());\n    }\n    CanvasAction * Clone() const { return new CanvasFont(*this); }\n  };\n\n  /// Change the default font to be used.\n  class CanvasImage : public CanvasAction {\n  protected:\n    RawImage image;\n    Point position;\n    double width; double height;\n  public:\n    CanvasImage(const RawImage & raw_image, double _x=0.0, double _y=0.0, double _w=0.0, double _h=0.0)\n      : image(raw_image), position(_x,_y), width(_w), height(_h) { ; }\n    CanvasImage(const RawImage & raw_image, Point _p, double _w=0.0, double _h=0.0)\n      : image(raw_image), position(_p), width(_w), height(_h) { ; }\n    CanvasImage(const std::string & url, double _x=0.0, double _y=0.0, double _w=0.0, double _h=0.0)\n      : image(url), position(_x,_y), width(_w), height(_h) { ; }\n    CanvasImage(const std::string & url, Point _p, double _w=0.0, double _h=0.0)\n      : image(url), position(_p), width(_w), height(_h) { ; }\n\n    void Apply() {\n      image.OnLoad([this](){\n        if (width == 0.0) {\n          EM_ASM_ARGS({\n            emp_i.ctx.drawImage(emp_i.images[$0], $1, $2);\n          }, image.GetID(), position.GetX(), position.GetY());\n        } else {\n          EM_ASM_ARGS({\n            emp_i.ctx.drawImage(emp_i.images[$0], $1, $2, $3, $4);\n          }, image.GetID(), position.GetX(), position.GetY(), width, height);\n        }\n      });\n    }\n    \n    CanvasAction * Clone() const { return new CanvasImage(*this); }\n  };\n\n}\n}\n\n#endif\n","//  This file is part of Empirical, https://github.com/devosoft/Empirical\n//  Copyright (C) Michigan State University, 2016-2017.\n//  Released under the MIT Software license; see doc/LICENSE\n//\n//\n//  A simple class to track value pairs of any kind, optimized for points in 2D Space\n//\n//  Note: For maximal efficiency, prefer SquareMagnitude() and SquareDistance()\n//        over Magnitude() and Distance() as the latter require a square-root.\n\n\n#ifndef EMP_POINT_2D_H\n#define EMP_POINT_2D_H\n\n#include <cmath>\n#include <iostream>\n\nnamespace emp {\n\n  template <typename TYPE=double> class Point2D {\n  private:\n    TYPE x;\n    TYPE y;\n\n  public:\n    constexpr Point2D() : x(0.0), y(0.0) { ; }                      // Default = 0,0\n    constexpr Point2D(const Point2D & _in) : x(_in.x), y(_in.y) { ; } // Copy constructor\n    constexpr Point2D(TYPE _x, TYPE _y) : x(_x), y(_y) { ; }        // Two ints -> x and y\n    constexpr Point2D(const Point2D & _in, TYPE new_magnitude)\n      : x(_in.x * ((double) new_magnitude) / ((double) _in.Magnitude()))\n      , y(_in.y * ((double) new_magnitude) / ((double) _in.Magnitude()))\n     { ; }\n    // ~Point2D() { ; }\n\n    const Point2D & operator=(const Point2D & _in) { x = _in.x; y = _in.y; return *this; }\n    constexpr bool operator==(const Point2D & _in) const { return (x == _in.x) && (y == _in.y); }\n    constexpr bool operator!=(const Point2D & _in) const { return (x != _in.x) || (y != _in.y); }\n\n    constexpr inline TYPE GetX() const { return x; }\n    constexpr inline TYPE GetY() const { return y; }\n    inline Point2D & SetX(TYPE in_x) { x = in_x; return *this; }\n    inline Point2D & SetY(TYPE in_y) { y = in_y; return *this; }\n    Point2D & Set(TYPE _x, TYPE _y) { x=_x; y=_y; return *this; }\n\n    constexpr double SquareMagnitude() const { return x*x + y*y; }\n    constexpr double Magnitude() const { return sqrt( x*x + y*y ); }\n    constexpr bool AtOrigin() const { return x == 0 && y == 0; }\n    constexpr bool NonZero() const { return x != 0 || y != 0; }\n\n    // Determine a new point, but don't change this one\n    constexpr Point2D GetMidpoint(const Point2D & p2) const { return Point2D((x+p2.x)/2, (y+p2.y)/2); }\n    constexpr Point2D GetRot90() const { return Point2D(y, -x); }\n    constexpr Point2D GetRot180() const { return Point2D(-x, -y); }\n    constexpr Point2D GetRot270() const { return Point2D(-y, x); }\n    constexpr Point2D GetOffset(TYPE off_x, TYPE off_y) const { return Point2D(x+off_x, y+off_y); }\n\n    constexpr Point2D operator+(const Point2D & _in) const { return Point2D(x + _in.x , y + _in.y); }\n    constexpr Point2D operator-(const Point2D & _in) const { return Point2D(x - _in.x , y - _in.y); }\n    constexpr Point2D operator*(double mult) const { return Point2D(((double) x) * mult, ((double) y) * mult); }\n    constexpr Point2D operator/(double div) const { return Point2D(((double) x) / div, ((double) y) / div); }\n    constexpr Point2D operator*(int mult) const { return Point2D(x * mult, y * mult); }\n    constexpr Point2D operator/(int div) const { return Point2D(x / div, y / div); }\n    constexpr Point2D operator-() const { return Point2D(-x, -y); } // Unary minus\n\n    constexpr Point2D Abs() const { return Point2D(std::abs(x), std::abs(y)); } // Absolute value\n\n    // Modify this point.\n    Point2D & Translate(TYPE shift_x, TYPE shift_y) { x += shift_x; y += shift_y; return *this; }\n    Point2D & TranslateX(TYPE shift) { x += shift; return *this; }\n    Point2D & TranslateY(TYPE shift) { y += shift; return *this; }\n    Point2D & Scale(double scale) { x *= scale; y *= scale; return *this; }\n    Point2D & Scale(double scale_x, double scale_y) { x *= scale_x; y *= scale_y; return *this; }\n    Point2D & ToOrigin() { x = 0; y = 0; return *this; }\n    Point2D & NegateX() { x = -x; return *this; }\n    Point2D & NegateY() { y = -y; return *this; }\n\n    Point2D & operator+=(const Point2D & _in) { x += _in.x; y += _in.y; return *this; }\n    Point2D & operator-=(const Point2D & _in) { x -= _in.x; y -= _in.y; return *this; }\n    Point2D & operator*=(double mult) { x *= mult; y *= mult; return *this; }\n    Point2D & operator/=(double val) { if (val != 0.0) { x /= val;  y /= val; }; return *this; }\n    Point2D & operator*=(int mult) { x *= mult; y *= mult; return *this; }\n    Point2D & operator/=(int val) { if (val != 0.0) { x /= val;  y /= val; }; return *this; }\n\n    Point2D & Rot90() { return Set(y, -x); }\n    Point2D & Rot180() { return Set(-x, -y); }\n    Point2D & Rot270() { return Set(-y, x); }\n\n    // Square-roots are slow to calculate; if we're just doing comparisons, square-distance\n    // is usualy going to be sufficient.\n    TYPE SquareDistance(const Point2D & _in) const {\n      const TYPE x_dist = x - _in.x;\n      const TYPE y_dist = y - _in.y;\n      return x_dist*x_dist + y_dist*y_dist;\n    }\n\n    TYPE Distance(const Point2D & _in) const { return sqrt( SquareDistance(_in) ); }\n  };\n\n  using Point = Point2D<>;\n\n}\n\n// Overload ostream to work with points.\ntemplate <typename TYPE> std::ostream & operator<<(std::ostream & os,\n                                                   const emp::Point2D<TYPE> & point) {\n  return os << \"(\" << point.GetX() << \",\" << point.GetY() << \")\";\n}\n\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2018\n *\n *  @file  config.h\n *  @brief Maintains a set of configuration options.\n *\n *  This file defines a master configuration option Config, whose values can be loaded\n *  at runtime or else set as constant values throughout the code.\n *\n *  Assuming you have an emp::Config object called config, you can:\n *\n *  access a setting value:            config.SETTING_NAME()\n *  adjust a setting value:            config.SETTING_NAME(new_value)\n *  determine if a setting is locked:  config.SETTING_NAME_is_const()\n *  lookup a setting dynamically:      config(\"SETTING_NAME\")\n *  adjust a setting dynamically:      config(\"SETTING_NAME\", \"new_value\")\n *\n *  load settings from a stream:       config.Read(stream);\n *  load settings from a file:         config.Read(filename);\n *  save settings to a stream:         config.Write(stream);\n *  save settings to a file:           config.Write(filename);\n *\n *  write settings macros to a stream: config.WriteMacros(stream);\n *  write settings macros to a file:   config.WriteMacros(filename);\n *\n *\n *  The configuration files generated can use the following keywords in order to\n *  configure this object:\n *   include OTHER_FILENAME         -- Load in all data from another file.\n *   set SETTING_NAME VALUE         -- Set a basic configuration setting.\n *   new OBJECT_TYPE OBJECT_NAME    -- Create a new config object of a managed class.\n *   use OBJECT_TYPE OBJECT_NAME    -- Use a previouly create configuration object.\n */\n\n#ifndef EMP_CONFIG_H\n#define EMP_CONFIG_H\n\n\n#include <map>\n#include <ostream>\n#include <fstream>\n#include <functional>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\n#include \"../base/errors.h\"\n#include \"../base/vector.h\"\n#include \"../tools/functions.h\"\n#include \"../tools/string_utils.h\"\n#include \"ConfigManager.h\"\n\nusing namespace std::placeholders;\n\nnamespace emp {\n\n  /// Base class for all configuration settings.\n  class ConfigEntry {\n  protected:\n    std::string name;\n    std::string type;\n    std::string default_val;\n    std::string desc;\n\n    std::unordered_set<std::string> alias_set;\n\n  public:\n    ConfigEntry(const std::string _name, const std::string _type,\n                 const std::string _d_val, const std::string _desc)\n      : name(_name), type(_type), default_val(_d_val), desc(_desc), alias_set()\n    { ; }\n    virtual ~ConfigEntry() { ; }\n\n    const std::string & GetName() const { return name; }\n    const std::string & GetType() const { return type; }\n    const std::string & GetDefault() const { return default_val; }\n    const std::string & GetDescription() const { return desc; }\n\n    ConfigEntry & SetName(const std::string & _in) { name = _in; return *this; }\n    ConfigEntry & SetType(const std::string & _in) { type = _in; return *this; }\n    ConfigEntry & SetDefault(const std::string & _in) { default_val = _in; return *this; }\n    ConfigEntry & SetDescription(const std::string & _in) { desc = _in; return *this; }\n\n    /// Alert this setting that it is aliased to alternate possible names.\n    ConfigEntry & AddAlias(const std::string & _in) { alias_set.insert(_in); return *this; }\n\n    /// Are there any alternate names for this setting?\n    bool HasAlias(const std::string & _in) { return alias_set.find(_in) != alias_set.end(); }\n\n    /// Will the provided name match this setting?\n    bool IsMatch(const std::string & _in) { return name == _in || HasAlias(_in); }\n\n    /// Retrieve the full set of aliases.\n    const std::unordered_set<std::string> & GetAliases() { return alias_set; }\n\n    /// Retrieve the value of this setting as a string.\n    virtual std::string GetValue() const = 0;\n\n    /// Conver the value of this setting into a literal that C++ would recognize as its current value.\n    virtual std::string GetLiteralValue() const = 0;\n\n    /// Use a string to set the value of this setting.\n    virtual ConfigEntry & SetValue(const std::string & in_val, std::stringstream & warnings) = 0;\n\n    /// Identify if this setting is fixed at compile time.\n    virtual bool IsConst() const = 0;\n  };\n\n\n  /// Master configuration class that manages all of the settings.\n  class Config {\n  protected:\n\n    /// Type-specific versions of ConfigEntry class to manage settings.\n    template <class VAR_TYPE> class tConfigEntry : public ConfigEntry {\n    protected:\n      VAR_TYPE & entry_ref;\n    public:\n      tConfigEntry(const std::string _name, const std::string _type,\n                   const std::string _d_val, const std::string _desc,\n                   VAR_TYPE & _ref)\n        : ConfigEntry(_name, _type, _d_val, _desc), entry_ref(_ref) { ; }\n      ~tConfigEntry() { ; }\n\n      std::string GetValue() const { return emp::to_string(entry_ref); }\n      std::string GetLiteralValue() const { return to_literal(entry_ref); }\n      ConfigEntry & SetValue(const std::string & in_val, std::stringstream & /* warnings */) {\n        std::stringstream ss; ss << in_val; ss >> entry_ref; return *this;\n      }\n      bool IsConst() const { return false; }\n    };\n\n    /// Type-specific and CONST versions of ConfigEntry class to manage fixed settings.\n    template <class VAR_TYPE> class tConfigConstEntry : public ConfigEntry {\n    protected:\n      const VAR_TYPE literal_val;\n    public:\n      tConfigConstEntry(const std::string _name, const std::string _type,\n                        const std::string _d_val, const std::string _desc,\n                        const VAR_TYPE & _literal_val)\n        : ConfigEntry(_name, _type, _d_val, _desc), literal_val(_literal_val) { ; }\n      ~tConfigConstEntry() { ; }\n\n      std::string GetValue() const { return default_val; }\n      std::string GetLiteralValue() const { return to_literal(literal_val); }\n      ConfigEntry & SetValue(const std::string & in_val, std::stringstream & warnings) {\n        // This is a constant setting.  If we are actually trying to change it, give a warning.\n        if (in_val != GetValue()) {\n          warnings << \"Trying to adjust locked setting '\"\n                   << name << \"' from '\" << GetValue()\n                   << \"' to '\" << in_val << \"'. Ignoring.\" << std::endl;\n        }\n        return *this;\n      }\n      bool IsConst() const { return true; }\n    };\n\n    /// Special settings entry for settings created during the run (only accissibly dynamically)\n    class ConfigLiveEntry : public ConfigEntry {\n    public:\n      ConfigLiveEntry(const std::string _name, const std::string _type,\n                       const std::string _d_val, const std::string _desc)\n        : ConfigEntry(_name, _type, _d_val, _desc) { ; }\n      ~ConfigLiveEntry() { ; }\n\n      std::string GetValue() const { return default_val; }\n      std::string GetLiteralValue() const { return to_literal(default_val); }\n      ConfigEntry & SetValue(const std::string & in_val, std::stringstream & warnings) {\n        (void) warnings;\n        default_val = in_val;\n        return *this;\n      }\n      bool IsConst() const { return false; }\n    };\n\n    /// Information about a sub-group of settings.\n    class ConfigGroup {\n    protected:\n      std::string name;\n      std::string desc;\n      emp::vector<ConfigEntry *> entry_set;\n    public:\n      ConfigGroup(const std::string & _name, const std::string & _desc)\n        : name(_name), desc(_desc), entry_set()\n      { ; }\n      ~ConfigGroup() { ; }\n\n      size_t GetSize() const { return entry_set.size(); }\n      ConfigEntry * GetEntry(size_t id) { return entry_set[id]; }\n      ConfigEntry * GetLastEntry() { emp_assert(GetSize() > 0); return entry_set.back(); }\n\n      void Add(ConfigEntry * new_entry) { entry_set.push_back(new_entry); }\n\n      void Write(std::ostream & out) {\n        // Print header information with the group name.\n        out << \"### \" << name << \" ###\" << std::endl;\n        // Print group description.\n        auto desc_lines = slice(desc);\n        for (size_t comment_line = 0; comment_line < desc_lines.size(); comment_line++) {\n          out << \"# \" << desc_lines[comment_line] << std::endl;\n        }\n        out << std::endl;\n\n        const size_t entry_count = entry_set.size();\n        emp::vector<std::string> setting_info(entry_count);\n        size_t max_length = 0;\n\n        // Loop through once to figure out non-comment output\n        for (size_t i = 0; i < entry_count; i++) {\n          setting_info[i] = \"set \";\n          setting_info[i] += entry_set[i]->GetName();\n          setting_info[i] += \" \";\n          setting_info[i] += entry_set[i]->GetValue();\n          if (max_length < setting_info[i].size()) max_length = setting_info[i].size();\n        }\n\n        max_length += 2;\n        for (size_t i = 0; i < entry_count; i++) {\n          out << setting_info[i];\n\n          // Break the description up over multiple lines.\n          auto desc_lines = emp::slice(entry_set[i]->GetDescription());\n\n          size_t start_col = setting_info[i].size();\n          for (size_t comment_line = 0; comment_line < desc_lines.size(); comment_line++) {\n            for (size_t ws = start_col; ws < max_length; ws++) out << ' ';\n            out << \"# \" << desc_lines[comment_line] << std::endl;\n            start_col = 0;\n          }\n        }\n\n        out << std::endl; // Skip a line after each group.\n      }\n\n      void WriteMacros(std::ostream & out, bool as_const) {\n        // Print header information to register group.\n        out << \"  GROUP(\" << name << \", \\\"\" << desc << \"\\\"),\\n\";\n\n        // Loop through once to figure out non-comment output\n        for (ConfigEntry * cur_entry : entry_set) {\n          if (as_const || cur_entry->IsConst()) { out << \"    CONST(\"; }\n          else { out << \"    VALUE(\"; }\n\n          out << cur_entry->GetName() << \", \"\n              << cur_entry->GetType() << \", \"\n              << cur_entry->GetLiteralValue() << \", \"\n              << to_literal( cur_entry->GetDescription() )\n              << \"),\\n\";\n\n          // Output aliases.\n          const std::unordered_set<std::string> & alias_set = cur_entry->GetAliases();\n          for (const std::string & cur_alias : alias_set) {\n            out << \"      ALIAS(\" << cur_alias << \"),\\n\";\n          }\n        }\n\n        out << std::endl; // Skip a line after each group.\n      }\n    };\n\n    // === Helper Functions ===\n    ConfigGroup * GetActiveGroup() {\n      if (group_set.size() == 0) {\n        group_set.push_back(new ConfigGroup(\"DEFAULT\", \"Default settings group\"));\n      }\n      return group_set.back();\n    }\n\n    ConfigEntry * GetActiveEntry() {\n      ConfigGroup * group = GetActiveGroup();\n      emp_assert(group->GetSize() > 0);\n      return group->GetLastEntry();\n    }\n\n    // Which characters can legally be part of a variable identifier?\n    bool IsVarChar(const char c) {\n      if (c >= 'a' && c <= 'z') return true;\n      if (c >= 'A' && c <= 'Z') return true;\n      if (c >= '0' && c <= '9') return true;\n      if (c == '_') return true;\n      return false;\n    }\n\n    // Process a line by:\n    // * Remove excess whitespace\n    // * Expand all variables beginning with a $ in config line.\n    // * If wrap-around, move line to extras\n    void ProcessLine(std::string & cur_line, std::string & extras) {\n      size_t start_pos = extras.size();          // If there were extras last time, skip them.\n      if (extras.size()) cur_line.insert(0, extras);\n      extras.resize(0);\n      emp::left_justify(cur_line);               // Clear out leading whitespace.\n\n      for (size_t pos = start_pos; pos < cur_line.size(); pos++) {\n        const char cur_char = cur_line[pos];\n        // Check for escape characters and convert them appropriately.\n        if (cur_char == '\\\\') {\n          if (pos+1 == cur_line.size()) {                    // If backslash is at end of line...\n            extras = cur_line.substr(0, cur_line.size()-1);  // ...move string to extras\n            cur_line.resize(0);                              // ...don't process current line\n            return;                                          // ...since this is the line end, stop\n          }\n          // If we make it this far, we have a regular character being escaped.  Make the swap!\n          const char esc_char = cur_line[pos+1];\n          switch (esc_char) {\n            case '$': cur_line.replace(pos, 2, \"$\"); break;\n            case '#': cur_line.replace(pos, 2, \"#\"); break;\n            case '\\\\': cur_line.replace(pos, 2, \"\\\\\"); break;\n            case 'n': cur_line.replace(pos, 2, \"\\n\"); break;\n            case 'r': cur_line.replace(pos, 2, \"\\r\"); break;\n            case 't': cur_line.replace(pos, 2, \"\\t\"); break;\n          }\n        }\n        // A '#' indicates that a comment is starting that the rest of the line should be removed.\n        else if (cur_char == '#') {\n          cur_line.resize(pos);\n        }\n        // A '$' indicates that we should expand a variable in place.\n        else if (cur_char == '$' && expand_ok) {\n          size_t end_pos = pos+1;\n          while (end_pos < cur_line.size() && IsVarChar(cur_line[end_pos])) end_pos++;\n          const size_t var_size = end_pos - pos - 1;\n          std::string var_name(cur_line, pos+1, var_size);\n\n          if (ResolveAlias(var_name)) {\n            std::string new_val = var_map[var_name]->GetValue();  // Lookup variable value.\n            cur_line.replace(pos, var_size+1, new_val);           // Replace var name with value.\n            pos += new_val.size();                                // Skip new text.\n          } else {\n            std::stringstream ss;\n            ss << \"Unable to process config setting '$\" << var_name << \"'. Ignoring.\" << std::endl;\n            emp::NotifyError(ss.str());\n          }\n          // @CAO CONTINUE\n        }\n      }\n\n    }\n\n    // === Protected member variables ===\n    emp::vector<std::string> class_names;           // Names in class heiarchy.\n    std::map<std::string, ConfigEntry *> var_map;   // All variables across groups.\n    std::string version_id;                         // Unique version ID to ensure synced config.\n    emp::vector<ConfigGroup *> group_set;           // All of the config groups.\n    std::stringstream warnings;                     // Aggrigate warnings for combined display.\n    int delay_warnings;                             // Count of delays to collect warnings for printing.\n    std::map<std::string, std::string> alias_map;   // Map all aliases to original name.\n\n    // Map new type names to the manager that handles them.\n    std::map<std::string, ConfigManager_Base *> type_manager_map;\n\n    // Build a map of extra input commands to the function that they should call if triggered.\n    std::map<std::string, std::function<bool(std::string)> > command_map;\n    std::map<std::string, std::function<bool(std::string)> > new_map;\n    std::map<std::string, std::function<bool(std::string)> > use_map;\n\n    // Instructions on how config should behave.\n    bool expand_ok;          // Should we expand variables in the config file.\n\n  public:\n    Config(const std::string & in_version = \"\")\n      : class_names(), var_map(), version_id(in_version), group_set(), warnings()\n      , delay_warnings(0), alias_map(), type_manager_map(), command_map()\n      , new_map(), use_map(), expand_ok(true)\n    {\n      class_names.push_back(\"emp::Config\");\n    }\n\n    ~Config() {\n      // Delete all alocated memory!\n      for (auto & x : var_map) delete x.second;\n      for (auto & x : group_set) delete x;\n      for (auto & x : type_manager_map) delete x.second;\n    }\n\n    ConfigEntry * operator[](const std::string & name) { return var_map[name]; }\n    auto begin() -> decltype(var_map.begin()) { return var_map.begin(); }\n    auto end() -> decltype(var_map.end()) { return var_map.end(); }\n\n    Config & SetExpandOK(bool ok=true) { expand_ok = ok; return *this; }\n\n    bool Has(const std::string & setting_name) const {\n      return (var_map.find(setting_name) != var_map.end()) ||\n        (alias_map.find(setting_name) != alias_map.end());\n    }\n\n    bool ResolveAlias(std::string & setting_name) const {\n      if (var_map.find(setting_name) != var_map.end()) return true;\n      if (alias_map.find(setting_name) != alias_map.end()) {\n        setting_name = alias_map.find(setting_name)->second;\n        return true;\n      }\n      return false;\n    }\n\n    std::string Get(std::string setting_name) {\n      if (!ResolveAlias(setting_name)) return \"\";  // @CAO Print warning?\n      return var_map[setting_name]->GetValue();\n    }\n\n    Config & Set(std::string setting_name, const std::string & new_value,\n                  const std::string & in_desc=\"\") {\n      if (!ResolveAlias(setting_name)) {\n        // This setting is not currently in the map!  We should put it in, but let user know.\n        warnings << \"Unknown setting '\" << setting_name << \"'.  Creating.\" << std::endl;\n        var_map[setting_name] = new ConfigLiveEntry(setting_name, \"std::string\", new_value, in_desc);\n        GetActiveGroup()->Add(var_map[setting_name]);\n      }\n      var_map[setting_name]->SetValue(new_value, warnings);\n      if (!delay_warnings && warnings.rdbuf()->in_avail()) {\n        emp::NotifyWarning(warnings.str());\n        warnings.str(std::string()); // Clear the warnings.\n      }\n      return *this;\n    }\n\n    std::string operator()(const std::string & setting_name) { return Get(setting_name); }\n\n    Config & operator()(const std::string & setting_name, const std::string & new_value) {\n      return Set(setting_name, new_value);\n    }\n\n    void AddAlias(const std::string & base_name, const std::string & alias_name) {\n      emp_assert( var_map.find(base_name) != var_map.end() );  // Make sure base exists.\n      emp_assert( !Has(alias_name) ); // Make sure alias does not!\n      alias_map[alias_name] = base_name;\n      var_map[base_name]->AddAlias(alias_name);\n    }\n\n    // Generate a text representation (typically a file) for the state of Config\n    void Write(std::ostream & out) {\n      // @CAO Start by printing some file header information?\n\n      // Next print each group and it's information.\n      for (auto it = group_set.begin(); it != group_set.end(); it++) {\n        (*it)->Write(out);\n      }\n    }\n\n    // If a string is passed into Write, treat it as a filename.\n    void Write(std::string filename) {\n      std::ofstream out(filename);\n      Write(out);\n      out.close();\n    }\n\n    // Generate a text representation (typically a file) for the state of Config\n    void WriteMacros(std::ostream & out, bool as_const=false) {\n      out << \"/////////////////////////////////////////////////////////////////////////////////\\n\"\n          << \"//  This is an auto-generated file that defines a set of configuration options.\\n\"\n          << \"//\\n\"\n          << \"//  To create a new config from scratch, the format is:\\n\"\n          << \"//    EMP_BUILD_CONFIG( CLASS_NAME, OPTIONS... )\\n\"\n          << \"//\\n\"\n          << \"//  To extend an existing config, simply use:\\n\"\n          << \"//    EMP_EXTEND_CONFIG( NEW_NAME, BASE_CLASS, OPTIONS... )\\n\"\n          << \"//\\n\"\n          << \"//  The available OPTIONS are:\\n\"\n          << \"//\\n\"\n          << \"//  GROUP(group name, group description string)\\n\"\n          << \"//   Start a new group of configuration options.  Group structure is preserved\\n\"\n          << \"//   when user-accessible configuration options are generated.\\n\"\n          << \"//\\n\"\n          << \"//  VALUE(variable name, type, default value, description string)\\n\"\n          << \"//   Create a new setting in the emp::Config object that can be easily accessed.\\n\"\n          << \"//\\n\"\n          << \"//  CONST(variable name, type, fixed value, description string)\\n\"\n          << \"//   Create a new configuration constant that cannot be changed.  In practice,\\n\"\n          << \"//   allows broader optimizations in the code.\\n\"\n          << \"//\\n\"\n          << \"//  ALIAS(alias name)\\n\"\n          << \"//   Include an alias for the previous setting.  This command is useful to\\n\"\n          << \"//   maintain backward compatibility if names change in newer software versions.\\n\"\n          << \"\\n\"\n          << \"EMP_BUILD_CONFIG(\" << class_names.back() << \",\"\n          << std::endl;\n\n      // Next print each group and it's information.\n      for (auto it = group_set.begin(); it != group_set.end(); it++) {\n        (*it)->WriteMacros(out, as_const);\n      }\n\n      out << \")\" << std::endl;\n    }\n\n    // If a string is passed into Write, treat it as a filename.\n    void WriteMacros(std::string filename, bool as_const=false) {\n      std::ofstream out(filename);\n      WriteMacros(out, as_const);\n      out.close();\n    }\n\n\n    /// Read in from a text representation (typically a file) to set the state of Config.\n    /// Return success state.\n    bool Read(std::istream & input) {\n      // Load in the file one line at a time and process each line.\n      std::string cur_line, extras;\n      delay_warnings++;\n\n      // Loop through the file until eof is hit (does this work for other streams?)\n      while (!input.eof()) {\n        std::getline(input, cur_line);         // Get the current input line.\n        ProcessLine(cur_line, extras);         // Clean up line; act on aliases.\n\n        if (cur_line == \"\") continue;          // Skip empty lines.\n\n        std::string command = emp::string_pop_word(cur_line);\n\n        if (command == \"include\") {\n          // Recursively include another configuration file.\n          std::string filename = emp::string_pop_word(cur_line);\n          Read(filename);\n        }\n        else if (command == \"new\") {\n          std::string type_name = emp::string_pop_word(cur_line);\n          // @CAO Make sure type exists!\n          // @CAO Make sure remainder of line is a single identifier.\n          new_map[type_name](cur_line);\n        }\n        else if (command == \"set\") {\n          // Set a specific value.\n          std::string setting_name = emp::string_pop_word(cur_line);\n          Set(setting_name, cur_line);\n        }\n        else if (command == \"use\") {\n          std::string type_name = emp::string_pop_word(cur_line);\n          // @CAO Make sure type exists!\n          use_map[type_name](cur_line);\n        }\n        else if (command_map.find(command) != command_map.end()) {\n          // Run this custom command.\n          command_map[command](cur_line);\n        }\n        else {\n          // We don't know this command... give an error and move on.\n          std::stringstream ss;\n          ss << \"Unknown configuration command '\" << command << \"'. Ignoring.\" << std::endl;\n          emp::NotifyError(ss.str());\n        }\n      }\n\n      // Print out all accumulated warnings (if any).\n      if (warnings.rdbuf()->in_avail()) {\n        emp::NotifyWarning(warnings.str());\n        warnings.str(std::string()); // Clear the warnings.\n      }\n      delay_warnings--;\n\n      return true;\n    }\n\n    bool Read(std::string filename, bool error_on_missing_file=true) {\n      std::ifstream in_file(filename);\n      if (in_file.fail()) {\n        std::stringstream ss;\n        ss << \"Unable to open config file '\" << filename << \"'. Ignoring.\" << std::endl;\n        if (error_on_missing_file) emp::NotifyError(ss.str());\n        return false;\n      }\n      bool success = Read(in_file);\n      in_file.close();\n      return success;\n    }\n\n\n    void AddCommand(const std::string & command_name, std::function<bool(std::string)> command_fun) {\n      // Give a warning if we are re-defining an existing command.\n      if (command_map.find(command_name) != command_map.end()) {\n        warnings << \"Re-defining command '\" << command_name << \"'. Allowing.\" << std::endl;\n        if (!delay_warnings) {\n          emp::NotifyWarning(warnings.str());\n          warnings.str(std::string()); // Clear the warnings.\n        }\n      }\n      command_map[command_name] = command_fun;\n    }\n\n    void AddNewCallback(const std::string & type_name, std::function<bool(std::string)> new_fun) {\n      // Give a warning if we are re-defining an existing command.\n      if (new_map.find(type_name) != new_map.end()) {\n        warnings << \"Re-defining config type '\" << type_name << \"'. Allowing.\" << std::endl;\n        if (!delay_warnings) {\n          emp::NotifyWarning(warnings.str());\n          warnings.str(std::string()); // Clear the warnings.\n        }\n      }\n      new_map[type_name] = new_fun;\n    }\n\n    void AddUseCallback(const std::string & type_name, std::function<bool(std::string)> use_fun) {\n      // Give a warning if we are re-defining an existing command.\n      if (use_map.find(type_name) != use_map.end()) {\n        warnings << \"Re-defining config type '\" << type_name << \"'. Allowing.\" << std::endl;\n        if (!delay_warnings) {\n          emp::NotifyWarning(warnings.str());\n          warnings.str(std::string()); // Clear the warnings.\n        }\n      }\n      use_map[type_name] = use_fun;\n    }\n\n\n    template <class MANAGED_TYPE>\n    void AddManagedType(const std::string & type_keyword, const std::string & command_keyword,\n                        std::function<bool(MANAGED_TYPE &, std::string)> fun_callback)\n    {\n      ConfigManager<MANAGED_TYPE> * new_manager = new ConfigManager<MANAGED_TYPE>(type_keyword, command_keyword, fun_callback);\n      type_manager_map[type_keyword] = new_manager;\n\n      AddCommand(command_keyword,\n                 std::bind(&ConfigManager<MANAGED_TYPE>::CommandCallback, new_manager, _1) );\n      AddNewCallback(type_keyword,\n                     std::bind(&ConfigManager<MANAGED_TYPE>::NewObject, new_manager, _1) );\n      AddUseCallback(type_keyword,\n                     std::bind(&ConfigManager<MANAGED_TYPE>::UseObject, new_manager, _1) );\n    }\n\n  };\n\n}\n\n// Below are macros that help build the config classes.\n\n// Check that all of the commands are legal so that sensible errors can be produced.\n// (legal commands convert to two arguments; illeagal ones stay as one, so second arg is error!)\n#define EMP_CONFIG__ERROR_CHECK(CMD) EMP_GET_ARG(2, EMP_CONFIG__ARG_OKAY_ ## CMD, \\\n                                     static_assert(false, \"Unknown Config option: \" #CMD);, ~)\n#define EMP_CONFIG__ARG_OKAY_VALUE(...) ~,\n#define EMP_CONFIG__ARG_OKAY_CONST(...) ~,\n#define EMP_CONFIG__ARG_OKAY_GROUP(...) ~,\n#define EMP_CONFIG__ARG_OKAY_ALIAS(...) ~,\n#define EMP_CONFIG__ARG_OKAY_ ~,\n\n\n// Macros to handle declaration of protected member variables.\n// Note, unneeded macros defined to nothing, as is extra ending in '_' to allow trailing comma.\n#define EMP_CONFIG__DECLARE(CMD) EMP_CONFIG__DECLARE_ ## CMD\n#define EMP_CONFIG__DECLARE_VALUE(NAME, TYPE, DEFAULT, DESC) TYPE m_ ## NAME;\n#define EMP_CONFIG__DECLARE_CONST(NAME, TYPE, DEFAULT, DESC)\n#define EMP_CONFIG__DECLARE_GROUP(NAME, DESC)\n#define EMP_CONFIG__DECLARE_ALIAS(NAME)\n#define EMP_CONFIG__DECLARE_\n\n// Macros to handle construction of vars.\n#define EMP_CONFIG__CONSTRUCT(CMD) EMP_CONFIG__CONSTRUCT_ ## CMD\n#define EMP_CONFIG__CONSTRUCT_VALUE(NAME, TYPE, DEFAULT, DESC) , m_ ## NAME(DEFAULT)\n#define EMP_CONFIG__CONSTRUCT_CONST(NAME, TYPE, DEFAULT, DESC)\n#define EMP_CONFIG__CONSTRUCT_GROUP(NAME, DESC)\n#define EMP_CONFIG__CONSTRUCT_ALIAS(NAME)\n#define EMP_CONFIG__CONSTRUCT_\n\n// Macros to initialize internal representation of variables.\n#define EMP_CONFIG__INIT(CMD) EMP_CONFIG__INIT_ ## CMD\n#define EMP_CONFIG__INIT_VALUE(NAME, TYPE, DEFAULT, DESC)                               \\\n  var_map[#NAME] = new tConfigEntry<TYPE>(#NAME, #TYPE, #DEFAULT, DESC, m_ ## NAME);  \\\n  GetActiveGroup()->Add(var_map[#NAME]);\n#define EMP_CONFIG__INIT_CONST(NAME, TYPE, VALUE, DESC)                                 \\\n  var_map[#NAME] = new tConfigConstEntry<TYPE>(#NAME, #TYPE, #VALUE, DESC, VALUE);    \\\n  GetActiveGroup()->Add(var_map[#NAME]);\n#define EMP_CONFIG__INIT_GROUP(NAME, DESC)                                              \\\n  group_set.push_back(new ConfigGroup(#NAME, DESC));\n#define EMP_CONFIG__INIT_ALIAS(NAME)                                                    \\\n  AddAlias(GetActiveEntry()->GetName(), #NAME);\n#define EMP_CONFIG__INIT_\n\n// Build Get and Set Accessors, as well as const check\n#define EMP_CONFIG__ACCESS(CMD) EMP_CONFIG__ACCESS_ ## CMD\n#define EMP_CONFIG__ACCESS_VALUE(NAME, TYPE, DEFAULT, DESC)                     \\\n  inline const TYPE & NAME() const { return m_ ## NAME; }                       \\\n  const TYPE & NAME(const TYPE & _in) { m_ ## NAME = _in; return m_ ## NAME; }  \\\n  bool NAME ## _is_const() const { return false; }\n#define EMP_CONFIG__ACCESS_CONST(NAME, TYPE, VALUE, DESC)                       \\\n  constexpr static TYPE NAME() { return VALUE; }                                \\\n  TYPE NAME(const TYPE & _in) {                                                 \\\n    std::stringstream ss;                                                       \\\n    ss << \"Trying to set const '\" << #NAME << \"'. Ignoring.\" << std::endl;      \\\n    emp::NotifyWarning(ss.str());                                               \\\n    return VALUE;                                                               \\\n  }                                                                             \\\n  bool NAME ## _is_const() const { return true; }\n#define EMP_CONFIG__ACCESS_GROUP(NAME, DESC)\n#define EMP_CONFIG__ACCESS_ALIAS(NAME)\n#define EMP_CONFIG__ACCESS_\n\n#define EMP_BUILD_CONFIG(CLASS_NAME, ...) EMP_EXTEND_CONFIG(CLASS_NAME, emp::Config, __VA_ARGS__)\n\n#define EMP_EXTEND_CONFIG(CLASS_NAME, BASE_NAME, ...)     \\\n  EMP_WRAP_EACH(EMP_CONFIG__ERROR_CHECK, __VA_ARGS__)     \\\n  class CLASS_NAME : public BASE_NAME {                   \\\n  protected:                                              \\\n    bool is_ ## CLASS_NAME;                               \\\n    EMP_WRAP_EACH(EMP_CONFIG__DECLARE, __VA_ARGS__)       \\\n  public:                                                 \\\n    CLASS_NAME() : is_ ## CLASS_NAME(true)                \\\n    EMP_WRAP_EACH(EMP_CONFIG__CONSTRUCT, __VA_ARGS__)     \\\n    {                                                     \\\n      class_names.push_back(#CLASS_NAME);                 \\\n      EMP_WRAP_EACH(EMP_CONFIG__INIT, __VA_ARGS__)        \\\n    }                                                     \\\n    EMP_WRAP_EACH(EMP_CONFIG__ACCESS, __VA_ARGS__)        \\\n  };\n\n#endif\n","// -*- C++ -*-\n#ifndef _LIBCPP_SPLIT_BUFFER\n#define _LIBCPP_SPLIT_BUFFER\n\n#include <__config>\n#include <type_traits>\n#include <algorithm>\n\n#include <__undef_min_max>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <bool>\nclass __split_buffer_common\n{\nprotected:\n    void __throw_length_error() const;\n    void __throw_out_of_range() const;\n};\n\ntemplate <class _Tp, class _Allocator = allocator<_Tp> >\nstruct __split_buffer\n    : private __split_buffer_common<true>\n{\nprivate:\n    __split_buffer(const __split_buffer&);\n    __split_buffer& operator=(const __split_buffer&);\npublic:\n    typedef _Tp                                             value_type;\n    typedef _Allocator                                      allocator_type;\n    typedef typename remove_reference<allocator_type>::type __alloc_rr;\n    typedef allocator_traits<__alloc_rr>                    __alloc_traits;\n    typedef value_type&                                     reference;\n    typedef const value_type&                               const_reference;\n    typedef typename __alloc_traits::size_type              size_type;\n    typedef typename __alloc_traits::difference_type        difference_type;\n    typedef typename __alloc_traits::pointer                pointer;\n    typedef typename __alloc_traits::const_pointer          const_pointer;\n    typedef pointer                                         iterator;\n    typedef const_pointer                                   const_iterator;\n\n    pointer                                         __first_;\n    pointer                                         __begin_;\n    pointer                                         __end_;\n    __compressed_pair<pointer, allocator_type> __end_cap_;\n\n    typedef typename add_lvalue_reference<allocator_type>::type __alloc_ref;\n    typedef typename add_lvalue_reference<allocator_type>::type __alloc_const_ref;\n\n    _LIBCPP_INLINE_VISIBILITY __alloc_rr&           __alloc() _NOEXCEPT         {return __end_cap_.second();}\n    _LIBCPP_INLINE_VISIBILITY const __alloc_rr&     __alloc() const _NOEXCEPT   {return __end_cap_.second();}\n    _LIBCPP_INLINE_VISIBILITY pointer&              __end_cap() _NOEXCEPT       {return __end_cap_.first();}\n    _LIBCPP_INLINE_VISIBILITY const pointer&        __end_cap() const _NOEXCEPT {return __end_cap_.first();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __split_buffer()\n        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __split_buffer(__alloc_rr& __a);\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __split_buffer(const __alloc_rr& __a);\n    __split_buffer(size_type __cap, size_type __start, __alloc_rr& __a);\n    ~__split_buffer();\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    __split_buffer(__split_buffer&& __c)\n        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);\n    __split_buffer(__split_buffer&& __c, const __alloc_rr& __a);\n    __split_buffer& operator=(__split_buffer&& __c)\n        _NOEXCEPT_((__alloc_traits::propagate_on_container_move_assignment::value &&\n                is_nothrow_move_assignable<allocator_type>::value) ||\n               !__alloc_traits::propagate_on_container_move_assignment::value);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY       iterator begin() _NOEXCEPT       {return __begin_;}\n    _LIBCPP_INLINE_VISIBILITY const_iterator begin() const _NOEXCEPT {return __begin_;}\n    _LIBCPP_INLINE_VISIBILITY       iterator end() _NOEXCEPT         {return __end_;}\n    _LIBCPP_INLINE_VISIBILITY const_iterator end() const _NOEXCEPT   {return __end_;}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT\n        {__destruct_at_end(__begin_);}\n    _LIBCPP_INLINE_VISIBILITY size_type size() const {return static_cast<size_type>(__end_ - __begin_);}\n    _LIBCPP_INLINE_VISIBILITY bool empty()     const {return __end_ == __begin_;}\n    _LIBCPP_INLINE_VISIBILITY size_type capacity() const {return static_cast<size_type>(__end_cap() - __first_);}\n    _LIBCPP_INLINE_VISIBILITY size_type __front_spare() const {return static_cast<size_type>(__begin_ - __first_);}\n    _LIBCPP_INLINE_VISIBILITY size_type __back_spare() const {return static_cast<size_type>(__end_cap() - __end_);}\n\n    _LIBCPP_INLINE_VISIBILITY       reference front()       {return *__begin_;}\n    _LIBCPP_INLINE_VISIBILITY const_reference front() const {return *__begin_;}\n    _LIBCPP_INLINE_VISIBILITY       reference back()        {return *(__end_ - 1);}\n    _LIBCPP_INLINE_VISIBILITY const_reference back() const  {return *(__end_ - 1);}\n\n    void reserve(size_type __n);\n    void shrink_to_fit() _NOEXCEPT;\n    void push_front(const_reference __x);\n    _LIBCPP_INLINE_VISIBILITY void push_back(const_reference __x);\n#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)\n    void push_front(value_type&& __x);\n    void push_back(value_type&& __x);\n#if !defined(_LIBCPP_HAS_NO_VARIADICS)\n    template <class... _Args>\n        void emplace_back(_Args&&... __args);\n#endif  // !defined(_LIBCPP_HAS_NO_VARIADICS)\n#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)\n\n    _LIBCPP_INLINE_VISIBILITY void pop_front() {__destruct_at_begin(__begin_+1);}\n    _LIBCPP_INLINE_VISIBILITY void pop_back() {__destruct_at_end(__end_-1);}\n\n    void __construct_at_end(size_type __n);\n    void __construct_at_end(size_type __n, const_reference __x);\n    template <class _InputIter>\n        typename enable_if\n        <\n            __is_input_iterator<_InputIter>::value &&\n           !__is_forward_iterator<_InputIter>::value,\n            void\n        >::type\n        __construct_at_end(_InputIter __first, _InputIter __last);\n    template <class _ForwardIterator>\n        typename enable_if\n        <\n            __is_forward_iterator<_ForwardIterator>::value,\n            void\n        >::type\n        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last);\n\n    _LIBCPP_INLINE_VISIBILITY void __destruct_at_begin(pointer __new_begin)\n        {__destruct_at_begin(__new_begin, is_trivially_destructible<value_type>());}\n        _LIBCPP_INLINE_VISIBILITY\n        void __destruct_at_begin(pointer __new_begin, false_type);\n        _LIBCPP_INLINE_VISIBILITY\n        void __destruct_at_begin(pointer __new_begin, true_type);\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __destruct_at_end(pointer __new_last) _NOEXCEPT\n        {__destruct_at_end(__new_last, false_type());}\n    _LIBCPP_INLINE_VISIBILITY\n        void __destruct_at_end(pointer __new_last, false_type) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n        void __destruct_at_end(pointer __new_last, true_type) _NOEXCEPT;\n\n    void swap(__split_buffer& __x)\n        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value||\n                   __is_nothrow_swappable<__alloc_rr>::value);\n\n    bool __invariants() const;\n\nprivate:\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__split_buffer& __c, true_type)\n        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)\n        {\n            __alloc() = _VSTD::move(__c.__alloc());\n        }\n\n    _LIBCPP_INLINE_VISIBILITY\n    void __move_assign_alloc(__split_buffer&, false_type) _NOEXCEPT\n        {}\n};\n\ntemplate <class _Tp, class _Allocator>\nbool\n__split_buffer<_Tp, _Allocator>::__invariants() const\n{\n    if (__first_ == nullptr)\n    {\n        if (__begin_ != nullptr)\n            return false;\n        if (__end_ != nullptr)\n            return false;\n        if (__end_cap() != nullptr)\n            return false;\n    }\n    else\n    {\n        if (__begin_ < __first_)\n            return false;\n        if (__end_ < __begin_)\n            return false;\n        if (__end_cap() < __end_)\n            return false;\n    }\n    return true;\n}\n\n//  Default constructs __n objects starting at __end_\n//  throws if construction throws\n//  Precondition:  __n > 0\n//  Precondition:  size() + __n <= capacity()\n//  Postcondition:  size() == size() + __n\ntemplate <class _Tp, class _Allocator>\nvoid\n__split_buffer<_Tp, _Allocator>::__construct_at_end(size_type __n)\n{\n    __alloc_rr& __a = this->__alloc();\n    do\n    {\n        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_));\n        ++this->__end_;\n        --__n;\n    } while (__n > 0);\n}\n\n//  Copy constructs __n objects starting at __end_ from __x\n//  throws if construction throws\n//  Precondition:  __n > 0\n//  Precondition:  size() + __n <= capacity()\n//  Postcondition:  size() == old size() + __n\n//  Postcondition:  [i] == __x for all i in [size() - __n, __n)\ntemplate <class _Tp, class _Allocator>\nvoid\n__split_buffer<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x)\n{\n    __alloc_rr& __a = this->__alloc();\n    do\n    {\n        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_), __x);\n        ++this->__end_;\n        --__n;\n    } while (__n > 0);\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _InputIter>\ntypename enable_if\n<\n     __is_input_iterator<_InputIter>::value &&\n    !__is_forward_iterator<_InputIter>::value,\n    void\n>::type\n__split_buffer<_Tp, _Allocator>::__construct_at_end(_InputIter __first, _InputIter __last)\n{\n    __alloc_rr& __a = this->__alloc();\n    for (; __first != __last; ++__first)\n    {\n        if (__end_ == __end_cap())\n        {\n            size_type __old_cap = __end_cap() - __first_;\n            size_type __new_cap = _VSTD::max<size_type>(2 * __old_cap, 8);\n            __split_buffer __buf(__new_cap, 0, __a);\n            for (pointer __p = __begin_; __p != __end_; ++__p, ++__buf.__end_)\n                __alloc_traits::construct(__buf.__alloc(),\n                        _VSTD::__to_raw_pointer(__buf.__end_), _VSTD::move(*__p));\n            swap(__buf);\n        }\n        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_), *__first);\n        ++this->__end_;\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class _ForwardIterator>\ntypename enable_if\n<\n    __is_forward_iterator<_ForwardIterator>::value,\n    void\n>::type\n__split_buffer<_Tp, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last)\n{\n    __alloc_rr& __a = this->__alloc();\n    for (; __first != __last; ++__first)\n    {\n        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_), *__first);\n        ++this->__end_;\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\ninline\nvoid\n__split_buffer<_Tp, _Allocator>::__destruct_at_begin(pointer __new_begin, false_type)\n{\n    while (__begin_ != __new_begin)\n        __alloc_traits::destroy(__alloc(), __to_raw_pointer(__begin_++));\n}\n\ntemplate <class _Tp, class _Allocator>\ninline\nvoid\n__split_buffer<_Tp, _Allocator>::__destruct_at_begin(pointer __new_begin, true_type)\n{\n    __begin_ = __new_begin;\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__split_buffer<_Tp, _Allocator>::__destruct_at_end(pointer __new_last, false_type) _NOEXCEPT\n{\n    while (__new_last != __end_)\n        __alloc_traits::destroy(__alloc(), __to_raw_pointer(--__end_));\n}\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__split_buffer<_Tp, _Allocator>::__destruct_at_end(pointer __new_last, true_type) _NOEXCEPT\n{\n    __end_ = __new_last;\n}\n\ntemplate <class _Tp, class _Allocator>\n__split_buffer<_Tp, _Allocator>::__split_buffer(size_type __cap, size_type __start, __alloc_rr& __a)\n    : __end_cap_(nullptr, __a)\n{\n    __first_ = __cap != 0 ? __alloc_traits::allocate(__alloc(), __cap) : nullptr;\n    __begin_ = __end_ = __first_ + __start;\n    __end_cap() = __first_ + __cap;\n}\n\ntemplate <class _Tp, class _Allocator>\ninline\n__split_buffer<_Tp, _Allocator>::__split_buffer()\n    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)\n    : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr)\n{\n}\n\ntemplate <class _Tp, class _Allocator>\ninline\n__split_buffer<_Tp, _Allocator>::__split_buffer(__alloc_rr& __a)\n    : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, __a)\n{\n}\n\ntemplate <class _Tp, class _Allocator>\ninline\n__split_buffer<_Tp, _Allocator>::__split_buffer(const __alloc_rr& __a)\n    : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, __a)\n{\n}\n\ntemplate <class _Tp, class _Allocator>\n__split_buffer<_Tp, _Allocator>::~__split_buffer()\n{\n    clear();\n    if (__first_)\n        __alloc_traits::deallocate(__alloc(), __first_, capacity());\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\n__split_buffer<_Tp, _Allocator>::__split_buffer(__split_buffer&& __c)\n    _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)\n    : __first_(_VSTD::move(__c.__first_)),\n      __begin_(_VSTD::move(__c.__begin_)),\n      __end_(_VSTD::move(__c.__end_)),\n      __end_cap_(_VSTD::move(__c.__end_cap_))\n{\n    __c.__first_ = nullptr;\n    __c.__begin_ = nullptr;\n    __c.__end_ = nullptr;\n    __c.__end_cap() = nullptr;\n}\n\ntemplate <class _Tp, class _Allocator>\n__split_buffer<_Tp, _Allocator>::__split_buffer(__split_buffer&& __c, const __alloc_rr& __a)\n    : __end_cap_(__a)\n{\n    if (__a == __c.__alloc())\n    {\n        __first_ = __c.__first_;\n        __begin_ = __c.__begin_;\n        __end_ = __c.__end_;\n        __end_cap() = __c.__end_cap();\n        __c.__first_ = nullptr;\n        __c.__begin_ = nullptr;\n        __c.__end_ = nullptr;\n        __c.__end_cap() = nullptr;\n    }\n    else\n    {\n        size_type __cap = __c.size();\n        __first_ = __alloc_traits::allocate(__alloc(), __cap);\n        __begin_ = __end_ = __first_;\n        __end_cap() = __first_ + __cap;\n        typedef move_iterator<iterator> _Ip;\n        __construct_at_end(_Ip(__c.begin()), _Ip(__c.end()));\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\n__split_buffer<_Tp, _Allocator>&\n__split_buffer<_Tp, _Allocator>::operator=(__split_buffer&& __c)\n    _NOEXCEPT_((__alloc_traits::propagate_on_container_move_assignment::value &&\n                is_nothrow_move_assignable<allocator_type>::value) ||\n               !__alloc_traits::propagate_on_container_move_assignment::value)\n{\n    clear();\n    shrink_to_fit();\n    __first_ = __c.__first_;\n    __begin_ = __c.__begin_;\n    __end_ = __c.__end_;\n    __end_cap() = __c.__end_cap();\n    __move_assign_alloc(__c,\n        integral_constant<bool,\n                          __alloc_traits::propagate_on_container_move_assignment::value>());\n    __c.__first_ = __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\nvoid\n__split_buffer<_Tp, _Allocator>::swap(__split_buffer& __x)\n        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value||\n                   __is_nothrow_swappable<__alloc_rr>::value)\n{\n    _VSTD::swap(__first_, __x.__first_);\n    _VSTD::swap(__begin_, __x.__begin_);\n    _VSTD::swap(__end_, __x.__end_);\n    _VSTD::swap(__end_cap(), __x.__end_cap());\n    __swap_allocator(__alloc(), __x.__alloc());\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\n__split_buffer<_Tp, _Allocator>::reserve(size_type __n)\n{\n    if (__n < capacity())\n    {\n        __split_buffer<value_type, __alloc_rr&> __t(__n, 0, __alloc());\n        __t.__construct_at_end(move_iterator<pointer>(__begin_),\n                               move_iterator<pointer>(__end_));\n        _VSTD::swap(__first_, __t.__first_);\n        _VSTD::swap(__begin_, __t.__begin_);\n        _VSTD::swap(__end_, __t.__end_);\n        _VSTD::swap(__end_cap(), __t.__end_cap());\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\n__split_buffer<_Tp, _Allocator>::shrink_to_fit() _NOEXCEPT\n{\n    if (capacity() > size())\n    {\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        try\n        {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n            __split_buffer<value_type, __alloc_rr&> __t(size(), 0, __alloc());\n            __t.__construct_at_end(move_iterator<pointer>(__begin_),\n                                   move_iterator<pointer>(__end_));\n            __t.__end_ = __t.__begin_ + (__end_ - __begin_);\n            _VSTD::swap(__first_, __t.__first_);\n            _VSTD::swap(__begin_, __t.__begin_);\n            _VSTD::swap(__end_, __t.__end_);\n            _VSTD::swap(__end_cap(), __t.__end_cap());\n#ifndef _LIBCPP_NO_EXCEPTIONS\n        }\n        catch (...)\n        {\n        }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    }\n}\n\ntemplate <class _Tp, class _Allocator>\nvoid\n__split_buffer<_Tp, _Allocator>::push_front(const_reference __x)\n{\n    if (__begin_ == __first_)\n    {\n        if (__end_ < __end_cap())\n        {\n            difference_type __d = __end_cap() - __end_;\n            __d = (__d + 1) / 2;\n            __begin_ = _VSTD::move_backward(__begin_, __end_, __end_ + __d);\n            __end_ += __d;\n        }\n        else\n        {\n            size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);\n            __split_buffer<value_type, __alloc_rr&> __t(__c, (__c + 3) / 4, __alloc());\n            __t.__construct_at_end(move_iterator<pointer>(__begin_),\n                                   move_iterator<pointer>(__end_));\n            _VSTD::swap(__first_, __t.__first_);\n            _VSTD::swap(__begin_, __t.__begin_);\n            _VSTD::swap(__end_, __t.__end_);\n            _VSTD::swap(__end_cap(), __t.__end_cap());\n        }\n    }\n    __alloc_traits::construct(__alloc(), _VSTD::__to_raw_pointer(__begin_-1), __x);\n    --__begin_;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\nvoid\n__split_buffer<_Tp, _Allocator>::push_front(value_type&& __x)\n{\n    if (__begin_ == __first_)\n    {\n        if (__end_ < __end_cap())\n        {\n            difference_type __d = __end_cap() - __end_;\n            __d = (__d + 1) / 2;\n            __begin_ = _VSTD::move_backward(__begin_, __end_, __end_ + __d);\n            __end_ += __d;\n        }\n        else\n        {\n            size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);\n            __split_buffer<value_type, __alloc_rr&> __t(__c, (__c + 3) / 4, __alloc());\n            __t.__construct_at_end(move_iterator<pointer>(__begin_),\n                                   move_iterator<pointer>(__end_));\n            _VSTD::swap(__first_, __t.__first_);\n            _VSTD::swap(__begin_, __t.__begin_);\n            _VSTD::swap(__end_, __t.__end_);\n            _VSTD::swap(__end_cap(), __t.__end_cap());\n        }\n    }\n    __alloc_traits::construct(__alloc(), _VSTD::__to_raw_pointer(__begin_-1),\n            _VSTD::move(__x));\n    --__begin_;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\n__split_buffer<_Tp, _Allocator>::push_back(const_reference __x)\n{\n    if (__end_ == __end_cap())\n    {\n        if (__begin_ > __first_)\n        {\n            difference_type __d = __begin_ - __first_;\n            __d = (__d + 1) / 2;\n            __end_ = _VSTD::move(__begin_, __end_, __begin_ - __d);\n            __begin_ -= __d;\n        }\n        else\n        {\n            size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);\n            __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());\n            __t.__construct_at_end(move_iterator<pointer>(__begin_),\n                                   move_iterator<pointer>(__end_));\n            _VSTD::swap(__first_, __t.__first_);\n            _VSTD::swap(__begin_, __t.__begin_);\n            _VSTD::swap(__end_, __t.__end_);\n            _VSTD::swap(__end_cap(), __t.__end_cap());\n        }\n    }\n    __alloc_traits::construct(__alloc(), _VSTD::__to_raw_pointer(__end_), __x);\n    ++__end_;\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\nvoid\n__split_buffer<_Tp, _Allocator>::push_back(value_type&& __x)\n{\n    if (__end_ == __end_cap())\n    {\n        if (__begin_ > __first_)\n        {\n            difference_type __d = __begin_ - __first_;\n            __d = (__d + 1) / 2;\n            __end_ = _VSTD::move(__begin_, __end_, __begin_ - __d);\n            __begin_ -= __d;\n        }\n        else\n        {\n            size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);\n            __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());\n            __t.__construct_at_end(move_iterator<pointer>(__begin_),\n                                   move_iterator<pointer>(__end_));\n            _VSTD::swap(__first_, __t.__first_);\n            _VSTD::swap(__begin_, __t.__begin_);\n            _VSTD::swap(__end_, __t.__end_);\n            _VSTD::swap(__end_cap(), __t.__end_cap());\n        }\n    }\n    __alloc_traits::construct(__alloc(), _VSTD::__to_raw_pointer(__end_),\n            _VSTD::move(__x));\n    ++__end_;\n}\n\n#ifndef _LIBCPP_HAS_NO_VARIADICS\n\ntemplate <class _Tp, class _Allocator>\ntemplate <class... _Args>\nvoid\n__split_buffer<_Tp, _Allocator>::emplace_back(_Args&&... __args)\n{\n    if (__end_ == __end_cap())\n    {\n        if (__begin_ > __first_)\n        {\n            difference_type __d = __begin_ - __first_;\n            __d = (__d + 1) / 2;\n            __end_ = _VSTD::move(__begin_, __end_, __begin_ - __d);\n            __begin_ -= __d;\n        }\n        else\n        {\n            size_type __c = max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);\n            __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());\n            __t.__construct_at_end(move_iterator<pointer>(__begin_),\n                                   move_iterator<pointer>(__end_));\n            _VSTD::swap(__first_, __t.__first_);\n            _VSTD::swap(__begin_, __t.__begin_);\n            _VSTD::swap(__end_, __t.__end_);\n            _VSTD::swap(__end_cap(), __t.__end_cap());\n        }\n    }\n    __alloc_traits::construct(__alloc(), _VSTD::__to_raw_pointer(__end_),\n                              _VSTD::forward<_Args>(__args)...);\n    ++__end_;\n}\n\n#endif  // _LIBCPP_HAS_NO_VARIADICS\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Tp, class _Allocator>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(__split_buffer<_Tp, _Allocator>& __x, __split_buffer<_Tp, _Allocator>& __y)\n        _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_SPLIT_BUFFER\n","// -*- C++ -*-\n//===-------------------------- unordered_set -----------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_UNORDERED_SET\n#define _LIBCPP_UNORDERED_SET\n\n/*\n\n    unordered_set synopsis\n\n#include <initializer_list>\n\nnamespace std\n{\n\ntemplate <class Value, class Hash = hash<Value>, class Pred = equal_to<Value>,\n          class Alloc = allocator<Value>>\nclass unordered_set\n{\npublic:\n    // types\n    typedef Value                                                      key_type;\n    typedef key_type                                                   value_type;\n    typedef Hash                                                       hasher;\n    typedef Pred                                                       key_equal;\n    typedef Alloc                                                      allocator_type;\n    typedef value_type&                                                reference;\n    typedef const value_type&                                          const_reference;\n    typedef typename allocator_traits<allocator_type>::pointer         pointer;\n    typedef typename allocator_traits<allocator_type>::const_pointer   const_pointer;\n    typedef typename allocator_traits<allocator_type>::size_type       size_type;\n    typedef typename allocator_traits<allocator_type>::difference_type difference_type;\n\n    typedef /unspecified/ iterator;\n    typedef /unspecified/ const_iterator;\n    typedef /unspecified/ local_iterator;\n    typedef /unspecified/ const_local_iterator;\n\n    unordered_set()\n        noexcept(\n            is_nothrow_default_constructible<hasher>::value &&\n            is_nothrow_default_constructible<key_equal>::value &&\n            is_nothrow_default_constructible<allocator_type>::value);\n    explicit unordered_set(size_type n, const hasher& hf = hasher(),\n                           const key_equal& eql = key_equal(),\n                           const allocator_type& a = allocator_type());\n    template <class InputIterator>\n        unordered_set(InputIterator f, InputIterator l,\n                      size_type n = 0, const hasher& hf = hasher(),\n                      const key_equal& eql = key_equal(),\n                      const allocator_type& a = allocator_type());\n    explicit unordered_set(const allocator_type&);\n    unordered_set(const unordered_set&);\n    unordered_set(const unordered_set&, const Allocator&);\n    unordered_set(unordered_set&&)\n        noexcept(\n            is_nothrow_move_constructible<hasher>::value &&\n            is_nothrow_move_constructible<key_equal>::value &&\n            is_nothrow_move_constructible<allocator_type>::value);\n    unordered_set(unordered_set&&, const Allocator&);\n    unordered_set(initializer_list<value_type>, size_type n = 0,\n                  const hasher& hf = hasher(), const key_equal& eql = key_equal(),\n                  const allocator_type& a = allocator_type());\n    unordered_set(size_type n, const allocator_type& a); // C++14\n    unordered_set(size_type n, const hasher& hf, const allocator_type& a); // C++14\n    template <class InputIterator>\n      unordered_set(InputIterator f, InputIterator l, size_type n, const allocator_type& a); // C++14\n    template <class InputIterator>\n      unordered_set(InputIterator f, InputIterator l, size_type n, \n                    const hasher& hf,  const allocator_type& a); // C++14\n    unordered_set(initializer_list<value_type> il, size_type n, const allocator_type& a); // C++14\n    unordered_set(initializer_list<value_type> il, size_type n,\n                  const hasher& hf,  const allocator_type& a); // C++14\n    ~unordered_set();\n    unordered_set& operator=(const unordered_set&);\n    unordered_set& operator=(unordered_set&&)\n        noexcept(\n            allocator_type::propagate_on_container_move_assignment::value &&\n            is_nothrow_move_assignable<allocator_type>::value &&\n            is_nothrow_move_assignable<hasher>::value &&\n            is_nothrow_move_assignable<key_equal>::value);\n    unordered_set& operator=(initializer_list<value_type>);\n\n    allocator_type get_allocator() const noexcept;\n\n    bool      empty() const noexcept;\n    size_type size() const noexcept;\n    size_type max_size() const noexcept;\n\n    iterator       begin() noexcept;\n    iterator       end() noexcept;\n    const_iterator begin()  const noexcept;\n    const_iterator end()    const noexcept;\n    const_iterator cbegin() const noexcept;\n    const_iterator cend()   const noexcept;\n\n    template <class... Args>\n        pair<iterator, bool> emplace(Args&&... args);\n    template <class... Args>\n        iterator emplace_hint(const_iterator position, Args&&... args);\n    pair<iterator, bool> insert(const value_type& obj);\n    pair<iterator, bool> insert(value_type&& obj);\n    iterator insert(const_iterator hint, const value_type& obj);\n    iterator insert(const_iterator hint, value_type&& obj);\n    template <class InputIterator>\n        void insert(InputIterator first, InputIterator last);\n    void insert(initializer_list<value_type>);\n\n    iterator erase(const_iterator position);\n    iterator erase(iterator position);  // C++14\n    size_type erase(const key_type& k);\n    iterator erase(const_iterator first, const_iterator last);\n    void clear() noexcept;\n\n    void swap(unordered_set&)\n       noexcept(allocator_traits<Allocator>::is_always_equal::value &&\n                 noexcept(swap(declval<hasher&>(), declval<hasher&>())) &&\n                 noexcept(swap(declval<key_equal&>(), declval<key_equal&>()))); // C++17\n\n    hasher hash_function() const;\n    key_equal key_eq() const;\n\n    iterator       find(const key_type& k);\n    const_iterator find(const key_type& k) const;\n    size_type count(const key_type& k) const;\n    pair<iterator, iterator>             equal_range(const key_type& k);\n    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;\n\n    size_type bucket_count() const noexcept;\n    size_type max_bucket_count() const noexcept;\n\n    size_type bucket_size(size_type n) const;\n    size_type bucket(const key_type& k) const;\n\n    local_iterator       begin(size_type n);\n    local_iterator       end(size_type n);\n    const_local_iterator begin(size_type n) const;\n    const_local_iterator end(size_type n) const;\n    const_local_iterator cbegin(size_type n) const;\n    const_local_iterator cend(size_type n) const;\n\n    float load_factor() const noexcept;\n    float max_load_factor() const noexcept;\n    void max_load_factor(float z);\n    void rehash(size_type n);\n    void reserve(size_type n);\n};\n\ntemplate <class Value, class Hash, class Pred, class Alloc>\n    void swap(unordered_set<Value, Hash, Pred, Alloc>& x,\n              unordered_set<Value, Hash, Pred, Alloc>& y)\n              noexcept(noexcept(x.swap(y)));\n\ntemplate <class Value, class Hash, class Pred, class Alloc>\n    bool\n    operator==(const unordered_set<Value, Hash, Pred, Alloc>& x,\n               const unordered_set<Value, Hash, Pred, Alloc>& y);\n\ntemplate <class Value, class Hash, class Pred, class Alloc>\n    bool\n    operator!=(const unordered_set<Value, Hash, Pred, Alloc>& x,\n               const unordered_set<Value, Hash, Pred, Alloc>& y);\n\ntemplate <class Value, class Hash = hash<Value>, class Pred = equal_to<Value>,\n          class Alloc = allocator<Value>>\nclass unordered_multiset\n{\npublic:\n    // types\n    typedef Value                                                      key_type;\n    typedef key_type                                                   value_type;\n    typedef Hash                                                       hasher;\n    typedef Pred                                                       key_equal;\n    typedef Alloc                                                      allocator_type;\n    typedef value_type&                                                reference;\n    typedef const value_type&                                          const_reference;\n    typedef typename allocator_traits<allocator_type>::pointer         pointer;\n    typedef typename allocator_traits<allocator_type>::const_pointer   const_pointer;\n    typedef typename allocator_traits<allocator_type>::size_type       size_type;\n    typedef typename allocator_traits<allocator_type>::difference_type difference_type;\n\n    typedef /unspecified/ iterator;\n    typedef /unspecified/ const_iterator;\n    typedef /unspecified/ local_iterator;\n    typedef /unspecified/ const_local_iterator;\n\n    unordered_multiset()\n        noexcept(\n            is_nothrow_default_constructible<hasher>::value &&\n            is_nothrow_default_constructible<key_equal>::value &&\n            is_nothrow_default_constructible<allocator_type>::value);\n    explicit unordered_multiset(size_type n, const hasher& hf = hasher(),\n                           const key_equal& eql = key_equal(),\n                           const allocator_type& a = allocator_type());\n    template <class InputIterator>\n        unordered_multiset(InputIterator f, InputIterator l,\n                      size_type n = 0, const hasher& hf = hasher(),\n                      const key_equal& eql = key_equal(),\n                      const allocator_type& a = allocator_type());\n    explicit unordered_multiset(const allocator_type&);\n    unordered_multiset(const unordered_multiset&);\n    unordered_multiset(const unordered_multiset&, const Allocator&);\n    unordered_multiset(unordered_multiset&&)\n        noexcept(\n            is_nothrow_move_constructible<hasher>::value &&\n            is_nothrow_move_constructible<key_equal>::value &&\n            is_nothrow_move_constructible<allocator_type>::value);\n    unordered_multiset(unordered_multiset&&, const Allocator&);\n    unordered_multiset(initializer_list<value_type>, size_type n = /see below/,\n                  const hasher& hf = hasher(), const key_equal& eql = key_equal(),\n                  const allocator_type& a = allocator_type());\n    unordered_multiset(size_type n, const allocator_type& a); // C++14\n    unordered_multiset(size_type n, const hasher& hf, const allocator_type& a); // C++14\n    template <class InputIterator>\n      unordered_multiset(InputIterator f, InputIterator l, size_type n, const allocator_type& a); // C++14\n    template <class InputIterator>\n      unordered_multiset(InputIterator f, InputIterator l, size_type n,\n                         const hasher& hf, const allocator_type& a); // C++14\n    unordered_multiset(initializer_list<value_type> il, size_type n, const allocator_type& a); // C++14\n    unordered_multiset(initializer_list<value_type> il, size_type n, \n                       const hasher& hf,  const allocator_type& a); // C++14\n    ~unordered_multiset();\n    unordered_multiset& operator=(const unordered_multiset&);\n    unordered_multiset& operator=(unordered_multiset&&)\n        noexcept(\n            allocator_type::propagate_on_container_move_assignment::value &&\n            is_nothrow_move_assignable<allocator_type>::value &&\n            is_nothrow_move_assignable<hasher>::value &&\n            is_nothrow_move_assignable<key_equal>::value);\n    unordered_multiset& operator=(initializer_list<value_type>);\n\n    allocator_type get_allocator() const noexcept;\n\n    bool      empty() const noexcept;\n    size_type size() const noexcept;\n    size_type max_size() const noexcept;\n\n    iterator       begin() noexcept;\n    iterator       end() noexcept;\n    const_iterator begin()  const noexcept;\n    const_iterator end()    const noexcept;\n    const_iterator cbegin() const noexcept;\n    const_iterator cend()   const noexcept;\n\n    template <class... Args>\n        iterator emplace(Args&&... args);\n    template <class... Args>\n        iterator emplace_hint(const_iterator position, Args&&... args);\n    iterator insert(const value_type& obj);\n    iterator insert(value_type&& obj);\n    iterator insert(const_iterator hint, const value_type& obj);\n    iterator insert(const_iterator hint, value_type&& obj);\n    template <class InputIterator>\n        void insert(InputIterator first, InputIterator last);\n    void insert(initializer_list<value_type>);\n\n    iterator erase(const_iterator position);\n    iterator erase(iterator position);  // C++14\n    size_type erase(const key_type& k);\n    iterator erase(const_iterator first, const_iterator last);\n    void clear() noexcept;\n\n    void swap(unordered_multiset&)\n       noexcept(allocator_traits<Allocator>::is_always_equal::value &&\n                 noexcept(swap(declval<hasher&>(), declval<hasher&>())) &&\n                 noexcept(swap(declval<key_equal&>(), declval<key_equal&>()))); // C++17\n\n    hasher hash_function() const;\n    key_equal key_eq() const;\n\n    iterator       find(const key_type& k);\n    const_iterator find(const key_type& k) const;\n    size_type count(const key_type& k) const;\n    pair<iterator, iterator>             equal_range(const key_type& k);\n    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;\n\n    size_type bucket_count() const noexcept;\n    size_type max_bucket_count() const noexcept;\n\n    size_type bucket_size(size_type n) const;\n    size_type bucket(const key_type& k) const;\n\n    local_iterator       begin(size_type n);\n    local_iterator       end(size_type n);\n    const_local_iterator begin(size_type n) const;\n    const_local_iterator end(size_type n) const;\n    const_local_iterator cbegin(size_type n) const;\n    const_local_iterator cend(size_type n) const;\n\n    float load_factor() const noexcept;\n    float max_load_factor() const noexcept;\n    void max_load_factor(float z);\n    void rehash(size_type n);\n    void reserve(size_type n);\n};\n\ntemplate <class Value, class Hash, class Pred, class Alloc>\n    void swap(unordered_multiset<Value, Hash, Pred, Alloc>& x,\n              unordered_multiset<Value, Hash, Pred, Alloc>& y)\n              noexcept(noexcept(x.swap(y)));\n\ntemplate <class Value, class Hash, class Pred, class Alloc>\n    bool\n    operator==(const unordered_multiset<Value, Hash, Pred, Alloc>& x,\n               const unordered_multiset<Value, Hash, Pred, Alloc>& y);\n\ntemplate <class Value, class Hash, class Pred, class Alloc>\n    bool\n    operator!=(const unordered_multiset<Value, Hash, Pred, Alloc>& x,\n               const unordered_multiset<Value, Hash, Pred, Alloc>& y);\n}  // std\n\n*/\n\n#include <__config>\n#include <__hash_table>\n#include <functional>\n\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _Value, class _Hash = hash<_Value>, class _Pred = equal_to<_Value>,\n          class _Alloc = allocator<_Value> >\nclass _LIBCPP_TEMPLATE_VIS unordered_set\n{\npublic:\n    // types\n    typedef _Value                                                     key_type;\n    typedef key_type                                                   value_type;\n    typedef _Hash                                                      hasher;\n    typedef _Pred                                                      key_equal;\n    typedef _Alloc                                                     allocator_type;\n    typedef value_type&                                                reference;\n    typedef const value_type&                                          const_reference;\n    static_assert((is_same<value_type, typename allocator_type::value_type>::value),\n                  \"Invalid allocator::value_type\");\n\nprivate:\n    typedef __hash_table<value_type, hasher, key_equal, allocator_type> __table;\n\n    __table __table_;\n\npublic:\n    typedef typename __table::pointer         pointer;\n    typedef typename __table::const_pointer   const_pointer;\n    typedef typename __table::size_type       size_type;\n    typedef typename __table::difference_type difference_type;\n\n    typedef typename __table::const_iterator       iterator;\n    typedef typename __table::const_iterator       const_iterator;\n    typedef typename __table::const_local_iterator local_iterator;\n    typedef typename __table::const_local_iterator const_local_iterator;\n\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_set()\n        _NOEXCEPT_(is_nothrow_default_constructible<__table>::value)\n        {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n            __get_db()->__insert_c(this);\n#endif\n        }\n    explicit unordered_set(size_type __n, const hasher& __hf = hasher(),\n                           const key_equal& __eql = key_equal());\n#if _LIBCPP_STD_VER > 11\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_set(size_type __n, const allocator_type& __a)\n        : unordered_set(__n, hasher(), key_equal(), __a) {}\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_set(size_type __n, const hasher& __hf, const allocator_type& __a)\n        : unordered_set(__n, __hf, key_equal(), __a) {}\n#endif\n    unordered_set(size_type __n, const hasher& __hf, const key_equal& __eql,\n                  const allocator_type& __a);\n    template <class _InputIterator>\n        unordered_set(_InputIterator __first, _InputIterator __last);\n    template <class _InputIterator>\n        unordered_set(_InputIterator __first, _InputIterator __last,\n                      size_type __n, const hasher& __hf = hasher(),\n                      const key_equal& __eql = key_equal());\n    template <class _InputIterator>\n        unordered_set(_InputIterator __first, _InputIterator __last,\n                      size_type __n, const hasher& __hf, const key_equal& __eql,\n                      const allocator_type& __a);\n#if _LIBCPP_STD_VER > 11\n    template <class _InputIterator>\n    inline _LIBCPP_INLINE_VISIBILITY\n        unordered_set(_InputIterator __first, _InputIterator __last, \n                    size_type __n, const allocator_type& __a)\n            : unordered_set(__first, __last, __n, hasher(), key_equal(), __a) {}\n    template <class _InputIterator>\n        unordered_set(_InputIterator __first, _InputIterator __last, \n                      size_type __n, const hasher& __hf, const allocator_type& __a)\n            : unordered_set(__first, __last, __n, __hf, key_equal(), __a) {}\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    explicit unordered_set(const allocator_type& __a);\n    unordered_set(const unordered_set& __u);\n    unordered_set(const unordered_set& __u, const allocator_type& __a);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_set(unordered_set&& __u)\n        _NOEXCEPT_(is_nothrow_move_constructible<__table>::value);\n    unordered_set(unordered_set&& __u, const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    unordered_set(initializer_list<value_type> __il);\n    unordered_set(initializer_list<value_type> __il, size_type __n,\n                  const hasher& __hf = hasher(),\n                  const key_equal& __eql = key_equal());\n    unordered_set(initializer_list<value_type> __il, size_type __n,\n                  const hasher& __hf, const key_equal& __eql,\n                  const allocator_type& __a);\n#if _LIBCPP_STD_VER > 11\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_set(initializer_list<value_type> __il, size_type __n,\n                                                      const allocator_type& __a)\n        : unordered_set(__il, __n, hasher(), key_equal(), __a) {}\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_set(initializer_list<value_type> __il, size_type __n, \n                                  const hasher& __hf, const allocator_type& __a)\n        : unordered_set(__il, __n, __hf, key_equal(), __a) {}\n#endif\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    // ~unordered_set() = default;\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_set& operator=(const unordered_set& __u)\n    {\n        __table_ = __u.__table_;\n        return *this;\n    }\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_set& operator=(unordered_set&& __u)\n        _NOEXCEPT_(is_nothrow_move_assignable<__table>::value);\n#endif\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_set& operator=(initializer_list<value_type> __il);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type get_allocator() const _NOEXCEPT\n        {return allocator_type(__table_.__node_alloc());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool      empty() const _NOEXCEPT {return __table_.size() == 0;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type size() const _NOEXCEPT  {return __table_.size();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_size() const _NOEXCEPT {return __table_.max_size();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       begin() _NOEXCEPT        {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       end() _NOEXCEPT          {return __table_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin()  const _NOEXCEPT {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end()    const _NOEXCEPT {return __table_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cbegin() const _NOEXCEPT {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cend()   const _NOEXCEPT {return __table_.end();}\n\n#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> emplace(_Args&&... __args)\n            {return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...);}\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        iterator emplace_hint(const_iterator __p, _Args&&... __args)\n        {\n            _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n                \"unordered_set::emplace_hint(const_iterator, args...) called with an iterator not\"\n                \" referring to this unordered_set\");\n            return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...).first;\n        }\n#else\n        iterator emplace_hint(const_iterator, _Args&&... __args)\n            {return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...).first;}\n#endif\n#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> insert(const value_type& __x)\n        {return __table_.__insert_unique(__x);}\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> insert(value_type&& __x)\n        {return __table_.__insert_unique(_VSTD::move(__x));}\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    iterator insert(const_iterator __p, const value_type& __x)\n        {\n            _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n                \"unordered_set::insert(const_iterator, const value_type&) called with an iterator not\"\n                \" referring to this unordered_set\");\n            return insert(__x).first;\n        }\n#else\n    iterator insert(const_iterator, const value_type& __x)\n        {return insert(__x).first;}\n#endif\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    iterator insert(const_iterator __p, value_type&& __x)\n        {\n            _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n                \"unordered_set::insert(const_iterator, value_type&&) called with an iterator not\"\n                \" referring to this unordered_set\");\n            return insert(_VSTD::move(__x)).first;\n        }\n#else\n    iterator insert(const_iterator, value_type&& __x)\n        {return insert(_VSTD::move(__x)).first;}\n#endif\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template <class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        void insert(_InputIterator __first, _InputIterator __last);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    void insert(initializer_list<value_type> __il)\n        {insert(__il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __p) {return __table_.erase(__p);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type erase(const key_type& __k) {return __table_.__erase_unique(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __first, const_iterator __last)\n        {return __table_.erase(__first, __last);}\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT {__table_.clear();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(unordered_set& __u)\n        _NOEXCEPT_(__is_nothrow_swappable<__table>::value)\n        {__table_.swap(__u.__table_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    hasher hash_function() const {return __table_.hash_function();}\n    _LIBCPP_INLINE_VISIBILITY\n    key_equal key_eq() const {return __table_.key_eq();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       find(const key_type& __k)       {return __table_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator find(const key_type& __k) const {return __table_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type count(const key_type& __k) const {return __table_.__count_unique(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, iterator>             equal_range(const key_type& __k)\n        {return __table_.__equal_range_unique(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<const_iterator, const_iterator> equal_range(const key_type& __k) const\n        {return __table_.__equal_range_unique(__k);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_count() const _NOEXCEPT {return __table_.bucket_count();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_bucket_count() const _NOEXCEPT {return __table_.max_bucket_count();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_size(size_type __n) const {return __table_.bucket_size(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket(const key_type& __k) const {return __table_.bucket(__k);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator       begin(size_type __n)        {return __table_.begin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator       end(size_type __n)          {return __table_.end(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator begin(size_type __n) const  {return __table_.cbegin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator end(size_type __n) const    {return __table_.cend(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator cbegin(size_type __n) const {return __table_.cbegin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator cend(size_type __n) const   {return __table_.cend(__n);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    float load_factor() const _NOEXCEPT {return __table_.load_factor();}\n    _LIBCPP_INLINE_VISIBILITY\n    float max_load_factor() const _NOEXCEPT {return __table_.max_load_factor();}\n    _LIBCPP_INLINE_VISIBILITY\n    void max_load_factor(float __mlf) {__table_.max_load_factor(__mlf);}\n    _LIBCPP_INLINE_VISIBILITY\n    void rehash(size_type __n) {__table_.rehash(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    void reserve(size_type __n) {__table_.reserve(__n);}\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\n    bool __dereferenceable(const const_iterator* __i) const\n        {return __table_.__dereferenceable(__i);}\n    bool __decrementable(const const_iterator* __i) const\n        {return __table_.__decrementable(__i);}\n    bool __addable(const const_iterator* __i, ptrdiff_t __n) const\n        {return __table_.__addable(__i, __n);}\n    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const\n        {return __table_.__addable(__i, __n);}\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\n};\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(size_type __n,\n        const hasher& __hf, const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(size_type __n,\n        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        _InputIterator __first, _InputIterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    insert(__first, __last);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        _InputIterator __first, _InputIterator __last, size_type __n,\n        const hasher& __hf, const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__first, __last);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        _InputIterator __first, _InputIterator __last, size_type __n,\n        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__first, __last);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        const allocator_type& __a)\n    : __table_(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        const unordered_set& __u)\n    : __table_(__u.__table_)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__u.bucket_count());\n    insert(__u.begin(), __u.end());\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        const unordered_set& __u, const allocator_type& __a)\n    : __table_(__u.__table_, __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__u.bucket_count());\n    insert(__u.begin(), __u.end());\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        unordered_set&& __u)\n    _NOEXCEPT_(is_nothrow_move_constructible<__table>::value)\n    : __table_(_VSTD::move(__u.__table_))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n    __get_db()->swap(this, &__u);\n#endif\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        unordered_set&& __u, const allocator_type& __a)\n    : __table_(_VSTD::move(__u.__table_), __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__a != __u.get_allocator())\n    {\n        iterator __i = __u.begin();\n        while (__u.size() != 0)\n            __table_.__insert_unique(_VSTD::move(__u.__table_.remove(__i++)->__value_));\n    }\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    else\n        __get_db()->swap(this, &__u);\n#endif\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        initializer_list<value_type> __il)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    insert(__il.begin(), __il.end());\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        initializer_list<value_type> __il, size_type __n, const hasher& __hf,\n        const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__il.begin(), __il.end());\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(\n        initializer_list<value_type> __il, size_type __n, const hasher& __hf,\n        const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__il.begin(), __il.end());\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_set<_Value, _Hash, _Pred, _Alloc>&\nunordered_set<_Value, _Hash, _Pred, _Alloc>::operator=(unordered_set&& __u)\n    _NOEXCEPT_(is_nothrow_move_assignable<__table>::value)\n{\n    __table_ = _VSTD::move(__u.__table_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_set<_Value, _Hash, _Pred, _Alloc>&\nunordered_set<_Value, _Hash, _Pred, _Alloc>::operator=(\n        initializer_list<value_type> __il)\n{\n    __table_.__assign_unique(__il.begin(), __il.end());\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\ninline\nvoid\nunordered_set<_Value, _Hash, _Pred, _Alloc>::insert(_InputIterator __first,\n                                                    _InputIterator __last)\n{\n    for (; __first != __last; ++__first)\n        __table_.__insert_unique(*__first);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n     unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nbool\noperator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n           const unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)\n{\n    if (__x.size() != __y.size())\n        return false;\n    typedef typename unordered_set<_Value, _Hash, _Pred, _Alloc>::const_iterator\n                                                                 const_iterator;\n    for (const_iterator __i = __x.begin(), __ex = __x.end(), __ey = __y.end();\n            __i != __ex; ++__i)\n    {\n        const_iterator __j = __y.find(*__i);\n        if (__j == __ey || !(*__i == *__j))\n            return false;\n    }\n    return true;\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n           const unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)\n{\n    return !(__x == __y);\n}\n\ntemplate <class _Value, class _Hash = hash<_Value>, class _Pred = equal_to<_Value>,\n          class _Alloc = allocator<_Value> >\nclass _LIBCPP_TEMPLATE_VIS unordered_multiset\n{\npublic:\n    // types\n    typedef _Value                                                     key_type;\n    typedef key_type                                                   value_type;\n    typedef _Hash                                                      hasher;\n    typedef _Pred                                                      key_equal;\n    typedef _Alloc                                                     allocator_type;\n    typedef value_type&                                                reference;\n    typedef const value_type&                                          const_reference;\n    static_assert((is_same<value_type, typename allocator_type::value_type>::value),\n                  \"Invalid allocator::value_type\");\n\nprivate:\n    typedef __hash_table<value_type, hasher, key_equal, allocator_type> __table;\n\n    __table __table_;\n\npublic:\n    typedef typename __table::pointer         pointer;\n    typedef typename __table::const_pointer   const_pointer;\n    typedef typename __table::size_type       size_type;\n    typedef typename __table::difference_type difference_type;\n\n    typedef typename __table::const_iterator       iterator;\n    typedef typename __table::const_iterator       const_iterator;\n    typedef typename __table::const_local_iterator local_iterator;\n    typedef typename __table::const_local_iterator const_local_iterator;\n\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset()\n        _NOEXCEPT_(is_nothrow_default_constructible<__table>::value)\n        {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n            __get_db()->__insert_c(this);\n#endif\n        }\n    explicit unordered_multiset(size_type __n, const hasher& __hf = hasher(),\n                                const key_equal& __eql = key_equal());\n    unordered_multiset(size_type __n, const hasher& __hf,\n                       const key_equal& __eql, const allocator_type& __a);\n#if _LIBCPP_STD_VER > 11\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset(size_type __n, const allocator_type& __a)\n        : unordered_multiset(__n, hasher(), key_equal(), __a) {}\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset(size_type __n, const hasher& __hf, const allocator_type& __a)\n        : unordered_multiset(__n, __hf, key_equal(), __a) {}\n#endif\n    template <class _InputIterator>\n        unordered_multiset(_InputIterator __first, _InputIterator __last);\n    template <class _InputIterator>\n        unordered_multiset(_InputIterator __first, _InputIterator __last,\n                      size_type __n, const hasher& __hf = hasher(),\n                      const key_equal& __eql = key_equal());\n    template <class _InputIterator>\n        unordered_multiset(_InputIterator __first, _InputIterator __last,\n                      size_type __n , const hasher& __hf,\n                      const key_equal& __eql, const allocator_type& __a);\n#if _LIBCPP_STD_VER > 11\n    template <class _InputIterator>\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset(_InputIterator __first, _InputIterator __last, \n                       size_type __n, const allocator_type& __a)\n        : unordered_multiset(__first, __last, __n, hasher(), key_equal(), __a) {}\n    template <class _InputIterator>\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset(_InputIterator __first, _InputIterator __last,\n                       size_type __n, const hasher& __hf, const allocator_type& __a)\n        : unordered_multiset(__first, __last, __n, __hf, key_equal(), __a) {}\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    explicit unordered_multiset(const allocator_type& __a);\n    unordered_multiset(const unordered_multiset& __u);\n    unordered_multiset(const unordered_multiset& __u, const allocator_type& __a);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset(unordered_multiset&& __u)\n        _NOEXCEPT_(is_nothrow_move_constructible<__table>::value);\n    unordered_multiset(unordered_multiset&& __u, const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    unordered_multiset(initializer_list<value_type> __il);\n    unordered_multiset(initializer_list<value_type> __il, size_type __n,\n                       const hasher& __hf = hasher(),\n                       const key_equal& __eql = key_equal());\n    unordered_multiset(initializer_list<value_type> __il, size_type __n,\n                       const hasher& __hf, const key_equal& __eql,\n                       const allocator_type& __a);\n#if _LIBCPP_STD_VER > 11\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset(initializer_list<value_type> __il, size_type __n, const allocator_type& __a)\n      : unordered_multiset(__il, __n, hasher(), key_equal(), __a) {}\n    inline _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset(initializer_list<value_type> __il, size_type __n, const hasher& __hf, const allocator_type& __a)\n      : unordered_multiset(__il, __n, __hf, key_equal(), __a) {}\n#endif\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    // ~unordered_multiset() = default;\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset& operator=(const unordered_multiset& __u)\n    {\n        __table_ = __u.__table_;\n        return *this;\n    }\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multiset& operator=(unordered_multiset&& __u)\n        _NOEXCEPT_(is_nothrow_move_assignable<__table>::value);\n#endif\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    unordered_multiset& operator=(initializer_list<value_type> __il);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type get_allocator() const _NOEXCEPT\n        {return allocator_type(__table_.__node_alloc());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool      empty() const _NOEXCEPT {return __table_.size() == 0;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type size() const _NOEXCEPT  {return __table_.size();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_size() const _NOEXCEPT {return __table_.max_size();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       begin() _NOEXCEPT        {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       end() _NOEXCEPT          {return __table_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin()  const _NOEXCEPT {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end()    const _NOEXCEPT {return __table_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cbegin() const _NOEXCEPT {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cend()   const _NOEXCEPT {return __table_.end();}\n\n#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator emplace(_Args&&... __args)\n            {return __table_.__emplace_multi(_VSTD::forward<_Args>(__args)...);}\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator emplace_hint(const_iterator __p, _Args&&... __args)\n            {return __table_.__emplace_hint_multi(__p, _VSTD::forward<_Args>(__args)...);}\n#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const value_type& __x) {return __table_.__insert_multi(__x);}\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(value_type&& __x) {return __table_.__insert_multi(_VSTD::move(__x));}\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __p, const value_type& __x)\n        {return __table_.__insert_multi(__p, __x);}\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __p, value_type&& __x)\n        {return __table_.__insert_multi(__p, _VSTD::move(__x));}\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    template <class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        void insert(_InputIterator __first, _InputIterator __last);\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    void insert(initializer_list<value_type> __il)\n        {insert(__il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __p) {return __table_.erase(__p);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type erase(const key_type& __k) {return __table_.__erase_multi(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __first, const_iterator __last)\n        {return __table_.erase(__first, __last);}\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT {__table_.clear();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(unordered_multiset& __u)\n        _NOEXCEPT_(__is_nothrow_swappable<__table>::value)\n        {__table_.swap(__u.__table_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    hasher hash_function() const {return __table_.hash_function();}\n    _LIBCPP_INLINE_VISIBILITY\n    key_equal key_eq() const {return __table_.key_eq();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       find(const key_type& __k)       {return __table_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator find(const key_type& __k) const {return __table_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type count(const key_type& __k) const {return __table_.__count_multi(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, iterator>             equal_range(const key_type& __k)\n        {return __table_.__equal_range_multi(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<const_iterator, const_iterator> equal_range(const key_type& __k) const\n        {return __table_.__equal_range_multi(__k);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_count() const _NOEXCEPT {return __table_.bucket_count();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_bucket_count() const _NOEXCEPT {return __table_.max_bucket_count();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_size(size_type __n) const {return __table_.bucket_size(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket(const key_type& __k) const {return __table_.bucket(__k);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator       begin(size_type __n)        {return __table_.begin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator       end(size_type __n)          {return __table_.end(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator begin(size_type __n) const  {return __table_.cbegin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator end(size_type __n) const    {return __table_.cend(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator cbegin(size_type __n) const {return __table_.cbegin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator cend(size_type __n) const   {return __table_.cend(__n);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    float load_factor() const _NOEXCEPT {return __table_.load_factor();}\n    _LIBCPP_INLINE_VISIBILITY\n    float max_load_factor() const _NOEXCEPT {return __table_.max_load_factor();}\n    _LIBCPP_INLINE_VISIBILITY\n    void max_load_factor(float __mlf) {__table_.max_load_factor(__mlf);}\n    _LIBCPP_INLINE_VISIBILITY\n    void rehash(size_type __n) {__table_.rehash(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    void reserve(size_type __n) {__table_.reserve(__n);}\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\n    bool __dereferenceable(const const_iterator* __i) const\n        {return __table_.__dereferenceable(__i);}\n    bool __decrementable(const const_iterator* __i) const\n        {return __table_.__decrementable(__i);}\n    bool __addable(const const_iterator* __i, ptrdiff_t __n) const\n        {return __table_.__addable(__i, __n);}\n    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const\n        {return __table_.__addable(__i, __n);}\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\n};\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        size_type __n, const hasher& __hf, const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        size_type __n, const hasher& __hf, const key_equal& __eql,\n        const allocator_type& __a)\n    : __table_(__hf, __eql, __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        _InputIterator __first, _InputIterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    insert(__first, __last);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        _InputIterator __first, _InputIterator __last, size_type __n,\n        const hasher& __hf, const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__first, __last);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        _InputIterator __first, _InputIterator __last, size_type __n,\n        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__first, __last);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        const allocator_type& __a)\n    : __table_(__a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        const unordered_multiset& __u)\n    : __table_(__u.__table_)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__u.bucket_count());\n    insert(__u.begin(), __u.end());\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        const unordered_multiset& __u, const allocator_type& __a)\n    : __table_(__u.__table_, __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__u.bucket_count());\n    insert(__u.begin(), __u.end());\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        unordered_multiset&& __u)\n    _NOEXCEPT_(is_nothrow_move_constructible<__table>::value)\n    : __table_(_VSTD::move(__u.__table_))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n    __get_db()->swap(this, &__u);\n#endif\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        unordered_multiset&& __u, const allocator_type& __a)\n    : __table_(_VSTD::move(__u.__table_), __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__a != __u.get_allocator())\n    {\n        iterator __i = __u.begin();\n        while (__u.size() != 0)\n            __table_.__insert_multi(_VSTD::move(__u.__table_.remove(__i++)->__value_));\n    }\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    else\n        __get_db()->swap(this, &__u);\n#endif\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        initializer_list<value_type> __il)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    insert(__il.begin(), __il.end());\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        initializer_list<value_type> __il, size_type __n, const hasher& __hf,\n        const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__il.begin(), __il.end());\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset(\n        initializer_list<value_type> __il, size_type __n, const hasher& __hf,\n        const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, __a)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__il.begin(), __il.end());\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>&\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::operator=(\n        unordered_multiset&& __u)\n    _NOEXCEPT_(is_nothrow_move_assignable<__table>::value)\n{\n    __table_ = _VSTD::move(__u.__table_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>&\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::operator=(\n        initializer_list<value_type> __il)\n{\n    __table_.__assign_multi(__il.begin(), __il.end());\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\ninline\nvoid\nunordered_multiset<_Value, _Hash, _Pred, _Alloc>::insert(_InputIterator __first,\n                                                         _InputIterator __last)\n{\n    for (; __first != __last; ++__first)\n        __table_.__insert_multi(*__first);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n     unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\nbool\noperator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n           const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n{\n    if (__x.size() != __y.size())\n        return false;\n    typedef typename unordered_multiset<_Value, _Hash, _Pred, _Alloc>::const_iterator\n                                                                 const_iterator;\n    typedef pair<const_iterator, const_iterator> _EqRng;\n    for (const_iterator __i = __x.begin(), __ex = __x.end(); __i != __ex;)\n    {\n        _EqRng __xeq = __x.equal_range(*__i);\n        _EqRng __yeq = __y.equal_range(*__i);\n        if (_VSTD::distance(__xeq.first, __xeq.second) !=\n            _VSTD::distance(__yeq.first, __yeq.second) ||\n                  !_VSTD::is_permutation(__xeq.first, __xeq.second, __yeq.first))\n            return false;\n        __i = __xeq.second;\n    }\n    return true;\n}\n\ntemplate <class _Value, class _Hash, class _Pred, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n           const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n{\n    return !(__x == __y);\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_UNORDERED_SET\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  Document.h\n *  @brief Manage an entire document.\n *\n *  The Document class is built off of Div, but initializes the EMP web framework, if\n *  neeeded, and activates itself.  It also provides quick ways to add and lookup\n *  widgets.\n *\n *  For example, you can use doc.AddButon(...) to add a new button to the document,\n *  where the ... can be any of the mechanisms to build a new button.  This technique\n *  works for any widget type.\n *\n *  You can also look up any widget by name.  For example, if you previously created a\n *  Canvas widget with the HTML id \"my_canvas\", you can look it up later by using\n *  doc.Canvas(\"my_canvas\")\n */\n\n#ifndef EMP_WEB_DOCUMENT_H\n#define EMP_WEB_DOCUMENT_H\n\n#include \"events.h\"\n\n#include \"Button.h\"\n#include \"Canvas.h\"\n#include \"Div.h\"\n#include \"FileInput.h\"\n#include \"Image.h\"\n#include \"Selector.h\"\n#include \"Table.h\"\n#include \"Text.h\"\n#include \"TextArea.h\"\n\n#include \"canvas_utils.h\"\n#include \"color_map.h\"\n\nnamespace emp {\nnamespace web {\n\n  class Document : public web::Div {\n  public:\n    Document(const std::string & doc_id) : web::Div(doc_id) { Activate(); }\n    ~Document() { ; }\n\n    // Retrieve specific types of widgets.\n\n    // Shortcut adders for Widgets\n    template <class... T> web::Button AddButton(T &&... args){\n      web::Button new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n    template <class... T> web::Canvas AddCanvas(T &&... args){\n      web::Canvas new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n    template <class... T> web::FileInput AddFileInput(T &&... args){\n      web::FileInput new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n    template <class... T> web::Image AddImage(T &&... args) {\n      web::Image new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n    template <class... T> web::Selector AddSelector(T &&... args){\n      web::Selector new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n    template <class... T> web::Div AddDiv(T &&... args) {\n      web::Div new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n    template <class... T> web::Table AddTable(T &&... args) {\n      web::Table new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n    template <class... T> web::Text AddText(T &&... args)  {\n      web::Text new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n    template <class... T> web::TextArea AddTextArea(T &&... args)  {\n      web::TextArea new_widget(std::forward<T>(args)...);\n      info->Append(new_widget);\n      return new_widget;\n    }\n\n\n    // Setup a quick way to retrieve old widgets by name.\n    web::Button Button (const std::string & in_id) { return web::Button(Find(in_id)); }\n    web::Canvas Canvas (const std::string & in_id) { return web::Canvas(Find(in_id)); }\n    web::FileInput FileInput (const std::string & in_id) { return web::FileInput(Find(in_id)); }\n    web::Image Image (const std::string & in_id) { return web::Image(Find(in_id)); }\n    web::Selector Selector (const std::string & in_id) { return web::Selector(Find(in_id)); }\n    web::Div Div (const std::string & in_id) { return web::Div(Find(in_id)); }\n    web::Table Table (const std::string & in_id) { return web::Table(Find(in_id)); }\n    web::Text Text (const std::string & in_id) { return web::Text(Find(in_id)); }\n    web::TextArea TextArea (const std::string & in_id) { return web::TextArea(Find(in_id)); }\n\n  };\n\n}\n}\n\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  Text.h\n *  @brief Specs for the Text widget.\n *\n *  A representation of text on a web page.  Text Widgets can be included inside of Divs or\n *  Tables to cordon off a section of text (and will be automatically created when text is\n *  streamed into these other widgets).  The primary benefit of explicitly creating your\n *  own text widget is to control the text style.\n */\n\n#ifndef EMP_WEB_TEXT_H\n#define EMP_WEB_TEXT_H\n\n#include \"../tools/DynamicString.h\"\n\n#include \"Widget.h\"\n\nnamespace emp {\nnamespace web {\n\n  /// A Text widget handles putting text on a web page that can be controlled and modified.\n\n  class Text : public internal::WidgetFacet<Text> {\n    friend class TextInfo;\n  protected:\n\n    class TextInfo : public internal::WidgetInfo {\n      friend Text;\n    protected:\n      DynamicString strings;    ///< All string (and functions returning strings) in Text widget.\n      bool append_ok;           ///< Can this Text widget be extended?\n\n      TextInfo(const std::string & in_id=\"\") : internal::WidgetInfo(in_id), append_ok(true) { ; }\n      TextInfo(const TextInfo &) = delete;               // No copies of INFO allowed\n      TextInfo & operator=(const TextInfo &) = delete;   // No copies of INFO allowed\n      virtual ~TextInfo() { ; }\n\n      std::string GetTypeName() const override { return \"TextInfo\"; }\n\n      bool AppendOK() const override { return append_ok; }\n      void PreventAppend() override { append_ok = false; }\n\n      Widget Append(const std::string & in_text) override;\n      Widget Append(const std::function<std::string()> & in_fun) override;\n\n      // All derived widgets must suply a mechanism for providing associated HTML code.\n      virtual void GetHTML(std::stringstream & HTML) override {\n        HTML.str(\"\");                         // Clear the current text.\n        HTML << \"<span id=\\'\" << id << \"'>\"   // Initial span tag to keep id.\n             << strings                       // Save the current value of all of the strings.\n             << \"</span>\";                    // Close span tag.\n      }\n\n    public:\n      virtual std::string GetType() override { return \"web::TextInfo\"; }\n    };  // End of TextInfo\n\n\n    // Get a properly cast version of indo.\n    TextInfo * Info() { return (TextInfo *) info; }\n    const TextInfo * Info() const { return (TextInfo *) info; }\n\n    Text(TextInfo * in_info) : WidgetFacet(in_info) { ; }\n  public:\n    Text(const std::string & in_id=\"\") : WidgetFacet(in_id) {\n      // When a name is provided, create an associated Widget info.\n      info = new TextInfo(in_id);\n    }\n    Text(const Text & in) : WidgetFacet(in) { ; }\n    Text(const Widget & in) : WidgetFacet(in) { emp_assert(in.IsText()); }\n    ~Text() { ; }\n\n    using INFO_TYPE = TextInfo;\n\n    /// Erase current text.\n    Text & Clear() { Info()->strings.Clear(); return *this; }\n  };\n\n  /// Add new text to this string.\n  Widget Text::TextInfo::Append(const std::string & text) {\n    if (!append_ok) return ForwardAppend(text);  // If text widget cannot append, forward to parent.\n    strings.Append(text);                        // Record the new string being added.\n    if (state == Widget::ACTIVE) ReplaceHTML();  // If node is active, immediately redraw!\n    return web::Text(this);\n  }\n\n  /// Add a function that produces text to this widget.  Every time the widget is re-drawn, the\n  /// function will be re-run to get the latest version of the text.  When a Live() function\n  /// wraps a variable it simply makes sure that this version of Append is called so that the\n  /// value of the variable is kept live.\n  Widget Text::TextInfo::Append(const std::function<std::string()> & fun) {\n    if (!append_ok) return ForwardAppend(fun);   // If text widget cannot append, forward to parent.\n    strings.Append(fun);                         // Record the new function being added.\n    if (state == Widget::ACTIVE) ReplaceHTML();  // If node is active, immediately redraw!\n    return web::Text(this);\n  }\n\n}\n}\n\n#endif\n","// -*- C++ -*-\n//===--------------------------- stdexcept --------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_STDEXCEPT\n#define _LIBCPP_STDEXCEPT\n\n/*\n    stdexcept synopsis\n\nnamespace std\n{\n\nclass logic_error;\n    class domain_error;\n    class invalid_argument;\n    class length_error;\n    class out_of_range;\nclass runtime_error;\n    class range_error;\n    class overflow_error;\n    class underflow_error;\n\nfor each class xxx_error:\n\nclass xxx_error : public exception // at least indirectly\n{\npublic:\n    explicit xxx_error(const string& what_arg);\n    explicit xxx_error(const char*   what_arg);\n\n    virtual const char* what() const noexcept // returns what_arg\n};\n\n}  // std\n\n*/\n\n#include <__config>\n#include <exception>\n#include <iosfwd>  // for string forward decl\n#ifdef _LIBCPP_NO_EXCEPTIONS\n#include <cstdlib>\n#endif\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\nclass _LIBCPP_HIDDEN __libcpp_refstring\n{\n    const char* __imp_;\n\n    bool __uses_refcount() const;\npublic:\n    explicit __libcpp_refstring(const char* msg);\n    __libcpp_refstring(const __libcpp_refstring& s) _NOEXCEPT;\n    __libcpp_refstring& operator=(const __libcpp_refstring& s) _NOEXCEPT;\n    ~__libcpp_refstring();\n\n    const char* c_str() const _NOEXCEPT {return __imp_;}\n};\n\n_LIBCPP_END_NAMESPACE_STD\n\nnamespace std  // purposefully not using versioning namespace\n{\n\nclass _LIBCPP_EXCEPTION_ABI logic_error\n    : public exception\n{\nprivate:\n    _VSTD::__libcpp_refstring __imp_;\npublic:\n    explicit logic_error(const string&);\n    explicit logic_error(const char*);\n\n    logic_error(const logic_error&) _NOEXCEPT;\n    logic_error& operator=(const logic_error&) _NOEXCEPT;\n\n    virtual ~logic_error() _NOEXCEPT;\n\n    virtual const char* what() const _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI runtime_error\n    : public exception\n{\nprivate:\n    _VSTD::__libcpp_refstring __imp_;\npublic:\n    explicit runtime_error(const string&);\n    explicit runtime_error(const char*);\n\n    runtime_error(const runtime_error&) _NOEXCEPT;\n    runtime_error& operator=(const runtime_error&) _NOEXCEPT;\n\n    virtual ~runtime_error() _NOEXCEPT;\n\n    virtual const char* what() const _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI domain_error\n    : public logic_error\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit domain_error(const string& __s) : logic_error(__s) {}\n    _LIBCPP_INLINE_VISIBILITY explicit domain_error(const char* __s)   : logic_error(__s) {}\n\n    virtual ~domain_error() _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI invalid_argument\n    : public logic_error\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit invalid_argument(const string& __s) : logic_error(__s) {}\n    _LIBCPP_INLINE_VISIBILITY explicit invalid_argument(const char* __s)   : logic_error(__s) {}\n\n    virtual ~invalid_argument() _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI length_error\n    : public logic_error\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit length_error(const string& __s) : logic_error(__s) {}\n    _LIBCPP_INLINE_VISIBILITY explicit length_error(const char* __s)   : logic_error(__s) {}\n\n    virtual ~length_error() _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI out_of_range\n    : public logic_error\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit out_of_range(const string& __s) : logic_error(__s) {}\n    _LIBCPP_INLINE_VISIBILITY explicit out_of_range(const char* __s)   : logic_error(__s) {}\n\n    virtual ~out_of_range() _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI range_error\n    : public runtime_error\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit range_error(const string& __s) : runtime_error(__s) {}\n    _LIBCPP_INLINE_VISIBILITY explicit range_error(const char* __s)   : runtime_error(__s) {}\n\n    virtual ~range_error() _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI overflow_error\n    : public runtime_error\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit overflow_error(const string& __s) : runtime_error(__s) {}\n    _LIBCPP_INLINE_VISIBILITY explicit overflow_error(const char* __s)   : runtime_error(__s) {}\n\n    virtual ~overflow_error() _NOEXCEPT;\n};\n\nclass _LIBCPP_EXCEPTION_ABI underflow_error\n    : public runtime_error\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY explicit underflow_error(const string& __s) : runtime_error(__s) {}\n    _LIBCPP_INLINE_VISIBILITY explicit underflow_error(const char* __s)   : runtime_error(__s) {}\n\n    virtual ~underflow_error() _NOEXCEPT;\n};\n\n}  // std\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\n// in the dylib\n_LIBCPP_NORETURN _LIBCPP_FUNC_VIS void __throw_runtime_error(const char*);\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_logic_error(const char*__msg)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw logic_error(__msg);\n#else\n    ((void)__msg);\n\t  _VSTD::abort();\n#endif\n}\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_domain_error(const char*__msg)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw domain_error(__msg);\n#else\n    ((void)__msg);\n\t  _VSTD::abort();\n#endif\n}\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_invalid_argument(const char*__msg)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw invalid_argument(__msg);\n#else\n    ((void)__msg);\n\t  _VSTD::abort();\n#endif\n}\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_length_error(const char*__msg)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw length_error(__msg);\n#else\n    ((void)__msg);\n\t  _VSTD::abort();\n#endif\n}\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_out_of_range(const char*__msg)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw out_of_range(__msg);\n#else\n    ((void)__msg);\n\t  _VSTD::abort();\n#endif\n}\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_range_error(const char*__msg)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw range_error(__msg);\n#else\n    ((void)__msg);\n\t  _VSTD::abort();\n#endif\n}\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_overflow_error(const char*__msg)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw overflow_error(__msg);\n#else\n    ((void)__msg);\n    _VSTD::abort();\n#endif\n}\n\n_LIBCPP_NORETURN inline _LIBCPP_ALWAYS_INLINE\nvoid __throw_underflow_error(const char*__msg)\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    throw underflow_error(__msg);\n#else\n    ((void)__msg);\n    _VSTD::abort();\n#endif\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_STDEXCEPT\n","// -*- C++ -*-\n//===-------------------------- __string ----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is distributed under the University of Illinois Open Source\n// License. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP___STRING\n#define _LIBCPP___STRING\n\n/*\n    string synopsis\n\nnamespace std\n{\n\ntemplate <class charT>\nstruct char_traits\n{\n    typedef charT     char_type;\n    typedef ...       int_type;\n    typedef streamoff off_type;\n    typedef streampos pos_type;\n    typedef mbstate_t state_type;\n\n    static constexpr void assign(char_type& c1, const char_type& c2) noexcept;\n    static constexpr bool eq(char_type c1, char_type c2) noexcept;\n    static constexpr bool lt(char_type c1, char_type c2) noexcept;\n\n    static constexpr int    compare(const char_type* s1, const char_type* s2, size_t n);\n    static constexpr size_t length(const char_type* s);\n    static constexpr const char_type* \n                            find(const char_type* s, size_t n, const char_type& a);\n    static char_type*       move(char_type* s1, const char_type* s2, size_t n);\n    static char_type*       copy(char_type* s1, const char_type* s2, size_t n);\n    static char_type*       assign(char_type* s, size_t n, char_type a);\n\n    static constexpr int_type  not_eof(int_type c) noexcept;\n    static constexpr char_type to_char_type(int_type c) noexcept;\n    static constexpr int_type  to_int_type(char_type c) noexcept;\n    static constexpr bool      eq_int_type(int_type c1, int_type c2) noexcept;\n    static constexpr int_type  eof() noexcept;\n};\n\ntemplate <> struct char_traits<char>;\ntemplate <> struct char_traits<wchar_t>;\n\n}  // std\n\n*/\n\n#include <__config>\n#include <algorithm>  // for search and min\n#include <cstdio>     // For EOF.\n#include <memory>     // for __murmur2_or_cityhash\n\n#include <__undef_min_max>\n\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\n// char_traits\n\ntemplate <class _CharT>\nstruct _LIBCPP_TEMPLATE_VIS char_traits\n{\n    typedef _CharT    char_type;\n    typedef int       int_type;\n    typedef streamoff off_type;\n    typedef streampos pos_type;\n    typedef mbstate_t state_type;\n\n    static inline void _LIBCPP_CONSTEXPR_AFTER_CXX14\n        assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}\n    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT\n        {return __c1 < __c2;}\n\n    static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    int compare(const char_type* __s1, const char_type* __s2, size_t __n);\n    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    size_t length(const char_type* __s);\n    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    const char_type* find(const char_type* __s, size_t __n, const char_type& __a);\n    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n);\n    _LIBCPP_INLINE_VISIBILITY\n    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n);\n    _LIBCPP_INLINE_VISIBILITY\n    static char_type*       assign(char_type* __s, size_t __n, char_type __a);\n\n    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT\n        {return eq_int_type(__c, eof()) ? ~eof() : __c;}\n    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT\n        {return char_type(__c);}\n    static inline _LIBCPP_CONSTEXPR int_type  to_int_type(char_type __c) _NOEXCEPT\n        {return int_type(__c);}\n    static inline _LIBCPP_CONSTEXPR bool      eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR int_type  eof() _NOEXCEPT\n        {return int_type(EOF);}\n};\n\ntemplate <class _CharT>\n_LIBCPP_CONSTEXPR_AFTER_CXX14 int\nchar_traits<_CharT>::compare(const char_type* __s1, const char_type* __s2, size_t __n)\n{\n    for (; __n; --__n, ++__s1, ++__s2)\n    {\n        if (lt(*__s1, *__s2))\n            return -1;\n        if (lt(*__s2, *__s1))\n            return 1;\n    }\n    return 0;\n}\n\ntemplate <class _CharT>\ninline\n_LIBCPP_CONSTEXPR_AFTER_CXX14 size_t\nchar_traits<_CharT>::length(const char_type* __s)\n{\n    size_t __len = 0;\n    for (; !eq(*__s, char_type(0)); ++__s)\n        ++__len;\n    return __len;\n}\n\ntemplate <class _CharT>\ninline\n_LIBCPP_CONSTEXPR_AFTER_CXX14 const _CharT*\nchar_traits<_CharT>::find(const char_type* __s, size_t __n, const char_type& __a)\n{\n    for (; __n; --__n)\n    {\n        if (eq(*__s, __a))\n            return __s;\n        ++__s;\n    }\n    return 0;\n}\n\ntemplate <class _CharT>\n_CharT*\nchar_traits<_CharT>::move(char_type* __s1, const char_type* __s2, size_t __n)\n{\n    char_type* __r = __s1;\n    if (__s1 < __s2)\n    {\n        for (; __n; --__n, ++__s1, ++__s2)\n            assign(*__s1, *__s2);\n    }\n    else if (__s2 < __s1)\n    {\n        __s1 += __n;\n        __s2 += __n;\n        for (; __n; --__n)\n            assign(*--__s1, *--__s2);\n    }\n    return __r;\n}\n\ntemplate <class _CharT>\ninline\n_CharT*\nchar_traits<_CharT>::copy(char_type* __s1, const char_type* __s2, size_t __n)\n{\n    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");\n    char_type* __r = __s1;\n    for (; __n; --__n, ++__s1, ++__s2)\n        assign(*__s1, *__s2);\n    return __r;\n}\n\ntemplate <class _CharT>\ninline\n_CharT*\nchar_traits<_CharT>::assign(char_type* __s, size_t __n, char_type __a)\n{\n    char_type* __r = __s;\n    for (; __n; --__n, ++__s)\n        assign(*__s, __a);\n    return __r;\n}\n\n// char_traits<char>\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS char_traits<char>\n{\n    typedef char      char_type;\n    typedef int       int_type;\n    typedef streamoff off_type;\n    typedef streampos pos_type;\n    typedef mbstate_t state_type;\n\n    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14\n    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}\n    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT\n            {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT\n        {return (unsigned char)__c1 < (unsigned char)__c2;}\n\n    static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    int compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;\n    static inline size_t _LIBCPP_CONSTEXPR_AFTER_CXX14\n    length(const char_type* __s)  _NOEXCEPT {return __builtin_strlen(__s);}\n    static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;\n    static inline char_type* move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n        {return __n == 0 ? __s1 : (char_type*) memmove(__s1, __s2, __n);}\n    static inline char_type* copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n        {\n            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");\n            return __n == 0 ? __s1 : (char_type*)memcpy(__s1, __s2, __n);\n        }\n    static inline char_type* assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT\n        {return __n == 0 ? __s : (char_type*)memset(__s, to_int_type(__a), __n);}\n\n    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT\n        {return eq_int_type(__c, eof()) ? ~eof() : __c;}\n    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT\n        {return char_type(__c);}\n    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT\n        {return int_type((unsigned char)__c);}\n    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR int_type  eof() _NOEXCEPT\n        {return int_type(EOF);}\n};\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nint\nchar_traits<char>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n{\n    if (__n == 0)\n        return 0;\n#if __has_feature(cxx_constexpr_string_builtins)\n    return __builtin_memcmp(__s1, __s2, __n);\n#elif _LIBCPP_STD_VER <= 14\n    return memcmp(__s1, __s2, __n);\n#else\n    for (; __n; --__n, ++__s1, ++__s2)\n    {\n        if (lt(*__s1, *__s2))\n            return -1;\n        if (lt(*__s2, *__s1))\n            return 1;\n    }\n    return 0;\n#endif\n}\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nconst char*\nchar_traits<char>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT\n{\n    if (__n == 0)\n        return NULL;\n#if __has_feature(cxx_constexpr_string_builtins)\n    return __builtin_char_memchr(__s, to_int_type(__a), __n);\n#elif _LIBCPP_STD_VER <= 14\n    return (const char_type*) memchr(__s, to_int_type(__a), __n);\n#else\n    for (; __n; --__n)\n    {\n        if (eq(*__s, __a))\n            return __s;\n        ++__s;\n    }\n    return NULL;\n#endif\n}\n\n\n// char_traits<wchar_t>\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS char_traits<wchar_t>\n{\n    typedef wchar_t   char_type;\n    typedef wint_t    int_type;\n    typedef streamoff off_type;\n    typedef streampos pos_type;\n    typedef mbstate_t state_type;\n\n    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14\n    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}\n    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT\n        {return __c1 < __c2;}\n\n    static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    int compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;\n    static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    size_t length(const char_type* __s) _NOEXCEPT;\n    static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;\n    static inline char_type* move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n        {return __n == 0 ? __s1 : (char_type*)wmemmove(__s1, __s2, __n);}\n    static inline char_type* copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n        {\n            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");\n            return __n == 0 ? __s1 : (char_type*)wmemcpy(__s1, __s2, __n);\n        }\n    static inline char_type* assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT\n        {return __n == 0 ? __s : (char_type*)wmemset(__s, __a, __n);}\n\n    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT\n        {return eq_int_type(__c, eof()) ? ~eof() : __c;}\n    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT\n        {return char_type(__c);}\n    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT\n        {return int_type(__c);}\n    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT\n        {return int_type(WEOF);}\n};\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nint\nchar_traits<wchar_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n{\n    if (__n == 0)\n        return 0;\n#if __has_feature(cxx_constexpr_string_builtins)\n    return __builtin_wmemcmp(__s1, __s2, __n);\n#elif _LIBCPP_STD_VER <= 14\n    return wmemcmp(__s1, __s2, __n);\n#else\n    for (; __n; --__n, ++__s1, ++__s2)\n    {\n        if (lt(*__s1, *__s2))\n            return -1;\n        if (lt(*__s2, *__s1))\n            return 1;\n    }\n    return 0;\n#endif\n}\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nsize_t\nchar_traits<wchar_t>::length(const char_type* __s) _NOEXCEPT\n{\n#if __has_feature(cxx_constexpr_string_builtins)\n    return __builtin_wcslen(__s);\n#elif _LIBCPP_STD_VER <= 14\n    return wcslen(__s);\n#else\n    size_t __len = 0;\n    for (; !eq(*__s, char_type(0)); ++__s)\n        ++__len;\n    return __len;\n#endif\n}\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nconst wchar_t*\nchar_traits<wchar_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT\n{\n    if (__n == 0)\n        return NULL;\n#if __has_feature(cxx_constexpr_string_builtins)\n        return __builtin_wmemchr(__s, __a, __n);\n#elif _LIBCPP_STD_VER <= 14\n    return wmemchr(__s, __a, __n);\n#else\n    for (; __n; --__n)\n    {\n        if (eq(*__s, __a))\n            return __s;\n        ++__s;\n    }\n    return NULL;\n#endif\n}\n\n\n#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS char_traits<char16_t>\n{\n    typedef char16_t       char_type;\n    typedef uint_least16_t int_type;\n    typedef streamoff      off_type;\n    typedef u16streampos   pos_type;\n    typedef mbstate_t      state_type;\n\n    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14\n    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}\n    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT\n        {return __c1 < __c2;}\n\n    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    int              compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    size_t           length(const char_type* __s) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    static char_type*       assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT;\n\n    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT\n        {return eq_int_type(__c, eof()) ? ~eof() : __c;}\n    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT\n        {return char_type(__c);}\n    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT\n        {return int_type(__c);}\n    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT\n        {return int_type(0xFFFF);}\n};\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nint\nchar_traits<char16_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n{\n    for (; __n; --__n, ++__s1, ++__s2)\n    {\n        if (lt(*__s1, *__s2))\n            return -1;\n        if (lt(*__s2, *__s1))\n            return 1;\n    }\n    return 0;\n}\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nsize_t\nchar_traits<char16_t>::length(const char_type* __s) _NOEXCEPT\n{\n    size_t __len = 0;\n    for (; !eq(*__s, char_type(0)); ++__s)\n        ++__len;\n    return __len;\n}\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nconst char16_t*\nchar_traits<char16_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT\n{\n    for (; __n; --__n)\n    {\n        if (eq(*__s, __a))\n            return __s;\n        ++__s;\n    }\n    return 0;\n}\n\ninline\nchar16_t*\nchar_traits<char16_t>::move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n{\n    char_type* __r = __s1;\n    if (__s1 < __s2)\n    {\n        for (; __n; --__n, ++__s1, ++__s2)\n            assign(*__s1, *__s2);\n    }\n    else if (__s2 < __s1)\n    {\n        __s1 += __n;\n        __s2 += __n;\n        for (; __n; --__n)\n            assign(*--__s1, *--__s2);\n    }\n    return __r;\n}\n\ninline\nchar16_t*\nchar_traits<char16_t>::copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");\n    char_type* __r = __s1;\n    for (; __n; --__n, ++__s1, ++__s2)\n        assign(*__s1, *__s2);\n    return __r;\n}\n\ninline\nchar16_t*\nchar_traits<char16_t>::assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT\n{\n    char_type* __r = __s;\n    for (; __n; --__n, ++__s)\n        assign(*__s, __a);\n    return __r;\n}\n\ntemplate <>\nstruct _LIBCPP_TEMPLATE_VIS char_traits<char32_t>\n{\n    typedef char32_t       char_type;\n    typedef uint_least32_t int_type;\n    typedef streamoff      off_type;\n    typedef u32streampos   pos_type;\n    typedef mbstate_t      state_type;\n\n    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14\n    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}\n    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT\n        {return __c1 < __c2;}\n\n    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    int              compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    size_t           length(const char_type* __s) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14\n    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;\n    _LIBCPP_INLINE_VISIBILITY\n    static char_type*       assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT;\n\n    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT\n        {return eq_int_type(__c, eof()) ? ~eof() : __c;}\n    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT\n        {return char_type(__c);}\n    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT\n        {return int_type(__c);}\n    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT\n        {return __c1 == __c2;}\n    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT\n        {return int_type(0xFFFFFFFF);}\n};\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nint\nchar_traits<char32_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n{\n    for (; __n; --__n, ++__s1, ++__s2)\n    {\n        if (lt(*__s1, *__s2))\n            return -1;\n        if (lt(*__s2, *__s1))\n            return 1;\n    }\n    return 0;\n}\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nsize_t\nchar_traits<char32_t>::length(const char_type* __s) _NOEXCEPT\n{\n    size_t __len = 0;\n    for (; !eq(*__s, char_type(0)); ++__s)\n        ++__len;\n    return __len;\n}\n\ninline _LIBCPP_CONSTEXPR_AFTER_CXX14\nconst char32_t*\nchar_traits<char32_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT\n{\n    for (; __n; --__n)\n    {\n        if (eq(*__s, __a))\n            return __s;\n        ++__s;\n    }\n    return 0;\n}\n\ninline\nchar32_t*\nchar_traits<char32_t>::move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n{\n    char_type* __r = __s1;\n    if (__s1 < __s2)\n    {\n        for (; __n; --__n, ++__s1, ++__s2)\n            assign(*__s1, *__s2);\n    }\n    else if (__s2 < __s1)\n    {\n        __s1 += __n;\n        __s2 += __n;\n        for (; __n; --__n)\n            assign(*--__s1, *--__s2);\n    }\n    return __r;\n}\n\ninline\nchar32_t*\nchar_traits<char32_t>::copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT\n{\n    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");\n    char_type* __r = __s1;\n    for (; __n; --__n, ++__s1, ++__s2)\n        assign(*__s1, *__s2);\n    return __r;\n}\n\ninline\nchar32_t*\nchar_traits<char32_t>::assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT\n{\n    char_type* __r = __s;\n    for (; __n; --__n, ++__s)\n        assign(*__s, __a);\n    return __r;\n}\n\n#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS\n\n// helper fns for basic_string and string_view\n\n// __str_find\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_find(const _CharT *__p, _SizeT __sz, \n             _CharT __c, _SizeT __pos) _NOEXCEPT\n{\n    if (__pos >= __sz)\n        return __npos;\n    const _CharT* __r = _Traits::find(__p + __pos, __sz - __pos, __c);\n    if (__r == 0)\n        return __npos;\n    return static_cast<_SizeT>(__r - __p);\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_CONSTEXPR_AFTER_CXX11 const _CharT *\n__search_substring(const _CharT *__first1, const _CharT *__last1,\n                   const _CharT *__first2, const _CharT *__last2) {\n  // Take advantage of knowing source and pattern lengths.\n  // Stop short when source is smaller than pattern.\n  const ptrdiff_t __len2 = __last2 - __first2;\n  if (__len2 == 0)\n    return __first1;\n\n  ptrdiff_t __len1 = __last1 - __first1;\n  if (__len1 < __len2)\n    return __last1;\n\n  // First element of __first2 is loop invariant.\n  _CharT __f2 = *__first2;\n  while (true) {\n    __len1 = __last1 - __first1;\n    // Check whether __first1 still has at least __len2 bytes.\n    if (__len1 < __len2)\n      return __last1;\n\n    // Find __f2 the first byte matching in __first1.\n    __first1 = _Traits::find(__first1, __len1 - __len2 + 1, __f2);\n    if (__first1 == 0)\n      return __last1;\n\n    // It is faster to compare from the first byte of __first1 even if we\n    // already know that it matches the first byte of __first2: this is because\n    // __first2 is most likely aligned, as it is user's \"pattern\" string, and\n    // __first1 + 1 is most likely not aligned, as the match is in the middle of\n    // the string.\n    if (_Traits::compare(__first1, __first2, __len2) == 0)\n      return __first1;\n\n    ++__first1;\n  }\n}\n\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_find(const _CharT *__p, _SizeT __sz, \n       const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT\n{\n    if (__pos > __sz)\n        return __npos;\n\n    if (__n == 0) // There is nothing to search, just return __pos.\n        return __pos;\n\n    const _CharT *__r = __search_substring<_CharT, _Traits>(\n        __p + __pos, __p + __sz, __s, __s + __n);\n\n    if (__r == __p + __sz)\n        return __npos;\n    return static_cast<_SizeT>(__r - __p);\n}\n\n\n// __str_rfind\n\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_rfind(const _CharT *__p, _SizeT __sz, \n              _CharT __c, _SizeT __pos) _NOEXCEPT\n{\n    if (__sz < 1)\n        return __npos;\n    if (__pos < __sz)\n        ++__pos;\n    else\n        __pos = __sz;\n    for (const _CharT* __ps = __p + __pos; __ps != __p;)\n    {\n        if (_Traits::eq(*--__ps, __c))\n            return static_cast<_SizeT>(__ps - __p);\n    }\n    return __npos;\n}\n\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_rfind(const _CharT *__p, _SizeT __sz, \n        const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT\n{\n    __pos = _VSTD::min(__pos, __sz);\n    if (__n < __sz - __pos)\n        __pos += __n;\n    else\n        __pos = __sz;\n    const _CharT* __r = _VSTD::__find_end(\n                  __p, __p + __pos, __s, __s + __n, _Traits::eq, \n                        random_access_iterator_tag(), random_access_iterator_tag());\n    if (__n > 0 && __r == __p + __pos)\n        return __npos;\n    return static_cast<_SizeT>(__r - __p);\n}\n\n// __str_find_first_of\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_find_first_of(const _CharT *__p, _SizeT __sz,\n                const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT\n{\n    if (__pos >= __sz || __n == 0)\n        return __npos;\n    const _CharT* __r = _VSTD::__find_first_of_ce\n        (__p + __pos, __p + __sz, __s, __s + __n, _Traits::eq );\n    if (__r == __p + __sz)\n        return __npos;\n    return static_cast<_SizeT>(__r - __p);\n}\n\n\n// __str_find_last_of\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_find_last_of(const _CharT *__p, _SizeT __sz,\n               const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT\n    {\n    if (__n != 0)\n    {\n        if (__pos < __sz)\n            ++__pos;\n        else\n            __pos = __sz;\n        for (const _CharT* __ps = __p + __pos; __ps != __p;)\n        {\n            const _CharT* __r = _Traits::find(__s, __n, *--__ps);\n            if (__r)\n                return static_cast<_SizeT>(__ps - __p);\n        }\n    }\n    return __npos;\n}\n\n\n// __str_find_first_not_of\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_find_first_not_of(const _CharT *__p, _SizeT __sz,\n                    const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT\n{\n    if (__pos < __sz)\n    {\n        const _CharT* __pe = __p + __sz;\n        for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)\n            if (_Traits::find(__s, __n, *__ps) == 0)\n                return static_cast<_SizeT>(__ps - __p);\n    }\n    return __npos;\n}\n\n\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_find_first_not_of(const _CharT *__p, _SizeT __sz,\n                          _CharT __c, _SizeT __pos) _NOEXCEPT\n{\n    if (__pos < __sz)\n    {\n        const _CharT* __pe = __p + __sz;\n        for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)\n            if (!_Traits::eq(*__ps, __c))\n                return static_cast<_SizeT>(__ps - __p);\n    }\n    return __npos;\n}\n\n\n// __str_find_last_not_of\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_find_last_not_of(const _CharT *__p, _SizeT __sz,\n                   const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT\n{\n    if (__pos < __sz)\n        ++__pos;\n    else\n        __pos = __sz;\n    for (const _CharT* __ps = __p + __pos; __ps != __p;)\n        if (_Traits::find(__s, __n, *--__ps) == 0)\n            return static_cast<_SizeT>(__ps - __p);\n    return __npos;\n}\n\n\ntemplate<class _CharT, class _SizeT, class _Traits, _SizeT __npos>\ninline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY\n__str_find_last_not_of(const _CharT *__p, _SizeT __sz,\n                         _CharT __c, _SizeT __pos) _NOEXCEPT\n{\n    if (__pos < __sz)\n        ++__pos;\n    else\n        __pos = __sz;\n    for (const _CharT* __ps = __p + __pos; __ps != __p;)\n        if (!_Traits::eq(*--__ps, __c))\n            return static_cast<_SizeT>(__ps - __p);\n    return __npos;\n}\n\ntemplate<class _Ptr>\ninline _LIBCPP_INLINE_VISIBILITY\nsize_t __do_string_hash(_Ptr __p, _Ptr __e)\n{\n    typedef typename iterator_traits<_Ptr>::value_type value_type;\n    return __murmur2_or_cityhash<size_t>()(__p, (__e-__p)*sizeof(value_type));\n}\n\ntemplate <class _CharT, class _Iter, class _Traits=char_traits<_CharT> >\nstruct __quoted_output_proxy\n{\n    _Iter  __first;\n    _Iter  __last;\n    _CharT  __delim;\n    _CharT  __escape;\n\n    __quoted_output_proxy(_Iter __f, _Iter __l, _CharT __d, _CharT __e)\n    : __first(__f), __last(__l), __delim(__d), __escape(__e) {}\n    //  This would be a nice place for a string_ref \n};\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP___STRING\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  WidgetExtras.h\n *  @brief A collection of extra details about HTML Widgets (attributes, style, listerns)\n */\n\n#ifndef EMP_WEB_WIDGET_EXTRA_H\n#define EMP_WEB_WIDGET_EXTRA_H\n\n#include \"Attributes.h\"\n#include \"init.h\"\n#include \"Listeners.h\"\n#include \"Style.h\"\n\nnamespace emp {\nnamespace web {\n\n  struct WidgetExtras {\n    Style style;       ///< CSS Style\n    Attributes attr;   ///< HTML Attributes about a cell.\n    Listeners listen;  ///< Listen for web events\n\n    template <typename SET_TYPE>\n    void SetStyle(const std::string & s, SET_TYPE v) { style.Set(s, emp::to_string(v)); }\n    bool HasStyle(const std::string & setting) const { return style.Has(setting); }\n    const std::string & GetStyle(const std::string & setting) const { return style.Get(setting); }\n    void RemoveStyle(const std::string & setting) { style.Remove(setting); }\n\n    template <typename SET_TYPE>\n    void SetAttr(const std::string & s, SET_TYPE v) { attr.Set(s, emp::to_string(v)); }\n    bool HasAttr(const std::string & setting) const { return attr.Has(setting); }\n    const std::string & GetAttr(const std::string & setting) const { return attr.Get(setting); }\n    void RemoveAttr(const std::string & setting) { attr.Remove(setting); }\n\n    /// Apply all HTML details associated with this widget.\n    void Apply(const std::string & name) {\n      style.Apply(name);\n      attr.Apply(name);\n      listen.Apply(name);\n    }\n\n    /// Clear all of style, attributes, and listeners.\n    void Clear() {\n      style.Clear();\n      attr.Clear();\n      listen.Clear();\n    }\n\n    /// Have any details been set?\n    operator bool() const { return style || attr || listen; } // Return true if any extras are set.\n  };\n\n}\n}\n\n#endif\n","// -*- C++ -*-\n//===-------------------------- iterator ----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_ITERATOR\n#define _LIBCPP_ITERATOR\n\n/*\n    iterator synopsis\n\nnamespace std\n{\n\ntemplate<class Iterator>\nstruct iterator_traits\n{\n    typedef typename Iterator::difference_type difference_type;\n    typedef typename Iterator::value_type value_type;\n    typedef typename Iterator::pointer pointer;\n    typedef typename Iterator::reference reference;\n    typedef typename Iterator::iterator_category iterator_category;\n};\n\ntemplate<class T>\nstruct iterator_traits<T*>\n{\n    typedef ptrdiff_t difference_type;\n    typedef T value_type;\n    typedef T* pointer;\n    typedef T& reference;\n    typedef random_access_iterator_tag iterator_category;\n};\n\ntemplate<class T>\nstruct iterator_traits<const T*>\n{\n    typedef ptrdiff_t difference_type;\n    typedef T value_type;\n    typedef const T* pointer;\n    typedef const T& reference;\n    typedef random_access_iterator_tag iterator_category;\n};\n\ntemplate<class Category, class T, class Distance = ptrdiff_t,\n         class Pointer = T*, class Reference = T&>\nstruct iterator\n{\n    typedef T         value_type;\n    typedef Distance  difference_type;\n    typedef Pointer   pointer;\n    typedef Reference reference;\n    typedef Category  iterator_category;\n};\n\nstruct input_iterator_tag  {};\nstruct output_iterator_tag {};\nstruct forward_iterator_tag       : public input_iterator_tag         {};\nstruct bidirectional_iterator_tag : public forward_iterator_tag       {};\nstruct random_access_iterator_tag : public bidirectional_iterator_tag {};\n\n// extension: second argument not conforming to C++03\ntemplate <class InputIterator>\nvoid advance(InputIterator& i,\n             typename iterator_traits<InputIterator>::difference_type n);\n\ntemplate <class InputIterator>\ntypename iterator_traits<InputIterator>::difference_type\ndistance(InputIterator first, InputIterator last);\n\ntemplate <class Iterator>\nclass reverse_iterator\n    : public iterator<typename iterator_traits<Iterator>::iterator_category,\n                      typename iterator_traits<Iterator>::value_type,\n                      typename iterator_traits<Iterator>::difference_type,\n                      typename iterator_traits<Iterator>::pointer,\n                      typename iterator_traits<Iterator>::reference>\n{\nprotected:\n    Iterator current;\npublic:\n    typedef Iterator                                            iterator_type;\n    typedef typename iterator_traits<Iterator>::difference_type difference_type;\n    typedef typename iterator_traits<Iterator>::reference       reference;\n    typedef typename iterator_traits<Iterator>::pointer         pointer;\n\n    constexpr reverse_iterator();\n    constexpr explicit reverse_iterator(Iterator x);\n    template <class U> constexpr reverse_iterator(const reverse_iterator<U>& u);\n    template <class U> constexpr reverse_iterator& operator=(const reverse_iterator<U>& u);\n    constexpr Iterator base() const;\n    constexpr reference operator*() const;\n    constexpr pointer   operator->() const;\n    constexpr reverse_iterator& operator++();\n    constexpr reverse_iterator  operator++(int);\n    constexpr reverse_iterator& operator--();\n    constexpr reverse_iterator  operator--(int);\n    constexpr reverse_iterator  operator+ (difference_type n) const;\n    constexpr reverse_iterator& operator+=(difference_type n);\n    constexpr reverse_iterator  operator- (difference_type n) const;\n    constexpr reverse_iterator& operator-=(difference_type n);\n    constexpr reference         operator[](difference_type n) const;\n};\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool                          // constexpr in C++17\noperator==(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool                          // constexpr in C++17\noperator<(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool                          // constexpr in C++17\noperator!=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool                          // constexpr in C++17\noperator>(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool                          // constexpr in C++17\noperator>=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool                          // constexpr in C++17\noperator<=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr auto\noperator-(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y)\n-> decltype(__y.base() - __x.base());   // constexpr in C++17\n\ntemplate <class Iterator>\nconstexpr reverse_iterator<Iterator>\noperator+(typename reverse_iterator<Iterator>::difference_type n, \n          const reverse_iterator<Iterator>& x);   // constexpr in C++17\n\ntemplate <class Iterator>\nconstexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i); // C++14, constexpr in C++17\n\ntemplate <class Container>\nclass back_insert_iterator\n{\nprotected:\n    Container* container;\npublic:\n    typedef Container                   container_type;\n    typedef void                        value_type;\n    typedef void                        difference_type;\n    typedef void                        reference;\n    typedef void                        pointer;\n\n    explicit back_insert_iterator(Container& x);\n    back_insert_iterator& operator=(const typename Container::value_type& value);\n    back_insert_iterator& operator*();\n    back_insert_iterator& operator++();\n    back_insert_iterator  operator++(int);\n};\n\ntemplate <class Container> back_insert_iterator<Container> back_inserter(Container& x);\n\ntemplate <class Container>\nclass front_insert_iterator\n{\nprotected:\n    Container* container;\npublic:\n    typedef Container                    container_type;\n    typedef void                         value_type;\n    typedef void                         difference_type;\n    typedef void                         reference;\n    typedef void                         pointer;\n\n    explicit front_insert_iterator(Container& x);\n    front_insert_iterator& operator=(const typename Container::value_type& value);\n    front_insert_iterator& operator*();\n    front_insert_iterator& operator++();\n    front_insert_iterator  operator++(int);\n};\n\ntemplate <class Container> front_insert_iterator<Container> front_inserter(Container& x);\n\ntemplate <class Container>\nclass insert_iterator\n{\nprotected:\n    Container* container;\n    typename Container::iterator iter;\npublic:\n    typedef Container              container_type;\n    typedef void                   value_type;\n    typedef void                   difference_type;\n    typedef void                   reference;\n    typedef void                   pointer;\n\n    insert_iterator(Container& x, typename Container::iterator i);\n    insert_iterator& operator=(const typename Container::value_type& value);\n    insert_iterator& operator*();\n    insert_iterator& operator++();\n    insert_iterator& operator++(int);\n};\n\ntemplate <class Container, class Iterator>\ninsert_iterator<Container> inserter(Container& x, Iterator i);\n\ntemplate <class Iterator>\nclass move_iterator {\npublic:\n    typedef Iterator                                              iterator_type;\n    typedef typename iterator_traits<Iterator>::difference_type   difference_type;\n    typedef Iterator                                              pointer;\n    typedef typename iterator_traits<Iterator>::value_type        value_type;\n    typedef typename iterator_traits<Iterator>::iterator_category iterator_category;\n    typedef value_type&&                                          reference;\n \n    constexpr move_iterator();  // all the constexprs are in C++17\n    constexpr explicit move_iterator(Iterator i);\n    template <class U>\n      constexpr move_iterator(const move_iterator<U>& u);\n    template <class U>\n      constexpr move_iterator& operator=(const move_iterator<U>& u);\n    constexpr iterator_type base() const;\n    constexpr reference operator*() const;\n    constexpr pointer operator->() const;\n    constexpr move_iterator& operator++();\n    constexpr move_iterator operator++(int);\n    constexpr move_iterator& operator--();\n    constexpr move_iterator operator--(int);\n    constexpr move_iterator operator+(difference_type n) const; \n    constexpr move_iterator& operator+=(difference_type n); \n    constexpr move_iterator operator-(difference_type n) const; \n    constexpr move_iterator& operator-=(difference_type n); \n    constexpr unspecified operator[](difference_type n) const;\nprivate:\n    Iterator current; // exposition only\n};\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool   // constexpr in C++17\noperator==(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool   // constexpr in C++17\noperator!=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool   // constexpr in C++17\noperator<(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool   // constexpr in C++17\noperator<=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool   // constexpr in C++17\noperator>(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr bool   // constexpr in C++17\noperator>=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);\n\ntemplate <class Iterator1, class Iterator2>\nconstexpr auto   // constexpr in C++17\noperator-(const move_iterator<Iterator1>& x,\n          const move_iterator<Iterator2>& y) -> decltype(x.base() - y.base());\n\ntemplate <class Iterator>\nconstexpr move_iterator<Iterator> operator+(   // constexpr in C++17\n            typename move_iterator<Iterator>::difference_type n, \n            const move_iterator<Iterator>& x);\n\ntemplate <class Iterator>   // constexpr in C++17\nconstexpr  move_iterator<Iterator> make_move_iterator(const Iterator& i);\n\n\ntemplate <class T, class charT = char, class traits = char_traits<charT>, class Distance = ptrdiff_t>\nclass istream_iterator\n    : public iterator<input_iterator_tag, T, Distance, const T*, const T&>\n{\npublic:\n    typedef charT char_type;\n    typedef traits traits_type;\n    typedef basic_istream<charT,traits> istream_type;\n\n    constexpr istream_iterator();\n    istream_iterator(istream_type& s);\n    istream_iterator(const istream_iterator& x);\n    ~istream_iterator();\n\n    const T& operator*() const;\n    const T* operator->() const;\n    istream_iterator& operator++();\n    istream_iterator  operator++(int);\n};\n\ntemplate <class T, class charT, class traits, class Distance>\nbool operator==(const istream_iterator<T,charT,traits,Distance>& x,\n                const istream_iterator<T,charT,traits,Distance>& y);\ntemplate <class T, class charT, class traits, class Distance>\nbool operator!=(const istream_iterator<T,charT,traits,Distance>& x,\n                const istream_iterator<T,charT,traits,Distance>& y);\n\ntemplate <class T, class charT = char, class traits = char_traits<charT> >\nclass ostream_iterator\n    : public iterator<output_iterator_tag, void, void, void ,void>\n{\npublic:\n    typedef charT char_type;\n    typedef traits traits_type;\n    typedef basic_ostream<charT,traits> ostream_type;\n\n    ostream_iterator(ostream_type& s);\n    ostream_iterator(ostream_type& s, const charT* delimiter);\n    ostream_iterator(const ostream_iterator& x);\n    ~ostream_iterator();\n    ostream_iterator& operator=(const T& value);\n\n    ostream_iterator& operator*();\n    ostream_iterator& operator++();\n    ostream_iterator& operator++(int);\n};\n\ntemplate<class charT, class traits = char_traits<charT> >\nclass istreambuf_iterator\n    : public iterator<input_iterator_tag, charT,\n                      typename traits::off_type, unspecified,\n                      charT>\n{\npublic:\n    typedef charT                         char_type;\n    typedef traits                        traits_type;\n    typedef typename traits::int_type     int_type;\n    typedef basic_streambuf<charT,traits> streambuf_type;\n    typedef basic_istream<charT,traits>   istream_type;\n\n    istreambuf_iterator() noexcept;\n    istreambuf_iterator(istream_type& s) noexcept;\n    istreambuf_iterator(streambuf_type* s) noexcept;\n    istreambuf_iterator(a-private-type) noexcept;\n\n    charT                operator*() const;\n    pointer operator->() const;\n    istreambuf_iterator& operator++();\n    a-private-type       operator++(int);\n\n    bool equal(const istreambuf_iterator& b) const;\n};\n\ntemplate <class charT, class traits>\nbool operator==(const istreambuf_iterator<charT,traits>& a,\n                const istreambuf_iterator<charT,traits>& b);\ntemplate <class charT, class traits>\nbool operator!=(const istreambuf_iterator<charT,traits>& a,\n                const istreambuf_iterator<charT,traits>& b);\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass ostreambuf_iterator\n    : public iterator<output_iterator_tag, void, void, void, void>\n{\npublic:\n    typedef charT                         char_type;\n    typedef traits                        traits_type;\n    typedef basic_streambuf<charT,traits> streambuf_type;\n    typedef basic_ostream<charT,traits>   ostream_type;\n\n    ostreambuf_iterator(ostream_type& s) noexcept;\n    ostreambuf_iterator(streambuf_type* s) noexcept;\n    ostreambuf_iterator& operator=(charT c);\n    ostreambuf_iterator& operator*();\n    ostreambuf_iterator& operator++();\n    ostreambuf_iterator& operator++(int);\n    bool failed() const noexcept;\n};\n\ntemplate <class C> constexpr auto begin(C& c) -> decltype(c.begin());\ntemplate <class C> constexpr auto begin(const C& c) -> decltype(c.begin());\ntemplate <class C> constexpr auto end(C& c) -> decltype(c.end());\ntemplate <class C> constexpr auto end(const C& c) -> decltype(c.end());\ntemplate <class T, size_t N> constexpr T* begin(T (&array)[N]);\ntemplate <class T, size_t N> constexpr T* end(T (&array)[N]);\n\ntemplate <class C> auto constexpr cbegin(const C& c) -> decltype(std::begin(c));        // C++14\ntemplate <class C> auto constexpr cend(const C& c) -> decltype(std::end(c));            // C++14\ntemplate <class C> auto constexpr rbegin(C& c) -> decltype(c.rbegin());                 // C++14\ntemplate <class C> auto constexpr rbegin(const C& c) -> decltype(c.rbegin());           // C++14\ntemplate <class C> auto constexpr rend(C& c) -> decltype(c.rend());                     // C++14\ntemplate <class C> constexpr auto rend(const C& c) -> decltype(c.rend());               // C++14\ntemplate <class E> reverse_iterator<const E*> constexpr rbegin(initializer_list<E> il); // C++14\ntemplate <class E> reverse_iterator<const E*> constexpr rend(initializer_list<E> il);   // C++14\ntemplate <class T, size_t N> reverse_iterator<T*> constexpr rbegin(T (&array)[N]);      // C++14\ntemplate <class T, size_t N> reverse_iterator<T*> constexpr rend(T (&array)[N]);        // C++14\ntemplate <class C> constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c));      // C++14\ntemplate <class C> constexpr auto crend(const C& c) -> decltype(std::rend(c));          // C++14\n\n// 24.8, container access:\ntemplate <class C> constexpr auto size(const C& c) -> decltype(c.size());         // C++17\ntemplate <class T, size_t N> constexpr size_t size(const T (&array)[N]) noexcept; // C++17\ntemplate <class C> constexpr auto empty(const C& c) -> decltype(c.empty());       // C++17\ntemplate <class T, size_t N> constexpr bool empty(const T (&array)[N]) noexcept;  // C++17\ntemplate <class E> constexpr bool empty(initializer_list<E> il) noexcept;         // C++17\ntemplate <class C> constexpr auto data(C& c) -> decltype(c.data());               // C++17\ntemplate <class C> constexpr auto data(const C& c) -> decltype(c.data());         // C++17\ntemplate <class T, size_t N> constexpr T* data(T (&array)[N]) noexcept;           // C++17\ntemplate <class E> constexpr const E* data(initializer_list<E> il) noexcept;      // C++17\n\n}  // std\n\n*/\n\n#include <__config>\n#include <iosfwd> // for forward declarations of vector and string.\n#include <__functional_base>\n#include <type_traits>\n#include <cstddef>\n#include <initializer_list>\n#ifdef __APPLE__\n#include <Availability.h>\n#endif\n\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\nstruct _LIBCPP_TEMPLATE_VIS input_iterator_tag {};\nstruct _LIBCPP_TEMPLATE_VIS output_iterator_tag {};\nstruct _LIBCPP_TEMPLATE_VIS forward_iterator_tag       : public input_iterator_tag {};\nstruct _LIBCPP_TEMPLATE_VIS bidirectional_iterator_tag : public forward_iterator_tag {};\nstruct _LIBCPP_TEMPLATE_VIS random_access_iterator_tag : public bidirectional_iterator_tag {};\n\ntemplate <class _Tp>\nstruct __has_iterator_category\n{\nprivate:\n    struct __two {char __lx; char __lxx;};\n    template <class _Up> static __two __test(...);\n    template <class _Up> static char __test(typename _Up::iterator_category* = 0);\npublic:\n    static const bool value = sizeof(__test<_Tp>(0)) == 1;\n};\n\ntemplate <class _Iter, bool> struct __iterator_traits_impl {};\n\ntemplate <class _Iter>\nstruct __iterator_traits_impl<_Iter, true>\n{\n    typedef typename _Iter::difference_type   difference_type;\n    typedef typename _Iter::value_type        value_type;\n    typedef typename _Iter::pointer           pointer;\n    typedef typename _Iter::reference         reference;\n    typedef typename _Iter::iterator_category iterator_category;\n};\n\ntemplate <class _Iter, bool> struct __iterator_traits {};\n\ntemplate <class _Iter>\nstruct __iterator_traits<_Iter, true>\n    :  __iterator_traits_impl\n      <\n        _Iter,\n        is_convertible<typename _Iter::iterator_category, input_iterator_tag>::value ||\n        is_convertible<typename _Iter::iterator_category, output_iterator_tag>::value\n      >\n{};\n\n// iterator_traits<Iterator> will only have the nested types if Iterator::iterator_category\n//    exists.  Else iterator_traits<Iterator> will be an empty class.  This is a\n//    conforming extension which allows some programs to compile and behave as\n//    the client expects instead of failing at compile time.\n\ntemplate <class _Iter>\nstruct _LIBCPP_TEMPLATE_VIS iterator_traits\n    : __iterator_traits<_Iter, __has_iterator_category<_Iter>::value> {};\n\ntemplate<class _Tp>\nstruct _LIBCPP_TEMPLATE_VIS iterator_traits<_Tp*>\n{\n    typedef ptrdiff_t difference_type;\n    typedef typename remove_const<_Tp>::type value_type;\n    typedef _Tp* pointer;\n    typedef _Tp& reference;\n    typedef random_access_iterator_tag iterator_category;\n};\n\ntemplate <class _Tp, class _Up, bool = __has_iterator_category<iterator_traits<_Tp> >::value>\nstruct __has_iterator_category_convertible_to\n    : public integral_constant<bool, is_convertible<typename iterator_traits<_Tp>::iterator_category, _Up>::value>\n{};\n\ntemplate <class _Tp, class _Up>\nstruct __has_iterator_category_convertible_to<_Tp, _Up, false> : public false_type {};\n\ntemplate <class _Tp>\nstruct __is_input_iterator : public __has_iterator_category_convertible_to<_Tp, input_iterator_tag> {};\n\ntemplate <class _Tp>\nstruct __is_forward_iterator : public __has_iterator_category_convertible_to<_Tp, forward_iterator_tag> {};\n\ntemplate <class _Tp>\nstruct __is_bidirectional_iterator : public __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag> {};\n\ntemplate <class _Tp>\nstruct __is_random_access_iterator : public __has_iterator_category_convertible_to<_Tp, random_access_iterator_tag> {};\n\ntemplate <class _Tp>\nstruct __is_exactly_input_iterator\n    : public integral_constant<bool, \n         __has_iterator_category_convertible_to<_Tp, input_iterator_tag>::value && \n        !__has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value> {};\n\ntemplate<class _Category, class _Tp, class _Distance = ptrdiff_t,\n         class _Pointer = _Tp*, class _Reference = _Tp&>\nstruct _LIBCPP_TEMPLATE_VIS iterator\n{\n    typedef _Tp        value_type;\n    typedef _Distance  difference_type;\n    typedef _Pointer   pointer;\n    typedef _Reference reference;\n    typedef _Category  iterator_category;\n};\n\ntemplate <class _InputIter>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __advance(_InputIter& __i,\n             typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag)\n{\n    for (; __n > 0; --__n)\n        ++__i;\n}\n\ntemplate <class _BiDirIter>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __advance(_BiDirIter& __i,\n             typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag)\n{\n    if (__n >= 0)\n        for (; __n > 0; --__n)\n            ++__i;\n    else\n        for (; __n < 0; ++__n)\n            --__i;\n}\n\ntemplate <class _RandIter>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid __advance(_RandIter& __i,\n             typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag)\n{\n   __i += __n;\n}\n\ntemplate <class _InputIter>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid advance(_InputIter& __i,\n             typename iterator_traits<_InputIter>::difference_type __n)\n{\n    __advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());\n}\n\ntemplate <class _InputIter>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename iterator_traits<_InputIter>::difference_type\n__distance(_InputIter __first, _InputIter __last, input_iterator_tag)\n{\n    typename iterator_traits<_InputIter>::difference_type __r(0);\n    for (; __first != __last; ++__first)\n        ++__r;\n    return __r;\n}\n\ntemplate <class _RandIter>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename iterator_traits<_RandIter>::difference_type\n__distance(_RandIter __first, _RandIter __last, random_access_iterator_tag)\n{\n    return __last - __first;\n}\n\ntemplate <class _InputIter>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename iterator_traits<_InputIter>::difference_type\ndistance(_InputIter __first, _InputIter __last)\n{\n    return __distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category());\n}\n\ntemplate <class _InputIter>\ninline _LIBCPP_INLINE_VISIBILITY\n_InputIter\nnext(_InputIter __x,\n     typename iterator_traits<_InputIter>::difference_type __n = 1,\n     typename enable_if<__is_input_iterator<_InputIter>::value>::type* = 0)\n{\n    _VSTD::advance(__x, __n);\n    return __x;\n}\n\ntemplate <class _BidiretionalIter>\ninline _LIBCPP_INLINE_VISIBILITY\n_BidiretionalIter\nprev(_BidiretionalIter __x,\n     typename iterator_traits<_BidiretionalIter>::difference_type __n = 1,\n     typename enable_if<__is_bidirectional_iterator<_BidiretionalIter>::value>::type* = 0)\n{\n    _VSTD::advance(__x, -__n);\n    return __x;\n}\n\ntemplate <class _Iter>\nclass _LIBCPP_TEMPLATE_VIS reverse_iterator\n    : public iterator<typename iterator_traits<_Iter>::iterator_category,\n                      typename iterator_traits<_Iter>::value_type,\n                      typename iterator_traits<_Iter>::difference_type,\n                      typename iterator_traits<_Iter>::pointer,\n                      typename iterator_traits<_Iter>::reference>\n{\nprivate:\n    /*mutable*/ _Iter __t;  // no longer used as of LWG #2360, not removed due to ABI break\nprotected:\n    _Iter current;\npublic:\n    typedef _Iter                                            iterator_type;\n    typedef typename iterator_traits<_Iter>::difference_type difference_type;\n    typedef typename iterator_traits<_Iter>::reference       reference;\n    typedef typename iterator_traits<_Iter>::pointer         pointer;\n\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator() : __t(), current() {}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    explicit reverse_iterator(_Iter __x) : __t(__x), current(__x) {}\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n        reverse_iterator(const reverse_iterator<_Up>& __u) : __t(__u.base()), current(__u.base()) {}\n    template <class _Up>\n        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n        reverse_iterator& operator=(const reverse_iterator<_Up>& __u)\n            { __t = current = __u.base(); return *this; }\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    _Iter base() const {return current;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reference operator*() const {_Iter __tmp = current; return *--__tmp;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    pointer  operator->() const {return _VSTD::addressof(operator*());}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator& operator++() {--current; return *this;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator  operator++(int) {reverse_iterator __tmp(*this); --current; return __tmp;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator& operator--() {++current; return *this;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator  operator--(int) {reverse_iterator __tmp(*this); ++current; return __tmp;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator  operator+ (difference_type __n) const {return reverse_iterator(current - __n);}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator& operator+=(difference_type __n) {current -= __n; return *this;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator  operator- (difference_type __n) const {return reverse_iterator(current + __n);}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reverse_iterator& operator-=(difference_type __n) {current += __n; return *this;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reference         operator[](difference_type __n) const {return *(*this + __n);}\n};\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)\n{\n    return __x.base() == __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)\n{\n    return __x.base() > __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)\n{\n    return __x.base() != __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)\n{\n    return __x.base() < __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)\n{\n    return __x.base() <= __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)\n{\n    return __x.base() >= __y.base();\n}\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto\noperator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)\n-> decltype(__y.base() - __x.base())\n{\n    return __y.base() - __x.base();\n}\n#else\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename reverse_iterator<_Iter1>::difference_type\noperator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)\n{\n    return __y.base() - __x.base();\n}\n#endif\n\ntemplate <class _Iter>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nreverse_iterator<_Iter>\noperator+(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x)\n{\n    return reverse_iterator<_Iter>(__x.base() - __n);\n}\n\n#if _LIBCPP_STD_VER > 11\ntemplate <class _Iter>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nreverse_iterator<_Iter> make_reverse_iterator(_Iter __i)\n{\n    return reverse_iterator<_Iter>(__i);\n}\n#endif\n\ntemplate <class _Container>\nclass _LIBCPP_TEMPLATE_VIS back_insert_iterator\n    : public iterator<output_iterator_tag,\n                      void,\n                      void,\n                      void,\n                      void>\n{\nprotected:\n    _Container* container;\npublic:\n    typedef _Container container_type;\n\n    _LIBCPP_INLINE_VISIBILITY explicit back_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x)) {}\n    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator=(const typename _Container::value_type& __value_)\n        {container->push_back(__value_); return *this;}\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator=(typename _Container::value_type&& __value_)\n        {container->push_back(_VSTD::move(__value_)); return *this;}\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator*()     {return *this;}\n    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator++()    {return *this;}\n    _LIBCPP_INLINE_VISIBILITY back_insert_iterator  operator++(int) {return *this;}\n};\n\ntemplate <class _Container>\ninline _LIBCPP_INLINE_VISIBILITY\nback_insert_iterator<_Container>\nback_inserter(_Container& __x)\n{\n    return back_insert_iterator<_Container>(__x);\n}\n\ntemplate <class _Container>\nclass _LIBCPP_TEMPLATE_VIS front_insert_iterator\n    : public iterator<output_iterator_tag,\n                      void,\n                      void,\n                      void,\n                      void>\n{\nprotected:\n    _Container* container;\npublic:\n    typedef _Container container_type;\n\n    _LIBCPP_INLINE_VISIBILITY explicit front_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x)) {}\n    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator=(const typename _Container::value_type& __value_)\n        {container->push_front(__value_); return *this;}\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator=(typename _Container::value_type&& __value_)\n        {container->push_front(_VSTD::move(__value_)); return *this;}\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator*()     {return *this;}\n    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator++()    {return *this;}\n    _LIBCPP_INLINE_VISIBILITY front_insert_iterator  operator++(int) {return *this;}\n};\n\ntemplate <class _Container>\ninline _LIBCPP_INLINE_VISIBILITY\nfront_insert_iterator<_Container>\nfront_inserter(_Container& __x)\n{\n    return front_insert_iterator<_Container>(__x);\n}\n\ntemplate <class _Container>\nclass _LIBCPP_TEMPLATE_VIS insert_iterator\n    : public iterator<output_iterator_tag,\n                      void,\n                      void,\n                      void,\n                      void>\n{\nprotected:\n    _Container* container;\n    typename _Container::iterator iter;\npublic:\n    typedef _Container container_type;\n\n    _LIBCPP_INLINE_VISIBILITY insert_iterator(_Container& __x, typename _Container::iterator __i)\n        : container(_VSTD::addressof(__x)), iter(__i) {}\n    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator=(const typename _Container::value_type& __value_)\n        {iter = container->insert(iter, __value_); ++iter; return *this;}\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator=(typename _Container::value_type&& __value_)\n        {iter = container->insert(iter, _VSTD::move(__value_)); ++iter; return *this;}\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator*()        {return *this;}\n    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator++()       {return *this;}\n    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator++(int)    {return *this;}\n};\n\ntemplate <class _Container>\ninline _LIBCPP_INLINE_VISIBILITY\ninsert_iterator<_Container>\ninserter(_Container& __x, typename _Container::iterator __i)\n{\n    return insert_iterator<_Container>(__x, __i);\n}\n\ntemplate <class _Tp, class _CharT = char,\n          class _Traits = char_traits<_CharT>, class _Distance = ptrdiff_t>\nclass _LIBCPP_TEMPLATE_VIS istream_iterator\n    : public iterator<input_iterator_tag, _Tp, _Distance, const _Tp*, const _Tp&>\n{\npublic:\n    typedef _CharT char_type;\n    typedef _Traits traits_type;\n    typedef basic_istream<_CharT,_Traits> istream_type;\nprivate:\n    istream_type* __in_stream_;\n    _Tp __value_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR istream_iterator() : __in_stream_(0), __value_() {}\n    _LIBCPP_INLINE_VISIBILITY istream_iterator(istream_type& __s) : __in_stream_(_VSTD::addressof(__s))\n        {\n            if (!(*__in_stream_ >> __value_))\n                __in_stream_ = 0;\n        }\n\n    _LIBCPP_INLINE_VISIBILITY const _Tp& operator*() const {return __value_;}\n    _LIBCPP_INLINE_VISIBILITY const _Tp* operator->() const {return _VSTD::addressof((operator*()));}\n    _LIBCPP_INLINE_VISIBILITY istream_iterator& operator++()\n        {\n            if (!(*__in_stream_ >> __value_))\n                __in_stream_ = 0;\n            return *this;\n        }\n    _LIBCPP_INLINE_VISIBILITY istream_iterator  operator++(int)\n        {istream_iterator __t(*this); ++(*this); return __t;}\n\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator==(const istream_iterator& __x, const istream_iterator& __y)\n        {return __x.__in_stream_ == __y.__in_stream_;}\n\n    friend _LIBCPP_INLINE_VISIBILITY\n    bool operator!=(const istream_iterator& __x, const istream_iterator& __y)\n        {return !(__x == __y);}\n};\n\ntemplate <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT> >\nclass _LIBCPP_TEMPLATE_VIS ostream_iterator\n    : public iterator<output_iterator_tag, void, void, void, void>\n{\npublic:\n    typedef _CharT char_type;\n    typedef _Traits traits_type;\n    typedef basic_ostream<_CharT,_Traits> ostream_type;\nprivate:\n    ostream_type* __out_stream_;\n    const char_type* __delim_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY ostream_iterator(ostream_type& __s) _NOEXCEPT\n        : __out_stream_(_VSTD::addressof(__s)), __delim_(0) {}\n    _LIBCPP_INLINE_VISIBILITY ostream_iterator(ostream_type& __s, const _CharT* __delimiter) _NOEXCEPT\n        : __out_stream_(_VSTD::addressof(__s)), __delim_(__delimiter) {}\n    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator=(const _Tp& __value_)\n        {\n            *__out_stream_ << __value_;\n            if (__delim_)\n                *__out_stream_ << __delim_;\n            return *this;\n        }\n\n    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator*()     {return *this;}\n    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator++()    {return *this;}\n    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator++(int) {return *this;}\n};\n\ntemplate<class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS istreambuf_iterator\n    : public iterator<input_iterator_tag, _CharT,\n                      typename _Traits::off_type, _CharT*,\n                      _CharT>\n{\npublic:\n    typedef _CharT                          char_type;\n    typedef _Traits                         traits_type;\n    typedef typename _Traits::int_type      int_type;\n    typedef basic_streambuf<_CharT,_Traits> streambuf_type;\n    typedef basic_istream<_CharT,_Traits>   istream_type;\nprivate:\n    mutable streambuf_type* __sbuf_;\n\n    class __proxy\n    {\n        char_type __keep_;\n        streambuf_type* __sbuf_;\n        _LIBCPP_INLINE_VISIBILITY __proxy(char_type __c, streambuf_type* __s)\n            : __keep_(__c), __sbuf_(__s) {}\n        friend class istreambuf_iterator;\n    public:\n        _LIBCPP_INLINE_VISIBILITY char_type operator*() const {return __keep_;}\n    };\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool __test_for_eof() const\n    {\n        if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sgetc(), traits_type::eof()))\n            __sbuf_ = 0;\n        return __sbuf_ == 0;\n    }\npublic:\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR istreambuf_iterator() _NOEXCEPT : __sbuf_(0) {}\n    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(istream_type& __s) _NOEXCEPT\n        : __sbuf_(__s.rdbuf()) {}\n    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(streambuf_type* __s) _NOEXCEPT\n        : __sbuf_(__s) {}\n    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(const __proxy& __p) _NOEXCEPT\n        : __sbuf_(__p.__sbuf_) {}\n\n    _LIBCPP_INLINE_VISIBILITY char_type  operator*() const\n        {return static_cast<char_type>(__sbuf_->sgetc());}\n    _LIBCPP_INLINE_VISIBILITY char_type* operator->() const {return nullptr;}\n    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator& operator++()\n        {\n            __sbuf_->sbumpc();\n            return *this;\n        }\n    _LIBCPP_INLINE_VISIBILITY __proxy              operator++(int)\n        {\n            return __proxy(__sbuf_->sbumpc(), __sbuf_);\n        }\n\n    _LIBCPP_INLINE_VISIBILITY bool equal(const istreambuf_iterator& __b) const\n        {return __test_for_eof() == __b.__test_for_eof();}\n};\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbool operator==(const istreambuf_iterator<_CharT,_Traits>& __a,\n                const istreambuf_iterator<_CharT,_Traits>& __b)\n                {return __a.equal(__b);}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nbool operator!=(const istreambuf_iterator<_CharT,_Traits>& __a,\n                const istreambuf_iterator<_CharT,_Traits>& __b)\n                {return !__a.equal(__b);}\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS ostreambuf_iterator\n    : public iterator<output_iterator_tag, void, void, void, void>\n{\npublic:\n    typedef _CharT                          char_type;\n    typedef _Traits                         traits_type;\n    typedef basic_streambuf<_CharT,_Traits> streambuf_type;\n    typedef basic_ostream<_CharT,_Traits>   ostream_type;\nprivate:\n    streambuf_type* __sbuf_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator(ostream_type& __s) _NOEXCEPT\n        : __sbuf_(__s.rdbuf()) {}\n    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator(streambuf_type* __s) _NOEXCEPT\n        : __sbuf_(__s) {}\n    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator=(_CharT __c)\n        {\n            if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sputc(__c), traits_type::eof()))\n                __sbuf_ = 0;\n            return *this;\n        }\n    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator*()     {return *this;}\n    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator++()    {return *this;}\n    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator++(int) {return *this;}\n    _LIBCPP_INLINE_VISIBILITY bool failed() const _NOEXCEPT {return __sbuf_ == 0;}\n\n#if !defined(__APPLE__) || \\\n    (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED > __MAC_10_8) || \\\n    (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED > __IPHONE_6_0)\n\n    template <class _Ch, class _Tr>\n    friend\n    _LIBCPP_HIDDEN\n    ostreambuf_iterator<_Ch, _Tr>\n    __pad_and_output(ostreambuf_iterator<_Ch, _Tr> __s,\n                     const _Ch* __ob, const _Ch* __op, const _Ch* __oe,\n                     ios_base& __iob, _Ch __fl);\n#endif\n};\n\ntemplate <class _Iter>\nclass _LIBCPP_TEMPLATE_VIS move_iterator\n{\nprivate:\n    _Iter __i;\npublic:\n    typedef _Iter                                            iterator_type;\n    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;\n    typedef typename iterator_traits<iterator_type>::value_type value_type;\n    typedef typename iterator_traits<iterator_type>::difference_type difference_type;\n    typedef iterator_type pointer;\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    typedef typename iterator_traits<iterator_type>::reference __reference;\n    typedef typename conditional<\n            is_reference<__reference>::value,\n            typename remove_reference<__reference>::type&&,\n            __reference\n        >::type reference;\n#else\n    typedef typename iterator_traits<iterator_type>::reference reference;\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator() : __i() {}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    explicit move_iterator(_Iter __x) : __i(__x) {}\n    template <class _Up>\n      _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n      move_iterator(const move_iterator<_Up>& __u) : __i(__u.base()) {}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 _Iter base() const {return __i;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 \n    reference operator*() const { return static_cast<reference>(*__i); }\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    pointer  operator->() const { return __i;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator& operator++() {++__i; return *this;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator  operator++(int) {move_iterator __tmp(*this); ++__i; return __tmp;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator& operator--() {--__i; return *this;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator  operator--(int) {move_iterator __tmp(*this); --__i; return __tmp;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator  operator+ (difference_type __n) const {return move_iterator(__i + __n);}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator& operator+=(difference_type __n) {__i += __n; return *this;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator  operator- (difference_type __n) const {return move_iterator(__i - __n);}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    move_iterator& operator-=(difference_type __n) {__i -= __n; return *this;}\n    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\n    reference operator[](difference_type __n) const { return static_cast<reference>(__i[__n]); }\n};\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator==(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)\n{\n    return __x.base() == __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator<(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)\n{\n    return __x.base() < __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator!=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)\n{\n    return __x.base() != __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator>(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)\n{\n    return __x.base() > __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator>=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)\n{\n    return __x.base() >= __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nbool\noperator<=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)\n{\n    return __x.base() <= __y.base();\n}\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto\noperator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)\n-> decltype(__x.base() - __y.base())\n{\n    return __x.base() - __y.base();\n}\n#else\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename move_iterator<_Iter1>::difference_type\noperator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)\n{\n    return __x.base() - __y.base();\n}\n#endif\n\ntemplate <class _Iter>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nmove_iterator<_Iter>\noperator+(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x)\n{\n    return move_iterator<_Iter>(__x.base() + __n);\n}\n\ntemplate <class _Iter>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nmove_iterator<_Iter>\nmake_move_iterator(_Iter __i)\n{\n    return move_iterator<_Iter>(__i);\n}\n\n// __wrap_iter\n\ntemplate <class _Iter> class __wrap_iter;\n\ntemplate <class _Iter1, class _Iter2>\n_LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\ntemplate <class _Iter1, class _Iter2>\n_LIBCPP_INLINE_VISIBILITY\nbool\noperator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\ntemplate <class _Iter1, class _Iter2>\n_LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\ntemplate <class _Iter1, class _Iter2>\n_LIBCPP_INLINE_VISIBILITY\nbool\noperator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\ntemplate <class _Iter1, class _Iter2>\n_LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\ntemplate <class _Iter1, class _Iter2>\n_LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Iter1, class _Iter2>\n_LIBCPP_INLINE_VISIBILITY\nauto\noperator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n-> decltype(__x.base() - __y.base());\n#else\ntemplate <class _Iter1, class _Iter2>\n_LIBCPP_INLINE_VISIBILITY\ntypename __wrap_iter<_Iter1>::difference_type\noperator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n#endif\n\ntemplate <class _Iter>\n_LIBCPP_INLINE_VISIBILITY\n__wrap_iter<_Iter>\noperator+(typename __wrap_iter<_Iter>::difference_type, __wrap_iter<_Iter>) _NOEXCEPT_DEBUG;\n\ntemplate <class _Ip, class _Op> _Op _LIBCPP_INLINE_VISIBILITY copy(_Ip, _Ip, _Op);\ntemplate <class _B1, class _B2> _B2 _LIBCPP_INLINE_VISIBILITY copy_backward(_B1, _B1, _B2);\ntemplate <class _Ip, class _Op> _Op _LIBCPP_INLINE_VISIBILITY move(_Ip, _Ip, _Op);\ntemplate <class _B1, class _B2> _B2 _LIBCPP_INLINE_VISIBILITY move_backward(_B1, _B1, _B2);\n\n#if _LIBCPP_DEBUG_LEVEL < 2\n\ntemplate <class _Tp>\n_LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_trivially_copy_assignable<_Tp>::value,\n    _Tp*\n>::type\n__unwrap_iter(__wrap_iter<_Tp*>);\n\n#else\n\ntemplate <class _Tp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename enable_if\n<\n    is_trivially_copy_assignable<_Tp>::value,\n    __wrap_iter<_Tp*>\n>::type\n__unwrap_iter(__wrap_iter<_Tp*> __i);\n\n#endif\n\ntemplate <class _Iter>\nclass __wrap_iter\n{\npublic:\n    typedef _Iter                                                      iterator_type;\n    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;\n    typedef typename iterator_traits<iterator_type>::value_type        value_type;\n    typedef typename iterator_traits<iterator_type>::difference_type   difference_type;\n    typedef typename iterator_traits<iterator_type>::pointer           pointer;\n    typedef typename iterator_traits<iterator_type>::reference         reference;\nprivate:\n    iterator_type __i;\npublic:\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter() _NOEXCEPT_DEBUG\n#if _LIBCPP_STD_VER > 11\n                : __i{}\n#endif\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        __get_db()->__insert_i(this);\n#endif\n    }\n    template <class _Up> _LIBCPP_INLINE_VISIBILITY __wrap_iter(const __wrap_iter<_Up>& __u,\n        typename enable_if<is_convertible<_Up, iterator_type>::value>::type* = 0) _NOEXCEPT_DEBUG\n        : __i(__u.base())\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        __get_db()->__iterator_copy(this, &__u);\n#endif\n    }\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY\n    __wrap_iter(const __wrap_iter& __x)\n        : __i(__x.base())\n    {\n        __get_db()->__iterator_copy(this, &__x);\n    }\n    _LIBCPP_INLINE_VISIBILITY\n    __wrap_iter& operator=(const __wrap_iter& __x)\n    {\n        if (this != &__x)\n        {\n            __get_db()->__iterator_copy(this, &__x);\n            __i = __x.__i;\n        }\n        return *this;\n    }\n    _LIBCPP_INLINE_VISIBILITY\n    ~__wrap_iter()\n    {\n        __get_db()->__erase_i(this);\n    }\n#endif\n    _LIBCPP_INLINE_VISIBILITY reference operator*() const _NOEXCEPT_DEBUG\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),\n                       \"Attempted to dereference a non-dereferenceable iterator\");\n#endif\n        return *__i;\n    }\n    _LIBCPP_INLINE_VISIBILITY pointer  operator->() const _NOEXCEPT_DEBUG\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),\n                       \"Attempted to dereference a non-dereferenceable iterator\");\n#endif\n        return (pointer)_VSTD::addressof(*__i);\n    }\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter& operator++() _NOEXCEPT_DEBUG\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),\n                       \"Attempted to increment non-incrementable iterator\");\n#endif\n        ++__i;\n        return *this;\n    }\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter  operator++(int) _NOEXCEPT_DEBUG\n        {__wrap_iter __tmp(*this); ++(*this); return __tmp;}\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter& operator--() _NOEXCEPT_DEBUG\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__decrementable(this),\n                       \"Attempted to decrement non-decrementable iterator\");\n#endif\n        --__i;\n        return *this;\n    }\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter  operator--(int) _NOEXCEPT_DEBUG\n        {__wrap_iter __tmp(*this); --(*this); return __tmp;}\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter  operator+ (difference_type __n) const _NOEXCEPT_DEBUG\n        {__wrap_iter __w(*this); __w += __n; return __w;}\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter& operator+=(difference_type __n) _NOEXCEPT_DEBUG\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__addable(this, __n),\n                   \"Attempted to add/subtract iterator outside of valid range\");\n#endif\n        __i += __n;\n        return *this;\n    }\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter  operator- (difference_type __n) const _NOEXCEPT_DEBUG\n        {return *this + (-__n);}\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter& operator-=(difference_type __n) _NOEXCEPT_DEBUG\n        {*this += -__n; return *this;}\n    _LIBCPP_INLINE_VISIBILITY reference        operator[](difference_type __n) const _NOEXCEPT_DEBUG\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__subscriptable(this, __n),\n                   \"Attempted to subscript iterator outside of valid range\");\n#endif\n        return __i[__n];\n    }\n\n    _LIBCPP_INLINE_VISIBILITY iterator_type base() const _NOEXCEPT_DEBUG {return __i;}\n\nprivate:\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter(const void* __p, iterator_type __x) : __i(__x)\n    {\n        __get_db()->__insert_ic(this, __p);\n    }\n#else\n    _LIBCPP_INLINE_VISIBILITY __wrap_iter(iterator_type __x) _NOEXCEPT_DEBUG : __i(__x) {}\n#endif\n\n    template <class _Up> friend class __wrap_iter;\n    template <class _CharT, class _Traits, class _Alloc> friend class basic_string;\n    template <class _Tp, class _Alloc> friend class _LIBCPP_TEMPLATE_VIS vector;\n\n    template <class _Iter1, class _Iter2>\n    friend\n    bool\n    operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\n    template <class _Iter1, class _Iter2>\n    friend\n    bool\n    operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\n    template <class _Iter1, class _Iter2>\n    friend\n    bool\n    operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\n    template <class _Iter1, class _Iter2>\n    friend\n    bool\n    operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\n    template <class _Iter1, class _Iter2>\n    friend\n    bool\n    operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\n    template <class _Iter1, class _Iter2>\n    friend\n    bool\n    operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n\n#ifndef _LIBCPP_CXX03_LANG\n    template <class _Iter1, class _Iter2>\n    friend\n    auto\n    operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n    -> decltype(__x.base() - __y.base());\n#else\n    template <class _Iter1, class _Iter2>\n    friend\n    typename __wrap_iter<_Iter1>::difference_type\n    operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT_DEBUG;\n#endif\n\n    template <class _Iter1>\n    friend\n    __wrap_iter<_Iter1>\n    operator+(typename __wrap_iter<_Iter1>::difference_type, __wrap_iter<_Iter1>) _NOEXCEPT_DEBUG;\n\n    template <class _Ip, class _Op> friend _Op copy(_Ip, _Ip, _Op);\n    template <class _B1, class _B2> friend _B2 copy_backward(_B1, _B1, _B2);\n    template <class _Ip, class _Op> friend _Op move(_Ip, _Ip, _Op);\n    template <class _B1, class _B2> friend _B2 move_backward(_B1, _B1, _B2);\n\n#if _LIBCPP_DEBUG_LEVEL < 2\n    template <class _Tp>\n    friend\n    typename enable_if\n    <\n        is_trivially_copy_assignable<_Tp>::value,\n        _Tp*\n    >::type\n    __unwrap_iter(__wrap_iter<_Tp*>);\n#else\n  template <class _Tp>\n  inline _LIBCPP_INLINE_VISIBILITY\n  typename enable_if\n  <\n      is_trivially_copy_assignable<_Tp>::value,\n      __wrap_iter<_Tp*>\n  >::type\n  __unwrap_iter(__wrap_iter<_Tp*> __i);\n#endif\n};\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n{\n    return __x.base() == __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),\n                   \"Attempted to compare incomparable iterators\");\n#endif\n    return __x.base() < __y.base();\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n{\n    return !(__x == __y);\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n{\n    return __y < __x;\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n{\n    return !(__x < __y);\n}\n\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n{\n    return !(__y < __x);\n}\n\ntemplate <class _Iter1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT_DEBUG\n{\n    return !(__x == __y);\n}\n\ntemplate <class _Iter1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT_DEBUG\n{\n    return __y < __x;\n}\n\ntemplate <class _Iter1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT_DEBUG\n{\n    return !(__x < __y);\n}\n\ntemplate <class _Iter1>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT_DEBUG\n{\n    return !(__y < __x);\n}\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\nauto\noperator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n-> decltype(__x.base() - __y.base())\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),\n                   \"Attempted to subtract incompatible iterators\");\n#endif\n    return __x.base() - __y.base();\n}\n#else\ntemplate <class _Iter1, class _Iter2>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename __wrap_iter<_Iter1>::difference_type\noperator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT_DEBUG\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),\n                   \"Attempted to subtract incompatible iterators\");\n#endif\n    return __x.base() - __y.base();\n}\n#endif\n\ntemplate <class _Iter>\ninline _LIBCPP_INLINE_VISIBILITY\n__wrap_iter<_Iter>\noperator+(typename __wrap_iter<_Iter>::difference_type __n,\n          __wrap_iter<_Iter> __x) _NOEXCEPT_DEBUG\n{\n    __x += __n;\n    return __x;\n}\n\ntemplate <class _Iter>\nstruct __libcpp_is_trivial_iterator\n    : public _LIBCPP_BOOL_CONSTANT(is_pointer<_Iter>::value) {};\n    \ntemplate <class _Iter>\nstruct __libcpp_is_trivial_iterator<move_iterator<_Iter> >\n    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};\n\ntemplate <class _Iter>\nstruct __libcpp_is_trivial_iterator<reverse_iterator<_Iter> >\n    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};\n\ntemplate <class _Iter>\nstruct __libcpp_is_trivial_iterator<__wrap_iter<_Iter> >\n    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};\n\n\ntemplate <class _Tp, size_t _Np>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_Tp*\nbegin(_Tp (&__array)[_Np])\n{\n    return __array;\n}\n\ntemplate <class _Tp, size_t _Np>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\n_Tp*\nend(_Tp (&__array)[_Np])\n{\n    return __array + _Np;\n}\n\n#if !defined(_LIBCPP_CXX03_LANG)\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto\nbegin(_Cp& __c) -> decltype(__c.begin())\n{\n    return __c.begin();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto\nbegin(const _Cp& __c) -> decltype(__c.begin())\n{\n    return __c.begin();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto\nend(_Cp& __c) -> decltype(__c.end())\n{\n    return __c.end();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto\nend(const _Cp& __c) -> decltype(__c.end())\n{\n    return __c.end();\n}\n\n#if _LIBCPP_STD_VER > 11\n\ntemplate <class _Tp, size_t _Np>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nreverse_iterator<_Tp*> rbegin(_Tp (&__array)[_Np])\n{\n    return reverse_iterator<_Tp*>(__array + _Np);\n}\n\ntemplate <class _Tp, size_t _Np>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nreverse_iterator<_Tp*> rend(_Tp (&__array)[_Np])\n{\n    return reverse_iterator<_Tp*>(__array);\n}\n\ntemplate <class _Ep>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nreverse_iterator<const _Ep*> rbegin(initializer_list<_Ep> __il)\n{\n    return reverse_iterator<const _Ep*>(__il.end());\n}\n\ntemplate <class _Ep>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nreverse_iterator<const _Ep*> rend(initializer_list<_Ep> __il)\n{\n    return reverse_iterator<const _Ep*>(__il.begin());\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nauto cbegin(const _Cp& __c) -> decltype(_VSTD::begin(__c))\n{\n    return _VSTD::begin(__c);\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11\nauto cend(const _Cp& __c) -> decltype(_VSTD::end(__c))\n{\n    return _VSTD::end(__c);\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto rbegin(_Cp& __c) -> decltype(__c.rbegin())\n{\n    return __c.rbegin();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto rbegin(const _Cp& __c) -> decltype(__c.rbegin())\n{\n    return __c.rbegin();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto rend(_Cp& __c) -> decltype(__c.rend())\n{\n    return __c.rend();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto rend(const _Cp& __c) -> decltype(__c.rend())\n{\n    return __c.rend();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto crbegin(const _Cp& __c) -> decltype(_VSTD::rbegin(__c))\n{\n    return _VSTD::rbegin(__c);\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14\nauto crend(const _Cp& __c) -> decltype(_VSTD::rend(__c))\n{\n    return _VSTD::rend(__c);\n}\n\n#endif\n\n\n#else  // defined(_LIBCPP_CXX03_LANG)\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename _Cp::iterator\nbegin(_Cp& __c)\n{\n    return __c.begin();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename _Cp::const_iterator\nbegin(const _Cp& __c)\n{\n    return __c.begin();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename _Cp::iterator\nend(_Cp& __c)\n{\n    return __c.end();\n}\n\ntemplate <class _Cp>\ninline _LIBCPP_INLINE_VISIBILITY\ntypename _Cp::const_iterator\nend(const _Cp& __c)\n{\n    return __c.end();\n}\n\n#endif  // !defined(_LIBCPP_CXX03_LANG)\n\n#if _LIBCPP_STD_VER > 14\ntemplate <class _Cont>\nconstexpr auto size(const _Cont& __c) -> decltype(__c.size()) { return __c.size(); }\n\ntemplate <class _Tp, size_t _Sz>\nconstexpr size_t size(const _Tp (&)[_Sz]) noexcept { return _Sz; }\n\ntemplate <class _Cont>\nconstexpr auto empty(const _Cont& __c) -> decltype(__c.empty()) { return __c.empty(); }\n\ntemplate <class _Tp, size_t _Sz>\nconstexpr bool empty(const _Tp (&)[_Sz]) noexcept { return false; }\n\ntemplate <class _Ep>\nconstexpr bool empty(initializer_list<_Ep> __il) noexcept { return __il.size() == 0; }\n\ntemplate <class _Cont> constexpr\nauto data(_Cont& __c) -> decltype(__c.data()) { return __c.data(); }\n\ntemplate <class _Cont> constexpr\nauto data(const _Cont& __c) -> decltype(__c.data()) { return __c.data(); }\n\ntemplate <class _Tp, size_t _Sz>\nconstexpr _Tp* data(_Tp (&__array)[_Sz]) noexcept { return __array; }\n\ntemplate <class _Ep>\nconstexpr const _Ep* data(initializer_list<_Ep> __il) noexcept { return __il.begin(); }\n#endif\n\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_ITERATOR\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2017-2018\n *\n *  @file  World_structure.h\n *  @brief Functions for popular world structure methods.\n */\n\n#ifndef EMP_EVO_WORLD_STRUCTURE_H\n#define EMP_EVO_WORLD_STRUCTURE_H\n\n#include <set>\n\n#include \"../base/assert.h\"\n#include \"../base/vector.h\"\n#include \"../base/array.h\"\n#include \"../data/Trait.h\"\n#include \"../tools/math.h\"\n#include \"../tools/Random.h\"\n#include \"../tools/vector_utils.h\"\n\nnamespace emp {\n\n  template <typename ORG> class World;\n\n  /// A class to track positions in World.\n  /// For the moment, the only informaiton beyond index is active (vs. next) population when\n  /// using synchronous generations.\n  //\n  //  Developer NOTE: For efficiency, internal class members are uint32_t, but to prevent compiler\n  //                  warnings, size_t values are accepted; asserts ensure safe conversions.\n  class WorldPosition {\n  private:\n    uint32_t index;   ///<  Position of this organism in the population.\n    uint32_t pop_id;  ///<  ID of the population we are in; 0 is always the active population.\n\n  public:\n    static constexpr size_t invalid_id = (uint32_t) -1;\n\n    WorldPosition() : index(invalid_id), pop_id(invalid_id) { ; }\n    WorldPosition(size_t _id, size_t _pop_id=0) : index((uint32_t) _id), pop_id((uint32_t) _pop_id) {\n      emp_assert(_id <= invalid_id);\n      emp_assert(_pop_id <= invalid_id);\n    }\n    WorldPosition(const WorldPosition &) = default;\n\n    uint32_t GetIndex() const { return index; }\n    uint32_t GetPopID() const { return pop_id; }\n\n    bool IsActive() const { return pop_id == 0; }\n    bool IsValid() const { return index != invalid_id; }\n\n    WorldPosition & SetActive(bool _active=true) { pop_id = 0; return *this; }\n    WorldPosition & SetPopID(size_t _id) { emp_assert(_id <= invalid_id); pop_id = (uint32_t) _id; return *this; }\n    WorldPosition & SetIndex(size_t _id) { emp_assert(_id <= invalid_id); index = (uint32_t) _id; return *this; }\n    WorldPosition & MarkInvalid() { index = invalid_id; pop_id = invalid_id; return *this; }\n  };\n\n  /// A vector that can be indexed with a WorldPosition\n  template <typename T>\n  class WorldVector : public emp::array<emp::vector<T>, 2> {\n  public:\n    using base_t = emp::array<emp::vector<T>, 2>;\n\n    /// Test if a position is currently valid.\n    bool IsValid(WorldPosition pos) const {\n      const size_t pop_id = pos.GetPopID();\n      const size_t id = pos.GetIndex();\n      emp_assert(pop_id < 2);\n      return id < base_t::operator[](pop_id).size();\n    }\n\n    /// Make sure position is valid; if not expand relevant vector.\n    void MakeValid(WorldPosition pos) {\n      const size_t pop_id = pos.GetPopID();\n      const size_t id = pos.GetIndex();\n      emp_assert(pop_id < 2);\n      if (id >= base_t::operator[](pop_id).size()) {\n        base_t::operator[](pop_id).resize(id+1);\n      }\n    }\n\n    T & operator()(WorldPosition pos) {\n      const size_t pop_id = pos.GetPopID();\n      const size_t id = pos.GetIndex();\n      return base_t::operator[](pop_id)[id];\n    }\n    const T & operator()(WorldPosition pos) const {\n      const size_t pop_id = pos.GetPopID();\n      const size_t id = pos.GetIndex();\n      return base_t::operator[](pop_id)[id];\n    }\n  };\n\n  /// Set the population to be a set of pools that are individually well mixed, but with limited\n  /// migtation.  Arguments are the number of pools, the size of each pool, and whether the\n  /// generations should be synchronous (true) or not (false, default).\n  template <typename ORG>\n  void SetPools(World<ORG> & world, size_t num_pools,\n                size_t pool_size, bool synchronous_gen=false) {\n    world.Resize(pool_size, num_pools);\n    world.MarkSynchronous(synchronous_gen);\n    world.MarkSpaceStructured(true).MarkPhenoStructured(false);\n\n    // -- Setup functions --\n    // Inject in an empty pool -or- randomly if none empty\n    world.SetAddInjectFun( [&world,pool_size](Ptr<ORG> new_org) {\n      for (size_t id = 0; id < world.GetSize(); id += pool_size) {\n        if (world.IsOccupied(id) == false) return WorldPosition(id);\n      }\n      return WorldPosition(world.GetRandomCellID());\n    });\n\n    // Neighbors are everyone in the same pool.\n    world.SetGetNeighborFun( [&world,pool_size](WorldPosition pos) {\n      const size_t pool_start = (pos.GetIndex() / pool_size) * pool_size;\n      return pos.SetIndex(pool_start + world.GetRandom().GetUInt(pool_size));\n    });\n\n    world.SetKillOrgFun( [&world](){\n      const size_t kill_id = world.GetRandomCellID();\n      world.RemoveOrgAt(kill_id);\n      return kill_id;\n    });\n\n    if (synchronous_gen) {\n      // Place births in the next open spot in the new pool (or randomly if full!)\n      world.SetAddBirthFun( [&world,pool_size](Ptr<ORG> new_org, WorldPosition parent_pos) {\n        emp_assert(new_org);                                  // New organism must exist.\n        const size_t parent_id = parent_pos.GetIndex();\n        const size_t pool_id = parent_id / pool_size;\n        const size_t start_id = pool_id * pool_size;\n        for (size_t id = start_id; id < start_id+pool_size; id++) {\n          if (world.IsOccupied(WorldPosition(id,1)) == false) {  // Search for an open position...\n            return WorldPosition(id, 1);\n          }\n        }\n        WorldPosition pos = world.GetRandomNeighborPos(parent_pos);  // Placed near parent, in next pop.\n        return pos.SetPopID(1);\n      });\n      world.SetAttribute(\"SynchronousGen\", \"True\");\n    } else {\n      // Asynchronous: always go to a neighbor in current population.\n      world.SetAddBirthFun( [&world](Ptr<ORG> new_org, WorldPosition parent_pos) {\n        auto pos = world.GetRandomNeighborPos(parent_pos);\n        return pos; // Place org in existing population.\n      });\n      world.SetAttribute(\"SynchronousGen\", \"False\");\n    }\n\n    world.SetAttribute(\"PopStruct\", \"Pools\");\n    world.SetSynchronousSystematics(synchronous_gen);\n  }\n\n\n  /// Set the population to use a MapElites structure.  This means that organism placement has\n  /// two key components:\n  /// 1: Organism position is based on their phenotypic traits.\n  /// 2: Organisms must have a higher fitness than the current resident of a position to steal it.\n  ///\n  /// Note: Since organisms compete with their predecessors for space in the populations,\n  /// synchronous generations do not make sense.\n  ///\n  /// This for version will setup a MAP-Elites world; traits to use an how many bins for each\n  /// (trait counts) must be provided.\n  template <typename ORG>\n  void SetMapElites(World<ORG> & world, TraitSet<ORG> traits,\n                    const emp::vector<size_t> & trait_counts) {\n    world.Resize(trait_counts);  // World sizes are based on counts of traits options.\n    world.MarkSynchronous(false);\n    world.MarkSpaceStructured(false).MarkPhenoStructured(true);\n\n    // -- Setup functions --\n    // Inject into the appropriate positon based on phenotype.  Note that an inject will fail\n    // if a more fit organism is already in place; you must run clear first if you want to\n    // ensure placement.\n    world.SetAddInjectFun( [&world,traits,trait_counts](Ptr<ORG> new_org) {\n      // Determine tha position that this phenotype fits in.\n      double org_fitness = world.CalcFitnessOrg(*new_org);\n      size_t id = traits.EvalBin(*new_org, trait_counts);\n      double cur_fitness = world.CalcFitnessID(id);\n\n      if (cur_fitness > org_fitness) return WorldPosition();  // Return invalid position!\n      return WorldPosition(id);\n    });\n\n    // Map-Elites does not have a concept of neighbors.\n    world.SetGetNeighborFun( [](WorldPosition pos) { emp_assert(false); return pos; });\n\n    // Map-Elites doesn't have a real meaning for killing organisms, so do so randomly.\n    world.SetKillOrgFun( [&world](){\n      const size_t kill_id = world.GetRandomCellID();\n      world.RemoveOrgAt(kill_id);\n      return kill_id;\n    });\n\n    // Birth is effectively the same as inject.\n    world.SetAddBirthFun( [&world,traits,trait_counts](Ptr<ORG> new_org, WorldPosition parent_pos) {\n      (void) parent_pos; // Parent position is not needed for MAP Elites.\n      // Determine tha position that this phenotype fits in.\n      double org_fitness = world.CalcFitnessOrg(*new_org);\n      size_t id = traits.EvalBin(*new_org, trait_counts);\n      double cur_fitness = world.CalcFitnessID(id);\n\n      if (cur_fitness > org_fitness) return WorldPosition();  // Return invalid position!\n      return WorldPosition(id);\n    });\n\n    world.SetAttribute(\"SynchronousGen\", \"False\");\n    world.SetAttribute(\"PopStruct\", \"MapElites\");\n    world.SetSynchronousSystematics(false);\n  }\n\n  /// Setup a MAP-Elites world, given the provided set of traits.\n  /// Requires world to already have a size; that size is respected when deciding trait bins.\n  template <typename ORG>\n  void SetMapElites(World<ORG> & world, TraitSet<ORG> traits) {\n    emp::vector<size_t> trait_counts;\n    emp_assert(traits.GetSize() > 0);\n\n    // If there's only a single trait, it should get the full population.\n    if (traits.GetSize() == 1) {\n      trait_counts.push_back(world.GetSize());\n      SetMapElites(world, traits, trait_counts);\n      return;\n    }\n    const size_t num_traits = traits.GetSize();\n    size_t trait_size = 1;\n    while (Pow(trait_size+1, num_traits) < world.GetSize()) trait_size++;\n    trait_counts.resize(num_traits, trait_size);\n    SetMapElites(world, traits, trait_counts);\n  }\n\n  /// Setup a MAP-Elites world, given the provided trait counts (number of bins).\n  /// Requires world to already have a phenotypes that those counts are applied to.\n  template <typename ORG>\n  void SetMapElites(World<ORG> & world, const emp::vector<size_t> & trait_counts) {\n    SetMapElites(world, world.GetPhenotypes(), trait_counts);\n  }\n\n  /// Setup a MAP-Elites world, given the provided worlds already has size AND set of phenotypes.\n  /// Requires world to already have a size; that size is respected when deciding trait bins.\n  template <typename ORG>\n  void SetMapElites(World<ORG> & world) { SetMapElites(world, world.GetPhenotypes()); }\n\n\n\n  /// DiverseElites is similar to MAP-Elites, but rather than merely keep the elites on\n  /// a pre-defined grid, it merely tries to maintain maximal distance between elites in\n  /// trait space.  The main advantages to this technique are (1) It's easy to build\n  /// up an inital population that grows in diversity over time, and (2) You don't need to\n  /// predefine box sizes or even limits to trait values.\n\n  /// Set the population to use a DiverseElites structure.  This means that organism placement has\n  /// two key components:\n  /// 1: Organism position is in continuous space based on phenotypic traits.\n  /// 2: When the population is full, nearby organisms must battle to keep their position.\n  ///\n  /// Note: Since organisms compete with their predecessors for space in the populations,\n  /// synchronous generations do not make sense.\n\n  /// Build a class to track distances between organisms.\n  // Note: Assuming that once a position is filled it will never be empty again.\n  template <typename ORG>\n  struct World_MinDistInfo {\n    static constexpr size_t ID_NONE = (size_t) -1;  ///< ID for organism does not exist.\n\n    emp::vector<size_t> nearest_id;  ///< For each individual, whom are they closest to?\n    emp::vector<double> distance;    ///< And what is their distance?\n\n    World<ORG> & world;              ///< World object being tracked.\n    TraitSet<ORG> traits;            ///< Traits we are tryng to spread\n    emp::vector<double> min_vals;    ///< Smallest value found for each trait.\n    emp::vector<double> max_vals;    ///< Largest value found for each trait.\n    emp::vector<double> bin_width;   ///< Largest value found for each trait.\n\n    bool is_setup;                          ///< Have we initialized the internal data stucture?\n    size_t num_trait_bins;                  ///< How many bins should we use for each trait?\n    size_t num_total_bins;                  ///< How many bins are there overall?\n    emp::vector<std::set<size_t>> bin_ids;  ///< Which org ids fall into each bin?\n    emp::vector<size_t> org_bins;           ///< Which bin is each org currently in?\n\n    World_MinDistInfo(World<ORG> & in_world, const TraitSet<ORG> & in_traits)\n     : nearest_id(), distance(), world(in_world), traits(in_traits)\n     , min_vals(traits.GetSize(), std::numeric_limits<double>::max())\n     , max_vals(traits.GetSize(), std::numeric_limits<double>::min())\n     , bin_width(traits.GetSize(), 0.00001)\n     , is_setup(false), num_trait_bins(0), num_total_bins(0), bin_ids(), org_bins()\n     { ; }\n\n    double CalcDist(size_t id1, size_t id2) {\n      emp::vector<double> offsets = traits.CalcOffsets(world.GetOrg(id1), world.GetOrg(id2));\n      double dist = 0.0;\n      for (double offset : offsets) dist += offset * offset;\n      return dist;\n    }\n\n    // Helper function for testing an organism against everything in a specified bin.\n    void Refresh_AgainstBin(size_t refresh_id, size_t target_bin) {\n      emp_assert(target_bin < bin_ids.size(), target_bin, bin_ids.size());\n      for (size_t id2 : bin_ids[target_bin]) {\n        if (id2 == refresh_id) continue;\n        const double cur_dist = CalcDist(id2, refresh_id);\n        if (cur_dist < distance[refresh_id]) {\n          distance[refresh_id] = cur_dist;\n          nearest_id[refresh_id] = id2;\n        }\n        if (cur_dist < distance[id2]) {\n          distance[id2] = cur_dist;\n          nearest_id[id2] = refresh_id;\n        }\n      }\n    }\n\n    // Find the closest connection to a position again; update neighbors as well!\n    void Refresh(size_t refresh_id, size_t start_id = 0) {\n      emp_assert(refresh_id < world.GetSize()); // Make sure ID is legal.\n      nearest_id[refresh_id] = ID_NONE;\n      distance[refresh_id] = std::numeric_limits<double>::max();\n\n      // First compare against everything else in the current bin.\n      size_t bin_id = org_bins[refresh_id];\n      Refresh_AgainstBin(refresh_id, bin_id);\n\n      // Then check all neighbor bins.  Ignoring diagnols for now since they could be expensive...\n      // (though technically we need them...)\n      size_t trait_offset = 1;\n      for (size_t trait_id = 0; trait_id < traits.GetSize(); trait_id++) {\n        size_t prev_bin_id = bin_id - trait_offset;\n        if (prev_bin_id < num_total_bins) {\n          Refresh_AgainstBin(refresh_id, prev_bin_id);\n        }\n        size_t next_bin_id = bin_id + trait_offset;\n        if (next_bin_id < num_total_bins) {\n          Refresh_AgainstBin(refresh_id, next_bin_id);\n        }\n        trait_offset *= num_trait_bins;\n      }\n\n    }\n\n    /// Calculate which bin an organism should be in.\n    size_t CalcBin(size_t id) {\n      static emp::vector<double> t_vals;\n      t_vals = traits.EvalValues(world.GetOrg(id));\n      size_t scale = 1;\n      size_t bin_id = (size_t) -1;\n      for (size_t i = 0; i < traits.GetSize(); i++) {\n        const size_t cur_bin = (size_t) ((t_vals[i] - min_vals[i]) / bin_width[i]);\n        emp_assert(cur_bin < num_total_bins);\n        bin_id += cur_bin * scale;\n        scale *= num_trait_bins;\n      }\n      emp_assert(bin_id < num_total_bins, bin_id, num_total_bins, scale);\n      return bin_id;\n    }\n\n    /// Reset all of the bins in the multidimensional grid for nearest-neighbor analysis.\n    void ResetBins() {\n      bin_ids.resize(num_total_bins);\n      for (auto & bin : bin_ids) bin.clear();\n      for (size_t trait_id = 0; trait_id < traits.GetSize(); trait_id++) {\n        bin_width[trait_id] = (max_vals[trait_id] - min_vals[trait_id]) / (double) num_trait_bins;\n      }\n      org_bins.resize(world.GetSize());\n      for (size_t org_id = 0; org_id < world.GetSize(); org_id++) {\n        size_t cur_bin = CalcBin(org_id);\n        org_bins[org_id] = cur_bin;\n        bin_ids[cur_bin].insert(org_id);\n      }\n    }\n\n    void Setup() {\n      const size_t num_orgs = world.GetSize();\n      emp_assert(num_orgs >= 2); // Must have at least 2 orgs in the population to setup.\n      const size_t num_traits = traits.GetSize();\n      emp_assert(num_traits >= 1); // We must have at least one dimension!\n\n      nearest_id.resize(num_orgs);\n      distance.resize(num_orgs);\n\n      // How many bins should each trait be divided into?\n      num_trait_bins = (size_t) (std::pow(num_orgs, 1.0 / (double)num_traits) + 0.5);\n      num_total_bins = (size_t) (std::pow(num_trait_bins, num_traits) + 0.5);\n      ResetBins();\n\n      // Setup (Refresh) all distances.\n      for (size_t id = 0; id < num_orgs; id++) { Refresh(id, id+1); }\n      is_setup = true;\n    }\n\n    void Clear() {\n      nearest_id.resize(0);\n      distance.resize(0);\n      is_setup = false;\n    }\n\n    /// Find the best organism to kill in the popualtion.  In this case, find the two closest organisms\n    /// and kill the one with the lower fitness.\n    size_t FindKill() {\n      if (!is_setup) Setup();  // The first time we run out of space and need to kill, setup structure!\n\n      emp_assert(distance.size() > 0);  // After setup, we should always have distances stored.\n\n      const size_t min_id = emp::FindMinIndex(distance);\n      emp_assert(min_id >= 0 && min_id < world.GetSize(), min_id);\n      emp_assert(nearest_id[min_id] >= 0 && nearest_id[min_id] < world.GetSize(),\n                 min_id, distance[min_id], nearest_id[min_id], distance.size());\n      if (world.CalcFitnessID(min_id) < world.CalcFitnessID(nearest_id[min_id])) return min_id;\n      else return nearest_id[min_id];\n    }\n\n    /// Return an empty world position.  If none are available, return the position of an org to be killed.\n    size_t GetBirthPos(size_t world_size) {\n      // If there's room in the world for one more, get the next empty position.\n      if (world.GetSize() < world_size) { return world.GetSize(); }\n      // Otherwise, determine whom to kill return their position to be used.\n      return FindKill();\n    }\n\n    /// Assume a position has changed; refresh it AND everything that had it as a closest connection.\n    void Update(size_t pos) {\n      /// Determine if this new point extends the range of any phenotypes.\n      bool update_chart = false;\n      emp::vector<double> cur_vals = traits.EvalValues(world.GetOrg(pos));\n      for (size_t i = 0; i < cur_vals.size(); i++) {\n        if (cur_vals[i] <= min_vals[i]) {\n          min_vals[i] = cur_vals[i] - bin_width[i]/2.0;\n          update_chart = true;\n        }\n        if (cur_vals[i] >= max_vals[i]) {\n          max_vals[i] = cur_vals[i] + bin_width[i]/2.0;\n          update_chart = true;\n        }\n      }\n\n      // Until min-dist tracking structure is setup, don't worry about maintaining.\n      if (!is_setup) return;\n      emp_assert(pos < world.GetSize());\n\n      /// Remove org if from the bin we currently have it in.\n      bin_ids[org_bins[pos]].erase(pos);\n\n      /// Determine if we need to re-place all orgs in the structure\n      if (update_chart == true) {\n        ResetBins();\n        org_bins[pos] = CalcBin(pos);\n        bin_ids[org_bins[pos]].insert(pos);\n\n        // Rescaled bins might skew distances.  Refresh everyone!\n        for (size_t id = 0; id < world.GetSize(); id++) {\n          Refresh(id);\n        }\n        emp_assert(org_bins[pos] != (size_t) -1);\n      }\n\n      /// Otherwise just update closest connections to this org.\n      else {\n        org_bins[pos] = CalcBin(pos);\n        bin_ids[org_bins[pos]].insert(pos);\n        for (size_t id = 0; id < world.GetSize(); id++) {\n          if (nearest_id[id] == pos) Refresh(id);\n        }\n        Refresh(pos);\n        emp_assert(org_bins[pos] != (size_t) -1);\n      }\n\n      emp_assert(OK());\n    }\n\n    /// A debug function to make sure the internal state is all valid.\n    bool OK() {\n      // These tests only matter BEFORE Setup() is run.\n      emp_assert(is_setup || nearest_id.size() == 0);\n      emp_assert(is_setup || distance.size() == 0);\n\n      // Tests for AFTER Setup() is run.\n\n      if (is_setup) {\n        const size_t num_orgs = world.GetSize();\n        emp_assert(nearest_id.size() == num_orgs);\n        emp_assert(distance.size() == num_orgs);\n        for (size_t i = 0; i < num_orgs; i++) {\n          emp_assert(org_bins[i] < num_total_bins, i, org_bins[i], num_total_bins,\n                     world.GetNumOrgs());\n        }\n        size_t org_count = 0;\n        for (size_t i = 0; i < num_total_bins; i++) {\n          org_count += bin_ids[i].size();\n          for (size_t org_id : bin_ids[i]) {\n            (void) org_id;\n            emp_assert(org_bins[org_id] == i);\n          }\n        }\n        emp_assert(org_count == num_orgs, org_count, num_orgs, world.GetNumOrgs());\n      }\n\n      return true;\n    }\n  };\n\n  /// This first version will setup a Diverse-Elites world and specify traits to use.\n  template <typename ORG>\n  void SetDiverseElites(World<ORG> & world, TraitSet<ORG> traits, size_t world_size) {\n    world.MarkSynchronous(false);\n    world.MarkSpaceStructured(false).MarkPhenoStructured(true);\n\n    // Build a pointer to the current information (and make sure it's deleted later)\n    Ptr<World_MinDistInfo<ORG>> info_ptr = NewPtr<World_MinDistInfo<ORG>>(world, traits);\n    world.OnWorldDestruct([info_ptr]() mutable { info_ptr.Delete(); });\n\n    // Make sure to update info whenever a new org is placed into the population.\n    world.OnPlacement( [info_ptr](size_t pos) mutable { info_ptr->Update(pos); } );\n\n    // -- Setup functions --\n    // Inject into the appropriate positon based on phenotype.  Note that an inject will fail\n    // if a more fit organism is already in place; you must run clear first if you want to\n    // ensure placement.\n    world.SetAddInjectFun( [&world, traits, world_size, info_ptr](Ptr<ORG> new_org) {\n      size_t pos = info_ptr->GetBirthPos(world_size);\n      return WorldPosition(pos);\n    });\n\n    // Diverse Elites does not have a concept of neighbors.\n    // @CAO Or should we return closest individual, which we already save?\n    world.SetGetNeighborFun( [](WorldPosition pos) { emp_assert(false); return pos; });\n\n    // Find the two closest organisms and kill the lower fit one.  (Killing sparsely...)\n    // Must unsetup population for next birth to work.\n    world.SetKillOrgFun( [&world, info_ptr](){\n      const size_t last_id = world.GetSize() - 1;\n      world.Swap(info_ptr->FindKill(), last_id);\n      info_ptr->is_setup = false;\n      world.RemoveOrgAt(last_id);\n      world.Resize(last_id);\n      return last_id;\n    });\n\n    // Birth is effectively the same as inject.\n    world.SetAddBirthFun( [&world, traits, world_size, info_ptr](Ptr<ORG> new_org, WorldPosition parent_pos) {\n      (void) parent_pos;\n      size_t pos = info_ptr->GetBirthPos(world_size);\n      return WorldPosition(pos);\n    });\n\n    world.SetAttribute(\"SynchronousGen\", \"False\");\n    world.SetAttribute(\"PopStruct\", \"DiverseElites\");\n    world.SetSynchronousSystematics(false);\n  }\n\n  /// Setup a Diverse-Elites world, given the provided world already has set of phenotypes.\n  template <typename ORG>\n  void SetDiverseElites(World<ORG> & world, size_t world_size) {\n    SetDiverseElites(world, world.GetPhenotypes(), world_size);\n  }\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2017-2018\n *\n *  @file  World_reflect.h\n *  @brief Handle reflection on organisms to setup reasonable defaults in World.\n *\n *  @note None of the functions defined here should be called from outside the world object;\n *        as such the comments below are not in Doxygen format and should only be used by\n *        LIBRARY developers working on World.\n */\n\n#ifndef EMP_EVO_WORLD_REFLECT_H\n#define EMP_EVO_WORLD_REFLECT_H\n\n#include <functional>\n#include <type_traits>\n\n#include \"../base/assert.h\"\n#include \"../meta/reflection.h\"\n#include \"../tools/Random.h\"\n\nnamespace emp {\n\n  namespace {\n\n    // Setup Fitness reflection.\n    // 1. If an organism has a \"GetFitness()\" member function, use it!\n    // 2. If an organim can be cast to double, use it!\n    // 3. Start with a fitness function that throws an assert indicating function must be set.\n\n    using std::declval;\n\n    template <typename WORLD, typename ORG>\n    void SetDefaultFitFun_impl(WORLD & world, bool_decoy<decltype( declval<ORG>().GetFitness() )>) {\n      world.SetFitFun( [](ORG & org){ return (double) org.GetFitness(); } );\n    }\n\n    template <typename WORLD, typename ORG>\n    void SetDefaultFitFun_impl(WORLD & world, int_decoy<decltype( (double) declval<ORG>() )>) {\n      world.SetFitFun( [](ORG & org){ return (double) org; } );\n    }\n\n    template <typename WORLD, typename ORG>\n    void SetDefaultFitFun_impl(WORLD & world, ... ) {\n      world.SetFitFun( [](ORG & org){\n        emp_assert(false, \"No default fitness function available\");\n        return 0.0;\n      } );\n    }\n\n  }\n\n  template <typename WORLD, typename ORG>\n  void SetDefaultFitFun(WORLD & world) { SetDefaultFitFun_impl<WORLD, ORG>(world, true); }\n\n  namespace {\n    // Setup Mutation function\n    // 1. DoMutations(random)\n    // 2. Empty, with assert.\n\n    template <typename WORLD, typename ORG>\n    void SetDefaultMutFun_impl(WORLD & world, bool_decoy<decltype( declval<ORG>().DoMutations( *((Random*)nullptr) ) )>) {\n      world.SetMutFun( [](ORG & org, Random & random) {\n        return (double) org.DoMutations(random);\n      } );\n    }\n\n    template <typename WORLD, typename ORG>\n    void SetDefaultMutFun_impl(WORLD & world, ... ) {\n      world.SetMutFun( [](ORG & org, Random & random) {\n        emp_assert(false, \"No default DoMutations available\");\n        return 0;\n      } );\n    }\n\n  }\n\n  template <typename WORLD, typename ORG>\n  void SetDefaultMutFun(WORLD & world) { SetDefaultMutFun_impl<WORLD, ORG>(world, true); }\n\n\n  namespace {\n    // Setup Print function\n    // 1. Org Print()\n    // 2. Proper operator<<\n    // 3. Assert\n    // @CAO: Also try emp::to_string ??\n\n    template <typename WORLD, typename ORG>\n    void SetDefaultPrintFun_impl(WORLD & world, bool_decoy<decltype( declval<ORG>().Print(std::cout) )>) {\n      world.SetPrintFun( [](ORG & org, std::ostream & os){ org.Print(os); } );\n    }\n\n    template <typename WORLD, typename ORG>\n    void SetDefaultPrintFun_impl(WORLD & world, int_decoy<decltype( std::cout << declval<ORG>() )>) {\n      world.SetPrintFun( [](ORG & org, std::ostream & os){ os << org; } );\n    }\n\n    template <typename WORLD, typename ORG>\n    void SetDefaultPrintFun_impl(WORLD & world, ... ) {\n      world.SetPrintFun( [](ORG & org, std::ostream & os){\n        emp_assert(false, \"No default Print function available\");\n      } );\n    }\n\n  }\n\n  template <typename WORLD, typename ORG>\n  void SetDefaultPrintFun(WORLD & world) { SetDefaultPrintFun_impl<WORLD, ORG>(world, true); }\n\n\n  namespace {\n    // Setup genome type identification\n    template <typename ORG>\n    auto Org2Genome( bool_decoy< decltype( declval<ORG>().GetGenome() ) >)\n      -> std::decay_t< decltype( declval<ORG>().GetGenome() ) >;\n\n    template <typename ORG>\n    ORG Org2Genome( ... );\n  }\n\n  template <typename ORG>\n  using find_genome_t = decltype( Org2Genome<ORG>(true) );\n\n\n  namespace {\n    // Setup Org -> Genome function\n    // 1. GetGenome member function\n    // 2. Return org AS genome.\n\n    template <typename WORLD, typename ORG>\n    void SetOrgGetGenome_impl(WORLD & world, bool_decoy<decltype( declval<ORG>().GetGenome() )>) {\n      world.SetGetGenomeFun( [](ORG & org) -> const auto & { return org.GetGenome(); } );\n    }\n\n    template <typename WORLD, typename ORG>\n    void SetOrgGetGenome_impl(WORLD & world, ... ) {\n      world.SetGetGenomeFun( [](ORG & org) -> const ORG & { return org; } );\n    }\n\n  }\n\n  template <typename WORLD, typename ORG>\n  void SetDefaultGetGenomeFun(WORLD & world) { SetOrgGetGenome_impl<WORLD, ORG>(world, true); }\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2017-2018\n *\n *  @file  Systematics.h\n *  @brief Track genotypes, species, clades, or lineages of organisms in a world.\n *\n *\n *  @todo Technically, we don't need to keep the ancestors in a set in order to track a lineage...\n *        If we delete all of their descendants they should automaticaly be deleted.\n *  @todo We should provide an option to back up systematics data to a file so that it doesn't all\n *        need to be kept in memory, especially if we're only doing post-analysis.\n *  @todo This inheritance system makes adding new systematics-related data tracking kind of a pain.\n *        Over time, this will probably become a maintainability problem. We can probably make the\n *        whole inheritance thing go away through judicious use of signals.\n * @todo This does not currently handle situations where organisms change locations during their\n *       lifetimes gracefully.\n */\n\n\n#ifndef EMP_EVO_SYSTEMATICS_H\n#define EMP_EVO_SYSTEMATICS_H\n\n#include <ostream>\n#include <set>\n#include <unordered_set>\n#include <map>\n\n#include \"../base/Ptr.h\"\n#include \"../control/Signal.h\"\n#include \"../data/DataManager.h\"\n#include \"../data/DataNode.h\"\n#include \"../tools/info_theory.h\"\n#include \"../tools/map_utils.h\"\n#include \"../tools/set_utils.h\"\n#include \"../tools/stats.h\"\n#include \"../tools/string_utils.h\"\n\nnamespace emp {\n\n  /// The systematics manager allows an optional second template type that\n  /// can store additional data about each taxon in the phylogeny. Here are\n  /// some structs containing common pieces of additional data to track.\n  /// Note: You are responsible for filling these in! Adding the template\n  /// just gives you a place to store your data.\n\n  namespace datastruct {\n    struct no_data {\n        using has_fitness_t = std::false_type;\n        using has_mutations_t = std::false_type;\n        using has_phen_t = std::false_type;\n    }; /// The default - an empty struct\n\n    template <typename PHEN_TYPE>\n    struct mut_landscape_info { /// Track information related to the mutational landscape\n      /// Maps a string representing a type of mutation to a count representing\n      /// the number of that type of mutation that occured to bring about this taxon.\n      using phen_t = PHEN_TYPE;\n      using has_phen_t = std::true_type;\n      using has_mutations_t = std::true_type;\n      using has_fitness_t = std::true_type;\n      // using has_phenotype_t = true;\n\n      std::unordered_map<std::string, int> mut_counts;\n      DataNode<double, data::Current, data::Range> fitness; /// This taxon's fitness (for assessing deleterious mutational steps)\n      PHEN_TYPE phenotype; /// This taxon's phenotype (for assessing phenotypic change)\n\n      const PHEN_TYPE & GetPhenotype() const {\n        return phenotype;\n      }\n\n      const double GetFitness() const {\n        return fitness.GetMean();\n      }\n\n      void RecordMutation(std::unordered_map<std::string, int> muts) {\n        for (auto mut : muts) {\n          if (Has(mut_counts, mut.first)) {\n            mut_counts[mut.first] += mut.second;\n          } else {\n            mut_counts[mut.first] = mut.second;\n          }\n        }\n      }\n\n      void RecordFitness(double fit) {\n        fitness.Add(fit);\n      }\n\n      void RecordPhenotype(PHEN_TYPE phen) {\n        phenotype = phen;\n      }\n\n    };\n  }\n\n  /// @brief A Taxon represents a type of organism in a phylogeny.\n  /// @param ORG_INFO The information type associated with an organism, used to categorize it.\n  ///\n  /// Genotypes are the most commonly used Taxon; in general taxa can be anything from a shared\n  /// genome sequence, a phenotypic trait, or a even a position in the world (if you want to\n  /// track an evolutionary pathway)\n  template <typename ORG_INFO, typename DATA_STRUCT = emp::datastruct::no_data>\n  class Taxon {\n  protected:\n    using this_t = Taxon<ORG_INFO, DATA_STRUCT>;\n    using info_t = ORG_INFO;\n\n    size_t id;                ///<  ID for this Taxon (Unique within this Systematics)\n    const info_t info;        ///<  Details for the organims associated within this taxanomic group.\n    Ptr<this_t> parent;       ///<  Pointer to parent group (nullptr if injected)\n    size_t num_orgs;          ///<  How many organisms currently exist of this group?\n    size_t tot_orgs;          ///<  How many organisms have ever existed of this group?\n    size_t num_offspring;     ///<  How many direct offspring groups exist from this one.\n    size_t total_offspring;   ///<  How many total extant offspring taxa exist from this one (i.e. including indirect)\n    size_t depth;             ///<  How deep in tree is this node? (Root is 0)\n    double origination_time;  ///<  When did this taxon first appear in the population?\n\n    DATA_STRUCT data;         ///< A struct for storing additional information about this taxon\n\n  public:\n    using data_t = DATA_STRUCT;\n\n    Taxon(size_t _id, const info_t & _info, Ptr<this_t> _parent=nullptr)\n     : id (_id), info(_info), parent(_parent)\n     , num_orgs(0), tot_orgs(0), num_offspring(0), total_offspring(0)\n     , depth(parent ? (parent->depth+1) : 0) { ; }\n    Taxon(const Taxon &) = delete;\n    Taxon(Taxon &&) = default;\n    Taxon & operator=(const Taxon &) = delete;\n    Taxon & operator=(Taxon &&) = default;\n\n    /// Get a unique ID for this taxon; IDs are assigned sequentially, so newer taxa have higher IDs.\n    size_t GetID() const { return id; }\n\n    /// Retrieve the tracked info associated with this Taxon.\n    const info_t & GetInfo() const { return info; }\n\n    /// Retrieve a pointer to the parent Taxon.\n    Ptr<this_t> GetParent() const { return parent; }\n\n    /// Get the number of living organisms currently associated with this Taxon.\n    size_t GetNumOrgs() const { return num_orgs; }\n\n    /// Get the total number of organisms that have ever lived associated with this Taxon\n    size_t GetTotOrgs() const { return tot_orgs; }\n\n    /// Get the number of taxa that were produced by organisms from this Taxon.\n    size_t GetNumOff() const { return num_offspring; }\n\n    /// Get the number of taxanomic steps since the ancestral organism was injected into the World.\n    size_t GetDepth() const { return depth; }\n\n    data_t & GetData() {return data;}\n    const data_t & GetData() const {return data;}\n\n    double GetOriginationTime() const {return origination_time;}\n    void SetOriginationTime(double time) {origination_time = time;}\n\n    /// Add a new organism to this Taxon.\n    void AddOrg() { ++num_orgs; ++tot_orgs; }\n\n    /// Add a new offspring Taxon to this one.\n    void AddOffspring() { ++num_offspring; AddTotalOffspring();}\n\n    /// Recursively increment total offspring count for this and all ancestors\n    // Should this be protected or private or something?\n    void AddTotalOffspring() {\n      ++total_offspring;\n      if (parent) { // Keep going until we hit root\n        parent->AddTotalOffspring();\n      }\n    }\n\n    /// Get total number of offspring directly or indirectly\n    /// descending from this taxon.\n    int GetTotalOffspring(){ return total_offspring; }\n\n    /// Remove an organism from this Taxon (after it dies).\n    /// Removals must return true if the taxon needs to continue; false if it should deactivate.\n    bool RemoveOrg() {\n      emp_assert(num_orgs > 0, num_orgs);\n      --num_orgs;\n\n      // If we are out of BOTH organisms and offspring, this Taxon should deactivate.\n      return num_orgs;\n    }\n\n    /// Remove and offspring taxa after its entire sub-tree has died out (pruning)\n    bool RemoveOffspring() {\n      emp_assert(num_offspring > 0);\n      --num_offspring;\n\n      // If we are out of BOTH offspring and organisms, this Taxon should deactivate.\n      return num_orgs || num_offspring;\n    }\n\n    /// Reduce the total count of extant offspring and recursively do so for\n    /// all ancestors (gets called on a taxon's parent when that taxon goes extinct)\n    void RemoveTotalOffspring() {\n      --total_offspring;\n      if (parent) { // Keep going until we hit root\n        parent->RemoveTotalOffspring();\n      }\n    }\n  };\n\n\n  /// A base class for Systematics, maintaining information common to all systematics managers\n  /// and providing virtual functaions.\n\n  template <typename ORG>\n  class SystematicsBase {\n  protected:\n    bool store_active;        ///< Store all of the currently active taxa?\n    bool store_ancestors;     ///< Store all of the direct ancestors from living taxa?\n    bool store_outside;       ///< Store taxa that are extinct with no living descendants?\n    bool archive;             ///< Set to true if we are supposed to do any archiving of extinct taxa.\n    bool store_position;      ///< Keep a vector mapping  positions to pointers\n    bool track_synchronous;   ///< Does this systematics manager need to keep track of current and next positions?\n\n    // Stats about active taxa... (totals are across orgs, not taxa)\n    size_t org_count;         ///< How many organisms are currently active?\n    size_t total_depth;       ///< Sum of taxa depths for calculating average.\n    size_t num_roots;         ///< How many distint injected ancestors are currently in population?\n\n    size_t next_id;           ///< What ID value should the next new taxon have?\n    size_t curr_update;\n\n    DataManager<double, data::Current, data::Info, data::Range, data::Stats, data::Pull> data_nodes;\n\n  public:\n    SystematicsBase(bool _active=true, bool _anc=true, bool _all=false, bool _pos=true)\n      : store_active(_active), store_ancestors(_anc), store_outside(_all)\n      , archive(store_ancestors || store_outside), store_position(_pos), track_synchronous(false)\n      , org_count(0), total_depth(0), num_roots(0), next_id(0), curr_update(0) { ; }\n\n    virtual ~SystematicsBase(){;}\n\n    using data_node_t = DataNode<double, data::Current, data::Info, data::Range, data::Stats, data::Pull>;\n    using data_ptr_t = Ptr<data_node_t>;\n\n    /// Are we tracking a synchronous population?\n    bool GetTrackSynchronous() const {return track_synchronous; }\n\n    /// Are we storing all taxa that are still alive in the population?\n    bool GetStoreActive() const { return store_active; }\n\n    /// Are we storing all taxa that are the ancestors of living organims in the population?\n    bool GetStoreAncestors() const { return store_ancestors; }\n\n    /// Are we storing all taxa that have died out, as have all of their descendants.\n    bool GetStoreOutside() const { return store_outside; }\n\n    /// Are we storing any taxa types that have died out?\n    bool GetArchive() const { return archive; }\n\n    /// Are we storing the positions of taxa?\n    bool GetStorePosition() const { return store_position; }\n\n    /// How many living organisms are currently being tracked?\n    size_t GetTotalOrgs() const { return org_count; }\n\n    /// How many independent trees are being tracked?\n    size_t GetNumRoots() const { return num_roots; }\n\n    /// What is the average phylogenetic depth of organisms in the population?\n    double GetAveDepth() const { return ((double) total_depth) / (double) org_count; }\n\n    /// Are we tracking organisms evolving in synchronous generations?\n    void SetTrackSynchronous(bool new_val) {track_synchronous = new_val; }\n\n    /// Are we storing all taxa that are still alive in the population?\n    void SetStoreActive(bool new_val) { store_active = new_val; }\n\n    /// Are we storing all taxa that are the ancestors of living organims in the population?\n    void SetStoreAncestors(bool new_val) { store_ancestors = new_val; }\n\n    /// Are we storing all taxa that have died out, as have all of their descendants.\n    void SetStoreOutside(bool new_val) { store_outside = new_val; }\n\n    /// Are we storing any taxa types that have died out?\n    void SetArchive(bool new_val) { archive = new_val; }\n\n    /// Are we storing the location of taxa?\n    void SetStorePosition(bool new_val) { store_position = new_val; }\n\n    // Returns a reference so that capturing it in a lambda to call on update\n    // is less confusing. It's possible we should change it to be consistent\n    // with GetFitnessDataNode, though.\n    data_ptr_t AddDataNode(const std::string & name) {\n      emp_assert(!data_nodes.HasNode(name));\n      return &(data_nodes.New(name));\n    }\n\n    data_ptr_t AddDataNode(std::function<emp::vector<double>()> pull_set_fun, const std::string & name) {\n      emp_assert(!data_nodes.HasNode(name));\n      auto node = AddDataNode(name);\n      node->AddPullSet(pull_set_fun);\n      return node;\n    }\n\n    data_ptr_t AddDataNode(std::function<double()> pull_fun, const std::string & name) {\n      emp_assert(!data_nodes.HasNode(name));\n      auto node = AddDataNode(name);\n      node->AddPull(pull_fun);\n      return node;\n    }\n\n\n    data_ptr_t GetDataNode(const std::string & name) {\n      return &(data_nodes.Get(name));\n    }\n\n    virtual data_ptr_t AddEvolutionaryDistinctivenessDataNode(const std::string & name = \"evolutionary_distinctiveness\") = 0;\n    virtual data_ptr_t AddPairwiseDistanceDataNode(const std::string & name = \"pairwise_distance\") = 0;\n    virtual data_ptr_t AddPhylogeneticDiversityDataNode(const std::string & name = \"phylogenetic_diversity\") = 0;\n    virtual data_ptr_t AddDeleteriousStepDataNode(const std::string & name = \"deleterious_steps\") = 0;\n    virtual data_ptr_t AddVolatilityDataNode(const std::string & name = \"volatility\") = 0;\n    virtual data_ptr_t AddUniqueTaxaDataNode(const std::string & name = \"unique_taxa\") = 0;\n    virtual data_ptr_t AddMutationCountDataNode(const std::string & name = \"mutation_count\", const std::string & mutation = \"substitution\") = 0;\n\n    virtual size_t GetNumActive() const = 0;\n    virtual size_t GetNumAncestors() const = 0;\n    virtual size_t GetNumOutside() const = 0;\n    virtual size_t GetTreeSize() const = 0;\n    virtual size_t GetNumTaxa() const = 0;\n    virtual int GetPhylogeneticDiversity() const = 0;\n    virtual double GetMeanPairwiseDistance(bool branch_only) const = 0;\n    virtual double GetSumPairwiseDistance(bool branch_only) const = 0;\n    virtual double GetVariancePairwiseDistance(bool branch_only) const = 0;\n    virtual emp::vector<double> GetPairwiseDistances(bool branch_only) const = 0;\n    virtual int GetMRCADepth() const = 0;\n    virtual void AddOrg(ORG && org, int pos, int update, bool next) = 0;\n    virtual void AddOrg(ORG & org, int pos, int update, bool next) = 0;\n    virtual bool RemoveOrg(int pos) = 0;\n    virtual bool RemoveNextOrg(int pos) = 0;\n    virtual void PrintStatus(std::ostream & os) const = 0;\n    virtual double CalcDiversity() const = 0;\n    virtual void Update() = 0;\n    virtual void SetNextParent(int pos) = 0;\n\n  };\n\n  /// @brief A tool to track phylogenetic relationships among organisms.\n  /// The systematics class tracks the relationships among all organisms based on the INFO_TYPE\n  /// provided.  If an offspring has the same value for INFO_TYPE as its parent, it is grouped into\n  /// the same taxon.  Otherwise a new Taxon is created and the old one is used as its parent in\n  /// the phylogeny.  If the provided INFO_TYPE is the organsism's genome, a traditional phylogeny\n  /// is formed, with genotypes.  If the organism's behavior/task set is used, then organisms are\n  /// grouped by phenotypes.  If the organsims's position is used, the evolutionary path through\n  /// space is tracked.  Any other aspect of organisms can be tracked this way as well.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT = emp::datastruct::no_data>\n  class Systematics : public SystematicsBase<ORG> {\n  private:\n    using parent_t = SystematicsBase<ORG>;\n    using taxon_t = Taxon<ORG_INFO, DATA_STRUCT>;\n    using hash_t = typename Ptr<taxon_t>::hash_t;\n    using fun_calc_info_t = std::function<ORG_INFO(ORG &)>;\n\n    fun_calc_info_t calc_info_fun;\n    Ptr<taxon_t> next_parent;\n\n    using parent_t::store_active;\n    using parent_t::store_ancestors;\n    using parent_t::store_outside;\n    using parent_t::archive;\n    using parent_t::store_position;\n    using parent_t::track_synchronous;\n    using parent_t::org_count;\n    using parent_t::total_depth;\n    using parent_t::num_roots;\n    using parent_t::next_id;\n    using parent_t::curr_update;\n\n    using typename parent_t::data_ptr_t;\n    using parent_t::GetNumActive;\n    using parent_t::GetNumAncestors;\n    using parent_t::GetNumOutside;\n    using parent_t::GetTreeSize;\n    using parent_t::GetNumTaxa;\n    // using parent_t::OnNew;\n    // using parent_t::OnPrune;\n    using parent_t::GetPhylogeneticDiversity;\n    // using parent_t::GetTaxonDistinctiveness;\n    // using parent_t::GetEvolutionaryDistinctiveness;\n    using parent_t::GetMeanPairwiseDistance;\n    using parent_t::GetSumPairwiseDistance;\n    using parent_t::GetVariancePairwiseDistance;\n    using parent_t::GetPairwiseDistances;\n    // using parent_t::GetDistanceToRoot;\n    // using parent_t::GetBranchesToRoot;\n    // using parent_t::GetMRCA;\n    using parent_t::GetMRCADepth;\n    using parent_t::AddOrg;\n    using parent_t::RemoveOrg;\n    using parent_t::RemoveNextOrg;\n    // using parent_t::Parent;\n    using parent_t::PrintStatus;\n    // using parent_t::PrintLineage;\n    using parent_t::CalcDiversity;\n    using parent_t::Update;\n    using parent_t::SetNextParent;\n\n    using parent_t::GetDataNode;\n    using parent_t::AddDataNode;\n    using parent_t::AddEvolutionaryDistinctivenessDataNode;\n    using parent_t::AddPairwiseDistanceDataNode;\n    using parent_t::AddPhylogeneticDiversityDataNode;\n    using parent_t::AddDeleteriousStepDataNode;\n    using parent_t::AddVolatilityDataNode;\n    using parent_t::AddUniqueTaxaDataNode;\n    using parent_t::AddMutationCountDataNode;\n\n    std::unordered_set< Ptr<taxon_t>, hash_t > active_taxa;   ///< A set of all living taxa.\n    std::unordered_set< Ptr<taxon_t>, hash_t > ancestor_taxa; ///< A set of all dead, ancestral taxa.\n    std::unordered_set< Ptr<taxon_t>, hash_t > outside_taxa;  ///< A set of all dead taxa w/o descendants.\n\n    emp::vector<Ptr<taxon_t> > taxon_locations;\n    emp::vector<Ptr<taxon_t> > next_taxon_locations;\n\n    Signal<void(Ptr<taxon_t>)> on_new_sig; ///< Trigger when any organism is pruned from tree\n    Signal<void(Ptr<taxon_t>)> on_prune_sig; ///< Trigger when any organism is pruned from tree\n\n    mutable Ptr<taxon_t> mrca;  ///< Most recent common ancestor in the population.\n\n    /// Called wheneven a taxon has no organisms AND no descendants.\n    void Prune(Ptr<taxon_t> taxon);\n\n    /// Called when an offspring taxa has been deleted.\n    void RemoveOffspring(Ptr<taxon_t> taxon);\n\n    /// Called when there are no more living members of a taxon.  There may be descendants.\n    void MarkExtinct(Ptr<taxon_t> taxon);\n\n\n  public:\n\n    /**\n     * Contructor for Systematics; controls what information should be stored.\n     * @param store_active     Should living organisms' taxa be tracked? (typically yes!)\n     * @param store_ancestors  Should ancestral organims' taxa be maintained?  (yes for lineages!)\n     * @param store_outside    Should all dead taxa be maintained? (typically no; it gets BIG!)\n     */\n\n    Systematics(fun_calc_info_t calc_taxon, bool _active=true, bool _anc=true, bool _all=false, bool _pos=true)\n      : parent_t(_active, _anc, _all, _pos)\n      , calc_info_fun(calc_taxon)\n      , active_taxa(), ancestor_taxa(), outside_taxa()\n      , mrca(nullptr) { ; }\n    Systematics(const Systematics &) = delete;\n    Systematics(Systematics &&) = default;\n    ~Systematics() {\n      for (auto x : active_taxa) x.Delete();\n      for (auto x : ancestor_taxa) x.Delete();\n      for (auto x : outside_taxa) x.Delete();\n      active_taxa.clear();\n      ancestor_taxa.clear();\n      outside_taxa.clear();\n    }\n\n\n    void Update() {\n      ++curr_update;\n      if (track_synchronous) {\n        std::swap(taxon_locations, next_taxon_locations);\n        next_taxon_locations.resize(0);\n      }\n    }\n\n    void SetCalcInfoFun(fun_calc_info_t f) {calc_info_fun = f;}\n\n    // Currently using raw pointers because of a weird bug in emp::Ptr. Should switch when fixed.\n    std::unordered_set< Ptr<taxon_t>, hash_t > * GetActivePtr() { return &active_taxa; }\n    const std::unordered_set< Ptr<taxon_t>, hash_t > & GetActive() const { return active_taxa; }\n    const std::unordered_set< Ptr<taxon_t>, hash_t > & GetAncestors() const { return ancestor_taxa; }\n\n    /// How many taxa are still active in the population?\n    size_t GetNumActive() const { return active_taxa.size(); }\n\n    /// How many taxa are ancestors of living organisms (but have died out themselves)?\n    size_t GetNumAncestors() const { return ancestor_taxa.size(); }\n\n    /// How many taxa are stored that have died out, as have their descendents?\n    size_t GetNumOutside() const { return outside_taxa.size(); }\n\n    /// How many taxa are in the current phylogeny?\n    size_t GetTreeSize() const { return GetNumActive() + GetNumAncestors(); }\n\n    /// How many taxa are stored in total?\n    size_t GetNumTaxa() const { return GetTreeSize() + GetNumOutside(); }\n\n    void SetNextParent(int pos) {\n      emp_assert(pos < (int)taxon_locations.size(), \"Invalid parent\", pos, taxon_locations.size());\n      if (pos == -1) {\n        next_parent = nullptr;\n      } else {\n        emp_assert(pos >= 0, \"Invalid parent\", pos);\n        next_parent = taxon_locations[pos];\n      }\n    }\n\n    void SetNextParent(Ptr<taxon_t> p) {\n      next_parent = p;\n    }\n\n    SignalKey OnNew(std::function<void(Ptr<taxon_t>)> & fun) { return on_new_sig.AddAction(fun); }\n\n    /// Privide a function for Systematics to call each time a taxon is about to be pruned.\n    /// Trigger:  Taxon is about to be killed\n    /// Argument: Pounter to taxon\n    SignalKey OnPrune(std::function<void(Ptr<taxon_t>)> & fun) { return on_prune_sig.AddAction(fun); }\n\n    virtual data_ptr_t\n    AddEvolutionaryDistinctivenessDataNode(const std::string & name = \"evolutionary_distinctiveness\") {\n      auto node = AddDataNode(name);\n      node->AddPullSet([this](){\n        emp::vector<double> result;\n        for (auto tax : active_taxa) {\n          result.push_back(GetEvolutionaryDistinctiveness(tax, curr_update));\n        }\n        return result;\n      });\n\n      return node;\n    }\n\n    virtual data_ptr_t AddPairwiseDistanceDataNode(const std::string & name = \"pairwise_distances\") {\n      auto node = AddDataNode(name);\n      node->AddPullSet([this](){\n        return GetPairwiseDistances();\n      });\n      return node;\n    }\n\n    virtual data_ptr_t AddPhylogeneticDiversityDataNode(const std::string & name = \"phylogenetic_diversity\") {\n      auto node = AddDataNode(name);\n      node->AddPull([this](){\n        return GetPhylogeneticDiversity();\n      });\n      return node;\n    }\n\n\n    virtual data_ptr_t\n    AddDeleteriousStepDataNode(const std::string & name = \"deleterious_steps\") {\n      return AddDeleteriousStepDataNodeImpl(1, name);\n    }\n\n    data_ptr_t AddDeleteriousStepDataNodeImpl(bool decoy, const std::string & name = \"deleterious_steps\") {\n      emp_assert(false, \"Calculating deleterious steps requires suitable DATA_STRUCT\");\n      return AddDataNode(name);\n    }\n\n    template <typename T=int>\n    data_ptr_t\n    AddDeleteriousStepDataNodeImpl(typename std::enable_if<DATA_STRUCT::has_fitness_t::value, T>::type decoy, const std::string & name = \"deleterious_steps\") {\n      auto node = AddDataNode(name);\n      node->AddPullSet([this](){\n        emp::vector<double> result;\n        for (auto tax : active_taxa) {\n          result.push_back(CountDeleteriousSteps(tax));\n        }\n        return result;\n      });\n\n      return node;\n    }\n\n    virtual data_ptr_t\n    AddVolatilityDataNode(const std::string & name = \"volatility\") {\n      return AddVolatilityDataNodeImpl(1, name);\n    }\n\n    data_ptr_t AddVolatilityDataNodeImpl(bool decoy, const std::string & name = \"volatility\") {\n      emp_assert(false, \"Calculating taxon volatility requires suitable DATA_STRUCT\");\n      return AddDataNode(name);\n    }\n\n    template <typename T=int>\n    data_ptr_t\n    AddVolatilityDataNodeImpl(typename std::enable_if<DATA_STRUCT::has_phen_t::value, T>::type decoy, const std::string & name = \"volatility\") {\n      auto node = AddDataNode(name);\n      node->AddPullSet([this](){\n        emp::vector<double> result;\n        for (auto tax : active_taxa) {\n          result.push_back(CountPhenotypeChanges(tax));\n        }\n        return result;\n      });\n\n      return node;\n    }\n\n    virtual data_ptr_t\n    AddUniqueTaxaDataNode(const std::string & name = \"unique_taxa\") {\n      return AddUniqueTaxaDataNodeImpl(1, name);\n    }\n\n    data_ptr_t AddUniqueTaxaDataNodeImpl(bool decoy, const std::string & name = \"unique_taxa\") {\n      emp_assert(false, \"Calculating uniqe taxa requires suitable DATA_STRUCT\");\n      return AddDataNode(name);\n    }\n\n    template <typename T=int>\n    data_ptr_t\n    AddUniqueTaxaDataNodeImpl(typename std::enable_if<DATA_STRUCT::has_phen_t::value, T>::type decoy, const std::string & name = \"unique_taxa\") {\n      auto node = AddDataNode(name);\n      node->AddPullSet([this](){\n        emp::vector<double> result;\n        for (auto tax : active_taxa) {\n          result.push_back(CountUniquePhenotypes(tax));\n        }\n        return result;\n      });\n\n      return node;\n    }\n\n    virtual data_ptr_t\n    AddMutationCountDataNode(const std::string & name = \"mutation_count\", const std::string & mutation = \"substitution\") {\n      return AddMutationCountDataNodeImpl(1, name, mutation);\n    }\n\n    data_ptr_t AddMutationCountDataNodeImpl(bool decoy, const std::string & name = \"mutation_count\", const std::string & mutation = \"substitution\") {\n      emp_assert(false, \"Calculating mutation count requires suitable DATA_STRUCT\");\n      return AddDataNode(name);\n    }\n\n    template <typename T=int>\n    data_ptr_t\n    AddMutationCountDataNodeImpl(typename std::enable_if<DATA_STRUCT::has_mutations_t::value, T>::type decoy, const std::string & name = \"mutation_count\", const std::string & mutation = \"substitution\") {\n      auto node = AddDataNode(name);\n      node->AddPullSet([this,mutation](){\n        emp::vector<double> result;\n        for (auto tax : active_taxa) {\n          result.push_back(CountMuts(tax, mutation));\n        }\n        return result;\n      });\n\n      return node;\n    }\n\n    Ptr<taxon_t> GetTaxonAt(int id) {\n      emp_assert(id < (int) taxon_locations.size(), \"Invalid taxon location\", id, taxon_locations.size());\n      emp_assert(taxon_locations[id], \"No taxon at specified location\");\n      return taxon_locations[id];\n    }\n    Ptr<taxon_t> GetNextTaxonAt(int id) {\n      emp_assert(id < (int)next_taxon_locations.size(), \"Invalid taxon location\");\n      emp_assert(next_taxon_locations[id], \"No taxon at specified location\");\n\n      return next_taxon_locations[id];\n    }\n\n    /** From (Faith 1992, reviewed in Winters et al., 2013), phylogenetic diversity is\n     *  the sum of edges in the minimal spanning tree connected the taxa you're\n     *  calculating diversity of.\n     *\n     * This calculates phylogenetic diversity for all extant taxa in the tree, assuming\n     * all edges from parent to child have a length of one. Possible extensions to this\n     * function that might be useful in the future include:\n     * - Pass it a set of taxon_t pointers and have it calculate PD for just those taxa\n     * - Enable calculation of branch lengths by amount of time that elapsed between\n     *   origination of parent and origination of offspring\n     * - Enable a paleontology compatibility mode where only branching points are calculated\n     */\n    int GetPhylogeneticDiversity() const {\n      // As shown on page 5 of Faith 1992, when all branch lengths are equal the phylogenetic\n      // diversity is the number of internal nodes plus the number of extant taxa - 1.\n      return ancestor_taxa.size() + active_taxa.size() - 1;\n    }\n\n    /** This is a metric of how distinct @param tax is from the rest of the population.\n     *\n     * (From Vane-Wright et al., 1991; reviewed in Winter et al., 2013)\n    */\n    double GetTaxonDistinctiveness(Ptr<taxon_t> tax) const {return 1.0/GetDistanceToRoot(tax);}\n\n    /** This metric (from Isaac, 2007; reviewd in Winter et al., 2013) measures how\n     * distinct @param tax is from the rest of the population, weighted for the amount of\n     * unique evolutionary history that it represents.\n     *\n     * To quantify length of evolutionary history, this method needs @param time: the current\n     * time, in whatever units time is being measured in when taxa are added to the systematics\n     * manager. Note that passing a time in the past will produce innacurate results (since we\n     * don't know what the state of the tree was at that time).\n     *\n     * Assumes the tree is all connected. Will return -1 if this assumption isn't met.\n    */\n    double GetEvolutionaryDistinctiveness(Ptr<taxon_t> tax, double time) const {\n\n      double depth = 0; // Length (in time units) of section we're currently exploring\n      double total = 0; // Count up scores for each section of tree\n      double divisor = tax->GetTotalOffspring() + 1; // Number of extant taxa this will split into (1 for current taxa, plus its offspring)\n\n      // We're stopping when we hit MRCA, so we need to make sure it's been calculated.\n      GetMRCA();\n      if (tax == mrca) {\n        return 0;\n      }\n\n      // std::cout << \"Initializing divisor to \" << divisor << \" Offspinrg: \" << tax->GetTotalOffspring() << std::endl;\n      // std::cout << \"MRCA ID: \" << mrca->GetID() << \" Tax ID: \" << tax->GetID() << \" time: \" << time << \" Orig: \" << tax->GetOriginationTime() << std::endl;\n\n      Ptr<taxon_t> test_taxon = tax->GetParent();\n\n      emp_assert(time != -1 && \"Invalid time - are you passing time to rg?\", time);\n      emp_assert(time >= tax->GetOriginationTime()\n                 && \"GetEvolutionaryDistinctiveness recieved a time that is earlier than the taxon's origination time.\");\n\n      while (test_taxon) {\n\n        emp_assert(test_taxon->GetOriginationTime() != -1 &&\n                  \"Invalid time - are you passing time to rg?\");\n\n        depth += time - test_taxon->GetOriginationTime();\n        // std::cout << \"Tax: \" << test_taxon->GetID() << \" depth: \" << depth << \" time: \" << time  << \" Orig: \" << test_taxon->GetOriginationTime() << \" divisor: \" << divisor << std::endl;\n        time = test_taxon->GetOriginationTime();\n        if (test_taxon == mrca || !test_taxon) {\n          // Stop when everything has converged or when we hit the root.\n          // std::cout << (int)(test_taxon == mrca) << \" depth: \" << depth << \" divisor: \" << divisor << std::endl;\n          total += depth/divisor;\n          return total;\n        } else if (test_taxon->GetNumOrgs() > 0) {\n          // If this taxon is still alive we need to update the divisor\n          // std::cout << \"Alive point\" << \" depth: \" << depth << \" divisor: \" << divisor << std::endl;\n          total += depth/divisor;\n          depth = 0;\n          divisor = test_taxon->GetTotalOffspring() + 1;\n        } else if (test_taxon->GetNumOff() > 1) {\n          // This is a branch point. We need to add the things on the other branch to the divisor..\n          // std::cout << \"Branch point\" << \" depth: \" << depth << \" divisor: \" << divisor << std::endl;\n          total += depth/divisor;\n          depth = 0;\n          divisor = test_taxon->GetTotalOffspring();\n        }\n\n        test_taxon = test_taxon->GetParent();\n      }\n\n      return -1;\n    }\n\n    /** Calculates mean pairwise distance between extant taxa (Webb and Losos, 2000).\n     * This measurement is also called Average Taxonomic Diversity (Warwick and Clark, 1998)\n     * (for demonstration of equivalence see Tucker et al, 2016). This measurment tells\n     * you about the amount of distinctness in the community as a whole.\n     *\n     * @param branch_only only counts distance in terms of nodes that represent a branch\n     * between two extant taxa (poentially useful for comparison to biological data, where\n     * non-branching nodes generally cannot be inferred).\n     *\n     * This measurement assumes that the tree is fully connected. Will return -1\n     * if this is not the case.\n     * */\n    double GetMeanPairwiseDistance(bool branch_only=false) const {\n      emp::vector<double> dists = GetPairwiseDistances(branch_only);\n      return (double)Sum(dists)/dists.size();\n    }\n\n    /** Calculates summed pairwise distance between extant taxa. Tucker et al 2017 points\n     *  out that this is a measure of phylogenetic richness.\n     *\n     * @param branch_only only counts distance in terms of nodes that represent a branch\n     * between two extant taxa (poentially useful for comparison to biological data, where\n     * non-branching nodes generally cannot be inferred).\n     *\n     * This measurement assumes that the tree is fully connected. Will return -1\n     * if this is not the case.\n     * */\n    double GetSumPairwiseDistance(bool branch_only=false) const {\n      emp::vector<double> v = GetPairwiseDistances(branch_only);\n      return Sum(v);\n    }\n\n    /** Calculates variance of pairwise distance between extant taxa. Tucker et al 2017 points\n     *  out that this is a measure of phylogenetic regularity.\n     *\n     * @param branch_only only counts distance in terms of nodes that represent a branch\n     * between two extant taxa (poentially useful for comparison to biological data, where\n     * non-branching nodes generally cannot be inferred).\n     *\n     * This measurement assumes that the tree is fully connected. Will return -1\n     * if this is not the case.\n     * */\n    double GetVariancePairwiseDistance(bool branch_only=false) const {\n      emp::vector<double> v = GetPairwiseDistances(branch_only);\n      return Variance(v);\n    }\n\n    /** Calculates a vector of all pairwise distances between extant taxa.\n     *\n     * @param branch_only only counts distance in terms of nodes that represent a branch\n     * between two extant taxa (poentially useful for comparison to biological data, where\n     * non-branching nodes generally cannot be inferred).\n     *\n     * This method assumes that the tree is fully connected. Will return -1\n     * if this is not the case.\n     * */\n    emp::vector<double> GetPairwiseDistances(bool branch_only=false) const {\n      // The overarching approach here is to start with a bunch of pointers to all\n      // extant organisms (since that will include all leaves). Then we trace back up\n      // the tree, keeping track of distances. When things meet up, we calculate\n      // distances between the nodes on the sides that just met up.\n\n      emp::vector<double> dists;\n\n      std::map< Ptr<taxon_t>, emp::vector<emp::vector<int>> > curr_pointers;\n      std::map< Ptr<taxon_t>, emp::vector<emp::vector<int>> > next_pointers;\n\n\n      for (Ptr<taxon_t> tax : active_taxa) {\n        curr_pointers[tax] = emp::vector<emp::vector<int>>({{0}});\n      }\n\n      // std::cout << \"Starting curr_pointers size: \" << curr_pointers.size() << std::endl;\n\n      while (curr_pointers.size() > 0) {\n        for (auto & tax : curr_pointers) {\n          bool alive = tax.first->GetNumOrgs() > 0;\n          // std::cout << tax.first << \" has \" << to_string(tax.second) << \"and is waiting for \" << tax.first->GetNumOff() + int(alive) << std::endl;\n          if ( tax.second.size() < tax.first->GetNumOff() + int(alive)) {\n            if (Has(next_pointers, tax.first)) {\n              // In case an earlier iteration added this node to next_pointers\n              for (auto vec : tax.second) {\n                next_pointers[tax.first].push_back(vec);\n              }\n            } else {\n              next_pointers[tax.first] = curr_pointers[tax.first];\n            }\n            continue;\n          }\n          emp_assert(tax.first->GetNumOff() + int(alive) == tax.second.size(), tax.first->GetNumOff(), alive, to_string(tax.second), tax.second.size());\n\n          // Okay, things should have just met up. Let's compute the distances\n          // between everything that just met.\n\n          if (tax.second.size() > 1) {\n\n            for (size_t i = 0; i < tax.second.size(); i++ ) {\n              for (size_t j = i+1; j < tax.second.size(); j++) {\n                for (int disti : tax.second[i]) {\n                  for (int distj : tax.second[j]) {\n                    // std::cout << \"Adding \" << disti << \" and \" << distj << std::endl;\n                    dists.push_back(disti+distj);\n                  }\n                }\n              }\n            }\n          }\n          // std::cout << \"dists \" << to_string(dists) << std::endl;\n          // Increment distances and stick them in new vector\n          emp::vector<int> new_dist_vec;\n          for (auto & vec : tax.second) {\n            for (int el : vec) {\n              new_dist_vec.push_back(el+1);\n            }\n          }\n\n          // std::cout << \"new_dist_vec \" << to_string(new_dist_vec) << std::endl;\n\n          next_pointers.erase(tax.first);\n\n          Ptr<taxon_t> test_taxon = tax.first->GetParent();\n          while (test_taxon && test_taxon->GetNumOff() == 1 && test_taxon->GetNumOrgs() < 0) {\n            if (!branch_only) {\n              for (size_t i = 0; i < new_dist_vec.size(); i++){\n                new_dist_vec[i]++;\n              }\n            }\n            test_taxon = test_taxon->GetParent();\n          }\n\n          if (!test_taxon) {\n            continue;\n          } else if (!Has(next_pointers, test_taxon)) {\n            next_pointers[test_taxon] = emp::vector<emp::vector<int> >({new_dist_vec});\n          } else {\n            next_pointers[test_taxon].push_back(new_dist_vec);\n          }\n        }\n        curr_pointers = next_pointers;\n        next_pointers.clear();\n        // std::cout << curr_pointers.size() << std::endl;\n      }\n\n      if (dists.size() != (active_taxa.size()*(active_taxa.size()-1))/2) {\n        // The tree is not connected\n        // It's possible we should do something different here...\n        return dists;\n      }\n\n      // std::cout << \"Total: \" << total << \"Dists: \" << dists.size() << std::endl;\n\n      return dists;\n\n    }\n\n\n    /** Counts the total number of ancestors between @param tax and MRCA, if there is one. If\n     *  there is no common ancestor, distance to the root of this tree is calculated instead.\n    */\n    int GetDistanceToRoot(Ptr<taxon_t> tax) const {\n      // Now, trace the line of descent, updating the candidate as we go.\n      GetMRCA();\n\n      int depth = 0;\n      Ptr<taxon_t> test_taxon = tax->GetParent();\n      while (test_taxon) {\n        depth++;\n        if (test_taxon == mrca || !test_taxon) {\n          return depth;\n        }\n        test_taxon = test_taxon->GetParent();\n      }\n      return depth;\n    }\n\n    /** Counts the number of branching points leading to multiple extant taxa\n     * between @param tax and the most-recent common ancestor (or the root of its subtree,\n     * if no MRCA exists). This is useful because a lot\n     * of stats for phylogenies are designed for phylogenies reconstructed from extant taxa.\n     * These phylogenies generally only contain branching points, rather than every ancestor\n     * along the way to the current taxon.*/\n    int GetBranchesToRoot(Ptr<taxon_t> tax) const {\n      GetMRCA();\n\n      int depth = 0;\n      Ptr<taxon_t> test_taxon = tax->GetParent();\n      while (test_taxon) {\n        if (test_taxon == mrca || !test_taxon) {\n          return depth;\n        } else if (test_taxon->GetNumOff() > 1) {\n          depth++;\n        }\n        test_taxon = test_taxon->GetParent();\n      }\n      return depth;\n    }\n\n\n\n    /// Request a pointer to the Most-Recent Common Ancestor for the population.\n    Ptr<taxon_t> GetMRCA() const;\n\n    /// Request the depth of the Most-Recent Common Ancestor; return -1 for none.\n    int GetMRCADepth() const;\n\n    /// Add information about a new organism, including its stored info and parent's taxon;\n    /// If you would like the systematics manager to track taxon age, you can also supply\n    /// the update at which the taxon is being added.\n    /// return a pointer for the associated taxon.\n    void AddOrg(ORG && org, int pos, int update=-1, bool next=false);\n    Ptr<taxon_t> AddOrg(ORG && org, int pos, Ptr<taxon_t> parent=nullptr, int update=-1, bool next=false);\n    Ptr<taxon_t> AddOrg(ORG && org, Ptr<taxon_t> parent=nullptr, int update=-1, bool next=false);\n\n    void AddOrg(ORG & org, int pos, int update=-1, bool next=false);\n    Ptr<taxon_t> AddOrg(ORG & org, int pos, Ptr<taxon_t> parent=nullptr, int update=-1, bool next=false);\n    Ptr<taxon_t> AddOrg(ORG & org, Ptr<taxon_t> parent=nullptr, int update=-1, bool next=false);\n\n\n    /// Remove an instance of an organism; track when it's gone.\n    bool RemoveOrg(int pos);\n    bool RemoveOrg(Ptr<taxon_t> taxon);\n\n    /// Remove org from next population (for use with synchronous generations)\n    bool RemoveNextOrg(int pos);\n    bool RemoveNextOrg(Ptr<taxon_t> taxon);\n\n    /// Climb up a lineage...\n    Ptr<taxon_t> Parent(Ptr<taxon_t> taxon) const;\n\n    /// Print details about the Systematics manager.\n    void PrintStatus(std::ostream & os=std::cout) const;\n\n    /// Print whole lineage.\n    void PrintLineage(Ptr<taxon_t> taxon, std::ostream & os=std::cout) const;\n\n    /// Calculate the genetic diversity of the population.\n    double CalcDiversity() const;\n\n  };\n\n  // =============================================================\n  // ===                                                       ===\n  // ===  Out-of-class member function definitions from above  ===\n  // ===                                                       ===\n  // =============================================================\n\n  // Should be called wheneven a taxon has no organisms AND no descendants.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  void Systematics<ORG, ORG_INFO, DATA_STRUCT>::Prune(Ptr<taxon_t> taxon) {\n    on_prune_sig.Trigger(taxon);\n    RemoveOffspring( taxon->GetParent() );           // Notify parent of the pruning.\n    if (store_ancestors) ancestor_taxa.erase(taxon); // Clear from ancestors set (if there)\n    if (store_outside) outside_taxa.insert(taxon);   // Add to outside set (if tracked)\n    else taxon.Delete();                             //  ...or else get rid of it.\n  }\n\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  void Systematics<ORG, ORG_INFO, DATA_STRUCT>::RemoveOffspring(Ptr<taxon_t> taxon) {\n    if (!taxon) { num_roots--; return; }             // Offspring was root; remove and return.\n    bool still_active = taxon->RemoveOffspring();    // Taxon still active w/ 1 fewer offspring?\n    if (!still_active) Prune(taxon);                 // If out of offspring, remove from tree.\n\n    // If the taxon is still active AND the is the current mrca AND now has only one offspring,\n    // clear the MRCA for lazy re-evaluation later.\n    else if (taxon == mrca && taxon->GetNumOff() == 1) mrca = nullptr;\n  }\n\n  // Mark a taxon extinct if there are no more living members.  There may be descendants.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  void Systematics<ORG, ORG_INFO, DATA_STRUCT>::MarkExtinct(Ptr<taxon_t> taxon) {\n    emp_assert(taxon);\n    emp_assert(taxon->GetNumOrgs() == 0);\n\n    if (taxon->GetParent()) {\n      // Update extant descendant count for all ancestors\n      taxon->GetParent()->RemoveTotalOffspring();\n    }\n\n    if (store_active) active_taxa.erase(taxon);\n    if (!archive) {   // If we don't archive taxa, delete them.\n      taxon.Delete();\n      return;\n    }\n\n    if (store_ancestors) ancestor_taxa.insert(taxon);  // Move taxon to ancestors...\n    if (taxon->GetNumOff() == 0) Prune(taxon);         // ...and prune from there if needed.\n  }\n\n\n  // Request a pointer to the Most-Recent Common Ancestor for the population.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  Ptr<typename Systematics<ORG, ORG_INFO, DATA_STRUCT>::taxon_t> Systematics<ORG, ORG_INFO, DATA_STRUCT>::GetMRCA() const {\n    if (!mrca && num_roots == 1) {  // Determine if we need to calculate the MRCA.\n      // First, find a candidate among the living taxa.  Only taxa that have one offsrping\n      // can be on the line-of-descent to the MRCA, so anything else is a good start point.\n      // There must be at least one!  Stop as soon as we find a candidate.\n      Ptr<taxon_t> candidate(nullptr);\n      for (auto x : active_taxa) {\n        if (x->GetNumOff() != 1) { candidate = x; break; }\n      }\n\n      // Now, trace the line of descent, updating the candidate as we go.\n      Ptr<taxon_t> test_taxon = candidate->GetParent();\n      while (test_taxon) {\n        emp_assert(test_taxon->GetNumOff() >= 1);\n        if (test_taxon->GetNumOff() > 1) candidate = test_taxon;\n        test_taxon = test_taxon->GetParent();\n      }\n      mrca = candidate;\n    }\n    return mrca;\n  }\n\n  // Request the depth of the Most-Recent Common Ancestor; return -1 for none.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  int Systematics<ORG, ORG_INFO, DATA_STRUCT>::GetMRCADepth() const {\n    GetMRCA();\n    if (mrca) return (int) mrca->GetDepth();\n    return -1;\n  }\n\n\n\n  // Add information about a new organism, including its stored info and parent's taxon;\n  // Can't return a pointer for the associated taxon because of obnoxious inheritance problems\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  // Ptr<typename Systematics<ORG, ORG_INFO, DATA_STRUCT>::taxon_t>\n  void Systematics<ORG, ORG_INFO, DATA_STRUCT>::AddOrg(ORG & org, int pos, int update, bool next) {\n    emp_assert(store_position, \"Trying to pass position to a systematics manager that can't use it\");\n    // emp_assert(next_parent, \"Adding organism with no parent specified and no next_parent set\");\n    AddOrg(org, pos, next_parent, update, next);\n    next_parent = nullptr;\n  }\n\n  // Add information about a new organism, including its stored info and parent's taxon;\n  // Can't return a pointer for the associated taxon because of obnoxious inheritance problems\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  // Ptr<typename Systematics<ORG, ORG_INFO, DATA_STRUCT>::taxon_t>\n  void Systematics<ORG, ORG_INFO, DATA_STRUCT>::AddOrg(ORG && org, int pos, int update, bool next) {\n    emp_assert(store_position, \"Trying to pass position to a systematics manager that can't use it\");\n    // emp_assert(next_parent, \"Adding organism with no parent specified and no next_parent set\");\n    AddOrg(org, pos, next_parent, update, next);\n    next_parent = nullptr;\n  }\n\n\n  // Version for if you aren't tracking positions\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  Ptr<typename Systematics<ORG, ORG_INFO, DATA_STRUCT>::taxon_t>\n  Systematics<ORG, ORG_INFO, DATA_STRUCT>::AddOrg(ORG & org, Ptr<taxon_t> parent, int update, bool next) {\n    return AddOrg(org, -1, parent, update, next);\n  }\n\n  // Version for if you aren't tracking positions\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  Ptr<typename Systematics<ORG, ORG_INFO, DATA_STRUCT>::taxon_t>\n  Systematics<ORG, ORG_INFO, DATA_STRUCT>::AddOrg(ORG && org, Ptr<taxon_t> parent, int update, bool next) {\n    return AddOrg(org, -1, parent, update, next);\n  }\n\n  // Add information about a new organism, including its stored info and parent's taxon;\n  // return a pointer for the associated taxon.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  Ptr<typename Systematics<ORG, ORG_INFO, DATA_STRUCT>::taxon_t>\n  Systematics<ORG, ORG_INFO, DATA_STRUCT>::AddOrg(ORG && org, int pos, Ptr<taxon_t> parent, int update, bool next) {\n    return AddOrg(org, pos, parent, update, next);\n  }\n\n  // Add information about a new organism, including its stored info and parent's taxon;\n  // return a pointer for the associated taxon.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  Ptr<typename Systematics<ORG, ORG_INFO, DATA_STRUCT>::taxon_t>\n  Systematics<ORG, ORG_INFO, DATA_STRUCT>::AddOrg(ORG & org, int pos, Ptr<taxon_t> parent, int update, bool next) {\n    org_count++;                  // Keep count of how many organisms are being tracked.\n\n    ORG_INFO info = calc_info_fun(org);\n\n    Ptr<taxon_t> cur_taxon = parent;\n\n    // If this organism needs a new taxon, build it!\n    if (!cur_taxon || cur_taxon->GetInfo() != info) {\n      if (!cur_taxon) {                                 // No parent -> NEW tree\n        num_roots++;                                    // ...track extra root.\n        mrca = nullptr;                                 // ...nix old common ancestor\n      }\n\n      cur_taxon = NewPtr<taxon_t>(++next_id, info, parent);  // Build new taxon.\n      on_new_sig.Trigger(cur_taxon);\n      if (store_active) active_taxa.insert(cur_taxon);       // Store new taxon.\n      if (parent) parent->AddOffspring();                    // Track tree info.\n\n      cur_taxon->SetOriginationTime(update);\n    }\n\n    if (store_position && pos >= 0) {\n      if (next) {\n        if (pos >= (int)next_taxon_locations.size()) {\n          next_taxon_locations.resize(pos+1);\n        }\n        next_taxon_locations[pos] = cur_taxon;\n\n      } else {\n        if (pos >= (int)taxon_locations.size()) {\n          taxon_locations.resize(pos+1);\n        }\n        taxon_locations[pos] = cur_taxon;\n      }\n    }\n\n    cur_taxon->AddOrg();                    // Record the current organism in its taxon.\n    total_depth += cur_taxon->GetDepth();   // Track the total depth (for averaging)\n    return cur_taxon;                       // Return the taxon used.\n  }\n\n  // Remove an instance of an organism; track when it's gone.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  bool Systematics<ORG, ORG_INFO, DATA_STRUCT>::RemoveOrg(int pos) {\n    emp_assert(store_position, \"Trying to remove org based on position from systematics manager that doesn't track it.\");\n    emp_assert(pos < (int)taxon_locations.size(), \"Invalid position requested for removal\", pos, taxon_locations.size());\n    bool active = RemoveOrg(taxon_locations[pos]);\n    taxon_locations[pos] = nullptr;\n    return active;\n  }\n\n  // Remove an instance of an organism; track when it's gone.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  bool Systematics<ORG, ORG_INFO, DATA_STRUCT>::RemoveOrg(Ptr<taxon_t> taxon) {\n    emp_assert(taxon);\n\n    // Update stats\n    org_count--;\n    total_depth -= taxon->GetDepth();\n\n    // emp_assert(Has(active_taxa, taxon));\n    const bool active = taxon->RemoveOrg();\n    if (!active) MarkExtinct(taxon);\n\n    return active;\n  }\n\n  // Remove an instance of an organism; track when it's gone.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  bool Systematics<ORG, ORG_INFO, DATA_STRUCT>::RemoveNextOrg(int pos) {\n    emp_assert(track_synchronous, \"Calling RemoveNextOrg on non-synchronous population. Did you mean to use RemoveOrg?\");\n    emp_assert(store_position, \"Trying to remove org based on position from systematics manager that doesn't track it.\");\n    emp_assert(pos < (int)next_taxon_locations.size(), \"Invalid position requested for removal\", pos, taxon_locations.size());\n\n    bool active = RemoveOrg(next_taxon_locations[pos]);\n    next_taxon_locations[pos] = nullptr;\n    return active;\n  }\n\n  // Remove an instance of an organism; track when it's gone.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  bool Systematics<ORG, ORG_INFO, DATA_STRUCT>::RemoveNextOrg(Ptr<taxon_t> taxon) {\n    emp_assert(track_synchronous, \"Calling RemoveNextOrg on non-synchronous population. Did you mean to use RemoveOrg?\");\n    emp_assert(taxon);\n\n    // Update stats\n    org_count--;\n    total_depth -= taxon->GetDepth();\n\n    // emp_assert(Has(active_taxa, taxon));\n    const bool active = taxon->RemoveOrg();\n    if (!active) MarkExtinct(taxon);\n\n    return active;\n  }\n\n\n  // Climb up a lineage...\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  Ptr<typename Systematics<ORG, ORG_INFO, DATA_STRUCT>::taxon_t> Systematics<ORG, ORG_INFO, DATA_STRUCT>::Parent(Ptr<taxon_t> taxon) const {\n    emp_assert(taxon);\n    emp_assert(Has(active_taxa, taxon));\n    return taxon->GetParent();\n  }\n\n  // Print details about the Systematics manager.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  void Systematics<ORG, ORG_INFO, DATA_STRUCT>::PrintStatus(std::ostream & os) const {\n    os << \"Systematics Status:\\n\";\n    os << \" store_active=\" << store_active\n       << \" store_ancestors=\" << store_ancestors\n       << \" store_outside=\" << store_outside\n       << \" archive=\" << archive\n       << \" next_id=\" << next_id\n       << std::endl;\n    os << \"Active count:   \" << active_taxa.size();\n    for (const auto & x : active_taxa) {\n      os << \" [\" << x->GetID() << \"|\" << x->GetNumOrgs() << \",\" << x->GetNumOff() << \"|\"\n         << ((bool) x->GetParent()) << \"]\";\n    }\n    os << std::endl;\n\n    os << \"Ancestor count: \" << ancestor_taxa.size();\n    for (const auto & x : ancestor_taxa) {\n      os << \" [\" << x->GetID() << \"|\" << x->GetNumOrgs() << \",\" << x->GetNumOff() << \"|\"\n         << ((bool) x->GetParent()) << \"]\";\n    }\n    os << std::endl;\n\n    os << \"Outside count:  \" << outside_taxa.size();\n    for (const auto & x : outside_taxa) {\n      os << \" [\" << x->GetID() << \"|\" << x->GetNumOrgs() << \",\" << x->GetNumOff() << \"|\"\n         << ((bool) x->GetParent()) << \"]\";\n    }\n    os << std::endl;\n  }\n\n  // Print whole lineage.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  void Systematics<ORG, ORG_INFO, DATA_STRUCT>::PrintLineage(Ptr<taxon_t> taxon, std::ostream & os) const {\n    os << \"Lineage:\\n\";\n    while (taxon) {\n      os << taxon->GetInfo() << std::endl;\n      taxon = taxon->GetParent();\n    }\n  }\n\n  // Calculate the genetic diversity of the population.\n  template <typename ORG, typename ORG_INFO, typename DATA_STRUCT>\n  double Systematics<ORG, ORG_INFO, DATA_STRUCT>::CalcDiversity() const {\n    return emp::Entropy(active_taxa, [](Ptr<taxon_t> x){ return x->GetNumOrgs(); }, (double) org_count);\n  }\n\n}\n\n#endif\n","// -*- C++ -*-\n//===-------------------------- unordered_map -----------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_UNORDERED_MAP\n#define _LIBCPP_UNORDERED_MAP\n\n/*\n\n    unordered_map synopsis\n\n#include <initializer_list>\n\nnamespace std\n{\n\ntemplate <class Key, class T, class Hash = hash<Key>, class Pred = equal_to<Key>,\n          class Alloc = allocator<pair<const Key, T>>>\nclass unordered_map\n{\npublic:\n    // types\n    typedef Key                                                        key_type;\n    typedef T                                                          mapped_type;\n    typedef Hash                                                       hasher;\n    typedef Pred                                                       key_equal;\n    typedef Alloc                                                      allocator_type;\n    typedef pair<const key_type, mapped_type>                          value_type;\n    typedef value_type&                                                reference;\n    typedef const value_type&                                          const_reference;\n    typedef typename allocator_traits<allocator_type>::pointer         pointer;\n    typedef typename allocator_traits<allocator_type>::const_pointer   const_pointer;\n    typedef typename allocator_traits<allocator_type>::size_type       size_type;\n    typedef typename allocator_traits<allocator_type>::difference_type difference_type;\n\n    typedef /unspecified/ iterator;\n    typedef /unspecified/ const_iterator;\n    typedef /unspecified/ local_iterator;\n    typedef /unspecified/ const_local_iterator;\n\n    unordered_map()\n        noexcept(\n            is_nothrow_default_constructible<hasher>::value &&\n            is_nothrow_default_constructible<key_equal>::value &&\n            is_nothrow_default_constructible<allocator_type>::value);\n    explicit unordered_map(size_type n, const hasher& hf = hasher(),\n                           const key_equal& eql = key_equal(),\n                           const allocator_type& a = allocator_type());\n    template <class InputIterator>\n        unordered_map(InputIterator f, InputIterator l,\n                      size_type n = 0, const hasher& hf = hasher(),\n                      const key_equal& eql = key_equal(),\n                      const allocator_type& a = allocator_type());\n    explicit unordered_map(const allocator_type&);\n    unordered_map(const unordered_map&);\n    unordered_map(const unordered_map&, const Allocator&);\n    unordered_map(unordered_map&&)\n        noexcept(\n            is_nothrow_move_constructible<hasher>::value &&\n            is_nothrow_move_constructible<key_equal>::value &&\n            is_nothrow_move_constructible<allocator_type>::value);\n    unordered_map(unordered_map&&, const Allocator&);\n    unordered_map(initializer_list<value_type>, size_type n = 0,\n                  const hasher& hf = hasher(), const key_equal& eql = key_equal(),\n                  const allocator_type& a = allocator_type());\n    unordered_map(size_type n, const allocator_type& a)\n      : unordered_map(n, hasher(), key_equal(), a) {}  // C++14\n    unordered_map(size_type n, const hasher& hf, const allocator_type& a)\n      : unordered_map(n, hf, key_equal(), a) {}  // C++14\n    template <class InputIterator>\n      unordered_map(InputIterator f, InputIterator l, size_type n, const allocator_type& a)\n      : unordered_map(f, l, n, hasher(), key_equal(), a) {}  // C++14\n    template <class InputIterator>\n      unordered_map(InputIterator f, InputIterator l, size_type n, const hasher& hf, \n        const allocator_type& a)\n      : unordered_map(f, l, n, hf, key_equal(), a) {}  // C++14\n    unordered_map(initializer_list<value_type> il, size_type n, const allocator_type& a)\n      : unordered_map(il, n, hasher(), key_equal(), a) {}  // C++14\n    unordered_map(initializer_list<value_type> il, size_type n, const hasher& hf, \n      const allocator_type& a)\n      : unordered_map(il, n, hf, key_equal(), a) {}  // C++14\n    ~unordered_map();\n    unordered_map& operator=(const unordered_map&);\n    unordered_map& operator=(unordered_map&&)\n        noexcept(\n            allocator_type::propagate_on_container_move_assignment::value &&\n            is_nothrow_move_assignable<allocator_type>::value &&\n            is_nothrow_move_assignable<hasher>::value &&\n            is_nothrow_move_assignable<key_equal>::value);\n    unordered_map& operator=(initializer_list<value_type>);\n\n    allocator_type get_allocator() const noexcept;\n\n    bool      empty() const noexcept;\n    size_type size() const noexcept;\n    size_type max_size() const noexcept;\n\n    iterator       begin() noexcept;\n    iterator       end() noexcept;\n    const_iterator begin()  const noexcept;\n    const_iterator end()    const noexcept;\n    const_iterator cbegin() const noexcept;\n    const_iterator cend()   const noexcept;\n\n    template <class... Args>\n        pair<iterator, bool> emplace(Args&&... args);\n    template <class... Args>\n        iterator emplace_hint(const_iterator position, Args&&... args);\n    pair<iterator, bool> insert(const value_type& obj);\n    template <class P>\n        pair<iterator, bool> insert(P&& obj);\n    iterator insert(const_iterator hint, const value_type& obj);\n    template <class P>\n        iterator insert(const_iterator hint, P&& obj);\n    template <class InputIterator>\n        void insert(InputIterator first, InputIterator last);\n    void insert(initializer_list<value_type>);\n\n    template <class... Args>\n        pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);          // C++17\n    template <class... Args>\n        pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);               // C++17\n    template <class... Args>\n        iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args); // C++17\n    template <class... Args>\n        iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);      // C++17\n    template <class M>\n        pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);            // C++17\n    template <class M>\n        pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);                 // C++17\n    template <class M>\n        iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);   // C++17\n    template <class M>\n        iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);        // C++17\n\n    iterator erase(const_iterator position);\n    iterator erase(iterator position);  // C++14\n    size_type erase(const key_type& k);\n    iterator erase(const_iterator first, const_iterator last);\n    void clear() noexcept;\n\n    void swap(unordered_map&)\n        noexcept(\n            (!allocator_type::propagate_on_container_swap::value ||\n             __is_nothrow_swappable<allocator_type>::value) &&\n            __is_nothrow_swappable<hasher>::value &&\n            __is_nothrow_swappable<key_equal>::value);\n\n    hasher hash_function() const;\n    key_equal key_eq() const;\n\n    iterator       find(const key_type& k);\n    const_iterator find(const key_type& k) const;\n    size_type count(const key_type& k) const;\n    pair<iterator, iterator>             equal_range(const key_type& k);\n    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;\n\n    mapped_type& operator[](const key_type& k);\n    mapped_type& operator[](key_type&& k);\n\n    mapped_type&       at(const key_type& k);\n    const mapped_type& at(const key_type& k) const;\n\n    size_type bucket_count() const noexcept;\n    size_type max_bucket_count() const noexcept;\n\n    size_type bucket_size(size_type n) const;\n    size_type bucket(const key_type& k) const;\n\n    local_iterator       begin(size_type n);\n    local_iterator       end(size_type n);\n    const_local_iterator begin(size_type n) const;\n    const_local_iterator end(size_type n) const;\n    const_local_iterator cbegin(size_type n) const;\n    const_local_iterator cend(size_type n) const;\n\n    float load_factor() const noexcept;\n    float max_load_factor() const noexcept;\n    void max_load_factor(float z);\n    void rehash(size_type n);\n    void reserve(size_type n);\n};\n\ntemplate <class Key, class T, class Hash, class Pred, class Alloc>\n    void swap(unordered_map<Key, T, Hash, Pred, Alloc>& x,\n              unordered_map<Key, T, Hash, Pred, Alloc>& y)\n              noexcept(noexcept(x.swap(y)));\n\ntemplate <class Key, class T, class Hash, class Pred, class Alloc>\n    bool\n    operator==(const unordered_map<Key, T, Hash, Pred, Alloc>& x,\n               const unordered_map<Key, T, Hash, Pred, Alloc>& y);\n\ntemplate <class Key, class T, class Hash, class Pred, class Alloc>\n    bool\n    operator!=(const unordered_map<Key, T, Hash, Pred, Alloc>& x,\n               const unordered_map<Key, T, Hash, Pred, Alloc>& y);\n\ntemplate <class Key, class T, class Hash = hash<Key>, class Pred = equal_to<Key>,\n          class Alloc = allocator<pair<const Key, T>>>\nclass unordered_multimap\n{\npublic:\n    // types\n    typedef Key                                                        key_type;\n    typedef T                                                          mapped_type;\n    typedef Hash                                                       hasher;\n    typedef Pred                                                       key_equal;\n    typedef Alloc                                                      allocator_type;\n    typedef pair<const key_type, mapped_type>                          value_type;\n    typedef value_type&                                                reference;\n    typedef const value_type&                                          const_reference;\n    typedef typename allocator_traits<allocator_type>::pointer         pointer;\n    typedef typename allocator_traits<allocator_type>::const_pointer   const_pointer;\n    typedef typename allocator_traits<allocator_type>::size_type       size_type;\n    typedef typename allocator_traits<allocator_type>::difference_type difference_type;\n\n    typedef /unspecified/ iterator;\n    typedef /unspecified/ const_iterator;\n    typedef /unspecified/ local_iterator;\n    typedef /unspecified/ const_local_iterator;\n\n    unordered_multimap()\n        noexcept(\n            is_nothrow_default_constructible<hasher>::value &&\n            is_nothrow_default_constructible<key_equal>::value &&\n            is_nothrow_default_constructible<allocator_type>::value);\n    explicit unordered_multimap(size_type n, const hasher& hf = hasher(),\n                           const key_equal& eql = key_equal(),\n                           const allocator_type& a = allocator_type());\n    template <class InputIterator>\n        unordered_multimap(InputIterator f, InputIterator l,\n                      size_type n = 0, const hasher& hf = hasher(),\n                      const key_equal& eql = key_equal(),\n                      const allocator_type& a = allocator_type());\n    explicit unordered_multimap(const allocator_type&);\n    unordered_multimap(const unordered_multimap&);\n    unordered_multimap(const unordered_multimap&, const Allocator&);\n    unordered_multimap(unordered_multimap&&)\n        noexcept(\n            is_nothrow_move_constructible<hasher>::value &&\n            is_nothrow_move_constructible<key_equal>::value &&\n            is_nothrow_move_constructible<allocator_type>::value);\n    unordered_multimap(unordered_multimap&&, const Allocator&);\n    unordered_multimap(initializer_list<value_type>, size_type n = 0,\n                  const hasher& hf = hasher(), const key_equal& eql = key_equal(),\n                  const allocator_type& a = allocator_type());\n    unordered_multimap(size_type n, const allocator_type& a)\n      : unordered_multimap(n, hasher(), key_equal(), a) {}  // C++14\n    unordered_multimap(size_type n, const hasher& hf, const allocator_type& a)\n      : unordered_multimap(n, hf, key_equal(), a) {}  // C++14\n    template <class InputIterator>\n      unordered_multimap(InputIterator f, InputIterator l, size_type n, const allocator_type& a)\n      : unordered_multimap(f, l, n, hasher(), key_equal(), a) {}  // C++14\n    template <class InputIterator>\n      unordered_multimap(InputIterator f, InputIterator l, size_type n, const hasher& hf, \n        const allocator_type& a)\n      : unordered_multimap(f, l, n, hf, key_equal(), a) {}  // C++14\n    unordered_multimap(initializer_list<value_type> il, size_type n, const allocator_type& a)\n      : unordered_multimap(il, n, hasher(), key_equal(), a) {}  // C++14\n    unordered_multimap(initializer_list<value_type> il, size_type n, const hasher& hf, \n      const allocator_type& a)\n      : unordered_multimap(il, n, hf, key_equal(), a) {}  // C++14\n    ~unordered_multimap();\n    unordered_multimap& operator=(const unordered_multimap&);\n    unordered_multimap& operator=(unordered_multimap&&)\n        noexcept(\n            allocator_type::propagate_on_container_move_assignment::value &&\n            is_nothrow_move_assignable<allocator_type>::value &&\n            is_nothrow_move_assignable<hasher>::value &&\n            is_nothrow_move_assignable<key_equal>::value);\n    unordered_multimap& operator=(initializer_list<value_type>);\n\n    allocator_type get_allocator() const noexcept;\n\n    bool      empty() const noexcept;\n    size_type size() const noexcept;\n    size_type max_size() const noexcept;\n\n    iterator       begin() noexcept;\n    iterator       end() noexcept;\n    const_iterator begin()  const noexcept;\n    const_iterator end()    const noexcept;\n    const_iterator cbegin() const noexcept;\n    const_iterator cend()   const noexcept;\n\n    template <class... Args>\n        iterator emplace(Args&&... args);\n    template <class... Args>\n        iterator emplace_hint(const_iterator position, Args&&... args);\n    iterator insert(const value_type& obj);\n    template <class P>\n        iterator insert(P&& obj);\n    iterator insert(const_iterator hint, const value_type& obj);\n    template <class P>\n        iterator insert(const_iterator hint, P&& obj);\n    template <class InputIterator>\n        void insert(InputIterator first, InputIterator last);\n    void insert(initializer_list<value_type>);\n\n    iterator erase(const_iterator position);\n    iterator erase(iterator position);  // C++14\n    size_type erase(const key_type& k);\n    iterator erase(const_iterator first, const_iterator last);\n    void clear() noexcept;\n\n    void swap(unordered_multimap&)\n        noexcept(\n            (!allocator_type::propagate_on_container_swap::value ||\n             __is_nothrow_swappable<allocator_type>::value) &&\n            __is_nothrow_swappable<hasher>::value &&\n            __is_nothrow_swappable<key_equal>::value);\n\n    hasher hash_function() const;\n    key_equal key_eq() const;\n\n    iterator       find(const key_type& k);\n    const_iterator find(const key_type& k) const;\n    size_type count(const key_type& k) const;\n    pair<iterator, iterator>             equal_range(const key_type& k);\n    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;\n\n    size_type bucket_count() const noexcept;\n    size_type max_bucket_count() const noexcept;\n\n    size_type bucket_size(size_type n) const;\n    size_type bucket(const key_type& k) const;\n\n    local_iterator       begin(size_type n);\n    local_iterator       end(size_type n);\n    const_local_iterator begin(size_type n) const;\n    const_local_iterator end(size_type n) const;\n    const_local_iterator cbegin(size_type n) const;\n    const_local_iterator cend(size_type n) const;\n\n    float load_factor() const noexcept;\n    float max_load_factor() const noexcept;\n    void max_load_factor(float z);\n    void rehash(size_type n);\n    void reserve(size_type n);\n};\n\ntemplate <class Key, class T, class Hash, class Pred, class Alloc>\n    void swap(unordered_multimap<Key, T, Hash, Pred, Alloc>& x,\n              unordered_multimap<Key, T, Hash, Pred, Alloc>& y)\n              noexcept(noexcept(x.swap(y)));\n\ntemplate <class Key, class T, class Hash, class Pred, class Alloc>\n    bool\n    operator==(const unordered_multimap<Key, T, Hash, Pred, Alloc>& x,\n               const unordered_multimap<Key, T, Hash, Pred, Alloc>& y);\n\ntemplate <class Key, class T, class Hash, class Pred, class Alloc>\n    bool\n    operator!=(const unordered_multimap<Key, T, Hash, Pred, Alloc>& x,\n               const unordered_multimap<Key, T, Hash, Pred, Alloc>& y);\n\n}  // std\n\n*/\n\n#include <__config>\n#include <__hash_table>\n#include <functional>\n#include <stdexcept>\n#include <tuple>\n\n#include <__debug>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _Key, class _Cp, class _Hash,\n          bool = is_empty<_Hash>::value && !__libcpp_is_final<_Hash>::value\n         >\nclass __unordered_map_hasher\n    : private _Hash\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __unordered_map_hasher()\n        _NOEXCEPT_(is_nothrow_default_constructible<_Hash>::value)\n        : _Hash() {}\n    _LIBCPP_INLINE_VISIBILITY\n    __unordered_map_hasher(const _Hash& __h)\n        _NOEXCEPT_(is_nothrow_copy_constructible<_Hash>::value)\n        : _Hash(__h) {}\n    _LIBCPP_INLINE_VISIBILITY\n    const _Hash& hash_function() const _NOEXCEPT {return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(const _Cp& __x) const\n        {return static_cast<const _Hash&>(*this)(__x.__cc.first);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(const _Key& __x) const\n        {return static_cast<const _Hash&>(*this)(__x);}\n    void swap(__unordered_map_hasher&__y)\n        _NOEXCEPT_(__is_nothrow_swappable<_Hash>::value)\n    {\n        using _VSTD::swap;\n        swap(static_cast<const _Hash&>(*this), static_cast<const _Hash&>(__y));\n    }\n};\n\ntemplate <class _Key, class _Cp, class _Hash>\nclass __unordered_map_hasher<_Key, _Cp, _Hash, false>\n{\n    _Hash __hash_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __unordered_map_hasher()\n        _NOEXCEPT_(is_nothrow_default_constructible<_Hash>::value)\n        : __hash_() {}\n    _LIBCPP_INLINE_VISIBILITY\n    __unordered_map_hasher(const _Hash& __h)\n        _NOEXCEPT_(is_nothrow_copy_constructible<_Hash>::value)\n        : __hash_(__h) {}\n    _LIBCPP_INLINE_VISIBILITY\n    const _Hash& hash_function() const _NOEXCEPT {return __hash_;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(const _Cp& __x) const\n        {return __hash_(__x.__cc.first);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_t operator()(const _Key& __x) const\n        {return __hash_(__x);}\n    void swap(__unordered_map_hasher&__y)\n        _NOEXCEPT_(__is_nothrow_swappable<_Hash>::value)\n    {\n        using _VSTD::swap;\n        swap(__hash_, __y.__hash_);\n    }\n};\n\ntemplate <class _Key, class _Cp, class _Hash, bool __b>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(__unordered_map_hasher<_Key, _Cp, _Hash, __b>& __x,\n     __unordered_map_hasher<_Key, _Cp, _Hash, __b>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\ntemplate <class _Key, class _Cp, class _Pred,\n          bool = is_empty<_Pred>::value && !__libcpp_is_final<_Pred>::value\n         >\nclass __unordered_map_equal\n    : private _Pred\n{\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __unordered_map_equal()\n        _NOEXCEPT_(is_nothrow_default_constructible<_Pred>::value)\n        : _Pred() {}\n    _LIBCPP_INLINE_VISIBILITY\n    __unordered_map_equal(const _Pred& __p)\n        _NOEXCEPT_(is_nothrow_copy_constructible<_Pred>::value)\n        : _Pred(__p) {}\n    _LIBCPP_INLINE_VISIBILITY\n    const _Pred& key_eq() const _NOEXCEPT {return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Cp& __x, const _Cp& __y) const\n        {return static_cast<const _Pred&>(*this)(__x.__cc.first, __y.__cc.first);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Cp& __x, const _Key& __y) const\n        {return static_cast<const _Pred&>(*this)(__x.__cc.first, __y);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Key& __x, const _Cp& __y) const\n        {return static_cast<const _Pred&>(*this)(__x, __y.__cc.first);}\n    void swap(__unordered_map_equal&__y)\n        _NOEXCEPT_(__is_nothrow_swappable<_Pred>::value)\n    {\n        using _VSTD::swap;\n        swap(static_cast<const _Pred&>(*this), static_cast<const _Pred&>(__y));\n    }\n};\n\ntemplate <class _Key, class _Cp, class _Pred>\nclass __unordered_map_equal<_Key, _Cp, _Pred, false>\n{\n    _Pred __pred_;\npublic:\n    _LIBCPP_INLINE_VISIBILITY\n    __unordered_map_equal()\n        _NOEXCEPT_(is_nothrow_default_constructible<_Pred>::value)\n        : __pred_() {}\n    _LIBCPP_INLINE_VISIBILITY\n    __unordered_map_equal(const _Pred& __p)\n        _NOEXCEPT_(is_nothrow_copy_constructible<_Pred>::value)\n        : __pred_(__p) {}\n    _LIBCPP_INLINE_VISIBILITY\n    const _Pred& key_eq() const _NOEXCEPT {return __pred_;}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Cp& __x, const _Cp& __y) const\n        {return __pred_(__x.__cc.first, __y.__cc.first);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Cp& __x, const _Key& __y) const\n        {return __pred_(__x.__cc.first, __y);}\n    _LIBCPP_INLINE_VISIBILITY\n    bool operator()(const _Key& __x, const _Cp& __y) const\n        {return __pred_(__x, __y.__cc.first);}\n    void swap(__unordered_map_equal&__y)\n        _NOEXCEPT_(__is_nothrow_swappable<_Pred>::value)\n    {\n        using _VSTD::swap;\n        swap(__pred_, __y.__pred_);\n    }\n};\n\ntemplate <class _Key, class _Cp, class _Pred, bool __b>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(__unordered_map_equal<_Key, _Cp, _Pred, __b>& __x,\n     __unordered_map_equal<_Key, _Cp, _Pred, __b>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\ntemplate <class _Alloc>\nclass __hash_map_node_destructor\n{\n    typedef _Alloc                              allocator_type;\n    typedef allocator_traits<allocator_type>    __alloc_traits;\n\npublic:\n\n    typedef typename __alloc_traits::pointer       pointer;\nprivate:\n\n    allocator_type& __na_;\n\n    __hash_map_node_destructor& operator=(const __hash_map_node_destructor&);\n\npublic:\n    bool __first_constructed;\n    bool __second_constructed;\n\n    _LIBCPP_INLINE_VISIBILITY\n    explicit __hash_map_node_destructor(allocator_type& __na) _NOEXCEPT\n        : __na_(__na),\n          __first_constructed(false),\n          __second_constructed(false)\n        {}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_node_destructor(__hash_node_destructor<allocator_type>&& __x)\n        _NOEXCEPT\n        : __na_(__x.__na_),\n          __first_constructed(__x.__value_constructed),\n          __second_constructed(__x.__value_constructed)\n        {\n            __x.__value_constructed = false;\n        }\n#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_node_destructor(const __hash_node_destructor<allocator_type>& __x)\n        : __na_(__x.__na_),\n          __first_constructed(__x.__value_constructed),\n          __second_constructed(__x.__value_constructed)\n        {\n            const_cast<bool&>(__x.__value_constructed) = false;\n        }\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n    _LIBCPP_INLINE_VISIBILITY\n    void operator()(pointer __p) _NOEXCEPT\n    {\n        if (__second_constructed)\n            __alloc_traits::destroy(__na_, _VSTD::addressof(__p->__value_.__cc.second));\n        if (__first_constructed)\n            __alloc_traits::destroy(__na_, _VSTD::addressof(__p->__value_.__cc.first));\n        if (__p)\n            __alloc_traits::deallocate(__na_, __p, 1);\n    }\n};\n\n#ifndef _LIBCPP_CXX03_LANG\ntemplate <class _Key, class _Tp>\nunion __hash_value_type\n{\n    typedef _Key                                     key_type;\n    typedef _Tp                                      mapped_type;\n    typedef pair<const key_type, mapped_type>        value_type;\n    typedef pair<key_type, mapped_type>              __nc_value_type;\n\n    value_type __cc;\n    __nc_value_type __nc;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_value_type& operator=(const __hash_value_type& __v)\n        {__nc = __v.__cc; return *this;}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_value_type& operator=(__hash_value_type&& __v)\n        {__nc = _VSTD::move(__v.__nc); return *this;}\n\n    template <class _ValueTp,\n              class = typename enable_if<\n                    __is_same_uncvref<_ValueTp, value_type>::value\n                 >::type\n             >\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_value_type& operator=(_ValueTp&& __v) {\n        __nc = _VSTD::forward<_ValueTp>(__v); return *this;\n    }\n\nprivate:\n    __hash_value_type(const __hash_value_type& __v) = delete;\n    __hash_value_type(__hash_value_type&& __v) = delete;\n    template <class ..._Args>\n    explicit __hash_value_type(_Args&& ...__args) = delete;\n\n    ~__hash_value_type() = delete;\n};\n\n#else\n\ntemplate <class _Key, class _Tp>\nstruct __hash_value_type\n{\n    typedef _Key                                     key_type;\n    typedef _Tp                                      mapped_type;\n    typedef pair<const key_type, mapped_type>        value_type;\n\n    value_type __cc;\n\nprivate:\n   ~__hash_value_type();\n};\n\n#endif\n\ntemplate <class _HashIterator>\nclass _LIBCPP_TEMPLATE_VIS __hash_map_iterator\n{\n    _HashIterator __i_;\n\n    typedef  __hash_node_types_from_iterator<_HashIterator> _NodeTypes;\n\npublic:\n    typedef forward_iterator_tag                                 iterator_category;\n    typedef typename _NodeTypes::__map_value_type                value_type;\n    typedef typename _NodeTypes::difference_type                 difference_type;\n    typedef value_type&                                          reference;\n    typedef typename _NodeTypes::__map_value_type_pointer       pointer;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_iterator() _NOEXCEPT {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_iterator(_HashIterator __i) _NOEXCEPT : __i_(__i) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    reference operator*() const {return __i_->__cc;}\n    _LIBCPP_INLINE_VISIBILITY\n    pointer operator->() const {return pointer_traits<pointer>::pointer_to(__i_->__cc);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_iterator& operator++() {++__i_; return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_iterator operator++(int)\n    {\n        __hash_map_iterator __t(*this);\n        ++(*this);\n        return __t;\n    }\n\n    friend _LIBCPP_INLINE_VISIBILITY\n        bool operator==(const __hash_map_iterator& __x, const __hash_map_iterator& __y)\n        {return __x.__i_ == __y.__i_;}\n    friend _LIBCPP_INLINE_VISIBILITY\n        bool operator!=(const __hash_map_iterator& __x, const __hash_map_iterator& __y)\n        {return __x.__i_ != __y.__i_;}\n\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_iterator;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator;\n};\n\ntemplate <class _HashIterator>\nclass _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator\n{\n    _HashIterator __i_;\n\n    typedef  __hash_node_types_from_iterator<_HashIterator> _NodeTypes;\n\npublic:\n    typedef forward_iterator_tag                                 iterator_category;\n    typedef typename _NodeTypes::__map_value_type                value_type;\n    typedef typename _NodeTypes::difference_type                 difference_type;\n    typedef const value_type&                                    reference;\n    typedef typename _NodeTypes::__const_map_value_type_pointer  pointer;\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_const_iterator() _NOEXCEPT {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_const_iterator(_HashIterator __i) _NOEXCEPT : __i_(__i) {}\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_const_iterator(\n            __hash_map_iterator<typename _HashIterator::__non_const_iterator> __i)\n                 _NOEXCEPT\n                : __i_(__i.__i_) {}\n\n    _LIBCPP_INLINE_VISIBILITY\n    reference operator*() const {return __i_->__cc;}\n    _LIBCPP_INLINE_VISIBILITY\n    pointer operator->() const {return pointer_traits<pointer>::pointer_to(__i_->__cc);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_const_iterator& operator++() {++__i_; return *this;}\n    _LIBCPP_INLINE_VISIBILITY\n    __hash_map_const_iterator operator++(int)\n    {\n        __hash_map_const_iterator __t(*this);\n        ++(*this);\n        return __t;\n    }\n\n    friend _LIBCPP_INLINE_VISIBILITY\n        bool operator==(const __hash_map_const_iterator& __x, const __hash_map_const_iterator& __y)\n        {return __x.__i_ == __y.__i_;}\n    friend _LIBCPP_INLINE_VISIBILITY\n        bool operator!=(const __hash_map_const_iterator& __x, const __hash_map_const_iterator& __y)\n        {return __x.__i_ != __y.__i_;}\n\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;\n    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_iterator;\n    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator;\n};\n\ntemplate <class _Key, class _Tp, class _Hash = hash<_Key>, class _Pred = equal_to<_Key>,\n          class _Alloc = allocator<pair<const _Key, _Tp> > >\nclass _LIBCPP_TEMPLATE_VIS unordered_map\n{\npublic:\n    // types\n    typedef _Key                                           key_type;\n    typedef _Tp                                            mapped_type;\n    typedef _Hash                                          hasher;\n    typedef _Pred                                          key_equal;\n    typedef _Alloc                                         allocator_type;\n    typedef pair<const key_type, mapped_type>              value_type;\n    typedef pair<key_type, mapped_type>                    __nc_value_type;\n    typedef value_type&                                    reference;\n    typedef const value_type&                              const_reference;\n    static_assert((is_same<value_type, typename allocator_type::value_type>::value),\n                  \"Invalid allocator::value_type\");\n\nprivate:\n    typedef __hash_value_type<key_type, mapped_type>                 __value_type;\n    typedef __unordered_map_hasher<key_type, __value_type, hasher>   __hasher;\n    typedef __unordered_map_equal<key_type, __value_type, key_equal> __key_equal;\n    typedef typename __rebind_alloc_helper<allocator_traits<allocator_type>,\n                                                 __value_type>::type __allocator_type;\n\n    typedef __hash_table<__value_type, __hasher,\n                         __key_equal,  __allocator_type>   __table;\n\n    __table __table_;\n\n    typedef typename __table::_NodeTypes                   _NodeTypes;\n    typedef typename __table::__node_pointer               __node_pointer;\n    typedef typename __table::__node_const_pointer         __node_const_pointer;\n    typedef typename __table::__node_traits                __node_traits;\n    typedef typename __table::__node_allocator             __node_allocator;\n    typedef typename __table::__node                       __node;\n    typedef __hash_map_node_destructor<__node_allocator>   _Dp;\n    typedef unique_ptr<__node, _Dp>                         __node_holder;\n    typedef allocator_traits<allocator_type>               __alloc_traits;\n\n    static_assert((is_same<typename __table::__container_value_type, value_type>::value), \"\");\n    static_assert((is_same<typename __table::__node_value_type, __value_type>::value), \"\");\npublic:\n    typedef typename __alloc_traits::pointer         pointer;\n    typedef typename __alloc_traits::const_pointer   const_pointer;\n    typedef typename __table::size_type              size_type;\n    typedef typename __table::difference_type        difference_type;\n\n    typedef __hash_map_iterator<typename __table::iterator>       iterator;\n    typedef __hash_map_const_iterator<typename __table::const_iterator> const_iterator;\n    typedef __hash_map_iterator<typename __table::local_iterator> local_iterator;\n    typedef __hash_map_const_iterator<typename __table::const_local_iterator> const_local_iterator;\n\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map()\n        _NOEXCEPT_(is_nothrow_default_constructible<__table>::value)\n        {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n            __get_db()->__insert_c(this);\n#endif\n        }\n    explicit unordered_map(size_type __n, const hasher& __hf = hasher(),\n                           const key_equal& __eql = key_equal());\n    unordered_map(size_type __n, const hasher& __hf,\n                  const key_equal& __eql,\n                  const allocator_type& __a);\n    template <class _InputIterator>\n        unordered_map(_InputIterator __first, _InputIterator __last);\n    template <class _InputIterator>\n        unordered_map(_InputIterator __first, _InputIterator __last,\n                      size_type __n, const hasher& __hf = hasher(),\n                      const key_equal& __eql = key_equal());\n    template <class _InputIterator>\n        unordered_map(_InputIterator __first, _InputIterator __last,\n                      size_type __n, const hasher& __hf,\n                      const key_equal& __eql,\n                      const allocator_type& __a);\n    _LIBCPP_INLINE_VISIBILITY\n    explicit unordered_map(const allocator_type& __a);\n    unordered_map(const unordered_map& __u);\n    unordered_map(const unordered_map& __u, const allocator_type& __a);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map(unordered_map&& __u)\n        _NOEXCEPT_(is_nothrow_move_constructible<__table>::value);\n    unordered_map(unordered_map&& __u, const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    unordered_map(initializer_list<value_type> __il);\n    unordered_map(initializer_list<value_type> __il, size_type __n,\n                  const hasher& __hf = hasher(), const key_equal& __eql = key_equal());\n    unordered_map(initializer_list<value_type> __il, size_type __n,\n                  const hasher& __hf, const key_equal& __eql,\n                  const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n#if _LIBCPP_STD_VER > 11\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map(size_type __n, const allocator_type& __a)\n      : unordered_map(__n, hasher(), key_equal(), __a) {}\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map(size_type __n, const hasher& __hf, const allocator_type& __a)\n      : unordered_map(__n, __hf, key_equal(), __a) {}\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n      unordered_map(_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type& __a)\n      : unordered_map(__first, __last, __n, hasher(), key_equal(), __a) {}\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n      unordered_map(_InputIterator __first, _InputIterator __last, size_type __n, const hasher& __hf, \n        const allocator_type& __a)\n      : unordered_map(__first, __last, __n, __hf, key_equal(), __a) {}\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map(initializer_list<value_type> __il, size_type __n, const allocator_type& __a)\n      : unordered_map(__il, __n, hasher(), key_equal(), __a) {}\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map(initializer_list<value_type> __il, size_type __n, const hasher& __hf, \n      const allocator_type& __a)\n      : unordered_map(__il, __n, __hf, key_equal(), __a) {}\n#endif\n    // ~unordered_map() = default;\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map& operator=(const unordered_map& __u)\n    {\n#ifndef _LIBCPP_CXX03_LANG\n        __table_ = __u.__table_;\n#else\n        if (this != &__u) {\n            __table_.clear();\n            __table_.hash_function() = __u.__table_.hash_function();\n            __table_.key_eq() = __u.__table_.key_eq();\n            __table_.max_load_factor() = __u.__table_.max_load_factor();\n            __table_.__copy_assign_alloc(__u.__table_);\n            insert(__u.begin(), __u.end());\n        }\n#endif\n        return *this;\n    }\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map& operator=(unordered_map&& __u)\n        _NOEXCEPT_(is_nothrow_move_assignable<__table>::value);\n#endif\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_map& operator=(initializer_list<value_type> __il);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type get_allocator() const _NOEXCEPT\n        {return allocator_type(__table_.__node_alloc());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool      empty() const _NOEXCEPT {return __table_.size() == 0;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type size() const _NOEXCEPT  {return __table_.size();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_size() const _NOEXCEPT {return __table_.max_size();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       begin() _NOEXCEPT        {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       end() _NOEXCEPT          {return __table_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin()  const _NOEXCEPT {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end()    const _NOEXCEPT {return __table_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cbegin() const _NOEXCEPT {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cend()   const _NOEXCEPT {return __table_.end();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> insert(const value_type& __x)\n        {return __table_.__insert_unique(__x);}\n\n    iterator insert(const_iterator __p, const value_type& __x) {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n            \"unordered_map::insert(const_iterator, const value_type&) called with an iterator not\"\n            \" referring to this unordered_map\");\n#else\n        ((void)__p);\n#endif\n        return insert(__x).first;\n    }\n\n    template <class _InputIterator>\n        _LIBCPP_INLINE_VISIBILITY\n        void insert(_InputIterator __first, _InputIterator __last);\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    void insert(initializer_list<value_type> __il)\n        {insert(__il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#ifndef _LIBCPP_CXX03_LANG\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> insert(value_type&& __x)\n        {return __table_.__insert_unique(_VSTD::move(__x));}\n\n    iterator insert(const_iterator __p, value_type&& __x) {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n            \"unordered_map::insert(const_iterator, const value_type&) called with an iterator not\"\n            \" referring to this unordered_map\");\n#else\n        ((void)__p);\n#endif\n        return __table_.__insert_unique(_VSTD::move(__x)).first;\n    }\n\n    template <class _Pp,\n              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> insert(_Pp&& __x)\n            {return __table_.__insert_unique(_VSTD::forward<_Pp>(__x));}\n\n    template <class _Pp,\n              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator insert(const_iterator __p, _Pp&& __x)\n        {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n            _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n                \"unordered_map::insert(const_iterator, value_type&&) called with an iterator not\"\n                \" referring to this unordered_map\");\n#else\n          ((void)__p);\n#endif\n            return insert(_VSTD::forward<_Pp>(__x)).first;\n        }\n\n    template <class... _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, bool> emplace(_Args&&... __args) {\n        return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class... _Args>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator emplace_hint(const_iterator __p, _Args&&... __args) {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,\n            \"unordered_map::emplace_hint(const_iterator, args...) called with an iterator not\"\n            \" referring to this unordered_map\");\n#else\n          ((void)__p);\n#endif\n        return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...).first;\n    }\n\n#endif  // _LIBCPP_CXX03_LANG\n\n#if _LIBCPP_STD_VER > 14\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> try_emplace(const key_type& __k, _Args&&... __args)\n    {\n        return __table_.__emplace_unique_key_args(__k, _VSTD::piecewise_construct,\n            _VSTD::forward_as_tuple(__k),\n            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));\n    }\n\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> try_emplace(key_type&& __k, _Args&&... __args)\n    {\n        return __table_.__emplace_unique_key_args(__k, _VSTD::piecewise_construct,\n            _VSTD::forward_as_tuple(_VSTD::move(__k)),\n            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));\n    }\n\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator try_emplace(const_iterator __h, const key_type& __k, _Args&&... __args)\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__h) == this,\n            \"unordered_map::try_emplace(const_iterator, key, args...) called with an iterator not\"\n            \" referring to this unordered_map\");\n#else\n        ((void)__h);\n#endif\n        return try_emplace(__k, _VSTD::forward<_Args>(__args)...).first;\n    }\n\n    template <class... _Args>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator try_emplace(const_iterator __h, key_type&& __k, _Args&&... __args)\n    {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__h) == this,\n            \"unordered_map::try_emplace(const_iterator, key, args...) called with an iterator not\"\n            \" referring to this unordered_map\");\n#else\n        ((void)__h);\n#endif\n        return try_emplace(_VSTD::move(__k), _VSTD::forward<_Args>(__args)...).first;\n    }\n\n    template <class _Vp>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> insert_or_assign(const key_type& __k, _Vp&& __v)\n    {\n        pair<iterator, bool> __res = __table_.__emplace_unique_key_args(__k,\n            __k, _VSTD::forward<_Vp>(__v));\n        if (!__res.second) {\n            __res.first->second = _VSTD::forward<_Vp>(__v);\n        }\n        return __res;\n    }\n\n    template <class _Vp>\n        _LIBCPP_INLINE_VISIBILITY\n        pair<iterator, bool> insert_or_assign(key_type&& __k, _Vp&& __v)\n    {\n        pair<iterator, bool> __res = __table_.__emplace_unique_key_args(__k,\n            _VSTD::move(__k), _VSTD::forward<_Vp>(__v));\n        if (!__res.second) {\n            __res.first->second = _VSTD::forward<_Vp>(__v);\n        }\n        return __res;\n    }\n\n    template <class _Vp>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator insert_or_assign(const_iterator, const key_type& __k, _Vp&& __v)\n     {\n          // FIXME: Add debug mode checking for the iterator input\n          return insert_or_assign(__k, _VSTD::forward<_Vp>(__v)).first;\n     }\n\n    template <class _Vp>\n        _LIBCPP_INLINE_VISIBILITY\n        iterator insert_or_assign(const_iterator, key_type&& __k, _Vp&& __v)\n     {\n        // FIXME: Add debug mode checking for the iterator input\n        return insert_or_assign(_VSTD::move(__k), _VSTD::forward<_Vp>(__v)).first;\n     }\n#endif\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __p) {return __table_.erase(__p.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(iterator __p)       {return __table_.erase(__p.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type erase(const key_type& __k) {return __table_.__erase_unique(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __first, const_iterator __last)\n        {return __table_.erase(__first.__i_, __last.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT {__table_.clear();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(unordered_map& __u)\n        _NOEXCEPT_(__is_nothrow_swappable<__table>::value)\n        { __table_.swap(__u.__table_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    hasher hash_function() const\n        {return __table_.hash_function().hash_function();}\n    _LIBCPP_INLINE_VISIBILITY\n    key_equal key_eq() const\n        {return __table_.key_eq().key_eq();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       find(const key_type& __k)       {return __table_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator find(const key_type& __k) const {return __table_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type count(const key_type& __k) const {return __table_.__count_unique(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, iterator>             equal_range(const key_type& __k)\n        {return __table_.__equal_range_unique(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<const_iterator, const_iterator> equal_range(const key_type& __k) const\n        {return __table_.__equal_range_unique(__k);}\n\n    mapped_type& operator[](const key_type& __k);\n#ifndef _LIBCPP_CXX03_LANG\n    mapped_type& operator[](key_type&& __k);\n#endif\n\n    mapped_type&       at(const key_type& __k);\n    const mapped_type& at(const key_type& __k) const;\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_count() const _NOEXCEPT {return __table_.bucket_count();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_bucket_count() const _NOEXCEPT {return __table_.max_bucket_count();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_size(size_type __n) const\n        {return __table_.bucket_size(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket(const key_type& __k) const {return __table_.bucket(__k);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator       begin(size_type __n)        {return __table_.begin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator       end(size_type __n)          {return __table_.end(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator begin(size_type __n) const  {return __table_.cbegin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator end(size_type __n) const    {return __table_.cend(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator cbegin(size_type __n) const {return __table_.cbegin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator cend(size_type __n) const   {return __table_.cend(__n);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    float load_factor() const _NOEXCEPT {return __table_.load_factor();}\n    _LIBCPP_INLINE_VISIBILITY\n    float max_load_factor() const _NOEXCEPT {return __table_.max_load_factor();}\n    _LIBCPP_INLINE_VISIBILITY\n    void max_load_factor(float __mlf) {__table_.max_load_factor(__mlf);}\n    _LIBCPP_INLINE_VISIBILITY\n    void rehash(size_type __n) {__table_.rehash(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    void reserve(size_type __n) {__table_.reserve(__n);}\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\n    bool __dereferenceable(const const_iterator* __i) const\n        {return __table_.__dereferenceable(&__i->__i_);}\n    bool __decrementable(const const_iterator* __i) const\n        {return __table_.__decrementable(&__i->__i_);}\n    bool __addable(const const_iterator* __i, ptrdiff_t __n) const\n        {return __table_.__addable(&__i->__i_, __n);}\n    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const\n        {return __table_.__addable(&__i->__i_, __n);}\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\nprivate:\n\n#ifdef _LIBCPP_CXX03_LANG\n    __node_holder __construct_node_with_key(const key_type& __k);\n#endif\n};\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        size_type __n, const hasher& __hf, const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        size_type __n, const hasher& __hf, const key_equal& __eql,\n        const allocator_type& __a)\n    : __table_(__hf, __eql, typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        const allocator_type& __a)\n    : __table_(typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        _InputIterator __first, _InputIterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    insert(__first, __last);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        _InputIterator __first, _InputIterator __last, size_type __n,\n        const hasher& __hf, const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__first, __last);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        _InputIterator __first, _InputIterator __last, size_type __n,\n        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__first, __last);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        const unordered_map& __u)\n    : __table_(__u.__table_)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__u.bucket_count());\n    insert(__u.begin(), __u.end());\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        const unordered_map& __u, const allocator_type& __a)\n    : __table_(__u.__table_, typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__u.bucket_count());\n    insert(__u.begin(), __u.end());\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        unordered_map&& __u)\n    _NOEXCEPT_(is_nothrow_move_constructible<__table>::value)\n    : __table_(_VSTD::move(__u.__table_))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n    __get_db()->swap(this, &__u);\n#endif\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        unordered_map&& __u, const allocator_type& __a)\n    : __table_(_VSTD::move(__u.__table_), typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__a != __u.get_allocator())\n    {\n        iterator __i = __u.begin();\n        while (__u.size() != 0) {\n            __table_.__emplace_unique(_VSTD::move(\n                __u.__table_.remove((__i++).__i_)->__value_.__nc));\n        }\n    }\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    else\n        __get_db()->swap(this, &__u);\n#endif\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        initializer_list<value_type> __il)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    insert(__il.begin(), __il.end());\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        initializer_list<value_type> __il, size_type __n, const hasher& __hf,\n        const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__il.begin(), __il.end());\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(\n        initializer_list<value_type> __il, size_type __n, const hasher& __hf,\n        const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__il.begin(), __il.end());\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(unordered_map&& __u)\n    _NOEXCEPT_(is_nothrow_move_assignable<__table>::value)\n{\n    __table_ = _VSTD::move(__u.__table_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(\n        initializer_list<value_type> __il)\n{\n    __table_.__assign_unique(__il.begin(), __il.end());\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#ifdef _LIBCPP_CXX03_LANG\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntypename unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::__node_holder\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::__construct_node_with_key(const key_type& __k)\n{\n    __node_allocator& __na = __table_.__node_alloc();\n    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));\n    __node_traits::construct(__na, _VSTD::addressof(__h->__value_.__cc.first), __k);\n    __h.get_deleter().__first_constructed = true;\n    __node_traits::construct(__na, _VSTD::addressof(__h->__value_.__cc.second));\n    __h.get_deleter().__second_constructed = true;\n    return _LIBCPP_EXPLICIT_MOVE(__h);  // explicitly moved for C++03\n}\n#endif\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\ninline\nvoid\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_InputIterator __first,\n                                                       _InputIterator __last)\n{\n    for (; __first != __last; ++__first)\n        __table_.__insert_unique(*__first);\n}\n\n#ifdef _LIBCPP_CXX03_LANG\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n_Tp&\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type& __k)\n{\n    iterator __i = find(__k);\n    if (__i != end())\n        return __i->second;\n    __node_holder __h = __construct_node_with_key(__k);\n    pair<iterator, bool> __r = __table_.__node_insert_unique(__h.get());\n    __h.release();\n    return __r.first->second;\n}\n#else\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n_Tp&\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type& __k)\n{\n    return __table_.__emplace_unique_key_args(__k,\n        std::piecewise_construct, std::forward_as_tuple(__k),\n                                  std::forward_as_tuple()).first->__cc.second;\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n_Tp&\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](key_type&& __k)\n{\n    return __table_.__emplace_unique_key_args(__k,\n        std::piecewise_construct, std::forward_as_tuple(std::move(__k)),\n                                  std::forward_as_tuple()).first->__cc.second;\n}\n\n#endif  // !_LIBCPP_CXX03_MODE\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n_Tp&\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::at(const key_type& __k)\n{\n    iterator __i = find(__k);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    if (__i == end())\n        throw out_of_range(\"unordered_map::at: key not found\");\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __i->second;\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nconst _Tp&\nunordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::at(const key_type& __k) const\n{\n    const_iterator __i = find(__k);\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    if (__i == end())\n        throw out_of_range(\"unordered_map::at: key not found\");\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    return __i->second;\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n     unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nbool\noperator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n           const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n{\n    if (__x.size() != __y.size())\n        return false;\n    typedef typename unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator\n                                                                 const_iterator;\n    for (const_iterator __i = __x.begin(), __ex = __x.end(), __ey = __y.end();\n            __i != __ex; ++__i)\n    {\n        const_iterator __j = __y.find(__i->first);\n        if (__j == __ey || !(*__i == *__j))\n            return false;\n    }\n    return true;\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n           const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n{\n    return !(__x == __y);\n}\n\ntemplate <class _Key, class _Tp, class _Hash = hash<_Key>, class _Pred = equal_to<_Key>,\n          class _Alloc = allocator<pair<const _Key, _Tp> > >\nclass _LIBCPP_TEMPLATE_VIS unordered_multimap\n{\npublic:\n    // types\n    typedef _Key                                           key_type;\n    typedef _Tp                                            mapped_type;\n    typedef _Hash                                          hasher;\n    typedef _Pred                                          key_equal;\n    typedef _Alloc                                         allocator_type;\n    typedef pair<const key_type, mapped_type>              value_type;\n    typedef pair<key_type, mapped_type>                    __nc_value_type;\n    typedef value_type&                                    reference;\n    typedef const value_type&                              const_reference;\n    static_assert((is_same<value_type, typename allocator_type::value_type>::value),\n                  \"Invalid allocator::value_type\");\n\nprivate:\n    typedef __hash_value_type<key_type, mapped_type>                 __value_type;\n    typedef __unordered_map_hasher<key_type, __value_type, hasher>   __hasher;\n    typedef __unordered_map_equal<key_type, __value_type, key_equal> __key_equal;\n    typedef typename __rebind_alloc_helper<allocator_traits<allocator_type>,\n                                                 __value_type>::type __allocator_type;\n\n    typedef __hash_table<__value_type, __hasher,\n                         __key_equal,  __allocator_type>   __table;\n\n    __table __table_;\n\n    typedef typename __table::_NodeTypes                   _NodeTypes;\n    typedef typename __table::__node_traits                __node_traits;\n    typedef typename __table::__node_allocator             __node_allocator;\n    typedef typename __table::__node                       __node;\n    typedef __hash_map_node_destructor<__node_allocator>   _Dp;\n    typedef unique_ptr<__node, _Dp>                         __node_holder;\n    typedef allocator_traits<allocator_type>               __alloc_traits;\n    static_assert((is_same<typename __node_traits::size_type,\n                          typename __alloc_traits::size_type>::value),\n                 \"Allocator uses different size_type for different types\");\npublic:\n    typedef typename __alloc_traits::pointer         pointer;\n    typedef typename __alloc_traits::const_pointer   const_pointer;\n    typedef typename __table::size_type              size_type;\n    typedef typename __table::difference_type        difference_type;\n\n    typedef __hash_map_iterator<typename __table::iterator>       iterator;\n    typedef __hash_map_const_iterator<typename __table::const_iterator> const_iterator;\n    typedef __hash_map_iterator<typename __table::local_iterator> local_iterator;\n    typedef __hash_map_const_iterator<typename __table::const_local_iterator> const_local_iterator;\n\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap()\n        _NOEXCEPT_(is_nothrow_default_constructible<__table>::value)\n        {\n#if _LIBCPP_DEBUG_LEVEL >= 2\n            __get_db()->__insert_c(this);\n#endif\n        }\n    explicit unordered_multimap(size_type __n, const hasher& __hf = hasher(),\n                                const key_equal& __eql = key_equal());\n    unordered_multimap(size_type __n, const hasher& __hf,\n                                const key_equal& __eql,\n                                const allocator_type& __a);\n    template <class _InputIterator>\n        unordered_multimap(_InputIterator __first, _InputIterator __last);\n    template <class _InputIterator>\n        unordered_multimap(_InputIterator __first, _InputIterator __last,\n                      size_type __n, const hasher& __hf = hasher(),\n                      const key_equal& __eql = key_equal());\n    template <class _InputIterator>\n        unordered_multimap(_InputIterator __first, _InputIterator __last,\n                      size_type __n, const hasher& __hf,\n                      const key_equal& __eql,\n                      const allocator_type& __a);\n    _LIBCPP_INLINE_VISIBILITY\n    explicit unordered_multimap(const allocator_type& __a);\n    unordered_multimap(const unordered_multimap& __u);\n    unordered_multimap(const unordered_multimap& __u, const allocator_type& __a);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap(unordered_multimap&& __u)\n        _NOEXCEPT_(is_nothrow_move_constructible<__table>::value);\n    unordered_multimap(unordered_multimap&& __u, const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    unordered_multimap(initializer_list<value_type> __il);\n    unordered_multimap(initializer_list<value_type> __il, size_type __n,\n                       const hasher& __hf = hasher(),\n                       const key_equal& __eql = key_equal());\n    unordered_multimap(initializer_list<value_type> __il, size_type __n,\n                       const hasher& __hf, const key_equal& __eql,\n                       const allocator_type& __a);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n#if _LIBCPP_STD_VER > 11\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap(size_type __n, const allocator_type& __a)\n      : unordered_multimap(__n, hasher(), key_equal(), __a) {}\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap(size_type __n, const hasher& __hf, const allocator_type& __a)\n      : unordered_multimap(__n, __hf, key_equal(), __a) {}\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n      unordered_multimap(_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type& __a)\n      : unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a) {}\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n      unordered_multimap(_InputIterator __first, _InputIterator __last, size_type __n, const hasher& __hf, \n        const allocator_type& __a)\n      : unordered_multimap(__first, __last, __n, __hf, key_equal(), __a) {}\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap(initializer_list<value_type> __il, size_type __n, const allocator_type& __a)\n      : unordered_multimap(__il, __n, hasher(), key_equal(), __a) {}\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap(initializer_list<value_type> __il, size_type __n, const hasher& __hf, \n      const allocator_type& __a)\n      : unordered_multimap(__il, __n, __hf, key_equal(), __a) {}\n#endif\n    // ~unordered_multimap() = default;\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap& operator=(const unordered_multimap& __u)\n    {\n#ifndef _LIBCPP_CXX03_LANG\n        __table_ = __u.__table_;\n#else\n        if (this != &__u) {\n            __table_.clear();\n            __table_.hash_function() = __u.__table_.hash_function();\n            __table_.key_eq() = __u.__table_.key_eq();\n            __table_.max_load_factor() = __u.__table_.max_load_factor();\n            __table_.__copy_assign_alloc(__u.__table_);\n            insert(__u.begin(), __u.end());\n        }\n#endif\n        return *this;\n    }\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap& operator=(unordered_multimap&& __u)\n        _NOEXCEPT_(is_nothrow_move_assignable<__table>::value);\n#endif\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    unordered_multimap& operator=(initializer_list<value_type> __il);\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n    _LIBCPP_INLINE_VISIBILITY\n    allocator_type get_allocator() const _NOEXCEPT\n        {return allocator_type(__table_.__node_alloc());}\n\n    _LIBCPP_INLINE_VISIBILITY\n    bool      empty() const _NOEXCEPT {return __table_.size() == 0;}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type size() const _NOEXCEPT  {return __table_.size();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_size() const _NOEXCEPT {return __table_.max_size();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       begin() _NOEXCEPT        {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       end() _NOEXCEPT          {return __table_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator begin()  const _NOEXCEPT {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator end()    const _NOEXCEPT {return __table_.end();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cbegin() const _NOEXCEPT {return __table_.begin();}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator cend()   const _NOEXCEPT {return __table_.end();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const value_type& __x) {return __table_.__insert_multi(__x);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __p, const value_type& __x)\n        {return __table_.__insert_multi(__p.__i_, __x);}\n\n    template <class _InputIterator>\n    _LIBCPP_INLINE_VISIBILITY\n    void insert(_InputIterator __first, _InputIterator __last);\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n    _LIBCPP_INLINE_VISIBILITY\n    void insert(initializer_list<value_type> __il)\n        {insert(__il.begin(), __il.end());}\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#ifndef _LIBCPP_CXX03_LANG\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(value_type&& __x) {return __table_.__insert_multi(_VSTD::move(__x));}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __p, value_type&& __x)\n        {return __table_.__insert_multi(__p.__i_, _VSTD::move(__x));}\n\n    template <class _Pp,\n              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(_Pp&& __x)\n        {return __table_.__insert_multi(_VSTD::forward<_Pp>(__x));}\n\n    template <class _Pp,\n              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>\n    _LIBCPP_INLINE_VISIBILITY\n    iterator insert(const_iterator __p, _Pp&& __x)\n        {return __table_.__insert_multi(__p.__i_, _VSTD::forward<_Pp>(__x));}\n\n    template <class... _Args>\n    iterator emplace(_Args&&... __args) {\n        return __table_.__emplace_multi(_VSTD::forward<_Args>(__args)...);\n    }\n\n    template <class... _Args>\n    iterator emplace_hint(const_iterator __p, _Args&&... __args) {\n        return __table_.__emplace_hint_multi(__p.__i_, _VSTD::forward<_Args>(__args)...);\n    }\n#endif  // _LIBCPP_CXX03_LANG\n\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __p) {return __table_.erase(__p.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(iterator __p)       {return __table_.erase(__p.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type erase(const key_type& __k) {return __table_.__erase_multi(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    iterator erase(const_iterator __first, const_iterator __last)\n        {return __table_.erase(__first.__i_, __last.__i_);}\n    _LIBCPP_INLINE_VISIBILITY\n    void clear() _NOEXCEPT {__table_.clear();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(unordered_multimap& __u)\n        _NOEXCEPT_(__is_nothrow_swappable<__table>::value)\n        {__table_.swap(__u.__table_);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    hasher hash_function() const\n        {return __table_.hash_function().hash_function();}\n    _LIBCPP_INLINE_VISIBILITY\n    key_equal key_eq() const\n        {return __table_.key_eq().key_eq();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    iterator       find(const key_type& __k)       {return __table_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_iterator find(const key_type& __k) const {return __table_.find(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type count(const key_type& __k) const {return __table_.__count_multi(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<iterator, iterator>             equal_range(const key_type& __k)\n        {return __table_.__equal_range_multi(__k);}\n    _LIBCPP_INLINE_VISIBILITY\n    pair<const_iterator, const_iterator> equal_range(const key_type& __k) const\n        {return __table_.__equal_range_multi(__k);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_count() const _NOEXCEPT {return __table_.bucket_count();}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type max_bucket_count() const _NOEXCEPT\n        {return __table_.max_bucket_count();}\n\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket_size(size_type __n) const\n        {return __table_.bucket_size(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    size_type bucket(const key_type& __k) const {return __table_.bucket(__k);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator       begin(size_type __n)        {return __table_.begin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    local_iterator       end(size_type __n)          {return __table_.end(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator begin(size_type __n) const  {return __table_.cbegin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator end(size_type __n) const    {return __table_.cend(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator cbegin(size_type __n) const {return __table_.cbegin(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    const_local_iterator cend(size_type __n) const   {return __table_.cend(__n);}\n\n    _LIBCPP_INLINE_VISIBILITY\n    float load_factor() const _NOEXCEPT {return __table_.load_factor();}\n    _LIBCPP_INLINE_VISIBILITY\n    float max_load_factor() const _NOEXCEPT {return __table_.max_load_factor();}\n    _LIBCPP_INLINE_VISIBILITY\n    void max_load_factor(float __mlf) {__table_.max_load_factor(__mlf);}\n    _LIBCPP_INLINE_VISIBILITY\n    void rehash(size_type __n) {__table_.rehash(__n);}\n    _LIBCPP_INLINE_VISIBILITY\n    void reserve(size_type __n) {__table_.reserve(__n);}\n\n#if _LIBCPP_DEBUG_LEVEL >= 2\n\n    bool __dereferenceable(const const_iterator* __i) const\n        {return __table_.__dereferenceable(&__i->__i_);}\n    bool __decrementable(const const_iterator* __i) const\n        {return __table_.__decrementable(&__i->__i_);}\n    bool __addable(const const_iterator* __i, ptrdiff_t __n) const\n        {return __table_.__addable(&__i->__i_, __n);}\n    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const\n        {return __table_.__addable(&__i->__i_, __n);}\n\n#endif  // _LIBCPP_DEBUG_LEVEL >= 2\n\n\n};\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        size_type __n, const hasher& __hf, const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        size_type __n, const hasher& __hf, const key_equal& __eql,\n        const allocator_type& __a)\n    : __table_(__hf, __eql, typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        _InputIterator __first, _InputIterator __last)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    insert(__first, __last);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        _InputIterator __first, _InputIterator __last, size_type __n,\n        const hasher& __hf, const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__first, __last);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        _InputIterator __first, _InputIterator __last, size_type __n,\n        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__first, __last);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        const allocator_type& __a)\n    : __table_(typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        const unordered_multimap& __u)\n    : __table_(__u.__table_)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__u.bucket_count());\n    insert(__u.begin(), __u.end());\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        const unordered_multimap& __u, const allocator_type& __a)\n    : __table_(__u.__table_, typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__u.bucket_count());\n    insert(__u.begin(), __u.end());\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        unordered_multimap&& __u)\n    _NOEXCEPT_(is_nothrow_move_constructible<__table>::value)\n    : __table_(_VSTD::move(__u.__table_))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n    __get_db()->swap(this, &__u);\n#endif\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        unordered_multimap&& __u, const allocator_type& __a)\n    : __table_(_VSTD::move(__u.__table_), typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    if (__a != __u.get_allocator())\n    {\n        iterator __i = __u.begin();\n        while (__u.size() != 0)\n        {\n            __table_.__insert_multi(\n                      _VSTD::move(__u.__table_.remove((__i++).__i_)->__value_.__nc)\n                                   );\n        }\n    }\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    else\n        __get_db()->swap(this, &__u);\n#endif\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        initializer_list<value_type> __il)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    insert(__il.begin(), __il.end());\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        initializer_list<value_type> __il, size_type __n, const hasher& __hf,\n        const key_equal& __eql)\n    : __table_(__hf, __eql)\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__il.begin(), __il.end());\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(\n        initializer_list<value_type> __il, size_type __n, const hasher& __hf,\n        const key_equal& __eql, const allocator_type& __a)\n    : __table_(__hf, __eql, typename __table::allocator_type(__a))\n{\n#if _LIBCPP_DEBUG_LEVEL >= 2\n    __get_db()->__insert_c(this);\n#endif\n    __table_.rehash(__n);\n    insert(__il.begin(), __il.end());\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(unordered_multimap&& __u)\n    _NOEXCEPT_(is_nothrow_move_assignable<__table>::value)\n{\n    __table_ = _VSTD::move(__u.__table_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\n#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(\n        initializer_list<value_type> __il)\n{\n    __table_.__assign_multi(__il.begin(), __il.end());\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\n\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ntemplate <class _InputIterator>\ninline\nvoid\nunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_InputIterator __first,\n                                                            _InputIterator __last)\n{\n    for (; __first != __last; ++__first)\n        __table_.__insert_multi(*__first);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n     unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))\n{\n    __x.swap(__y);\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\nbool\noperator==(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n           const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n{\n    if (__x.size() != __y.size())\n        return false;\n    typedef typename unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator\n                                                                 const_iterator;\n    typedef pair<const_iterator, const_iterator> _EqRng;\n    for (const_iterator __i = __x.begin(), __ex = __x.end(); __i != __ex;)\n    {\n        _EqRng __xeq = __x.equal_range(__i->first);\n        _EqRng __yeq = __y.equal_range(__i->first);\n        if (_VSTD::distance(__xeq.first, __xeq.second) !=\n            _VSTD::distance(__yeq.first, __yeq.second) ||\n                  !_VSTD::is_permutation(__xeq.first, __xeq.second, __yeq.first))\n            return false;\n        __i = __xeq.second;\n    }\n    return true;\n}\n\ntemplate <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\ninline _LIBCPP_INLINE_VISIBILITY\nbool\noperator!=(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n           const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n{\n    return !(__x == __y);\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_UNORDERED_MAP\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2018\n *\n *  @file  DataNode.h\n *  @brief DataNode objects track a specific type of data over the course of a run.\n *\n *  Collection: New data can be pushed or pulled.\n *   Add(VAL... v) pushes data to a node\n *   AddDatum(VAL v) pushes just one datum, but can be used as an action for a signal.\n *\n *  Process: What should happen on Reset() ?\n *   * Trigger an action to process the prior update's data stored.\n *   * Clear all data.\n *   * Send data to a stream\n *     (or stats automatically have a stream that, if non-null data is sent to?)\n *\n *  @todo: The Archive data node should have Log as a requiste and then copy the current vals into the\n *         archive on reset.  This change will also make it so that the size of the archive correctly\n *         reflects the number of resets.\n */\n\n#ifndef EMP_DATA_NODE_H\n#define EMP_DATA_NODE_H\n\n#include \"../base/vector.h\"\n#include \"../base/assert.h\"\n#include \"../meta/IntPack.h\"\n#include \"../tools/FunctionSet.h\"\n#include \"../tools/IndexMap.h\"\n#include \"../tools/string_utils.h\"\n#include \"../tools/math.h\"\n\nnamespace emp {\n\n  /// A set of modifiers are available do describe DataNode\n  enum class data {\n    Current,      ///< Track most recent value\n\n    Info,         ///< Include information (name, keyword, description) for each instance.\n\n    Log,          ///< Track all values since last Reset()\n    Archive,      ///< Track Log + ALL values over time (with purge options)\n\n    Range,        ///< Track min, max, mean, total\n    FullRange,    ///< Track Range data over time.\n    Histogram,    ///< Keep a full histogram.\n    Stats,        ///< Track Range + variance, standard deviation, skew, kertosis\n    // FullStats,    // Track States + ALL values over time (with purge/merge options)\n\n    Pull,         ///< Enable data collection on request.\n\n    ///< Various signals are possible:\n    SignalReset,  ///< Include a signal that triggers BEFORE Reset() to process data.\n    SignalData,   ///< Include a signal when new data is added (as a group)\n    SignalDatum,  ///< Include a signal when each datum is added.\n    SignalRange,  ///< Include a signal for data in a range.\n    SignalLimits, ///< Include a signal for data OUTSIDE a range.\n\n    UNKNOWN       ///< Unknown modifier; will trigger error.\n  };\n\n\n  /// A shortcut for converting DataNode mod ID's to IntPacks.\n  template <emp::data... MODS> using ModPack = emp::IntPack<(int) MODS...>;\n\n  /// Extra info about data modules that we need to know before actually building this DataNode.\n  /// (for now, just REQUISITES for each module.)\n  template <emp::data MOD> struct DataModInfo     { using reqs = ModPack<>; };\n  template <> struct DataModInfo<data::Archive>   { using reqs = ModPack<data::Log>; };\n  template <> struct DataModInfo<data::FullRange> { using reqs = ModPack<data::Range>; };\n  template <> struct DataModInfo<data::Stats>     { using reqs = ModPack<data::Range>; };\n  //template <> struct DataModInfo<data::FullStats> { using reqs = ModPack<data::Range, data::Stats>; };\n\n\n  // A set of structs to collect and merge data module requisites.\n  template <emp::data... MODS> struct DataModuleRequisiteAdd { };\n  template <> struct DataModuleRequisiteAdd<> { using type = IntPack<>; };\n  template <emp::data CUR_MOD, emp::data... MODS> struct DataModuleRequisiteAdd<CUR_MOD, MODS...> {\n    using next_type = typename DataModuleRequisiteAdd<MODS...>::type;\n    using this_req = typename DataModInfo<CUR_MOD>::reqs;\n    using type = typename next_type::template append<this_req>;\n  };\n\n\n  /// Generic form of DataNodeModule (should never be used; trigger error!)\n  template <typename VAL_TYPE, emp::data... MODS> class DataNodeModule {\n  public:\n    DataNodeModule() { emp_assert(false, \"Unknown module used in DataNode!\"); }\n  };\n\n  /// Base form of DataNodeModule (available in ALL data nodes.)\n  template <typename VAL_TYPE>\n  class DataNodeModule<VAL_TYPE> {\n  protected:\n    size_t val_count;               ///< How many values have been loaded?\n    emp::vector<VAL_TYPE> in_vals;  ///< What values are waiting to be included?\n\n    void PullData_impl() { ; }\n\n  public:\n    DataNodeModule() : val_count(0), in_vals() { ; }\n\n    using value_t = VAL_TYPE;\n\n    /// Return the number of values that have been added to this node since the last reset\n    size_t GetCount() const { return val_count; }\n\n    /// If reset count not tracked, always return 0.  If any modifier causes history to be saved, it will\n    /// override this function and indicate how much history is stored.\n    size_t GetResetCount() const { return 0; }\n\n    double GetTotal() const {emp_assert(false, \"Calculating total requires a DataNode with the Range or FullRange modifier\"); return 0;}\n    double GetMean() const {emp_assert(false, \"Calculating mean requires a DataNode with the Range or FullRange modifier\"); return 0;}\n    double GetMin() const {emp_assert(false, \"Calculating min requires a DataNode with the Range or FullRange modifier\"); return 0;}\n    double GetMax() const {emp_assert(false, \"Calculating max requires a DataNode with the Range or FullRange modifier\"); return 0;}\n    double GetVariance() const {emp_assert(false, \"Calculating variance requires a DataNode with the Stats or FullStats modifier\"); return 0;}\n    double GetStandardDeviation() const {emp_assert(false, \"Calculating standard deviation requires a DataNode with the Stats or FullStats modifier\"); return 0;}\n    double GetSkew() const {emp_assert(false, \"Calculating skew requires a DataNode with the Stats or FullStats modifier\"); return 0;}\n    double GetKurtosis() const {emp_assert(false, \"Calculating kurtosis requires a DataNode with the Stats or FullStats modifier\"); return 0;}\n\n    const std::string & GetName() const { return emp::empty_string(); }\n    const std::string & GetDescription() const { return emp::empty_string(); }\n    const std::string & GetKeyword() const { return emp::empty_string(); }\n\n    void SetName(const std::string &) { emp_assert(false, \"Invalid call for DataNode config.\"); }\n    void SetDescription(const std::string &) { emp_assert(false, \"Invalid call for DataNode config.\"); }\n    void SetKeyword(const std::string &) { emp_assert(false, \"Invalid call for DataNode config.\"); }\n\n    void SetInfo(const std::string &, const std::string & _d=\"\", const std::string & _k=\"\") {\n      (void) _d; (void) _k;\n      emp_assert(false, \"Invalid call for DataNode config.\");\n    }\n\n    void AddDatum(const VAL_TYPE & val) { val_count++; }\n\n    void Reset() { val_count = 0; }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"BASE DataNodeModule.\\n\";\n    }\n  };\n\n  // Specialized forms of DataNodeModule\n\n  /// == data::Current ==\n  /// This module lets you track the current (i.e. most recently added) value\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::Current, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    VAL_TYPE cur_val;  ///< Most recent value passed to this node.\n\n    using this_t = DataNodeModule<VAL_TYPE, data::Current, MODS...>;\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n    using base_t = DataNodeModule<VAL_TYPE>;\n\n  public:\n    DataNodeModule() : cur_val() { ; }\n\n    /// Return the current (most recently added) value\n    const VAL_TYPE & GetCurrent() const { return cur_val; }\n\n    /// Add @param val to this DataNode\n    void AddDatum(const VAL_TYPE & val) { cur_val = val; parent_t::AddDatum(val); }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::Current. (level \" << (int) data::Current << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n\n  /// == data::Info ==\n  /// This module adds information such as a name, description, and keyword for this node.\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::Info, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    std::string name;     ///< Name of this data category.\n    std::string desc;     ///< Description of this type of data.\n    std::string keyword;  ///< Short keyword.\n\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n  public:\n    DataNodeModule() : name(), desc(), keyword() { ; }\n\n    /// Get this DataNode's name\n    const std::string & GetName() const { return name; }\n    /// Get this DataNode's description\n    const std::string & GetDescription() const { return desc; }\n    /// Get this DataNode's keyword\n    const std::string & GetKeyword() const { return keyword; }\n\n    /// Set this DataNode's name to @param _in\n    void SetName(const std::string & _in) { name = _in; }\n    /// Set this DataNode's description to @param _in\n    void SetDescription(const std::string & _in) { desc = _in; }\n    /// Set this DataNode's keyword to @param _in\n    void SetKeyword(const std::string & _in) { keyword = _in; }\n\n    /// Set this DataNode's name to @param _n, description to @param _d, and keyword to @param _k\n    void SetInfo(const std::string & _n, const std::string & _d=\"\", const std::string & _k=\"\") {\n      name = _n;  desc = _d;  keyword = _k;\n    }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::Info. (level \" << (int) data::Info << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n\n  /// == data::Log ==\n  /// This module lets you log all of the values that have been added since the last re-set\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::Log, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    emp::vector<VAL_TYPE> val_set;  ///< All values saved since last reset.\n\n    using this_t = DataNodeModule<VAL_TYPE, data::Log, MODS...>;\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n    using base_t = DataNodeModule<VAL_TYPE>;\n\n    using base_t::val_count;\n  public:\n    DataNodeModule() : val_set() { ; }\n\n    /// Get a vector of all data added since the last reset\n    const emp::vector<VAL_TYPE> & GetData() const { return val_set; }\n\n    /// Add @param val to this DataNode\n    void AddDatum(const VAL_TYPE & val) {\n      val_set.push_back(val);\n      parent_t::AddDatum(val);\n    }\n\n    /// Reset this DataNode (clear the current log of data)\n    void Reset() {\n      val_set.resize(0);\n      parent_t::Reset();\n    }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::Log. (level \" << (int) data::Log << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n  /// == data::Archive ==\n  /// This module keeps track of historical values in addition to those added since the last re-set.\n  /// Every time Reset() is called, all values that have been added since the previous time Reset()\n  /// are stored in a vector in the archive.\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::Archive, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    emp::vector<emp::vector<VAL_TYPE>> archive;  ///< Data archived from before most recent reset.\n\n    using this_t = DataNodeModule<VAL_TYPE, data::Archive, MODS...>;\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n    using base_t = DataNodeModule<VAL_TYPE>;\n\n    using base_t::val_count;\n    using parent_t::val_set;\n  public:\n    DataNodeModule() : archive(0) { ; }\n\n    /// Get all data ever added to this DataNode. Returns a vector of vectors; each vector\n    /// contains all data from a single time point (interval between resets)\n    const auto & GetArchive() const { return archive; }\n\n    /// Get a vector of all data that was added during the @param update 'th interval between resets.\n    const emp::vector<VAL_TYPE> & GetData(size_t update) const { return archive[update]; }\n\n    /// Get a vector of all data that has been added since the last reset\n    const emp::vector<VAL_TYPE> & GetData() const { return val_set; }\n\n    /// Get the number of time intervals recorded in this DataNode.\n    /// Note that this is one more than the number of times it has been reset\n    size_t GetResetCount() const { return archive.size(); }\n\n    // NOTE: Ignoring AddDatum() since new value will be added to val_set.\n\n    /// Reset this DataNode, starting a new grouping of values in the archive.  Resetting is\n    /// useful for tracking data from different time points, such as per update or generation.\n    void Reset() {\n      archive.push_back(val_set);\n      parent_t::Reset();\n    }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::Archive. (level \" << (int) data::Archive << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n  /// == data::Range ==\n  /// This module allows this DataNode to store information (min, max, mean, count, and total) about\n  /// the distribution of the values that have been added since the last call to Reset().\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::Range, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    double total;  ///< Total of all data since last reset.\n    double min;    ///< Smallest value passed in since last reset.\n    double max;    ///< Largest value passed in since last reset.\n\n    using this_t = DataNodeModule<VAL_TYPE, data::Range, MODS...>;\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n    using base_t = DataNodeModule<VAL_TYPE>;\n\n    using base_t::val_count;\n  public:\n    DataNodeModule() : total(0.0), min(0), max(0) { ; }\n\n    /// Get the sum of all values added to this DataNode since the last reset\n    double GetTotal() const { return total; }\n\n    /// Get the mean of all values added to this DataNode since the last reset\n    double GetMean() const { return total / (double) base_t::val_count; }\n\n    /// Get the min of all values added to this DataNode since the last reset\n    double GetMin() const { return min; }\n\n    /// Get the max of all values added to this DataNode since the last reset\n    double GetMax() const { return max; }\n\n    /// Add @param val to this DataNode\n    void AddDatum(const VAL_TYPE & val) {\n      total += (double) val;\n      if (!val_count || min > (double) val) min = (double) val;\n      if (!val_count || max < (double) val) max = (double) val;\n      parent_t::AddDatum(val);\n    }\n\n    /// Reset DataNode, setting the running calucluations of total, min, mean, and max to 0\n    void Reset() {\n      total = 0.0;\n      min = 0.0;\n      max = 0.0;\n      parent_t::Reset();\n    }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::Range. (level \" << (int) data::Range << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n  /// == data::FullRange ==\n  /// This module makes the DataNode store a history of distributional information measured by\n  /// data::Range beteen calls to Reset().  Series of historical values are stored in vectors\n  /// (except mean, which is calculated from total and count).\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::FullRange, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    emp::vector<double> total_vals;  ///< Totals from previous resets.\n    emp::vector<size_t> num_vals;    ///< Value counts from previous resets.\n    emp::vector<double> min_vals;    ///< Minimums from previous resets.\n    emp::vector<double> max_vals;    ///< Maximums from previous resets.\n\n    using this_t = DataNodeModule<VAL_TYPE, data::FullRange, MODS...>;\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n    using base_t = DataNodeModule<VAL_TYPE>;\n\n    using base_t::val_count;\n    using parent_t::total;\n    using parent_t::min;\n    using parent_t::max;\n  public:\n    DataNodeModule()\n      : total_vals(), num_vals(), min_vals(), max_vals() { ; }\n\n    /// Get the sum of all values added to this DataNode since the last reset\n    double GetTotal() const { return total; }\n\n    /// Get the mean of all values added to this DataNode since the last reset\n    double GetMean() const { return total / (double) val_count; }\n\n    /// Get the minimum of all values added to this DataNode since the last reset\n    double GetMin() const { return min; }\n\n    /// Get the maximum of all values added to this DataNode since the last reset\n    double GetMax() const { return max; }\n\n    /// Get the sum of all values added to this DataNode during the @param update specified.\n    double GetTotal(size_t update) const { return total_vals[update]; }\n\n    /// Get the mean of all values added to this DataNode during the @param update specified.\n    double GetMean(size_t update) const { return total_vals[update] / (double) num_vals[update]; }\n\n    /// Get the minimum of all values added to this DataNode during the @param update specified.\n    double GetMin(size_t update) const { return min_vals[update]; }\n\n    /// Get the maximum of all values added to this DataNode during the @param update specified.\n    double GetMax(size_t update) const { return max_vals[update]; }\n\n    /// Get the number of time intervals recorded in this DataNode.\n    ///  Note that this is one more than the number of times it has been reset\n    size_t GetResetCount() const { return total_vals.size(); }\n\n    // NOTE: Ignoring AddDatum() since Range values track current information.\n\n    /// Store the current range statistics in the archive and reset for a new interval.\n    void Reset() {\n      total_vals.push_back(total);\n      num_vals.push_back(val_count);\n      min_vals.push_back(min);\n      max_vals.push_back(max);\n      parent_t::Reset();\n    }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::FullRange. (level \" << (int) data::FullRange << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n  /// == data::Stats ==\n  /// Note: These statistics are calculated with the assumption that the data this node has\n  /// recieved is the entire population of measurements we're interested in, not a sample.\n  ///\n  /// Note 2: Kurtosis is calculated using Snedecor and Cochran (1967)'s formula. A perfect normal\n  /// distribution has a kurtosis of 0.\n\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::Stats, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    // Running variance, skew, and kurtosis calculations based off of this class:\n    // https://www.johndcook.com/blog/skewness_kurtosis/\n\n    // We don't need the mean (M1) because it's already being tracked\n    double M2;  ///< The second moment of the distribution\n    double M3;  ///< The third moment of the distribution\n    double M4;  ///< The fourth moment of the distribution\n\n    using this_t = DataNodeModule<VAL_TYPE, data::Stats, MODS...>;\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n    using base_t = DataNodeModule<VAL_TYPE>;\n\n    using base_t::val_count;\n    using parent_t::total;\n    using parent_t::min;\n    using parent_t::max;\n\n  public:\n    DataNodeModule() : M2(0), M3(0), M4(0) { ; }\n\n    using parent_t::GetMean;\n\n    /// Get the variance (squared deviation from the mean) of values added since the last reset\n    double GetVariance() const {return M2/(double)val_count;}\n\n    /// Get the standard deviation of values added since the last reset\n    double GetStandardDeviation() const {return sqrt(GetVariance());}\n\n    /// Get the skewness of values added since the last reset. This measurement tells you about\n    /// the shape of the distribution. For a unimodal distribution, negative skew means that the\n    /// distribution has a longer/thicker tail to the left. Positive skew means that ths distribution\n    /// has a longer/thicker tail to the right.\n    double GetSkew() const {return sqrt(double(val_count)) * M3/ emp::Pow(M2, 1.5);}\n\n    /// Get the kurtosis of the values added since the last reset. This is another measurement that\n    /// describes the shape of the distribution. High kurtosis means that there is more data in the\n    /// tails of the distribution (i.e. the tails are \"heavier\"), whereas low kurtosis means that\n    /// there is less data in the tails. We use Snedecor and Cochran (1967)'s formula to calculate\n    /// kurtosis. Under this formula, a normal distribution has kurtosis of 0.\n    double GetKurtosis() const {return double(val_count)*M4 / (M2*M2) - 3.0;}\n\n    /// Add @param val to this DataNode\n    void AddDatum(const VAL_TYPE & val) {\n      // Calculate deviation from mean (the ternary avoids dividing by\n      // 0 in the case where this is the first datum added since last reset)\n      const double n = (double) (val_count + 1);\n      const double delta = ((double) val) - (total/((val_count > 0) ? (double) val_count : 1.0));\n      const double delta_n = delta / n;\n      const double delta_n2 = delta_n * delta_n;\n      const double term1 = delta * delta_n * (double) val_count;\n\n      M4 += term1 * delta_n2 * (n*n - 3.0*n + 3.0) + 6.0 * delta_n2 * M2 - 4.0 * delta_n * M3;\n      M3 += term1 * delta_n * (n - 2.0) - 3.0 * delta_n * M2;\n      M2 += term1;\n\n      parent_t::AddDatum(val);\n    }\n\n    /// Reset this node (resets current stats to 0)\n    void Reset() {\n      M2 = 0;\n      M3 = 0;\n      M4 = 0;\n      parent_t::Reset();\n    }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::Stats. (level \" << (int) data::Stats << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n  /// == data::Histogram ==\n  /// Make the DataNode track a histogram of values observed since the last reset.\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::Histogram, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    VAL_TYPE offset;              ///< Min value in first bin; others are offset by this much.\n    VAL_TYPE width;               ///< How wide is the overall histogram?\n    IndexMap bins;                ///< Map of values to which bin they fall in.\n    emp::vector<size_t> counts;   ///< Counts in each bin.\n\n    using this_t = DataNodeModule<VAL_TYPE, data::Histogram, MODS...>;\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n    using base_t = DataNodeModule<VAL_TYPE>;\n\n    using base_t::val_count;\n\n  public:\n    DataNodeModule() : offset(0.0), width(0), bins(), counts() { ; }\n\n    /// Returns the minimum value this histogram is capable of containing\n    /// (i.e. the minimum value for the first bin)\n    VAL_TYPE GetHistMin() const { return offset; }\n\n    /// Returns the maximum value this histogram is capable of containing\n    /// (i.e. the maximum value for the last bin)\n    VAL_TYPE GetHistMax() const { return offset + width; }\n\n    /// Return the count of items in the @param bin_id 'th bin of the histogram\n    size_t GetHistCount(size_t bin_id) const { return counts[bin_id]; }\n\n    /// Return the width of the @param bin_id 'th bin of the histogram\n    double GetHistWidth(size_t bin_id) const { return bins[bin_id]; } //width / (double) counts.size(); }\n\n    /// Return a vector containing the count of items in each bin of the histogram\n    const emp::vector<size_t> & GetHistCounts() const { return counts; }\n\n    /// Return a vector containing the lowest value allowed in each bin.\n    emp::vector<double> GetBinMins() const {\n      emp::vector<double> bin_mins(counts.size());\n      // double bin_width = width / (double) counts.size();\n      double cur_min = offset;\n      for (size_t i = 0; i < counts.size(); i++) {\n        bin_mins[i] = cur_min;\n        cur_min += bins[i]; // bin_width;\n      }\n      return bin_mins;\n    }\n\n    /// Sets up the ranges of values that go in each bin of the histogram.\n    /// @param _min - the lowest value allowed in the histogram\n    /// @param _max - the largest value allowed in the histogram\n    /// @param num_bins - The number of bins the histogram should have. The distance\n    ///                   between min and max will be easily divided among this many bins.\n    void SetupBins(VAL_TYPE _min, VAL_TYPE _max, size_t num_bins) {\n      offset = _min;\n      width = _max - _min;\n      double bin_width = ((double) width) / (double) num_bins;\n      bins.Resize(num_bins);\n      bins.AdjustAll(bin_width);\n      counts.resize(num_bins);\n      for (size_t & x : counts) x = 0.0;\n    }\n\n    /// Add @param val to the DataNode\n    void AddDatum(const VAL_TYPE & val) {\n      size_t bin_id = bins.Index((double) (val - offset));\n      // size_t bin_id = counts.size() * ((double) (val - offset)) / (double) width;\n      counts[bin_id]++;\n      parent_t::AddDatum(val);\n    }\n\n    /// Reset the DataNode (empties the historgram)\n    void Reset() {\n      for (size_t & x : counts) x = 0.0;\n      parent_t::Reset();\n    }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::Histogram. (level \" << (int) data::FullRange << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n\n  };\n\n  /// == data::Pull ==\n  /// This module makes it possible to give the DataNode a function that it can call to calculate\n  /// new values or sets of values that it will then track. These functions are called every time\n  /// the PullData method is called on this node, and the values they return are measured as\n  /// specified by the other modules in this node.\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNodeModule<VAL_TYPE, data::Pull, MODS...> : public DataNodeModule<VAL_TYPE, MODS...> {\n  protected:\n    emp::FunctionSet<VAL_TYPE()> pull_funs;                   ///< Functions to pull data.\n    emp::FunctionSet<emp::vector<VAL_TYPE>()> pull_set_funs;  ///< Functions to pull sets of data.\n\n    using this_t = DataNodeModule<VAL_TYPE, data::Pull, MODS...>;\n    using parent_t = DataNodeModule<VAL_TYPE, MODS...>;\n    using base_t = DataNodeModule<VAL_TYPE>;\n\n    using base_t::in_vals;\n\n    void PullData_impl() {\n      in_vals = pull_funs.Run();\n      const emp::vector< emp::vector<VAL_TYPE> > & pull_sets = pull_set_funs.Run();\n      for (const auto & x : pull_sets) {\n        in_vals.insert(in_vals.end(), x.begin(), x.end());\n      }\n    }\n\n  public:\n    DataNodeModule() : pull_funs(), pull_set_funs() { ; }\n\n    void AddPull(const std::function<VAL_TYPE()> & fun) { pull_funs.Add(fun); }\n    void AddPullSet(const std::function<emp::vector<VAL_TYPE>()> & fun) { pull_set_funs.Add(fun); }\n\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"DataNodeModule for data::Pull. (level \" << (int) data::Pull << \")\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n  template <typename VAL_TYPE, typename MOD_PACK> class DataNode_Interface;\n\n  /// Outermost interface to all DataNode modules.\n  template <typename VAL_TYPE, int... IMODS>\n  class DataNode_Interface<VAL_TYPE, IntPack<IMODS...>>\n    : public DataNodeModule<VAL_TYPE, (emp::data) IMODS...> {\n    using parent_t = DataNodeModule<VAL_TYPE, (emp::data) IMODS...>;\n  };\n\n  /// A template that will determing requisites, sort, make unique the data mods provided.\n  /// The final, sorted IntPack of the requisites plus originals is in 'sorted'.\n  template<emp::data... MODS>\n  struct FormatDataMods {\n    using reqs = typename DataModuleRequisiteAdd<MODS...>::type;    ///< Identify requisites\n    using full = typename ModPack<MODS...>::template append<reqs>;  ///< Requisites + originals\n    using sorted = pack::RUsort<full>;                              ///< Unique and in order\n  };\n\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataNode : public DataNode_Interface< VAL_TYPE, typename FormatDataMods<MODS...>::sorted > {\n  private:\n    using parent_t = DataNode_Interface< VAL_TYPE, typename FormatDataMods<MODS...>::sorted  >;\n    using parent_t::in_vals;\n\n  public:\n\n    inline void Add() { ; }\n\n    /// Methods to provide new data.\n    template <typename... Ts>\n    inline void Add(const VAL_TYPE & val, const Ts &... extras) {\n      parent_t::AddDatum(val); Add(extras...);\n    }\n\n    /// Method to retrieve new data.\n    void PullData() {\n      parent_t::PullData_impl();                                     // Pull all data into in_vals.\n      for (const VAL_TYPE & val : in_vals) parent_t::AddDatum(val);  // Actually add the data.\n    }\n\n    /// Methods to reset data.\n    void Reset() { parent_t::Reset(); }\n\n    /// Methods to Print the templated values that a DataNode can produce.\n    void PrintCurrent(std::ostream & os=std::cout) const { os << parent_t::GetCurrent(); }\n    void PrintLog(std::ostream & os=std::cout,\n                 const std::string & spacer=\", \",\n                 const std::string & eol=\"\\n\") const {\n      const emp::vector<VAL_TYPE> & data = parent_t::GetData();\n      for (size_t i=0; i < data.size(); i++) {\n        if (i>0) os << spacer;\n        os << data[i];\n      }\n      os << eol;\n    }\n\n    /// Print debug information (useful for figuring out which modifiers you included)\n    void PrintDebug(std::ostream & os=std::cout) {\n      os << \"Main DataNode.\\n\";\n      parent_t::PrintDebug(os);\n    }\n  };\n\n  // Shortcuts for common types of data nodes...\n\n  /** A node that stores data about the most recent value it recieved, as well as the\n   * distribution (min, max, count, total, and mean) of values it has recieved since\n   * the last reset. It also allows you to give it a name, description, and keyword.*/\n  template <typename T, emp::data... MODS>\n  using DataMonitor = DataNode<T, data::Current, data::Info, data::Range, data::Stats, MODS...>;\n\n  /** A node that stores data about the most recent value it recieved, as well as all\n   * values it has recieved since the last reset. It also allows you to give it a name,\n   * description, and keyword.*/\n  template <typename T, emp::data... MODS>\n  using DataLog = DataNode<T, data::Current, data::Info, data::Log, MODS...>;\n\n  /** A node that stores all data it recieves in an archive (vector of vectors). The inner\n   * vectors are groups of data that were recieved between resets. This node also keeps\n   * a record of the min, max, count, and total of each vector, so you don't have to\n   * recalculate it later. Additionally, it allows you to give it a name, description,\n   * and keyword.*/\n  template <typename T, emp::data... MODS>\n  using DataArchive = DataNode<T, data::Info, data::Archive, data::FullRange, MODS...>;\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  Alert.h\n *  @brief Define an Alert function that goes to std::cerr in c++ or to Alert() in Javascript.\n *  @note Status: RELEASE\n */\n\n#ifndef EMP_ALERT_H\n#define EMP_ALERT_H\n\n#include \"string_utils.h\"\n\n// If we are in emscripten, make sure to include the header.\n#ifdef EMSCRIPTEN\n#include <emscripten.h>\n#endif\n\n\nnamespace emp {\n#ifdef EMSCRIPTEN\n  void Alert(const std::string & msg) { EM_ASM_ARGS({ msg = Pointer_stringify($0); alert(msg); }, msg.c_str()); }\n#else\n  /// Send msg to cerr if in C++, or show msg in an alert box if compiled to Javascript\n  /// Input can be any number of arguments of any types as long as the can be converted to\n  /// strings with emp::to_string().\n  void Alert(const std::string & msg) { std::cerr << msg << std::endl; }\n#endif\n  /// @cond TEMPLATES\n  template <typename... TYPE_SET>\n  void Alert(TYPE_SET... inputs) { Alert(emp::to_string(inputs...)); }\n  /// @endcond\n\n  /// A version of Alert that will cap how many times it can go off\n  template <typename... TYPE_SET>\n  static void CappedAlert(size_t cap, TYPE_SET... inputs) {\n    static size_t cur_count = 0;\n    if (cur_count++ < cap) Alert(emp::to_string(inputs...));\n  }\n\n  /// An object that will automatically output a message during construction or destruction,\n  /// usually for use in debugging to disentangle timings.\n  struct AlertObj {\n    std::string msg;    ///< Message for the alert to print.\n    bool on_construct;  ///< Should the message print automatically during construction?\n    bool on_destruct;   ///< Should the message print automatically during destruction?\n\n    AlertObj(const std::string & _msg, bool _on_c=true, bool _on_d=false)\n    : msg(_msg), on_construct(_on_c), on_destruct(_on_d) { if (on_construct) emp::Alert(msg); }\n    ~AlertObj() { if (on_destruct) emp::Alert(msg); }\n\n    void Trigger() { emp::Alert(msg); }\n    void SetMessage(const std::string & _msg) { msg = _msg; }\n  };\n}\n\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2017\n *\n *  @file stats.h\n *  @brief Functions for calculating various statistics about an ensemble.\n *  @note Status: BETA\n */\n\n\n#ifndef EMP_STATS_H\n#define EMP_STATS_H\n\n#include <type_traits>\n#include <map>\n#include <unordered_map>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <unordered_set>\n#include <functional>\n\n#include \"../base/vector.h\"\n#include \"../meta/type_traits.h\"\n#include \"math.h\"\n\nnamespace emp {\n\n  /// Calculate sum of the members of the container passed\n  /// Only works on containers with a scalar member type\n  template <typename C>\n  typename std::enable_if<!emp::is_ptr_type<typename C::value_type>::value && std::is_scalar<typename C::value_type>::value, typename C::value_type>::type\n  Sum(C & elements) {\n\n    double total = 0;\n    for (auto element : elements) {\n      total += element;\n    }\n\n    return total;\n  }\n\n  /// Calculate sum of the values pointed at by pointers in a container\n  /// Only works on containers of pointers to a scalar type\n  template <typename C>\n  typename std::enable_if<emp::is_ptr_type<typename C::value_type>::value && std::is_scalar<typename emp::remove_ptr_type<typename C::value_type>::type >::value, typename emp::remove_ptr_type<typename C::value_type>::type >::type\n  Sum(C & elements) {\n\n    double total = 0;\n    for (auto element : elements) {\n      total += *element;\n    }\n\n    return total;\n  }\n\n\n  /// Calculate Shannon Entropy of the members of the container passed\n  template <typename C>\n  typename std::enable_if<!emp::is_ptr_type<typename C::value_type>::value, double>::type\n  ShannonEntropy(C & elements) {\n\n    // Count number of each value present\n    std::map<typename C::value_type, int> counts;\n    for (auto element : elements) {\n      if (counts.find(element) != counts.end()) {\n\t       counts[element]++;\n      } else {\n\t       counts[element] = 1;\n      }\n    }\n\n    // Shannon entropy calculation\n    double result = 0;\n    for (auto element : counts) {\n      double p = double(element.second)/elements.size();\n      result +=  p * Log2(p);\n    }\n\n    return -1 * result;\n  }\n\n  /// Calculate Shannon Entropy of the members of the container when those members are pointers\n  template <typename C>\n  typename std::enable_if<emp::is_ptr_type<typename C::value_type>::value, double>::type\n  ShannonEntropy(C & elements) {\n    //   std::cout<< \"In se\" << std::endl;\n    using pointed_at = typename emp::remove_ptr_type<typename C::value_type>::type;\n    // Count number of each value present\n    std::map<pointed_at, int> counts;\n    for (auto element : elements) {\n      if (counts.find(*element) != counts.end()) {\n        counts[*element]++;\n      } else {\n        counts[*element] = 1;\n      }\n\n    }\n    // Shannon entropy calculation\n    double result = 0;\n    for (auto element : counts) {\n      double p = double(element.second)/elements.size();\n      result +=  p * log2(p);\n    }\n    //   std::cout<< \"leaving se\" << std::endl;\n    return -1 * result;\n  }\n\n  /// Calculate variance of the members of the container passed\n  /// Only works on containers with a scalar member type\n  template <typename C>\n  typename std::enable_if<!emp::is_ptr_type<typename C::value_type>::value && std::is_scalar<typename C::value_type>::value, double>::type\n  Variance(C & elements) {\n\n    double var = 0;\n    double mean = (double)Sum(elements)/elements.size();\n    for (auto element : elements) {\n      var += emp::Pow(element - mean, 2);\n    }\n    return var/elements.size();\n  }\n\n  /// Calculate variance of the values pointed at by members of the container passed\n  /// Only works on containers with a scalar member type\n  template <typename C>\n  typename std::enable_if<emp::is_ptr_type<typename C::value_type>::value && std::is_scalar<typename emp::remove_ptr_type<typename C::value_type>::type >::value, double>::type\n  Variance(C & elements) {\n\n    double var = 0;\n    double mean = (double)Sum(elements)/elements.size();\n    for (auto element : elements) {\n      var += emp::Pow(*element - mean, 2);\n    }\n    return var/elements.size();\n  }\n\n  /// Calculate the mean of the values in a container\n  /// If values are pointers, they will be automatically de-referenced\n  /// Values must be numeric.\n  template <typename C>\n  emp::sfinae_decoy<double, typename C::value_type> \n  Mean(C & elements) {\n    return (double)Sum(elements)/elements.size();\n  }\n\n  /// Calculate the standard deviation of the values in a container\n  /// If values are pointers, they will be automatically de-referenced\n  /// Values must be numeric.\n  template <typename C>\n  emp::sfinae_decoy<double, typename C::value_type> \n  StandardDeviation(C & elements) {\n    return sqrt(Variance(elements));\n  }\n\n  /// Count the number of unique elements in a container\n  template <typename C>\n  typename std::enable_if<!emp::is_ptr_type<typename C::value_type>::value, int>::type\n  UniqueCount(C & elements) {\n    // Converting to a set will remove duplicates leaving only unique values\n    std::set<typename C::value_type> unique_elements(elements.begin(),\n                           elements.end());\n    return unique_elements.size();\n  }\n\n  /// Count the number of unique elements in the container of pointers. (compares objects pointed\n  /// to; pointers do not have to be identical)\n  template <typename C>\n  typename std::enable_if<emp::is_ptr_type<typename C::value_type>::value, int>::type\n  UniqueCount(C & elements) {\n    // Converting to a set will remove duplicates leaving only unique values\n    using pointed_at = typename emp::remove_ptr_type<typename C::value_type>::type;\n    std::set<pointed_at> unique_elements;\n    for (auto element : elements) {\n        unique_elements.insert(*element);\n    }\n\n    return unique_elements.size();\n  }\n\n  /// Run the provided function on every member of a container and return the MAXIMUM result.\n  template <typename C, typename RET_TYPE, typename ARG_TYPE>\n  RET_TYPE MaxResult(std::function<RET_TYPE(ARG_TYPE)> & fun, C & elements){\n    auto best = fun(elements.front());  // @CAO Technically, front is processed twice...\n    for (auto element : elements){\n      auto result = fun(element);\n      if (result > best) best = result;\n    }\n    return best;\n  }\n\n  /// Run the provided function on every member of a container and return the MINIMUM result.\n  template <typename C, typename RET_TYPE, typename ARG_TYPE>\n  RET_TYPE MinResult(std::function<RET_TYPE(ARG_TYPE)> & fun, C & elements){\n    auto best = fun(elements.front());  // @CAO Technically, front is processed twice...\n    for (auto element : elements){\n      auto result = fun(element);\n      if (result < best) best = result;\n    }\n    return best;\n  }\n\n  /// Run the provided function on every member of a container and return the AVERAGE result.\n  /// Function must return a scalar (i.e. numeric) type.\n  template <typename C, typename RET_TYPE, typename ARG_TYPE>\n  typename std::enable_if<std::is_scalar<RET_TYPE>::value, double>::type \n  MeanResult(std::function<RET_TYPE(ARG_TYPE)> & fun, C & elements){\n    double cumulative_value = 0;\n    double count = 0;\n    for (auto element : elements){\n        ++count;\n        cumulative_value += fun(element);\n    }\n    return (cumulative_value / count);\n  }\n\n  /// Run the provided function on every member of a container and return a vector of ALL results.\n  template <typename C, typename RET_TYPE, typename ARG_TYPE>\n  emp::vector<RET_TYPE> ApplyFunction(std::function<RET_TYPE(ARG_TYPE)> & fun, C & elements) {\n      emp::vector<RET_TYPE> results;\n      for (auto element : elements){\n          results.push_back(fun(element));\n      }\n      return results;\n  }\n\n  // This variant is actually super confusing because the value_type of world\n  // and population managers are pointers whereas the type that they're templated\n  // on is not. Also because the insert method for emp::vectors doesn't take an\n  // additional argument?\n\n  /* template <template <typename> class C, typename RET_TYPE, typename T>\n  C<RET_TYPE> RunFunctionOnContainer(std::function<RET_TYPE(T)> fun, C<T> & elements) {\n      C<RET_TYPE> results;\n      for (auto element : elements){\n          results.insert(fun(element), results.back());\n      }\n      return results;\n  } */\n\n}\n\n#endif\n\n//Base class outputs most recent\n//Write derived class\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2018\n *\n *  @file  Action.h\n *  @brief Allow functions to be bundled (as Actions) and triggered enmasse.\n *  @note Status: Beta\n *\n *  @todo Setup easier mechanism to control the order in which actions are triggered.\n *  @todo Signals should have default parameters so not all need be supplied when triggered.\n */\n\n\n#ifndef EMP_CONTROL_SIGNAL\n#define EMP_CONTROL_SIGNAL\n\n#include <map>\n#include <string>\n\n#include \"../meta/TypePack.h\"\n#include \"../tools/FunctionSet.h\"\n#include \"../tools/map_utils.h\"\n\n#include \"Action.h\"\n\nnamespace emp {\n\n  /// SignalKey tracks a specific function triggered by a signal. For now, its just a value pair.\n  class SignalKey {\n  private:\n    uint32_t signal_id;   ///< Which signal is this key associated with?\n    uint32_t key_id;      ///< Which key id is this.\n\n    // Internal function to compare two signal kays.\n    int Compare(const SignalKey& in) const {\n      if (signal_id < in.signal_id) return -1;\n      if (signal_id > in.signal_id) return 1;\n      if (key_id < in.key_id) return -1;\n      if (key_id > in.key_id) return 1;\n      return 0;\n    }\n  public:\n    SignalKey(uint32_t _kid=0, uint32_t _sid=0) : signal_id(_sid), key_id(_kid) { ; }\n    SignalKey(const SignalKey &) = default;\n    SignalKey & operator=(const SignalKey &) = default;\n    ~SignalKey() { ; }\n\n    /// Are two signal keys identical?\n    bool operator==(const SignalKey& in) const { return Compare(in) == 0; }\n\n    /// Are two signal keys different?\n    bool operator!=(const SignalKey& in) const { return Compare(in) != 0; }\n\n    bool operator<(const SignalKey& in)  const { return Compare(in) < 0; }\n    bool operator>(const SignalKey& in)  const { return Compare(in) > 0; }\n    bool operator<=(const SignalKey& in) const { return Compare(in) <= 0; }\n    bool operator>=(const SignalKey& in) const { return Compare(in) >= 0; }\n\n    /// What is the KeyID associated with this signal key.\n    uint32_t GetID() const { return key_id; }\n\n    /// What is the ID of the signal that this key is associated with.\n    uint32_t GetSignalID() const { return signal_id; }\n\n    /// Is this key currently pointing to a signal action?\n    bool IsActive() const { return key_id > 0; }\n\n    /// Set this key to specified values.\n    void Set(uint32_t _kid=0, uint32_t _sid=0) { signal_id = _sid; key_id = _kid; }\n\n    /// Clear this key.\n    void Clear() { signal_id = 0; key_id = 0; }\n\n    operator bool() { return key_id > 0; }\n  };\n\n  // Forward declarations.\n  class SignalBase;     // ...for pointers to signals.\n  class SignalManager;  // ...for setting up as friend.\n\n  // Mechanisms for Signals to report to a manager.\n  namespace internal {\n    struct SignalManager_Base {\n      virtual void NotifyConstruct(SignalBase * sig_ptr) = 0;\n      virtual void NotifyDestruct(SignalBase * sig_ptr) = 0;\n      virtual ~SignalManager_Base() { ; }\n    };\n    struct SignalControl_Base {\n      virtual SignalManager_Base & GetSignalManager() = 0;\n      virtual void NotifyConstruct(SignalBase * sig_ptr) = 0;\n      virtual ~SignalControl_Base() { ; }\n    };\n  }\n\n  /// Base class for all signals.\n  class SignalBase {\n    friend class SignalManager;  // Allow SignalManager to alter internals of a signal.\n  protected:\n    using man_t = internal::SignalManager_Base;\n\n    std::string name;                          ///< What is the unique name of this signal?\n    uint32_t signal_id;                        ///< What is the unique ID of this signal?\n    uint32_t next_link_id;                     ///< What ID shouild the next link have?\n    std::map<SignalKey, size_t> link_key_map;  ///< Map unique link keys to link index for actions.\n    emp::vector<man_t *> managers;             ///< What manager is handling this signal?\n    man_t * prime_manager;                     ///< Which manager leads deletion? (nullptr for self)\n\n    // Helper Functions\n    SignalKey NextSignalKey() { return SignalKey(signal_id,++next_link_id); }\n\n    // SignalBase should only be constructable from derrived classes.\n    SignalBase(const std::string & n, internal::SignalManager_Base * manager=nullptr)\n    : name(n), signal_id(0), next_link_id(0), link_key_map(), managers(), prime_manager(nullptr)\n    {\n      if (manager) manager->NotifyConstruct(this);\n    }\n  public:\n    SignalBase() = delete;\n    SignalBase(const SignalBase &) = delete;\n    SignalBase(SignalBase &&) = delete;\n    SignalBase & operator=(const SignalBase &) = delete;\n    SignalBase & operator=(SignalBase &&) = delete;\n    virtual ~SignalBase() {\n      // Let all managers other than prime know about destruction (prime must have triggered it.)\n      for (auto * m : managers) if (m != prime_manager) m->NotifyDestruct(this);\n    }\n    virtual SignalBase * Clone() const = 0;\n\n    const std::string & GetName() const { return name; }\n    virtual size_t GetNumArgs() const = 0;\n    virtual size_t GetNumActions() const = 0;\n\n    // NOTE: If a Trigger is called on a base class, convert the signal assuming that the args\n    // map to the correct types (defined below with a dynamic cast to ensure correctness)\n    template <typename... ARGS>\n    void BaseTrigger(ARGS... args);\n\n    /// Actions without arguments or a return type can be associated with any signal.\n    template <typename... ARGS>\n    SignalKey AddAction(const std::function<void(ARGS...)> & in_fun);\n\n    /// Add an action using an Action object.\n    virtual SignalKey AddAction(ActionBase &) = 0;\n\n    /// Remove an action specified by its key.\n    virtual void Remove(SignalKey key) = 0;\n\n    /// Remove all actions from this signal.\n    void Clear() {\n      // While we still have keys, remove them!\n      while (link_key_map.size()) Remove(link_key_map.begin()->first);\n    }\n\n    bool Has(SignalKey key) const { return emp::Has(link_key_map, key); }\n  };\n\n  /// Generic version of Signals; needs specialization to a function type..\n  template <typename... ARGS> class Signal;\n\n  /// Signals with void return.\n  template <typename... ARGS>\n  class Signal<void(ARGS...)> : public SignalBase {\n  protected:\n    FunctionSet<void(ARGS...)> actions;  ///< Set of functions (actions) to be triggered with this signal.\n  public:\n    using fun_t = void(ARGS...);\n    using this_t = Signal<fun_t>;\n\n    Signal(const std::string & name=\"\", internal::SignalManager_Base * manager=nullptr)\n      : SignalBase(name, manager), actions() { ; }\n    Signal(const std::string & name, internal::SignalControl_Base & control)\n      : this_t(name, &(control.GetSignalManager())) { ; }\n    virtual this_t * Clone() const {\n      this_t * new_copy = new this_t(name);\n      // @CAO: Make sure to copy over actions into new copy.\n      return new_copy;\n    }\n\n    size_t GetNumArgs() const { return sizeof...(ARGS); }\n    size_t GetNumActions() const { return actions.GetSize(); }\n\n    /// Trigger this signal, providing all needed arguments.\n    void Trigger(ARGS... args) { actions.Run(args...); }\n\n    /// Add an action that takes the proper arguments.\n    SignalKey AddAction(const std::function<void(ARGS...)> & in_fun) {\n      const SignalKey link_id = NextSignalKey();\n      link_key_map[link_id] = actions.size();\n      actions.Add(in_fun);\n      return link_id;\n    }\n\n    /// Add a specified action to this signal.\n    SignalKey AddAction(ActionBase & in_action) {\n      Action<fun_t> * a = dynamic_cast< Action<fun_t>* >(&in_action);\n      emp_assert( a != nullptr && \"action type must match signal type.\" );\n      return AddAction(a->GetFun());\n    }\n\n    /// Add an action that takes too few arguments... but provide specific padding info.\n    template <typename... FUN_ARGS, typename... EXTRA_ARGS>\n    SignalKey AddAction(const std::function<void(FUN_ARGS...)> & in_fun, TypePack<EXTRA_ARGS...>)\n    {\n      // If we made it here, we have isolated the extra arguments that we need to throw away to\n      // call this function correctly.\n      const SignalKey link_id = NextSignalKey();\n      link_key_map[link_id] = actions.size();\n      std::function<void(ARGS...)> expand_fun =\n        [in_fun](FUN_ARGS &&... args, EXTRA_ARGS...){ in_fun(std::forward<FUN_ARGS>(args)...); };\n      actions.Add(expand_fun);\n      return link_id;\n    }\n\n    /// Add an std::function that takes the wrong number of arguments.  For now, we will assume\n    /// that there are too few and we need to figure out how to pad it out.\n    template <typename... FUN_ARGS>\n    SignalKey AddAction(const std::function<void(FUN_ARGS...)> & in_fun) {\n      // Identify the extra arguments by removing the ones that we know about.\n      using extra_type = typename TypePack<ARGS...>::template popN<sizeof...(FUN_ARGS)>;\n      return AddAction(in_fun, extra_type());\n    }\n\n    /// Add a regular function that takes the wrong number of arguments.  For now, we will assume\n    /// that there are too few and we need to figure out how to pad it out.\n    template <typename... FUN_ARGS>\n    SignalKey AddAction(void in_fun(FUN_ARGS...)) {\n      // Identify the extra arguments by removing the ones that we know about.\n      using extra_type = typename TypePack<ARGS...>::template popN<sizeof...(FUN_ARGS)>;\n      return AddAction(std::function<void(FUN_ARGS...)>(in_fun), extra_type());\n    }\n\n    /// Remove an action from this signal by providing its key.\n    void Remove(SignalKey key) {\n      // Find the action associate with this key.\n      emp_assert(emp::Has(link_key_map, key));\n      size_t pos = link_key_map[key];\n\n      // Remove the action\n      actions.Remove(pos);\n      link_key_map.erase(key);\n\n      // Adjust all of the positions of the actions that came after this one.\n      for (auto & x : link_key_map) {\n        if (x.second > pos) x.second = x.second - 1;\n      }\n    }\n\n    /// Retrieve the relative priority associated with a specific\n    size_t GetPriority(SignalKey key) {\n      emp_assert(emp::Has(link_key_map, key));\n      return link_key_map[key];\n    }\n\n  };\n\n  // Signals with NON-void return.\n  template <typename RETURN, typename... ARGS>\n  class Signal<RETURN(ARGS...)> : public SignalBase {\n  protected:\n    FunctionSet<RETURN(ARGS...)> actions;\n  public:\n    using fun_t = RETURN(ARGS...);\n    using this_t = Signal<fun_t>;\n\n    Signal(const std::string & name=\"\", internal::SignalManager_Base * manager=nullptr)\n      : SignalBase(name, manager) { ; }\n    Signal(const std::string & name, internal::SignalControl_Base & control)\n      : this_t(name, &(control.GetSignalManager())) { ; }\n    virtual this_t * Clone() const {\n      this_t * new_copy = new this_t(name);\n      // @CAO: Make sure to copy over actions into new copy.\n      return new_copy;\n    }\n\n    size_t GetNumArgs() const { return sizeof...(ARGS); }\n    size_t GetNumActions() const { return actions.GetSize(); }\n\n    const emp::vector<RETURN> & Trigger(ARGS... args) { return actions.Run(args...); }\n\n    // Add an action that takes the proper arguments.\n    SignalKey AddAction(const std::function<fun_t> & in_fun) {\n      const SignalKey link_id = NextSignalKey();\n      link_key_map[link_id] = actions.size();\n      actions.Add(in_fun);\n      return link_id;\n    }\n\n    SignalKey AddAction(ActionBase & in_action) {\n      Action<fun_t> * a = dynamic_cast< Action<fun_t>* >(&in_action);\n      emp_assert( a != nullptr && \"action type must match signal type.\" );\n      return AddAction(a->GetFun());\n    }\n\n    // Add an action that takes too few arguments... but provide specific padding info.\n    template <typename... FUN_ARGS, typename... EXTRA_ARGS>\n    SignalKey AddAction(const std::function<RETURN(FUN_ARGS...)> & in_fun, TypePack<EXTRA_ARGS...>)\n    {\n      // If we made it here, we have isolated the extra arguments that we need to throw away to\n      // call this function correctly.\n      const SignalKey link_id = NextSignalKey();\n      link_key_map[link_id] = actions.size();\n      std::function<fun_t> expand_fun =\n        [in_fun](FUN_ARGS &&... args, EXTRA_ARGS...){ in_fun(std::forward<FUN_ARGS>(args)...); };\n      actions.Add(expand_fun);\n      return link_id;\n    }\n\n    // Add an std::function that takes the wrong number of arguments.  For now, we will assume\n    // that there are too few and we need to figure out how to pad it out.\n    template <typename... FUN_ARGS>\n    SignalKey AddAction(const std::function<RETURN(FUN_ARGS...)> & in_fun) {\n      // Identify the extra arguments by removing the ones that we know about.\n      using extra_type = typename TypePack<ARGS...>::template popN<sizeof...(FUN_ARGS)>;\n      return AddAction(in_fun, extra_type());\n    }\n\n    // Add a regular function that takes the wrong number of arguments.  For now, we will assume\n    // that there are too few and we need to figure out how to pad it out.\n    template <typename... FUN_ARGS>\n    SignalKey AddAction(RETURN in_fun(FUN_ARGS...)) {\n      // Identify the extra arguments by removing the ones that we know about.\n      using extra_type = typename TypePack<ARGS...>::template popN<sizeof...(FUN_ARGS)>;\n      return AddAction(std::function<RETURN(FUN_ARGS...)>(in_fun), extra_type());\n    }\n\n    void Remove(SignalKey key) {\n      // Find the action associate with this key.\n      emp_assert(emp::Has(link_key_map, key));\n      size_t pos = link_key_map[key];\n\n      // Remove the action\n      actions.Remove(pos);\n      link_key_map.erase(key);\n\n      // Adjust all of the positions of the actions that came after this one.\n      for (auto & x : link_key_map) {\n        if (x.second > pos) x.second = x.second - 1;\n      }\n    }\n\n    size_t GetPriority(SignalKey key) {\n      emp_assert(emp::Has(link_key_map, key));\n      return link_key_map[key];\n    }\n\n  };\n\n  template<typename... ARGS>\n  inline void SignalBase::BaseTrigger(ARGS... args) {\n    // Make sure this base class is really of the correct derrived type (but do so in an\n    // assert since triggers may be called frequently and should be fast!)\n    emp_assert(dynamic_cast< Signal<void(ARGS...)> * >(this));\n    ((Signal<void(ARGS...)> *) this)->Trigger(args...);\n  }\n\n  template <typename... ARGS>\n  inline SignalKey SignalBase::AddAction(const std::function<void(ARGS...)> & in_fun) {\n    // @CAO: Assert for now; ideally try to find solution with fewer args.\n    emp_assert(dynamic_cast< Signal<void(ARGS...)> * >(this));\n    return ((Signal<void(ARGS...)> *) this)->AddAction(in_fun);\n  }\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2017\n *\n *  @file  FunctionSet.h\n *  @brief Setup a collection of functions, all with the same signature, that can be run as a group.\n *  @note Status: BETA\n */\n\n#ifndef EMP_FUNCTION_SET_H\n#define EMP_FUNCTION_SET_H\n\n#include <functional>\n#include \"../base/vector.h\"\n\nnamespace emp {\n\n  template <typename T> class FunctionSet;\n\n  /// A vector of functions that can all be triggered at onece; results can either be returned\n  /// in a vector or post-processed in a function (such as max, min, etc.)\n  /// Derived from emp::vector, hence with all of the same methods as vector.\n  template <typename RETURN_T, typename... ARGS>\n  class FunctionSet<RETURN_T(ARGS...)> : public emp::vector<std::function<RETURN_T(ARGS...)>> {\n  protected:\n    mutable emp::vector<RETURN_T> return_vals;\n\n  public:\n    FunctionSet() : return_vals() { ; }\n    ~FunctionSet() { ; }\n\n    using base_t = emp::vector<std::function<RETURN_T(ARGS...)>>;\n    using value_type = typename base_t::value_type;\n    using return_t = RETURN_T;\n\n    /// How many functions are in this FunctionSet?\n    size_t GetSize() const { return base_t::size(); }\n\n    /// Add a new funtion to this FunctionSet\n    void Add(const value_type & in_fun) { base_t::push_back(in_fun); }\n\n    /// Remove the function at a specified position.\n    void Remove(size_t pos) { base_t::erase(base_t::begin()+pos); }\n\n    /// Run all functions and return a vector of all results.\n    const emp::vector<RETURN_T> & Run(ARGS... args) const {\n      const size_t num_tests = base_t::size();\n      return_vals.resize(num_tests);\n      for (size_t i = 0; i < num_tests; i++) {\n        return_vals[i] = (*this)[i](args...);\n      }\n      return return_vals;\n    }\n\n    /// If you want to provide a filter function, you can retrieve a specific return value.\n    /// The filter should take in two return values and indicate which is \"better\".\n    RETURN_T Run(ARGS... args, std::function<RETURN_T(RETURN_T, RETURN_T)> comp_fun,\n                 RETURN_T default_val=0) const {\n      if (base_t::size() == 0) return default_val;  // If we have no entries, return the default.\n\n      Run(args...);\n\n      RETURN_T best_found = return_vals[0];\n      for (size_t i = 1; i < return_vals.size(); i++) {\n        best_found = comp_fun(best_found, return_vals[i]);\n      }\n\n      return best_found;\n    }\n\n    /// Run all functions and return the highest value.\n    RETURN_T FindMax(ARGS... args, RETURN_T default_val=0) const {\n      return Run(args..., [](double i1, double i2){ return std::max(i1,i2); }, default_val);\n    }\n\n    /// Run all functions and return the lowest value.\n    RETURN_T FindMin(ARGS... args, RETURN_T default_val=0) const {\n      return Run(args..., [](double i1, double i2){ return std::min(i1,i2); }, default_val);\n    }\n\n    /// Run all functions and return the total value.\n    RETURN_T FindSum(ARGS... args, RETURN_T default_val=0) const {\n      return Run(args..., [](double i1, double i2){ return i1 + i2; }, default_val);\n    }\n\n    /// Run all functions and return a product of all values.\n    RETURN_T FindProduct(ARGS... args, RETURN_T default_val=1) const {\n      return Run(args..., [](double i1, double i2){ return i1 * i2; }, default_val);\n    }\n  };\n\n\n  /// A specialized version of FunctionSet for void functions.\n  template <typename... ARGS>\n  class FunctionSet<void(ARGS...)> : public emp::vector<std::function<void(ARGS...)>> {\n  public:\n    FunctionSet() { ; }\n    ~FunctionSet() { ; }\n\n    using base_t = emp::vector<std::function<void(ARGS...)>>;\n    using value_type = typename base_t::value_type;\n    using return_t = void;\n\n    /// How many functions are in this FunctionSet?\n    size_t GetSize() const { return base_t::size(); }\n\n    /// Add a new function to this FunctionSet.\n    void Add(const std::function<void(ARGS...)> & in_fun) { base_t::push_back(in_fun); }\n\n    /// Remove the function at the designated position from this FunctionSet.\n    void Remove(size_t pos) { base_t::erase(base_t::begin()+(int)pos); }\n\n    /// Run all functions in the FunctionSet\n    void Run(ARGS... args) const {\n      for (const std::function<void(ARGS...)> & cur_fun : *this) {\n        cur_fun(args...);\n      }\n    }\n  };\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018.\n *\n *  @file  init.h\n *  @brief Define Initialize() and other functions to set up Empirical to build Emscripten projects.\n */\n\n#ifndef EMP_INIT_H\n#define EMP_INIT_H\n\n/// If EMSCRIPTEN is defined, initialize everything.  Otherwise create useful stubs.\n#ifdef EMSCRIPTEN\n\n#include <emscripten.h>\n#include \"../tools/string_utils.h\"\n\nextern \"C\" {\n  extern void EMP_Initialize();\n}\n\nnamespace emp {\n\n  /// Do all initializations for using EMP tricks with Emscripten.\n  static void Initialize() {\n    static bool init = false;      // Make sure we only initialize once!\n    if (!init) {\n      EMP_Initialize();   // Call JS initializations\n      init = true;\n    }\n  }\n\n  /// Setup timings on animations through Emscripten.\n  static void InitializeAnim() {\n    static bool init = false;      // Make sure we only initialize once!\n    if (!init) {\n      // Setup the animation callback in Javascript\n      EM_ASM({\n        window.requestAnimFrame = (function(callback) {\n            return window.requestAnimationFrame\n              || window.webkitRequestAnimationFrame\n              || window.mozRequestAnimationFrame\n              || window.oRequestAnimationFrame\n              || window.msRequestAnimationFrame\n              || function(callback) { window.setTimeout(callback, 1000 / 60); };\n          })();\n      });\n    }\n\n    init = true;\n  }\n\n  namespace web {\n    // Some helper functions.\n    // Live keyword means that whatever is passed in needs to be re-evaluated every update.\n    namespace internal {\n      /// If a variable is passed in to Live(), construct a function to look up its current value.\n      template <typename VAR_TYPE>\n      std::function<std::string()> Live_impl(VAR_TYPE & var, bool) {\n        return [&var](){ return emp::to_string(var); };\n      }\n\n      /// If a non-variable is passed in to Live(), assume it is a function and print it each redraw.\n      template <typename IN_TYPE>\n      std::function<std::string()> Live_impl(IN_TYPE && fun, int) {\n        return [fun](){ return emp::to_string(fun()); };\n      }\n    }\n\n    /// Take a function or variable and set it up so that it can update each time a text box is redrawn.\n    template <typename T>\n    std::function<std::string()> Live(T && val) {\n      return internal::Live_impl(std::forward<T>(val), true);\n    }\n\n    inline std::string ToJSLiteral(bool x) {\n      if (x == true) return \"true\";\n      else return \"false\";\n    }\n  }\n\n}\n\n\n// === Initialization for NON-emscripten to ignore macros ===\n\n#else\n\n#define EM_ASM(...)\n#define EM_ASM_ARGS(...)\n#define EM_ASM_INT(...) 0\n#define EM_ASM_DOUBLE(...) 0.0\n#define EM_ASM_INT_V(...) 0\n#define EM_ASM_DOUBLE_V(...) 0.0\n\n#include <fstream>\n\nnamespace emp {\n  std::ofstream debug_file(\"debug_file\");\n\n  /// Stub for when Emscripten is not in use.\n  static bool Initialize() {\n    // Nothing to do here yet...\n    static_assert(false, \"Emscripten web tools require emcc for compilation (for now).\");\n    return true;\n  }\n\n  /// Stub for when Emscripten is not in use.\n  static bool InitializeAnim() {\n    // Nothing to do here yet...\n    return true;\n  }\n\n  namespace web {\n    inline std::string ToJSLiteral(bool x) {\n      if (x == true) return \"true\";\n      else return \"false\";\n    }\n  }\n\n}\n\n#endif\n\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2017\n *\n *  @file tuple_utils.h\n *  @brief Functions to simplify the use of std::tuple\n *  @note Status: RELEASE\n */\n\n#ifndef EMP_TUPLE_UTILS_H\n#define EMP_TUPLE_UTILS_H\n\n#include <functional>\n#include <tuple>\n\n#include \"../meta/IntPack.h\"\n#include \"../meta/meta.h\"\n\nnamespace emp {\n\n  /// Quick way to calculate tuple size.\n  template <typename TUPLE_T>\n  constexpr inline int tuple_size() { return std::tuple_size<TUPLE_T>::value; }\n\n\n  /// Reorganize the entries in tuple; the provided int pack must specify the new ordering.\n  template <typename... Ts, int... Ps>\n  auto shuffle_tuple(const std::tuple<Ts...> & tup, IntPack<Ps...>) {\n    return std::make_tuple( std::get<Ps>(tup)... );\n  }\n\n\n  /// Apply a tuple as arguments to a function, where all argument positions in function are\n  /// specified with and IntPack\n  template < typename FUN_T, typename TUPLE_T, int... N >   // Specify positions to apply...\n  auto ApplyTuple(const FUN_T & fun, const TUPLE_T & tup, IntPack<N...>) {\n    return fun(std::get<N>(tup)...);\n  }\n\n  /// Apply a tuple as arguments to a function, in order.\n  template <typename FUN_T, typename TUPLE_T>              // Apply whole tuple\n  auto ApplyTuple(const FUN_T & fun, const TUPLE_T & tup) {\n    return ApplyTuple(fun, tup, IntPackRange<0,tuple_size<TUPLE_T>()>());\n  }\n\n\n\n  /// Setup tuples to be able to be used in hash tables.\n  template <typename... TYPES>\n  struct TupleHash {\n    using tuple_t = std::tuple<TYPES...>;\n    using fun_t = std::function<std::size_t(TYPES...)>;\n\n    std::size_t operator()( const tuple_t & tup ) const {\n      return ApplyTuple<fun_t, tuple_t> (emp::CombineHash<TYPES...>, tup);\n    }\n  };\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  TextArea.h\n *  @brief Specs for the TextArea widget.\n *\n *\n * @todo Callback does a lot of string-copies at the moment; should be streamlined.\n */\n\n#ifndef EMP_WEB_TEXT_AREA_H\n#define EMP_WEB_TEXT_AREA_H\n\n#include \"Widget.h\"\n\nnamespace emp {\nnamespace web {\n\n  /// An input field for text data.  A function provided at creation time will be called\n  /// each time the contents of the TextWidget are changed.  The current text contents\n  /// can also always be accessed with the GetText() member function.\n\n  class TextArea : public internal::WidgetFacet<TextArea> {\n    friend class TextAreaInfo;\n  protected:\n\n    // TextAreas associated with the same DOM element share a single TextAreaInfo object.\n    class TextAreaInfo : public internal::WidgetInfo {\n      friend TextArea;\n    protected:\n      int cols;                 ///< How many columns of text in the area?\n      int rows;                 ///< How many rows of text in the area?\n      int max_length;           ///< Maximum number of total characters allowed.\n\n      std::string cur_text;     ///< Text that should currently be in the box.\n\n      bool autofocus;           ///< Should this TextArea be set as Autofocus?\n      bool disabled;            ///< Should this TextArea be disabled?\n\n      std::function<void(const std::string &)> callback; ///< Function to call with each keypress.\n      uint32_t callback_id;     ///< Callback ID the built-in function for this text area.\n\n      TextAreaInfo(const std::string & in_id=\"\") : internal::WidgetInfo(in_id) { ; }\n      TextAreaInfo(const TextAreaInfo &) = delete;               // No copies of INFO allowed\n      TextAreaInfo & operator=(const TextAreaInfo &) = delete;   // No copies of INFO allowed\n      virtual ~TextAreaInfo() {\n        if (callback_id) emp::JSDelete(callback_id);             // Delete callback wrapper.\n      }\n\n      std::string GetTypeName() const override { return \"TextAreaInfo\"; }\n\n      void DoCallback(std::string in_text) {\n        cur_text = in_text;\n        if (callback) callback(cur_text);\n        UpdateDependants();\n      }\n\n      virtual void GetHTML(std::stringstream & HTML) override {\n        HTML.str(\"\");                                           // Clear the current text.\n        HTML << \"<textarea \";                                   // Start the textarea tag.\n        if (disabled) { HTML << \" disabled=true\"; }             // Check if should be disabled\n        HTML << \" id=\\\"\" << id << \"\\\"\";                         // Indicate ID.\n        HTML << \" onkeyup=\\\"emp.Callback(\" << callback_id << \", $(this).val())\\\"\";\n        HTML << \" rows=\\\"\" << rows << \"\\\"\"\n             << \" cols=\\\"\" << cols << \"\\\"\";\n        if (max_length >= 0) { HTML << \" maxlength=\\\"\" << max_length << \"\\\"\"; }\n        HTML << \">\" << cur_text << \"</textarea>\";              // Close and label the textarea\n      }\n\n      void UpdateAutofocus(bool in_af) {\n        autofocus = in_af;\n        if (state == Widget::ACTIVE) ReplaceHTML();     // If node is active, immediately redraw!\n      }\n\n      void UpdateCallback(const std::function<void(const std::string &)> & in_cb) {\n        callback = in_cb;\n      }\n\n      void UpdateDisabled(bool in_dis) {\n        disabled = in_dis;\n        if (state == Widget::ACTIVE) ReplaceHTML();     // If node is active, immediately redraw!\n      }\n\n      void UpdateText(const std::string & in_string) {\n        EM_ASM_ARGS({\n            var id = Pointer_stringify($0);\n            var text = Pointer_stringify($1);\n            $('#' + id).val(text);\n          }, id.c_str(), in_string.c_str());\n      }\n\n    public:\n      virtual std::string GetType() override { return \"web::TextAreaInfo\"; }\n    }; // End of TextAreaInfo definition\n\n\n    // Get a properly cast version of indo.\n    TextAreaInfo * Info() { return (TextAreaInfo *) info; }\n    const TextAreaInfo * Info() const { return (TextAreaInfo *) info; }\n\n    TextArea(TextAreaInfo * in_info) : WidgetFacet(in_info) { ; }\n\n  public:\n    /// Build a text area with a specified HTML identifier.\n    TextArea(const std::string & in_id=\"\")\n      : WidgetFacet(in_id)\n    {\n      info = new TextAreaInfo(in_id);\n\n      Info()->cols = 20;\n      Info()->rows = 1;\n      Info()->max_length = -1;\n      Info()->cur_text = \"\";\n      Info()->autofocus = false;\n      Info()->disabled = false;\n\n      TextAreaInfo * ta_info = Info();\n      Info()->callback_id = JSWrap( std::function<void(std::string)>(\n        [ta_info](std::string in_str){ ta_info->DoCallback(in_str); }\n      ));\n    }\n\n    /// Build a text area with a specified function to call with every change.\n    TextArea(std::function<void(const std::string &)> in_cb, const std::string & in_id=\"\")\n      : TextArea(in_id)\n    {\n      Info()->callback = in_cb;\n    }\n\n    /// Connect to an existing TextArea\n    TextArea(const TextArea & in) : WidgetFacet(in) { ; }\n    TextArea(const Widget & in) : WidgetFacet(in) { emp_assert(in.IsTextArea()); }\n    virtual ~TextArea() { ; }\n\n    using INFO_TYPE = TextAreaInfo;\n\n    /// Get the current text in this TextArea.\n    const std::string & GetText() const { return Info()->cur_text; }\n\n    /// Make this text area have focus by default.\n    TextArea & SetAutofocus(bool in_af) { Info()->UpdateAutofocus(in_af); return *this; }\n\n    /// Change the callback function for this TextArea.\n    TextArea & SetCallback(const std::function<void(const std::string &)> & in_cb) {\n      Info()->UpdateCallback(in_cb);\n      return *this;\n    }\n\n    /// Gray out this text area.\n    TextArea & SetDisabled(bool in_dis) { Info()->UpdateDisabled(in_dis); return *this; }\n\n    /// Set the text contained in the text area.\n    TextArea & SetText(const std::string & in_text) {\n      Info()->cur_text = in_text;\n      Info()->UpdateText(in_text);\n      return *this;\n    }\n\n    /// Does this widget have auto focus set?\n    bool HasAutofocus() const { return Info()->autofocus; }\n\n    /// Is this widget currently disabled?\n    bool IsDisabled() const { return Info()->disabled; }\n  };\n\n\n}\n}\n\n#endif\n","//  This file is part of Empirical, https://github.com/devosoft/Empirical\n//  Copyright (C) Michigan State University, 2016-2017.\n//  Released under the MIT Software license; see doc/LICENSE\n//\n//\n//  The SignalControl class manages all of the signals and actions, linking them together\n//  upon request (by name, base class, or derived class).\n//\n//\n//  Developer notes:\n//  * Right now SignalControl can only link to signals that it creates.  Ideally, external signals\n//    should also be able to be added to it.  The question is, how should this be done?\n//    - They could be copied.  But should we copy existing actions?  How do we provide keys?\n//    - They could use a smart pointer style, so only deleted with final version (slow down?)\n//    - They could reference the originally and automatically clean up if its deleted (confusing?)\n\n#ifndef EMP_SIGNAL_CONTROL\n#define EMP_SIGNAL_CONTROL\n\n#include <string>\n#include <unordered_map>\n\n#include \"ActionManager.h\"\n#include \"SignalManager.h\"\n\nnamespace emp {\n\n  class SignalControl : public internal::SignalControl_Base {\n  private:\n    ActionManager action_m;\n    SignalManager signal_m;\n    // uint32_t next_signal_id;                                  // Give each signal a unique id.\n    std::unordered_map<uint32_t, SignalBase *> id_to_signal;     // Map signal ID to associated pointer\n\n  public:\n    SignalControl() : action_m(), signal_m(), id_to_signal() {;} // : next_signal_id(1) { ; }\n    ~SignalControl() { ; }\n\n    size_t GetNumActions() const { return action_m.GetSize(); }\n    size_t GetNumSignals() const { return signal_m.GetSize(); }\n\n    const ActionBase & GetAction(const std::string & name) const { return action_m[name]; }\n    const SignalBase & GetSignal(const std::string & name) const { return signal_m[name]; }\n\n    ActionManager & GetActionManager() { return action_m; }\n    SignalManager & GetSignalManager() override { return signal_m; }\n\n    template <typename... Ts>\n    auto & AddAction(Ts &&... act) { return action_m.Add( std::forward<Ts>(act)... ); }\n\n    template <typename... ARGS>\n    auto & AddSignal(const std::string & name=\"\") {\n      return signal_m.Add<ARGS...>(name);\n    }\n\n    template <typename... ARGS>\n    auto & AddSignal(Signal<void(ARGS...)> & signal) {\n      return signal_m.Add<ARGS...>(signal);\n    }\n\n    // Link a specified signal to a specified function.\n    template <typename... ARGS>\n    auto Link(SignalBase & s, const std::function<void(ARGS...)> & f) { return s.AddAction(f); }\n\n    // If a name is passed in for the signal, convert it to a SignalBase.\n    // Pass through anything for actions and return a unique key for the pairing.\n    template <typename A>\n    auto Link(const std::string & s, A && a) { return Link(signal_m[s], std::forward<A>(a)); }\n\n    // If a name is passed in for the action, convert it to an ActionBase.\n    // (signal names were handled in the previous overload of this function)\n    auto Link(SignalBase & s, const std::string & a) { return s.AddAction(action_m[a]); }\n\n    // If we have base classes for both signals and actions.  Convert to derrived versions!\n    auto Link(SignalBase & s, ActionBase & a) { return s.AddAction(a); }\n\n\n    template <typename... ARGS>\n    void Trigger(const std::string & name, ARGS &&... args) {\n      auto & base_signal = signal_m[name];\n      auto * signal = dynamic_cast< Signal<void(ARGS...)>* >(&base_signal);\n      emp_assert( signal != nullptr && \"invalid signal conversion!\" );\n      signal->Trigger(std::forward<ARGS>(args)...);\n    }\n\n\n    void NotifyConstruct(SignalBase * sig_ptr) override { signal_m.NotifyConstruct(sig_ptr); }\n\n\n    void PrintNames(std::ostream & os=std::cout) {\n      action_m.PrintNames(os);\n      signal_m.PrintNames(os);\n    }\n  };\n\n}\n\n#endif\n","/**\n*   @note The original version of this class was written by Emily Dolson and can be found here: https://github.com/emilydolson/map-elites-gp/blob/master/source/TestcaseSet.h\n*/\n\n#ifndef TEST_CASE_SET_H\n#define TEST_CASE_SET_H\n\n#include <iostream>\n#include <fstream>\n#include <set>\n#include <algorithm>\n\n#include \"base/array.h\"\n#include \"base/vector.h\"\n#include \"tools/string_utils.h\"\n#include \"tools/Random.h\"\n#include \"tools/random_utils.h\"\n\ntemplate <typename INPUT_TYPE, typename OUTPUT_TYPE>\nclass TestcaseSet {\nprotected:\n    using input_t = emp::vector<INPUT_TYPE>;\n    using output_t = OUTPUT_TYPE;\n    using test_case_t = std::pair<input_t, output_t>;\n    emp::vector<test_case_t> test_cases;\n\npublic:\n    TestcaseSet(std::string filename) {\n        LoadTestcases(filename);\n    }\n\n    TestcaseSet() {}\n\n    input_t & GetInput(size_t id) { \n        emp_assert(id < test_cases.size());\n        return test_cases[id].first; \n    }\n\n    output_t & GetOutput(size_t id) {\n        emp_assert(id < test_cases.size());\n        return test_cases[id].second;\n    }\n\n    emp::vector<std::pair<input_t, output_t> > & GetTestcases() {\n        return test_cases;\n    }\n\n    emp::vector<size_t> GetSubset(int trials, emp::Random * random) {\n        return emp::Choose(*random, test_cases.size(), trials);\n    }\n\n    std::pair<input_t, output_t> operator[](size_t i) {\n        return test_cases[i];\n    }\n\n    void LoadTestcases(std::string filename, bool contains_output = true) {\n        std::ifstream infile(filename);\n        std::string line;\n\n        if (!infile.is_open()){\n            std::cout << \"ERROR: \" << filename << \" did not open correctly\" << std::endl;\n            return;\n        }\n\n        // Ignore header\n        getline(infile, line);\n\n        while ( getline (infile,line)) {\n            emp::vector<std::string> split_line = emp::slice(line, ',');\n            input_t test_case;\n            for (size_t i = 0; i < (split_line.size() - (size_t)contains_output); i++) {\n                test_case.push_back(std::atoi(split_line[i].c_str()));\n            }\n            output_t answer;\n            if (contains_output) {\n                answer = std::atoi(split_line[split_line.size()-1].c_str());\n            }\n            test_cases.push_back(std::make_pair(test_case, answer));\n            // std::cout << emp::to_string(test_case) << \" \" << answer << std::endl;\n        }\n        infile.close();\n    }\n\n};\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2017\n *\n *  @file  Action.h\n *  @brief ActionManager collects sets of Actions to be looked up or manipulated later.\n *  @note Status: Beta\n */\n\n#ifndef EMP_CONTROL_ACTION_MANAGER\n#define EMP_CONTROL_ACTION_MANAGER\n\n#include <string>\n#include <unordered_map>\n\n#include \"../tools/string_utils.h\"\n\n#include \"Action.h\"\n\nnamespace emp {\n\n  class ActionManager {\n  private:\n    std::unordered_map<std::string, ActionBase *> action_map;  ///< A set of all actions handled by manager.\n    int next_id=1;                                             ///< Unique ID for next new function.\n    std::string prefix = \"emp_action_\";                        ///< Prefix for function names to keep unique.\n\n  public:\n    ActionManager() : action_map() { ; }\n    ActionManager(ActionManager &&) = default;     // Normal juggle is okay for move constructor\n    ActionManager(const ActionManager & in) : action_map(), next_id(in.next_id), prefix(in.prefix) {\n      // Copy all actions from input manager.\n      for (const auto & x : in.action_map) {\n        action_map[x.first] = x.second->Clone();\n      }\n    }\n    ~ActionManager() { for (auto & x : action_map) delete x.second; }\n\n    /// Get the ID to be used for the next new function.\n    int GetNextID() const { return next_id; }\n\n    /// How many actions are in this manager?\n    size_t GetSize() const { return action_map.size(); }\n\n    /// Look up an action with the specified name\n    ActionBase & operator[](const std::string & name) {\n      emp_assert(action_map.find(name) != action_map.end());\n      return *(action_map[name]);\n    }\n\n    /// Look up an action with the specified name (const version)\n    const ActionBase & operator[](const std::string & name) const {\n      auto it = action_map.find(name);\n      emp_assert(it != action_map.end());\n      return *(it->second);\n    }\n\n    /// Add a functon to this manager with a pre-specified name.\n    template <typename RETURN, typename... ARGS>\n    auto & Add(const std::function<RETURN(ARGS...)> & in_fun, const std::string & name) {\n      // Create the new action, save it, and return it.\n      auto * new_action = new Action<RETURN(ARGS...)>(in_fun, name);\n      action_map[name] = new_action;\n      return *new_action;\n    }\n\n    /// Add a function to this manager with an auto-generated name.\n    template <typename RETURN, typename... ARGS>\n    auto & Add(const std::function<RETURN(ARGS...)> & in_fun) {\n      std::string name(prefix);\n      name += emp::to_string(next_id++);\n      return Add(in_fun, name);\n    }\n\n    /// Add an action to this manager.\n    auto & Add(const ActionBase & action) {\n      auto * new_action = action.Clone();\n      action_map[action.GetName()] = new_action;\n      return *new_action;\n    }\n\n    /// Print out the name of all actions maintained by this manager.\n    void PrintNames(std::ostream & os=std::cout) {\n      os << action_map.size() << \" actions found:\\n\";\n      for (auto & x : action_map) os << \"  \" << x.first << std::endl;\n    }\n  };\n\n}\n\n#endif\n","//  This file is part of Empirical, https://github.com/devosoft/Empirical\n//  Copyright (C) Michigan State University, 2016-2017.\n//  Released under the MIT Software license; see doc/LICENSE\n//\n//\n//  This file defines the SignalManager class, which collects sets of Signals to be looked up\n//  or manipulated later.\n\n#ifndef EMP_CONTROL_SIGNAL_MANAGER\n#define EMP_CONTROL_SIGNAL_MANAGER\n\n#include <string>\n#include <unordered_map>\n\n#include \"../tools/string_utils.h\"\n\n#include \"Signal.h\"\n\nnamespace emp {\n\n  class SignalManager : public internal::SignalManager_Base {\n  private:\n    std::unordered_map<std::string, SignalBase *> signal_map;\n    uint32_t next_id=1;\n    std::string prefix = \"emp_signal_\";\n\n    // Generate a unique signal name to prevent duplicates.\n    inline std::string GenerateSignalName(const std::string & pre=\"\") {\n      if (pre==\"\") return emp::to_string(prefix, next_id++);  // Use default version.\n      return emp::to_string(pre, next_id++);\n    }\n  public:\n    SignalManager() : signal_map() { ; }\n    SignalManager(SignalManager &&) = default;     // Normal juggle is okay for move constructor\n    SignalManager(const SignalManager & in) : signal_map(), next_id(in.next_id), prefix(in.prefix) {\n      // Copy all signals from input manager.\n      for (const auto & x : in.signal_map) {\n        signal_map[x.first] = x.second->Clone();\n      }\n    }\n    ~SignalManager() { for (auto & x : signal_map) delete x.second; }\n\n    uint32_t GetNextID() const { return next_id; }\n    size_t GetSize() const { return signal_map.size(); }\n\n    SignalBase & operator[](const std::string & name) {\n      emp_assert(signal_map.find(name) != signal_map.end());\n      return *(signal_map[name]);\n    }\n    const SignalBase & operator[](const std::string & name) const {\n      auto it = signal_map.find(name);\n      emp_assert(it != signal_map.end());\n      return *(it->second);\n    }\n\n//    template <typename... ARGS>\n    template <typename FUN_T>\n    auto & Add(const std::string & name) {\n      auto * new_signal = new Signal<FUN_T>(name);\n      signal_map[name] = new_signal;\n      new_signal->signal_id = next_id++;\n      new_signal->managers.push_back(this);\n      new_signal->prime_manager = this;\n      return *new_signal;\n    }\n\n    template <typename FUN_T>\n    auto & Add(Signal<FUN_T> & signal) {\n      signal_map[signal.name] = &signal;\n      signal.signal_id = next_id++;       // @CAO: Who should control the signal id?\n      signal.managers.push_back(this);\n      return signal;\n    }\n\n    void NotifyConstruct(SignalBase * signal) override {\n      // This signal is currently being constructed and should be added to this manager.\n      signal_map[signal->name] = signal;\n      signal->signal_id = next_id++;      // @CAO: Who should control the signal id?\n      signal->managers.push_back(this);\n    }\n\n    void NotifyDestruct(SignalBase * signal) override {\n      // This signal is no longer valid and needs to be removed from this manager.\n      signal_map.erase(signal->name);\n    }\n\n    void PrintNames(std::ostream & os=std::cout) {\n      os << signal_map.size() << \" signals found:\\n\";\n      for (auto & x : signal_map) os << \"  \" << x.first << std::endl;\n    }\n  };\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2017-2018\n *\n *  @file  DataManager.h\n *  @brief DataManager handles a set of DataNode objects with the same tracking settings.\n */\n\n#ifndef EMP_DATA_MANAGER_H\n#define EMP_DATA_MANAGER_H\n\n#include <map>\n#include <string>\n\n#include \"../base/assert.h\"\n#include \"../tools/map_utils.h\"\n\n#include \"DataNode.h\"\n\nnamespace emp {\n\n  /// DataManagers handle sets of DataNode objects that all have the same tracking settings.\n  template <typename VAL_TYPE, emp::data... MODS>\n  class DataManager {\n  private:\n    using data_t = VAL_TYPE;\n    using node_t = DataNode<data_t, MODS...>;\n\n    std::map<std::string, node_t *> node_map;\n\n  public:\n    DataManager() : node_map() { ; }\n    ~DataManager() {\n      for (auto & x : node_map) delete x.second;\n    }\n\n    /// Returns the number of DataNodes in this DataManager\n    size_t GetSize() const { return node_map.size(); }\n    /// Returns the std::map mapping node names (strings) to DataNodes\n    auto & GetNodes() const { return node_map; }\n\n    bool HasNode(const std::string & name) {\n      return Has(node_map, name);\n    }\n\n    /// Creates and adds a new DataNode, with the name specified in @param name.\n    node_t & New(const std::string & name) {\n      emp_assert(!Has(node_map, name), name);\n      node_map[name] = new node_t;\n      return *(node_map[name]);\n    }\n\n    /// Deletes the DataNode with the name @param name.\n    /// Throws an error if there is no node with that name in this manager.\n    void Delete(const std::string & name) {\n      emp_assert(Has(node_map, name), name);\n      node_map.erase(name);\n    }\n\n    /// Returns a const reference to the node named @param name.\n    /// Throws an error if there is no node with that name in this manager\n    const node_t & Get(const std::string & name) const {\n      emp_assert(Has(node_map, name), name);\n      return *(node_map[name]);\n    }\n\n    /// Returns a reference to the node named @param name.\n    /// Throws an error if there is no node with that name in this manager\n    node_t & Get(const std::string & name) {\n      emp_assert(Has(node_map, name), name);\n      return *(node_map[name]);\n    }\n\n    // == Operations that forward to DataNode objects ==\n\n    /** Adds data to a node in the DataManager.\n     *  @param name is the node to add the data to.\n     *  All subsequent arguments are the data to add to that node,\n     *  and should be of whatever type all of the nodes in this maanger expect.\n     *\n     * Example:\n     *\n     * DataManager<int, data::Current, data::Range> my_data_manager;\n     * my_data_manager.Add(\"my_node_name\");\n     * my_data_manager.AddData(\"my_node_name\", 1, 2, 3, 4, 5);  */\n    template <typename... Ts>\n    void AddData(const std::string & name, Ts... extra) {\n      emp_assert(Has(node_map, name), name);\n      node_map[name]->Add(extra...);\n    }\n\n    /** Resets all nodes in this manager. For nodes without the data::Archive\n     *  attribute, this clears all of their data except current. For nodes with\n     *  the data::Archive attribute, this creates a new vector to start storing\n     *  data, retaining the old one in the archive. */\n    void ResetAll() {\n      for (auto & x : node_map) x.second->Reset();\n    }\n  };\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2016-2017\n *\n *  @file  Action.h\n *  @brief A mechanism to abstract functions from their underlying type and provide run-time names.\n *  @note Status: Beta\n *\n *  @todo Create an ActionDefaults class that can take fewer args than expected and fill in rest.\n *  @todo Allow for named arguments to facilite intepreted functions.\n */\n\n#ifndef EMP_CONTROL_ACTION\n#define EMP_CONTROL_ACTION\n\n#include <functional>\n#include <string>\n\nnamespace emp {\n\n  /// BaseActions abstract functions and allow for signals to be setup at runtime; they can be\n  /// called with types specified in the call.\n  ///\n  /// Actions can be a bit heavyweight, but can easily be converted to more lightweight\n  /// std:function objects.\n\n  class ActionBase {\n  protected:\n    std::string name;  ///< A unique name for this action so it can be called at runtime.\n\n    ActionBase(const std::string & in_name) : name(in_name) { ; }\n\n    // Protected: ActionBase should not be copied directly, only through derived class.\n    ActionBase(const ActionBase &) = default;\n    ActionBase(ActionBase &&) = default;\n    ActionBase & operator=(const ActionBase &) = default;\n    ActionBase & operator=(ActionBase &&) = default;\n  public:\n    virtual ~ActionBase() { ; }\n\n    /// Get the name of this action.\n    const std::string & GetName() const { return name; }\n\n    /// Get number of arguments this action takes.\n    virtual size_t GetArgCount() const = 0;\n\n    /// Clone() will produce a pointer to a full copy of an Action, going through derived version.\n    virtual ActionBase * Clone() const = 0;\n  };\n\n  /// ActionSize is a second layer of abstract actions that know the number of arguments used at compile\n  /// time to facilitate easy type-checking.\n  template <size_t ARG_COUNT>\n  class ActionSize : public ActionBase {\n  protected:\n    ActionSize(const std::string & in_name) : ActionBase(in_name) { ; }\n  public:\n    size_t GetArgCount() const { return ARG_COUNT; }\n  };\n\n  /// The declaration for Action has any template types; the only definined specilizations require\n  /// a function type to be specified (with void and non-void return type variants.)\n  template <typename... ARGS> class Action;\n\n  /// This Action class specialization takes a function with a void return tyime and builds it off\n  /// of the action base classes.\n  template <typename... ARGS>\n  class Action<void(ARGS...)> : public ActionSize<sizeof...(ARGS)> {\n  protected:\n    std::function<void(ARGS...)> fun;  ///< The specific function associated with this action.\n  public:\n    using this_t = Action<void(ARGS...)>;\n    using parent_t = ActionSize<sizeof...(ARGS)>;\n\n    Action(const std::function<void(ARGS...)> & in_fun, const std::string & in_name=\"\")\n      : parent_t(in_name), fun(in_fun) { ; }\n    template <typename RETURN>\n    Action(const std::function<RETURN(ARGS...)> & in_fun, const std::string & in_name=\"\")\n      : parent_t(in_name)\n      , fun([in_fun](ARGS &&... args){in_fun(std::forward<ARGS>(args)...);}) { ; }\n    Action(const this_t &) = default;\n    Action(this_t &&) = default;\n\n    this_t & operator=(const this_t &) = default;\n    this_t & operator=(this_t &&) = default;\n\n    const std::function<void(ARGS...)> & GetFun() const { return fun; };\n\n    /// Call the function associated with this action.\n    void Call(ARGS &&... args) { return fun(std::forward<ARGS>(args)...); }\n\n    /// Build a copy of this Action.\n    this_t * Clone() const { return new this_t(*this); }\n  };\n\n\n  /// This Action class specialization takes a function with any non-void return tyime and builds it\n  /// off of the action base classes.\n  template <typename RETURN, typename... ARGS>\n  class Action<RETURN(ARGS...)> : public ActionSize<sizeof...(ARGS)> {\n  protected:\n    std::function<RETURN(ARGS...)> fun;  ///< The specific function associated with this action.\n  public:\n    using fun_t = RETURN(ARGS...);\n    using this_t = Action<fun_t>;\n    using parent_t = ActionSize<sizeof...(ARGS)>;\n\n    Action(const std::function<RETURN(ARGS...)> & in_fun, const std::string & in_name=\"\")\n      : parent_t(in_name), fun(in_fun) { ; }\n    Action(const this_t &) = default;\n    Action(this_t &&) = default;\n\n    this_t & operator=(const this_t &) = default;\n    this_t & operator=(this_t &&) = default;\n\n    const std::function<fun_t> & GetFun() const { return fun; };\n\n    /// Call the function associated with this action.\n    RETURN Call(ARGS &&... args) { return fun(std::forward<ARGS>(args)...); }\n\n    /// Build a copy of this Action.\n    this_t * Clone() const { return new this_t(*this); }\n  };\n\n  /// Build an action object using this function.\n  template <typename RETURN, typename... ARGS>\n  auto make_action(const std::function<RETURN(ARGS...)> & in_fun, const std::string & name=\"\") {\n    return Action<RETURN(ARGS...)>(in_fun, name);\n  }\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  Alert.h\n *  @brief Define an Alert function that goes to std::cerr in c++ or to Alert() in Javascript.\n *  @note Status: RELEASE\n */\n\n#ifndef EMP_ALERT_H\n#define EMP_ALERT_H\n\n#include \"string_utils.h\"\n\n// If we are in emscripten, make sure to include the header.\n#ifdef EMSCRIPTEN\n#include <emscripten.h>\n#endif\n\n\nnamespace emp {\n#ifdef EMSCRIPTEN\n  void Alert(const std::string & msg) { EM_ASM_ARGS({ msg = Pointer_stringify($0); alert(msg); }, msg.c_str()); }\n#else\n  /// Send msg to cerr if in C++, or show msg in an alert box if compiled to Javascript\n  /// Input can be any number of arguments of any types as long as the can be converted to\n  /// strings with emp::to_string().\n  void Alert(const std::string & msg) { std::cerr << msg << std::endl; }\n#endif\n  /// @cond TEMPLATES\n  template <typename... TYPE_SET>\n  void Alert(TYPE_SET... inputs) { Alert(emp::to_string(inputs...)); }\n  /// @endcond\n\n  /// A version of Alert that will cap how many times it can go off\n  template <typename... TYPE_SET>\n  static void CappedAlert(size_t cap, TYPE_SET... inputs) {\n    static size_t cur_count = 0;\n    if (cur_count++ < cap) Alert(emp::to_string(inputs...));\n  }\n\n  /// An object that will automatically output a message during construction or destruction,\n  /// usually for use in debugging to disentangle timings.\n  struct AlertObj {\n    std::string msg;    ///< Message for the alert to print.\n    bool on_construct;  ///< Should the message print automatically during construction?\n    bool on_destruct;   ///< Should the message print automatically during destruction?\n\n    AlertObj(const std::string & _msg, bool _on_c=true, bool _on_d=false)\n    : msg(_msg), on_construct(_on_c), on_destruct(_on_d) { if (on_construct) emp::Alert(msg); }\n    ~AlertObj() { if (on_destruct) emp::Alert(msg); }\n\n    void Trigger() { emp::Alert(msg); }\n    void SetMessage(const std::string & _msg) { msg = _msg; }\n  };\n}\n\n\n#endif\n","// -*- C++ -*-\n//===------------------------- fstream ------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_FSTREAM\n#define _LIBCPP_FSTREAM\n\n/*\n    fstream synopsis\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass basic_filebuf\n    : public basic_streambuf<charT, traits>\n{\npublic:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    // 27.9.1.2 Constructors/destructor:\n    basic_filebuf();\n    basic_filebuf(basic_filebuf&& rhs);\n    virtual ~basic_filebuf();\n\n    // 27.9.1.3 Assign/swap:\n    basic_filebuf& operator=(basic_filebuf&& rhs);\n    void swap(basic_filebuf& rhs);\n\n    // 27.9.1.4 Members:\n    bool is_open() const;\n    basic_filebuf* open(const char* s, ios_base::openmode mode);\n    basic_filebuf* open(const string& s, ios_base::openmode mode);\n    basic_filebuf* close();\n\nprotected:\n    // 27.9.1.5 Overridden virtual functions:\n    virtual streamsize showmanyc();\n    virtual int_type underflow();\n    virtual int_type uflow();\n    virtual int_type pbackfail(int_type c = traits_type::eof());\n    virtual int_type overflow (int_type c = traits_type::eof());\n    virtual basic_streambuf<char_type, traits_type>* setbuf(char_type* s, streamsize n);\n    virtual pos_type seekoff(off_type off, ios_base::seekdir way,\n                             ios_base::openmode which = ios_base::in | ios_base::out);\n    virtual pos_type seekpos(pos_type sp,\n                             ios_base::openmode which = ios_base::in | ios_base::out);\n    virtual int sync();\n    virtual void imbue(const locale& loc);\n};\n\ntemplate <class charT, class traits>\n  void\n  swap(basic_filebuf<charT, traits>& x, basic_filebuf<charT, traits>& y);\n\ntypedef basic_filebuf<char>    filebuf;\ntypedef basic_filebuf<wchar_t> wfilebuf;\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass basic_ifstream\n    : public basic_istream<charT,traits>\n{\npublic:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    basic_ifstream();\n    explicit basic_ifstream(const char* s, ios_base::openmode mode = ios_base::in);\n    explicit basic_ifstream(const string& s, ios_base::openmode mode = ios_base::in);\n    basic_ifstream(basic_ifstream&& rhs);\n\n    basic_ifstream& operator=(basic_ifstream&& rhs);\n    void swap(basic_ifstream& rhs);\n\n    basic_filebuf<char_type, traits_type>* rdbuf() const;\n    bool is_open() const;\n    void open(const char* s, ios_base::openmode mode = ios_base::in);\n    void open(const string& s, ios_base::openmode mode = ios_base::in);\n    void close();\n};\n\ntemplate <class charT, class traits>\n  void\n  swap(basic_ifstream<charT, traits>& x, basic_ifstream<charT, traits>& y);\n\ntypedef basic_ifstream<char>    ifstream;\ntypedef basic_ifstream<wchar_t> wifstream;\n\ntemplate <class charT, class traits = char_traits<charT> >\nclass basic_ofstream\n    : public basic_ostream<charT,traits>\n{\npublic:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    basic_ofstream();\n    explicit basic_ofstream(const char* s, ios_base::openmode mode = ios_base::out);\n    explicit basic_ofstream(const string& s, ios_base::openmode mode = ios_base::out);\n    basic_ofstream(basic_ofstream&& rhs);\n\n    basic_ofstream& operator=(basic_ofstream&& rhs);\n    void swap(basic_ofstream& rhs);\n\n    basic_filebuf<char_type, traits_type>* rdbuf() const;\n    bool is_open() const;\n    void open(const char* s, ios_base::openmode mode = ios_base::out);\n    void open(const string& s, ios_base::openmode mode = ios_base::out);\n    void close();\n};\n\ntemplate <class charT, class traits>\n  void\n  swap(basic_ofstream<charT, traits>& x, basic_ofstream<charT, traits>& y);\n\ntypedef basic_ofstream<char>    ofstream;\ntypedef basic_ofstream<wchar_t> wofstream;\n\ntemplate <class charT, class traits=char_traits<charT> >\nclass basic_fstream\n    : public basic_iostream<charT,traits>\n{\npublic:\n    typedef charT                          char_type;\n    typedef traits                         traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    basic_fstream();\n    explicit basic_fstream(const char* s, ios_base::openmode mode = ios_base::in|ios_base::out);\n    explicit basic_fstream(const string& s, ios_base::openmode mode = ios_base::in|ios_base::out);\n    basic_fstream(basic_fstream&& rhs);\n\n    basic_fstream& operator=(basic_fstream&& rhs);\n    void swap(basic_fstream& rhs);\n\n    basic_filebuf<char_type, traits_type>* rdbuf() const;\n    bool is_open() const;\n    void open(const char* s, ios_base::openmode mode = ios_base::in|ios_base::out);\n    void open(const string& s, ios_base::openmode mode = ios_base::in|ios_base::out);\n    void close();\n};\n\ntemplate <class charT, class traits>\n  void swap(basic_fstream<charT, traits>& x, basic_fstream<charT, traits>& y);\n\ntypedef basic_fstream<char>    fstream;\ntypedef basic_fstream<wchar_t> wfstream;\n\n}  // std\n\n*/\n\n#include <__config>\n#include <ostream>\n#include <istream>\n#include <__locale>\n#include <cstdio>\n\n#include <__undef_min_max>\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_filebuf\n    : public basic_streambuf<_CharT, _Traits>\n{\npublic:\n    typedef _CharT                           char_type;\n    typedef _Traits                          traits_type;\n    typedef typename traits_type::int_type   int_type;\n    typedef typename traits_type::pos_type   pos_type;\n    typedef typename traits_type::off_type   off_type;\n    typedef typename traits_type::state_type state_type;\n\n    // 27.9.1.2 Constructors/destructor:\n    basic_filebuf();\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    basic_filebuf(basic_filebuf&& __rhs);\n#endif\n    virtual ~basic_filebuf();\n\n    // 27.9.1.3 Assign/swap:\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_filebuf& operator=(basic_filebuf&& __rhs);\n#endif\n    void swap(basic_filebuf& __rhs);\n\n    // 27.9.1.4 Members:\n    _LIBCPP_INLINE_VISIBILITY\n    bool is_open() const;\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\n    basic_filebuf* open(const char* __s, ios_base::openmode __mode);\n    _LIBCPP_INLINE_VISIBILITY\n    basic_filebuf* open(const string& __s, ios_base::openmode __mode);\n#endif\n    basic_filebuf* close();\n\nprotected:\n    // 27.9.1.5 Overridden virtual functions:\n    virtual int_type underflow();\n    virtual int_type pbackfail(int_type __c = traits_type::eof());\n    virtual int_type overflow (int_type __c = traits_type::eof());\n    virtual basic_streambuf<char_type, traits_type>* setbuf(char_type* __s, streamsize __n);\n    virtual pos_type seekoff(off_type __off, ios_base::seekdir __way,\n                             ios_base::openmode __wch = ios_base::in | ios_base::out);\n    virtual pos_type seekpos(pos_type __sp,\n                             ios_base::openmode __wch = ios_base::in | ios_base::out);\n    virtual int sync();\n    virtual void imbue(const locale& __loc);\n\nprivate:\n    char*       __extbuf_;\n    const char* __extbufnext_;\n    const char* __extbufend_;\n    char __extbuf_min_[8];\n    size_t __ebs_;\n    char_type* __intbuf_;\n    size_t __ibs_;\n    FILE* __file_;\n    const codecvt<char_type, char, state_type>* __cv_;\n    state_type __st_;\n    state_type __st_last_;\n    ios_base::openmode __om_;\n    ios_base::openmode __cm_;\n    bool __owns_eb_;\n    bool __owns_ib_;\n    bool __always_noconv_;\n\n    bool __read_mode();\n    void __write_mode();\n};\n\ntemplate <class _CharT, class _Traits>\nbasic_filebuf<_CharT, _Traits>::basic_filebuf()\n    : __extbuf_(0),\n      __extbufnext_(0),\n      __extbufend_(0),\n      __ebs_(0),\n      __intbuf_(0),\n      __ibs_(0),\n      __file_(0),\n      __cv_(nullptr),\n      __st_(),\n      __st_last_(),\n      __om_(0),\n      __cm_(0),\n      __owns_eb_(false),\n      __owns_ib_(false),\n      __always_noconv_(false)\n{\n    if (has_facet<codecvt<char_type, char, state_type> >(this->getloc()))\n    {\n        __cv_ = &use_facet<codecvt<char_type, char, state_type> >(this->getloc());\n        __always_noconv_ = __cv_->always_noconv();\n    }\n    setbuf(0, 4096);\n}\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nbasic_filebuf<_CharT, _Traits>::basic_filebuf(basic_filebuf&& __rhs)\n    : basic_streambuf<_CharT, _Traits>(__rhs)\n{\n    if (__rhs.__extbuf_ == __rhs.__extbuf_min_)\n    {\n        __extbuf_ = __extbuf_min_;\n        __extbufnext_ = __extbuf_ + (__rhs.__extbufnext_ - __rhs.__extbuf_);\n        __extbufend_ = __extbuf_ + (__rhs.__extbufend_ - __rhs.__extbuf_);\n    }\n    else\n    {\n        __extbuf_ = __rhs.__extbuf_;\n        __extbufnext_ = __rhs.__extbufnext_;\n        __extbufend_ = __rhs.__extbufend_;\n    }\n    __ebs_ = __rhs.__ebs_;\n    __intbuf_ = __rhs.__intbuf_;\n    __ibs_ = __rhs.__ibs_;\n    __file_ = __rhs.__file_;\n    __cv_ = __rhs.__cv_;\n    __st_ = __rhs.__st_;\n    __st_last_ = __rhs.__st_last_;\n    __om_ = __rhs.__om_;\n    __cm_ = __rhs.__cm_;\n    __owns_eb_ = __rhs.__owns_eb_;\n    __owns_ib_ = __rhs.__owns_ib_;\n    __always_noconv_ = __rhs.__always_noconv_;\n    if (__rhs.pbase())\n    {\n        if (__rhs.pbase() == __rhs.__intbuf_)\n            this->setp(__intbuf_, __intbuf_ + (__rhs. epptr() - __rhs.pbase()));\n        else\n            this->setp((char_type*)__extbuf_,\n                       (char_type*)__extbuf_ + (__rhs. epptr() - __rhs.pbase()));\n        this->pbump(__rhs. pptr() - __rhs.pbase());\n    }\n    else if (__rhs.eback())\n    {\n        if (__rhs.eback() == __rhs.__intbuf_)\n            this->setg(__intbuf_, __intbuf_ + (__rhs.gptr() - __rhs.eback()),\n                                  __intbuf_ + (__rhs.egptr() - __rhs.eback()));\n        else\n            this->setg((char_type*)__extbuf_,\n                       (char_type*)__extbuf_ + (__rhs.gptr() - __rhs.eback()),\n                       (char_type*)__extbuf_ + (__rhs.egptr() - __rhs.eback()));\n    }\n    __rhs.__extbuf_ = 0;\n    __rhs.__extbufnext_ = 0;\n    __rhs.__extbufend_ = 0;\n    __rhs.__ebs_ = 0;\n    __rhs.__intbuf_ = 0;\n    __rhs.__ibs_ = 0;\n    __rhs.__file_ = 0;\n    __rhs.__st_ = state_type();\n    __rhs.__st_last_ = state_type();\n    __rhs.__om_ = 0;\n    __rhs.__cm_ = 0;\n    __rhs.__owns_eb_ = false;\n    __rhs.__owns_ib_ = false;\n    __rhs.setg(0, 0, 0);\n    __rhs.setp(0, 0);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_filebuf<_CharT, _Traits>&\nbasic_filebuf<_CharT, _Traits>::operator=(basic_filebuf&& __rhs)\n{\n    close();\n    swap(__rhs);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\nbasic_filebuf<_CharT, _Traits>::~basic_filebuf()\n{\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    try\n    {\n#endif  // _LIBCPP_NO_EXCEPTIONS\n        close();\n#ifndef _LIBCPP_NO_EXCEPTIONS\n    }\n    catch (...)\n    {\n    }\n#endif  // _LIBCPP_NO_EXCEPTIONS\n    if (__owns_eb_)\n        delete [] __extbuf_;\n    if (__owns_ib_)\n        delete [] __intbuf_;\n}\n\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_filebuf<_CharT, _Traits>::swap(basic_filebuf& __rhs)\n{\n    basic_streambuf<char_type, traits_type>::swap(__rhs);\n    if (__extbuf_ != __extbuf_min_ && __rhs.__extbuf_ != __rhs.__extbuf_min_)\n    {\n        _VSTD::swap(__extbuf_, __rhs.__extbuf_);\n        _VSTD::swap(__extbufnext_, __rhs.__extbufnext_);\n        _VSTD::swap(__extbufend_, __rhs.__extbufend_);\n    }\n    else\n    {\n        ptrdiff_t __ln = __extbufnext_ - __extbuf_;\n        ptrdiff_t __le = __extbufend_ - __extbuf_;\n        ptrdiff_t __rn = __rhs.__extbufnext_ - __rhs.__extbuf_;\n        ptrdiff_t __re = __rhs.__extbufend_ - __rhs.__extbuf_;\n        if (__extbuf_ == __extbuf_min_ && __rhs.__extbuf_ != __rhs.__extbuf_min_)\n        {\n            __extbuf_ = __rhs.__extbuf_;\n            __rhs.__extbuf_ = __rhs.__extbuf_min_;\n        }\n        else if (__extbuf_ != __extbuf_min_ && __rhs.__extbuf_ == __rhs.__extbuf_min_)\n        {\n            __rhs.__extbuf_ = __extbuf_;\n            __extbuf_ = __extbuf_min_;\n        }\n        __extbufnext_ = __extbuf_ + __rn;\n        __extbufend_ = __extbuf_ + __re;\n        __rhs.__extbufnext_ = __rhs.__extbuf_ + __ln;\n        __rhs.__extbufend_ = __rhs.__extbuf_ + __le;\n    }\n    _VSTD::swap(__ebs_, __rhs.__ebs_);\n    _VSTD::swap(__intbuf_, __rhs.__intbuf_);\n    _VSTD::swap(__ibs_, __rhs.__ibs_);\n    _VSTD::swap(__file_, __rhs.__file_);\n    _VSTD::swap(__cv_, __rhs.__cv_);\n    _VSTD::swap(__st_, __rhs.__st_);\n    _VSTD::swap(__st_last_, __rhs.__st_last_);\n    _VSTD::swap(__om_, __rhs.__om_);\n    _VSTD::swap(__cm_, __rhs.__cm_);\n    _VSTD::swap(__owns_eb_, __rhs.__owns_eb_);\n    _VSTD::swap(__owns_ib_, __rhs.__owns_ib_);\n    _VSTD::swap(__always_noconv_, __rhs.__always_noconv_);\n    if (this->eback() == (char_type*)__rhs.__extbuf_min_)\n    {\n        ptrdiff_t __n = this->gptr() - this->eback();\n        ptrdiff_t __e = this->egptr() - this->eback();\n        this->setg((char_type*)__extbuf_min_,\n                   (char_type*)__extbuf_min_ + __n,\n                   (char_type*)__extbuf_min_ + __e);\n    }\n    else if (this->pbase() == (char_type*)__rhs.__extbuf_min_)\n    {\n        ptrdiff_t __n = this->pptr() - this->pbase();\n        ptrdiff_t __e = this->epptr() - this->pbase();\n        this->setp((char_type*)__extbuf_min_,\n                   (char_type*)__extbuf_min_ + __e);\n        this->pbump(__n);\n    }\n    if (__rhs.eback() == (char_type*)__extbuf_min_)\n    {\n        ptrdiff_t __n = __rhs.gptr() - __rhs.eback();\n        ptrdiff_t __e = __rhs.egptr() - __rhs.eback();\n        __rhs.setg((char_type*)__rhs.__extbuf_min_,\n                   (char_type*)__rhs.__extbuf_min_ + __n,\n                   (char_type*)__rhs.__extbuf_min_ + __e);\n    }\n    else if (__rhs.pbase() == (char_type*)__extbuf_min_)\n    {\n        ptrdiff_t __n = __rhs.pptr() - __rhs.pbase();\n        ptrdiff_t __e = __rhs.epptr() - __rhs.pbase();\n        __rhs.setp((char_type*)__rhs.__extbuf_min_,\n                   (char_type*)__rhs.__extbuf_min_ + __e);\n        __rhs.pbump(__n);\n    }\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_filebuf<_CharT, _Traits>& __x, basic_filebuf<_CharT, _Traits>& __y)\n{\n    __x.swap(__y);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbool\nbasic_filebuf<_CharT, _Traits>::is_open() const\n{\n    return __file_ != 0;\n}\n\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\ntemplate <class _CharT, class _Traits>\nbasic_filebuf<_CharT, _Traits>*\nbasic_filebuf<_CharT, _Traits>::open(const char* __s, ios_base::openmode __mode)\n{\n    basic_filebuf<_CharT, _Traits>* __rt = 0;\n    if (__file_ == 0)\n    {\n        __rt = this;\n        const char* __mdstr;\n        switch (__mode & ~ios_base::ate)\n        {\n        case ios_base::out:\n        case ios_base::out | ios_base::trunc:\n            __mdstr = \"w\";\n            break;\n        case ios_base::out | ios_base::app:\n        case ios_base::app:\n            __mdstr = \"a\";\n            break;\n        case ios_base::in:\n            __mdstr = \"r\";\n            break;\n        case ios_base::in | ios_base::out:\n            __mdstr = \"r+\";\n            break;\n        case ios_base::in | ios_base::out | ios_base::trunc:\n            __mdstr = \"w+\";\n            break;\n        case ios_base::in | ios_base::out | ios_base::app:\n        case ios_base::in | ios_base::app:\n            __mdstr = \"a+\";\n            break;\n        case ios_base::out | ios_base::binary:\n        case ios_base::out | ios_base::trunc | ios_base::binary:\n            __mdstr = \"wb\";\n            break;\n        case ios_base::out | ios_base::app | ios_base::binary:\n        case ios_base::app | ios_base::binary:\n            __mdstr = \"ab\";\n            break;\n        case ios_base::in | ios_base::binary:\n            __mdstr = \"rb\";\n            break;\n        case ios_base::in | ios_base::out | ios_base::binary:\n            __mdstr = \"r+b\";\n            break;\n        case ios_base::in | ios_base::out | ios_base::trunc | ios_base::binary:\n            __mdstr = \"w+b\";\n            break;\n        case ios_base::in | ios_base::out | ios_base::app | ios_base::binary:\n        case ios_base::in | ios_base::app | ios_base::binary:\n            __mdstr = \"a+b\";\n            break;\n        default:\n            __rt = 0;\n            break;\n        }\n        if (__rt)\n        {\n            __file_ = fopen(__s, __mdstr);\n            if (__file_)\n            {\n                __om_ = __mode;\n                if (__mode & ios_base::ate)\n                {\n                    if (fseek(__file_, 0, SEEK_END))\n                    {\n                        fclose(__file_);\n                        __file_ = 0;\n                        __rt = 0;\n                    }\n                }\n            }\n            else\n                __rt = 0;\n        }\n    }\n    return __rt;\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_filebuf<_CharT, _Traits>*\nbasic_filebuf<_CharT, _Traits>::open(const string& __s, ios_base::openmode __mode)\n{\n    return open(__s.c_str(), __mode);\n}\n#endif\n\ntemplate <class _CharT, class _Traits>\nbasic_filebuf<_CharT, _Traits>*\nbasic_filebuf<_CharT, _Traits>::close()\n{\n    basic_filebuf<_CharT, _Traits>* __rt = 0;\n    if (__file_)\n    {\n        __rt = this;\n        unique_ptr<FILE, int(*)(FILE*)> __h(__file_, fclose);\n        if (sync())\n            __rt = 0;\n        if (fclose(__h.release()) == 0)\n            __file_ = 0;\n        else\n            __rt = 0;\n    }\n    return __rt;\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_filebuf<_CharT, _Traits>::int_type\nbasic_filebuf<_CharT, _Traits>::underflow()\n{\n    if (__file_ == 0)\n        return traits_type::eof();\n    bool __initial = __read_mode();\n    char_type __1buf;\n    if (this->gptr() == 0)\n        this->setg(&__1buf, &__1buf+1, &__1buf+1);\n    const size_t __unget_sz = __initial ? 0 : min<size_t>((this->egptr() - this->eback()) / 2, 4);\n    int_type __c = traits_type::eof();\n    if (this->gptr() == this->egptr())\n    {\n        memmove(this->eback(), this->egptr() - __unget_sz, __unget_sz * sizeof(char_type));\n        if (__always_noconv_)\n        {\n            size_t __nmemb = static_cast<size_t>(this->egptr() - this->eback() - __unget_sz);\n            __nmemb = fread(this->eback() + __unget_sz, 1, __nmemb, __file_);\n            if (__nmemb != 0)\n            {\n                this->setg(this->eback(),\n                           this->eback() + __unget_sz,\n                           this->eback() + __unget_sz + __nmemb);\n                __c = traits_type::to_int_type(*this->gptr());\n            }\n        }\n        else\n        {\n            _LIBCPP_ASSERT ( !(__extbufnext_ == NULL && (__extbufend_ != __extbufnext_)), \"underflow moving from NULL\" );\n            if (__extbufend_ != __extbufnext_)\n                memmove(__extbuf_, __extbufnext_, __extbufend_ - __extbufnext_);\n            __extbufnext_ = __extbuf_ + (__extbufend_ - __extbufnext_);\n            __extbufend_ = __extbuf_ + (__extbuf_ == __extbuf_min_ ? sizeof(__extbuf_min_) : __ebs_);\n            size_t __nmemb = _VSTD::min(static_cast<size_t>(__ibs_ - __unget_sz),\n                                 static_cast<size_t>(__extbufend_ - __extbufnext_));\n            codecvt_base::result __r;\n            __st_last_ = __st_;\n            size_t __nr = fread((void*)__extbufnext_, 1, __nmemb, __file_);\n            if (__nr != 0)\n            {\n                if (!__cv_)\n                    __throw_bad_cast();\n\n                __extbufend_ = __extbufnext_ + __nr;\n                char_type*  __inext;\n                __r = __cv_->in(__st_, __extbuf_, __extbufend_, __extbufnext_,\n                                       this->eback() + __unget_sz,\n                                       this->eback() + __ibs_, __inext);\n                if (__r == codecvt_base::noconv)\n                {\n                    this->setg((char_type*)__extbuf_, (char_type*)__extbuf_, (char_type*)__extbufend_);\n                    __c = traits_type::to_int_type(*this->gptr());\n                }\n                else if (__inext != this->eback() + __unget_sz)\n                {\n                    this->setg(this->eback(), this->eback() + __unget_sz, __inext);\n                    __c = traits_type::to_int_type(*this->gptr());\n                }\n            }\n        }\n    }\n    else\n        __c = traits_type::to_int_type(*this->gptr());\n    if (this->eback() == &__1buf)\n        this->setg(0, 0, 0);\n    return __c;\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_filebuf<_CharT, _Traits>::int_type\nbasic_filebuf<_CharT, _Traits>::pbackfail(int_type __c)\n{\n    if (__file_ && this->eback() < this->gptr())\n    {\n        if (traits_type::eq_int_type(__c, traits_type::eof()))\n        {\n            this->gbump(-1);\n            return traits_type::not_eof(__c);\n        }\n        if ((__om_ & ios_base::out) ||\n            traits_type::eq(traits_type::to_char_type(__c), this->gptr()[-1]))\n        {\n            this->gbump(-1);\n            *this->gptr() = traits_type::to_char_type(__c);\n            return __c;\n        }\n    }\n    return traits_type::eof();\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_filebuf<_CharT, _Traits>::int_type\nbasic_filebuf<_CharT, _Traits>::overflow(int_type __c)\n{\n    if (__file_ == 0)\n        return traits_type::eof();\n    __write_mode();\n    char_type __1buf;\n    char_type* __pb_save = this->pbase();\n    char_type* __epb_save = this->epptr();\n    if (!traits_type::eq_int_type(__c, traits_type::eof()))\n    {\n        if (this->pptr() == 0)\n            this->setp(&__1buf, &__1buf+1);\n        *this->pptr() = traits_type::to_char_type(__c);\n        this->pbump(1);\n    }\n    if (this->pptr() != this->pbase())\n    {\n        if (__always_noconv_)\n        {\n            size_t __nmemb = static_cast<size_t>(this->pptr() - this->pbase());\n            if (fwrite(this->pbase(), sizeof(char_type), __nmemb, __file_) != __nmemb)\n                return traits_type::eof();\n        }\n        else\n        {\n            char* __extbe = __extbuf_;\n            codecvt_base::result __r;\n            do\n            {\n                if (!__cv_)\n                    __throw_bad_cast();\n\n                const char_type* __e;\n                __r = __cv_->out(__st_, this->pbase(), this->pptr(), __e,\n                                        __extbuf_, __extbuf_ + __ebs_, __extbe);\n                if (__e == this->pbase())\n                    return traits_type::eof();\n                if (__r == codecvt_base::noconv)\n                {\n                    size_t __nmemb = static_cast<size_t>(this->pptr() - this->pbase());\n                    if (fwrite(this->pbase(), 1, __nmemb, __file_) != __nmemb)\n                        return traits_type::eof();\n                }\n                else if (__r == codecvt_base::ok || __r == codecvt_base::partial)\n                {\n                    size_t __nmemb = static_cast<size_t>(__extbe - __extbuf_);\n                    if (fwrite(__extbuf_, 1, __nmemb, __file_) != __nmemb)\n                        return traits_type::eof();\n                    if (__r == codecvt_base::partial)\n                    {\n                        this->setp((char_type*)__e, this->pptr());\n                        this->pbump(this->epptr() - this->pbase());\n                    }\n                }\n                else\n                    return traits_type::eof();\n            } while (__r == codecvt_base::partial);\n        }\n        this->setp(__pb_save, __epb_save);\n    }\n    return traits_type::not_eof(__c);\n}\n\ntemplate <class _CharT, class _Traits>\nbasic_streambuf<_CharT, _Traits>*\nbasic_filebuf<_CharT, _Traits>::setbuf(char_type* __s, streamsize __n)\n{\n    this->setg(0, 0, 0);\n    this->setp(0, 0);\n    if (__owns_eb_)\n        delete [] __extbuf_;\n    if (__owns_ib_)\n        delete [] __intbuf_;\n    __ebs_ = __n;\n    if (__ebs_ > sizeof(__extbuf_min_))\n    {\n        if (__always_noconv_ && __s)\n        {\n            __extbuf_ = (char*)__s;\n            __owns_eb_ = false;\n        }\n        else\n        {\n            __extbuf_ = new char[__ebs_];\n            __owns_eb_ = true;\n        }\n    }\n    else\n    {\n        __extbuf_ = __extbuf_min_;\n        __ebs_ = sizeof(__extbuf_min_);\n        __owns_eb_ = false;\n    }\n    if (!__always_noconv_)\n    {\n        __ibs_ = max<streamsize>(__n, sizeof(__extbuf_min_));\n        if (__s && __ibs_ >= sizeof(__extbuf_min_))\n        {\n            __intbuf_ = __s;\n            __owns_ib_ = false;\n        }\n        else\n        {\n            __intbuf_ = new char_type[__ibs_];\n            __owns_ib_ = true;\n        }\n    }\n    else\n    {\n        __ibs_ = 0;\n        __intbuf_ = 0;\n        __owns_ib_ = false;\n    }\n    return this;\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_filebuf<_CharT, _Traits>::pos_type\nbasic_filebuf<_CharT, _Traits>::seekoff(off_type __off, ios_base::seekdir __way,\n                                        ios_base::openmode)\n{\n    if (!__cv_)\n        __throw_bad_cast();\n\n    int __width = __cv_->encoding();\n    if (__file_ == 0 || (__width <= 0 && __off != 0) || sync())\n        return pos_type(off_type(-1));\n    // __width > 0 || __off == 0\n    int __whence;\n    switch (__way)\n    {\n    case ios_base::beg:\n        __whence = SEEK_SET;\n        break;\n    case ios_base::cur:\n        __whence = SEEK_CUR;\n        break;\n    case ios_base::end:\n        __whence = SEEK_END;\n        break;\n    default:\n        return pos_type(off_type(-1));\n    }\n#if defined(_LIBCPP_HAS_NO_OFF_T_FUNCTIONS)\n    if (fseek(__file_, __width > 0 ? __width * __off : 0, __whence))\n        return pos_type(off_type(-1));\n    pos_type __r = ftell(__file_);\n#else\n    if (fseeko(__file_, __width > 0 ? __width * __off : 0, __whence))\n        return pos_type(off_type(-1));\n    pos_type __r = ftello(__file_);\n#endif\n    __r.state(__st_);\n    return __r;\n}\n\ntemplate <class _CharT, class _Traits>\ntypename basic_filebuf<_CharT, _Traits>::pos_type\nbasic_filebuf<_CharT, _Traits>::seekpos(pos_type __sp, ios_base::openmode)\n{\n    if (__file_ == 0 || sync())\n        return pos_type(off_type(-1));\n#if defined(_LIBCPP_HAS_NO_OFF_T_FUNCTIONS)\n    if (fseek(__file_, __sp, SEEK_SET))\n        return pos_type(off_type(-1));\n#else\n    if (fseeko(__file_, __sp, SEEK_SET))\n        return pos_type(off_type(-1));\n#endif\n    __st_ = __sp.state();\n    return __sp;\n}\n\ntemplate <class _CharT, class _Traits>\nint\nbasic_filebuf<_CharT, _Traits>::sync()\n{\n    if (__file_ == 0)\n        return 0;\n    if (!__cv_)\n        __throw_bad_cast();\n\n    if (__cm_ & ios_base::out)\n    {\n        if (this->pptr() != this->pbase())\n            if (overflow() == traits_type::eof())\n                return -1;\n        codecvt_base::result __r;\n        do\n        {\n            char* __extbe;\n            __r = __cv_->unshift(__st_, __extbuf_, __extbuf_ + __ebs_, __extbe);\n            size_t __nmemb = static_cast<size_t>(__extbe - __extbuf_);\n            if (fwrite(__extbuf_, 1, __nmemb, __file_) != __nmemb)\n                return -1;\n        } while (__r == codecvt_base::partial);\n        if (__r == codecvt_base::error)\n            return -1;\n        if (fflush(__file_))\n            return -1;\n    }\n    else if (__cm_ & ios_base::in)\n    {\n        off_type __c;\n        state_type __state = __st_last_;\n        bool __update_st = false;\n        if (__always_noconv_)\n            __c = this->egptr() - this->gptr();\n        else\n        {\n            int __width = __cv_->encoding();\n            __c = __extbufend_ - __extbufnext_;\n            if (__width > 0)\n                __c += __width * (this->egptr() - this->gptr());\n            else\n            {\n                if (this->gptr() != this->egptr())\n                {\n                    const int __off =  __cv_->length(__state, __extbuf_,\n                                                     __extbufnext_,\n                                                     this->gptr() - this->eback());\n                    __c += __extbufnext_ - __extbuf_ - __off;\n                    __update_st = true;\n                }\n            }\n        }\n#if defined(_LIBCPP_HAS_NO_OFF_T_FUNCTIONS)\n        if (fseek(__file_, -__c, SEEK_CUR))\n            return -1;\n#else\n        if (fseeko(__file_, -__c, SEEK_CUR))\n            return -1;\n#endif\n        if (__update_st)\n            __st_ = __state;\n        __extbufnext_ = __extbufend_ = __extbuf_;\n        this->setg(0, 0, 0);\n        __cm_ = 0;\n    }\n    return 0;\n}\n\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_filebuf<_CharT, _Traits>::imbue(const locale& __loc)\n{\n    sync();\n    __cv_ = &use_facet<codecvt<char_type, char, state_type> >(__loc);\n    bool __old_anc = __always_noconv_;\n    __always_noconv_ = __cv_->always_noconv();\n    if (__old_anc != __always_noconv_)\n    {\n        this->setg(0, 0, 0);\n        this->setp(0, 0);\n        // invariant, char_type is char, else we couldn't get here\n        if (__always_noconv_)  // need to dump __intbuf_\n        {\n            if (__owns_eb_)\n                delete [] __extbuf_;\n            __owns_eb_ = __owns_ib_;\n            __ebs_ = __ibs_;\n            __extbuf_ = (char*)__intbuf_;\n            __ibs_ = 0;\n            __intbuf_ = 0;\n            __owns_ib_ = false;\n        }\n        else  // need to obtain an __intbuf_.\n        {     // If __extbuf_ is user-supplied, use it, else new __intbuf_\n            if (!__owns_eb_ && __extbuf_ != __extbuf_min_)\n            {\n                __ibs_ = __ebs_;\n                __intbuf_ = (char_type*)__extbuf_;\n                __owns_ib_ = false;\n                __extbuf_ = new char[__ebs_];\n                __owns_eb_ = true;\n            }\n            else\n            {\n                __ibs_ = __ebs_;\n                __intbuf_ = new char_type[__ibs_];\n                __owns_ib_ = true;\n            }\n        }\n    }\n}\n\ntemplate <class _CharT, class _Traits>\nbool\nbasic_filebuf<_CharT, _Traits>::__read_mode()\n{\n    if (!(__cm_ & ios_base::in))\n    {\n        this->setp(0, 0);\n        if (__always_noconv_)\n            this->setg((char_type*)__extbuf_,\n                       (char_type*)__extbuf_ + __ebs_,\n                       (char_type*)__extbuf_ + __ebs_);\n        else\n            this->setg(__intbuf_, __intbuf_ + __ibs_, __intbuf_ + __ibs_);\n        __cm_ = ios_base::in;\n        return true;\n    }\n    return false;\n}\n\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_filebuf<_CharT, _Traits>::__write_mode()\n{\n    if (!(__cm_ & ios_base::out))\n    {\n        this->setg(0, 0, 0);\n        if (__ebs_ > sizeof(__extbuf_min_))\n        {\n            if (__always_noconv_)\n                this->setp((char_type*)__extbuf_,\n                           (char_type*)__extbuf_ + (__ebs_ - 1));\n            else\n                this->setp(__intbuf_, __intbuf_ + (__ibs_ - 1));\n        }\n        else\n            this->setp(0, 0);\n        __cm_ = ios_base::out;\n    }\n}\n\n// basic_ifstream\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_ifstream\n    : public basic_istream<_CharT, _Traits>\n{\npublic:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_ifstream();\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\n    _LIBCPP_INLINE_VISIBILITY\n    explicit basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in);\n    _LIBCPP_INLINE_VISIBILITY\n    explicit basic_ifstream(const string& __s, ios_base::openmode __mode = ios_base::in);\n#endif\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_ifstream(basic_ifstream&& __rhs);\n#endif\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_ifstream& operator=(basic_ifstream&& __rhs);\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(basic_ifstream& __rhs);\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_filebuf<char_type, traits_type>* rdbuf() const;\n    _LIBCPP_INLINE_VISIBILITY\n    bool is_open() const;\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\n    void open(const char* __s, ios_base::openmode __mode = ios_base::in);\n    void open(const string& __s, ios_base::openmode __mode = ios_base::in);\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    void close();\n\nprivate:\n    basic_filebuf<char_type, traits_type> __sb_;\n};\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ifstream<_CharT, _Traits>::basic_ifstream()\n    : basic_istream<char_type, traits_type>(&__sb_)\n{\n}\n\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ifstream<_CharT, _Traits>::basic_ifstream(const char* __s, ios_base::openmode __mode)\n    : basic_istream<char_type, traits_type>(&__sb_)\n{\n    if (__sb_.open(__s, __mode | ios_base::in) == 0)\n        this->setstate(ios_base::failbit);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ifstream<_CharT, _Traits>::basic_ifstream(const string& __s, ios_base::openmode __mode)\n    : basic_istream<char_type, traits_type>(&__sb_)\n{\n    if (__sb_.open(__s, __mode | ios_base::in) == 0)\n        this->setstate(ios_base::failbit);\n}\n#endif\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ifstream<_CharT, _Traits>::basic_ifstream(basic_ifstream&& __rhs)\n    : basic_istream<char_type, traits_type>(_VSTD::move(__rhs)),\n      __sb_(_VSTD::move(__rhs.__sb_))\n{\n    this->set_rdbuf(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ifstream<_CharT, _Traits>&\nbasic_ifstream<_CharT, _Traits>::operator=(basic_ifstream&& __rhs)\n{\n    basic_istream<char_type, traits_type>::operator=(_VSTD::move(__rhs));\n    __sb_ = _VSTD::move(__rhs.__sb_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\ninline\nvoid\nbasic_ifstream<_CharT, _Traits>::swap(basic_ifstream& __rhs)\n{\n    basic_istream<char_type, traits_type>::swap(__rhs);\n    __sb_.swap(__rhs.__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_ifstream<_CharT, _Traits>& __x, basic_ifstream<_CharT, _Traits>& __y)\n{\n    __x.swap(__y);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_filebuf<_CharT, _Traits>*\nbasic_ifstream<_CharT, _Traits>::rdbuf() const\n{\n    return const_cast<basic_filebuf<char_type, traits_type>*>(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbool\nbasic_ifstream<_CharT, _Traits>::is_open() const\n{\n    return __sb_.is_open();\n}\n\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_ifstream<_CharT, _Traits>::open(const char* __s, ios_base::openmode __mode)\n{\n    if (__sb_.open(__s, __mode | ios_base::in))\n        this->clear();\n    else\n        this->setstate(ios_base::failbit);\n}\n\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_ifstream<_CharT, _Traits>::open(const string& __s, ios_base::openmode __mode)\n{\n    if (__sb_.open(__s, __mode | ios_base::in))\n        this->clear();\n    else\n        this->setstate(ios_base::failbit);\n}\n#endif\n\ntemplate <class _CharT, class _Traits>\ninline\nvoid\nbasic_ifstream<_CharT, _Traits>::close()\n{\n    if (__sb_.close() == 0)\n        this->setstate(ios_base::failbit);\n}\n\n// basic_ofstream\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_ofstream\n    : public basic_ostream<_CharT, _Traits>\n{\npublic:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_ofstream();\n    _LIBCPP_INLINE_VISIBILITY\n    explicit basic_ofstream(const char* __s, ios_base::openmode __mode = ios_base::out);\n    _LIBCPP_INLINE_VISIBILITY\n    explicit basic_ofstream(const string& __s, ios_base::openmode __mode = ios_base::out);\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_ofstream(basic_ofstream&& __rhs);\n#endif\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_ofstream& operator=(basic_ofstream&& __rhs);\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(basic_ofstream& __rhs);\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_filebuf<char_type, traits_type>* rdbuf() const;\n    _LIBCPP_INLINE_VISIBILITY\n    bool is_open() const;\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\n    void open(const char* __s, ios_base::openmode __mode = ios_base::out);\n    void open(const string& __s, ios_base::openmode __mode = ios_base::out);\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    void close();\n\nprivate:\n    basic_filebuf<char_type, traits_type> __sb_;\n};\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ofstream<_CharT, _Traits>::basic_ofstream()\n    : basic_ostream<char_type, traits_type>(&__sb_)\n{\n}\n\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ofstream<_CharT, _Traits>::basic_ofstream(const char* __s, ios_base::openmode __mode)\n    : basic_ostream<char_type, traits_type>(&__sb_)\n{\n    if (__sb_.open(__s, __mode | ios_base::out) == 0)\n        this->setstate(ios_base::failbit);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ofstream<_CharT, _Traits>::basic_ofstream(const string& __s, ios_base::openmode __mode)\n    : basic_ostream<char_type, traits_type>(&__sb_)\n{\n    if (__sb_.open(__s, __mode | ios_base::out) == 0)\n        this->setstate(ios_base::failbit);\n}\n#endif\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ofstream<_CharT, _Traits>::basic_ofstream(basic_ofstream&& __rhs)\n    : basic_ostream<char_type, traits_type>(_VSTD::move(__rhs)),\n      __sb_(_VSTD::move(__rhs.__sb_))\n{\n    this->set_rdbuf(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_ofstream<_CharT, _Traits>&\nbasic_ofstream<_CharT, _Traits>::operator=(basic_ofstream&& __rhs)\n{\n    basic_ostream<char_type, traits_type>::operator=(_VSTD::move(__rhs));\n    __sb_ = _VSTD::move(__rhs.__sb_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\ninline\nvoid\nbasic_ofstream<_CharT, _Traits>::swap(basic_ofstream& __rhs)\n{\n    basic_ostream<char_type, traits_type>::swap(__rhs);\n    __sb_.swap(__rhs.__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_ofstream<_CharT, _Traits>& __x, basic_ofstream<_CharT, _Traits>& __y)\n{\n    __x.swap(__y);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_filebuf<_CharT, _Traits>*\nbasic_ofstream<_CharT, _Traits>::rdbuf() const\n{\n    return const_cast<basic_filebuf<char_type, traits_type>*>(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbool\nbasic_ofstream<_CharT, _Traits>::is_open() const\n{\n    return __sb_.is_open();\n}\n\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_ofstream<_CharT, _Traits>::open(const char* __s, ios_base::openmode __mode)\n{\n    if (__sb_.open(__s, __mode | ios_base::out))\n        this->clear();\n    else\n        this->setstate(ios_base::failbit);\n}\n\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_ofstream<_CharT, _Traits>::open(const string& __s, ios_base::openmode __mode)\n{\n    if (__sb_.open(__s, __mode | ios_base::out))\n        this->clear();\n    else\n        this->setstate(ios_base::failbit);\n}\n#endif\n\ntemplate <class _CharT, class _Traits>\ninline\nvoid\nbasic_ofstream<_CharT, _Traits>::close()\n{\n    if (__sb_.close() == 0)\n        this->setstate(ios_base::failbit);\n}\n\n// basic_fstream\n\ntemplate <class _CharT, class _Traits>\nclass _LIBCPP_TEMPLATE_VIS basic_fstream\n    : public basic_iostream<_CharT, _Traits>\n{\npublic:\n    typedef _CharT                         char_type;\n    typedef _Traits                        traits_type;\n    typedef typename traits_type::int_type int_type;\n    typedef typename traits_type::pos_type pos_type;\n    typedef typename traits_type::off_type off_type;\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_fstream();\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\n    _LIBCPP_INLINE_VISIBILITY\n    explicit basic_fstream(const char* __s, ios_base::openmode __mode = ios_base::in | ios_base::out);\n    _LIBCPP_INLINE_VISIBILITY\n    explicit basic_fstream(const string& __s, ios_base::openmode __mode = ios_base::in | ios_base::out);\n#endif\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_fstream(basic_fstream&& __rhs);\n#endif\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n    _LIBCPP_INLINE_VISIBILITY\n    basic_fstream& operator=(basic_fstream&& __rhs);\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    void swap(basic_fstream& __rhs);\n\n    _LIBCPP_INLINE_VISIBILITY\n    basic_filebuf<char_type, traits_type>* rdbuf() const;\n    _LIBCPP_INLINE_VISIBILITY\n    bool is_open() const;\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\n    void open(const char* __s, ios_base::openmode __mode = ios_base::in | ios_base::out);\n    void open(const string& __s, ios_base::openmode __mode = ios_base::in | ios_base::out);\n#endif\n    _LIBCPP_INLINE_VISIBILITY\n    void close();\n\nprivate:\n    basic_filebuf<char_type, traits_type> __sb_;\n};\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_fstream<_CharT, _Traits>::basic_fstream()\n    : basic_iostream<char_type, traits_type>(&__sb_)\n{\n}\n\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\ntemplate <class _CharT, class _Traits>\ninline\nbasic_fstream<_CharT, _Traits>::basic_fstream(const char* __s, ios_base::openmode __mode)\n    : basic_iostream<char_type, traits_type>(&__sb_)\n{\n    if (__sb_.open(__s, __mode) == 0)\n        this->setstate(ios_base::failbit);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_fstream<_CharT, _Traits>::basic_fstream(const string& __s, ios_base::openmode __mode)\n    : basic_iostream<char_type, traits_type>(&__sb_)\n{\n    if (__sb_.open(__s, __mode) == 0)\n        this->setstate(ios_base::failbit);\n}\n#endif\n\n#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_fstream<_CharT, _Traits>::basic_fstream(basic_fstream&& __rhs)\n    : basic_iostream<char_type, traits_type>(_VSTD::move(__rhs)),\n      __sb_(_VSTD::move(__rhs.__sb_))\n{\n    this->set_rdbuf(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_fstream<_CharT, _Traits>&\nbasic_fstream<_CharT, _Traits>::operator=(basic_fstream&& __rhs)\n{\n    basic_iostream<char_type, traits_type>::operator=(_VSTD::move(__rhs));\n    __sb_ = _VSTD::move(__rhs.__sb_);\n    return *this;\n}\n\n#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ntemplate <class _CharT, class _Traits>\ninline\nvoid\nbasic_fstream<_CharT, _Traits>::swap(basic_fstream& __rhs)\n{\n    basic_iostream<char_type, traits_type>::swap(__rhs);\n    __sb_.swap(__rhs.__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline _LIBCPP_INLINE_VISIBILITY\nvoid\nswap(basic_fstream<_CharT, _Traits>& __x, basic_fstream<_CharT, _Traits>& __y)\n{\n    __x.swap(__y);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbasic_filebuf<_CharT, _Traits>*\nbasic_fstream<_CharT, _Traits>::rdbuf() const\n{\n    return const_cast<basic_filebuf<char_type, traits_type>*>(&__sb_);\n}\n\ntemplate <class _CharT, class _Traits>\ninline\nbool\nbasic_fstream<_CharT, _Traits>::is_open() const\n{\n    return __sb_.is_open();\n}\n\n#ifndef _LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_fstream<_CharT, _Traits>::open(const char* __s, ios_base::openmode __mode)\n{\n    if (__sb_.open(__s, __mode))\n        this->clear();\n    else\n        this->setstate(ios_base::failbit);\n}\n\ntemplate <class _CharT, class _Traits>\nvoid\nbasic_fstream<_CharT, _Traits>::open(const string& __s, ios_base::openmode __mode)\n{\n    if (__sb_.open(__s, __mode))\n        this->clear();\n    else\n        this->setstate(ios_base::failbit);\n}\n#endif\n\ntemplate <class _CharT, class _Traits>\ninline\nvoid\nbasic_fstream<_CharT, _Traits>::close()\n{\n    if (__sb_.close() == 0)\n        this->setstate(ios_base::failbit);\n}\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_FSTREAM\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  mem_track.h\n *  @brief A set of macros to track how many instances of specific classes are made.\n *  @note Status: BETA\n *\n *  One way of tracking memory leaks is to simply count instances of classes.  The macros here\n *  simplify this process.\n *\n *  To setup, every constructor for a class must incude EMP_TRACK_CONSTRUCT(CLASS_NAME),\n *  and every destructor must have EMP_TRACK_DESTRUCT(CLASS_NAME).  Make sure to avoid\n *  implicit constructors/destructors or counts will be off.\n *\n *  To collect information, EMP_TRACK_COUNT(CLASS_NAME) will provide the current count\n *  for a specific class, and EMP_TRACK_STATUS will translate into a string providing\n *  information about all available classes.\n *\n *  Developer notes:\n *  @todo Currently having issues with the memory map corruption.  Perhaps it needs to use onload?\n *   Also, can try using JS maps instead?  (only when using Emscripten.)\n */\n\n#ifndef EMP_MEM_TRACK\n#define EMP_MEM_TRACK\n\n\n// If EMP_NDEBUG is turned on, turn off mem checks.\n#ifdef EMP_NDEBUG\n#define EMP_NO_MEM_CHECK\n#endif\n\n\n#include <map>\n#include <string>\n#include <sstream>\n\n#include \"alert.h\"\n\n#ifdef EMP_NO_MEM_CHECK\n\n#define EMP_TRACK_CONSTRUCT(CLASS_NAME)\n#define EMP_TRACK_DESTRUCT(CLASS_NAME)\n#define EMP_TRACK_COUNT(CLASS_NAME) 0\n#define EMP_TRACK_STATUS std::string(\"(not in debug mode)\")\n\n#else  // DEBUG MODE!\n\n#define EMP_TRACK_CONSTRUCT(CLASS_NAME) emp::internal::TrackMem_Inc(#CLASS_NAME)\n#define EMP_TRACK_DESTRUCT(CLASS_NAME) emp::internal::TrackMem_Dec(#CLASS_NAME)\n#define EMP_TRACK_COUNT(CLASS_NAME) emp::internal::TrackMem_Count(#CLASS_NAME)\n#define EMP_TRACK_STATUS emp::internal::TrackMem_Status()\n\nnamespace emp {\n\n  namespace internal {\n\n    static std::map<std::string,int> & TrackMem_GetMap() {\n      static std::map<std::string,int> * track_mem_class_map = nullptr;\n      if (!track_mem_class_map) track_mem_class_map = new std::map<std::string,int>;\n      return *track_mem_class_map;\n    }\n\n    static std::string TrackMem_Status() {\n      auto & mem_map = TrackMem_GetMap();\n\n      std::stringstream ss;\n      for (auto stat : mem_map) {\n        ss << \"[\" << stat.first << \"] : \" << stat.second << std::endl;\n      }\n      return ss.str();\n    }\n\n    static void TrackMem_Inc(const std::string & class_name) {\n      (void) class_name;\n      auto & mem_map = TrackMem_GetMap();\n      if (mem_map.find(class_name) == mem_map.end()) {\n        mem_map[class_name] = 0;\n      }\n      mem_map[class_name]++;\n    }\n\n    static void TrackMem_Dec(const std::string & class_name) {\n      (void) class_name;\n      auto & mem_map = TrackMem_GetMap();\n\n      // Make sure we are not trying to delete a class that was never registered!\n      if (mem_map.find(class_name) == mem_map.end()) {\n        emp::CappedAlert(3, \"Trying to delete unknown: [\", class_name,\n                         \"]; map size = \", mem_map.size());\n        abort();\n      }\n      mem_map[class_name]--;\n      if (mem_map[class_name] < 0) {\n        emp::CappedAlert(3, \"Trying to delete too many: \", class_name);\n        abort();\n      }\n    }\n\n    static int TrackMem_Count(const std::string & class_name) {\n      (void) class_name;\n      auto & mem_map = TrackMem_GetMap();\n\n      if (mem_map.find(class_name) == mem_map.end()) {\n        return 0;\n      }\n      return mem_map[class_name];\n    }\n\n  }\n\n}\n#endif\n\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2018\n *\n *  @file  Random.h\n *  @brief A versatile and non-patterned pseudo-random-number generator.\n *  @note Status: RELEASE\n */\n\n#ifndef EMP_RANDOM_H\n#define EMP_RANDOM_H\n\n#include <ctime>\n#include <climits>\n#include <cmath>\n#include <iterator>\n\n#include \"../base/assert.h\"\n#include \"Range.h\"\n\nnamespace emp {\n\n  ///  A versatile and non-patterned pseudo-random-number generator (Mersenne Twister).\n  class Random {\n  protected:\n    int seed;           ///< Current random number seed.\n    int original_seed;  ///< Orignal random number seed when object was first created.\n    int inext;          ///< First position in use in internal state.\n    int inextp;         ///< Second position in use in internal state.\n    int ma[56];         ///< Internal state of RNG\n\n    // Members & functions for stat functions\n    double expRV; // Exponential Random Variable for the randNormal function\n\n    // Constants ////////////////////////////////////////////////////////////////\n    // Statistical Approximation\n    static const int32_t _BINOMIAL_TO_NORMAL = 50;     // if < n*p*(1-p)\n    static const int32_t _BINOMIAL_TO_POISSON = 1000;  // if < n && !Normal approx Engine\n\n    // Engine\n    static const int32_t _RAND_MBIG = 1000000000;\n    static const int32_t _RAND_MSEED = 161803398;\n\n    // Internal functions\n\n    // Setup, called on initialization and seed reset.\n    void init()\n    {\n      // Clear variables\n      for (int i = 0; i < 56; ++i) ma[i] = 0;\n\n      int32_t mj = (_RAND_MSEED - seed) % _RAND_MBIG;\n      ma[55] = mj;\n      int32_t mk = 1;\n\n      for (int32_t i = 1; i < 55; ++i) {\n        int32_t ii = (21 * i) % 55;\n        ma[ii] = mk;\n        mk = mj - mk;\n        if (mk < 0) mk += _RAND_MBIG;\n        mj = ma[ii];\n      }\n\n      for (int32_t k = 0; k < 4; ++k) {\n        for (int32_t j = 1; j < 55; ++j) {\n          ma[j] -= ma[1 + (j + 30) % 55];\n          if (ma[j] < 0) ma[j] += _RAND_MBIG;\n        }\n      }\n\n      inext = 0;\n      inextp = 31;\n\n      // Setup variables used by Statistical Distribution functions\n      expRV = -log(Random::Get() / (double) _RAND_MBIG);\n    }\n\n    // Basic Random number\n    // Returns a random number [0,_RAND_MBIG)\n    int32_t Get() {\n      if (++inext == 56) inext = 0;\n      if (++inextp == 56) inextp = 0;\n      int mj = ma[inext] - ma[inextp];\n      if (mj < 0) mj += _RAND_MBIG;\n      ma[inext] = mj;\n\n      return mj;\n    }\n\n  public:\n    /**\n     * Set up the random generator object.\n     * @param _seed The seed of the random number generator.  A negative seed means that the\n     * random number generator gets its seed from a combination of the actual system time and\n     * the memory position of the random number generator.\n     **/\n    Random(const int _seed = -1) : seed(0), original_seed(0), inext(0), inextp(0), expRV(0) {\n      for (int i = 0; i < 56; ++i) ma[i] = 0;\n      ResetSeed(_seed);  // Calls init()\n    }\n\n    ~Random() { ; }\n\n\n    /**\n     * @return The seed that was actually used to start the random sequence.\n     **/\n    inline int GetSeed() const { return seed; }\n\n    /**\n     * @return The seed that was originally provided by the user.\n     **/\n    inline int GetOriginalSeed() const { return original_seed; }\n\n    /**\n     * Starts a new sequence of pseudo random numbers.\n     *\n     * @param new_seed The seed for the new sequence.\n     * A negative seed means that the random number generator gets its\n     * seed from the actual system time and the process ID.\n     **/\n    inline void ResetSeed(const int _seed) {\n      original_seed = _seed;\n\n      if (_seed <= 0) {\n        int seed_time = (int) time(NULL);\n        int seed_mem = (int) ((uint64_t) this);\n        seed = seed_time ^ seed_mem;\n      } else {\n        seed = _seed;\n      }\n\n      if (seed < 0) seed *= -1;\n      seed %= _RAND_MSEED;\n\n      init();\n    }\n\n\n    // Random Number Generation /////////////////////////////////////////////////\n\n    /**\n     * Generate a double between 0.0 and 1.0\n     *\n     * @return The pseudo random number.\n     **/\n    inline double GetDouble() { return Get() / (double) _RAND_MBIG; }\n\n    /**\n     * Generate a double between 0 and a given number.\n     *\n     * @return The pseudo random number.\n     * @param max The upper bound for the random numbers (will never be returned).\n     **/\n    inline double GetDouble(const double max) {\n      // emp_assert(max <= (double) _RAND_MBIG, max, (double) _RAND_MBIG);  // Precision will be too low past this point...\n      return GetDouble() * max;\n    }\n\n    /**\n     * Generate a double out of a given interval.\n     *\n     * @return The pseudo random number.\n     * @param min The lower bound for the random numbers.\n     * @param max The upper bound for the random numbers (will never be returned).\n     **/\n    inline double GetDouble(const double min, const double max) {\n      emp_assert((max-min) <= (double) _RAND_MBIG, min, max);  // Precision will be too low past this point...\n      return GetDouble() * (max - min) + min;\n    }\n\n    /**\n     * Generate a double out of a given interval.\n     *\n     * @return The pseudo random number.\n     * @param range The upper and lower bounds for the random numbers [lower, upper)\n     **/\n    inline double GetDouble(const Range<double> range) {\n      return GetDouble(range.GetLower(), range.GetUpper());\n     }\n\n    /**\n     * Generate an uint32_t.\n     *\n     * @return The pseudo random number.\n     * @param max The upper bound for the random numbers (will never be returned).\n     **/\n    template <typename T>\n    inline uint32_t GetUInt(const T max) {\n      emp_assert(max <= (T) _RAND_MBIG, max);  // Precision will be too low past this point...\n      return static_cast<uint32_t>(GetDouble() * static_cast<double>(max));\n    }\n\n    /**\n     * Generate a random 32-bit block of bits.\n     *\n     * @return The pseudo random number.\n     **/\n    inline uint32_t GetUInt() {\n      return ( static_cast<uint32_t>(GetDouble() * 65536.0) << 16 )\n             + static_cast<uint32_t>(GetDouble() * 65536.0);\n    }\n\n    /**\n     * Generate an uint64_t.\n     *\n     * @return The pseudo random number.\n     * @param max The upper bound for the random numbers (will never be returned).\n     * @todo this function needs to be tested and refined.\n     **/\n    template <typename T>\n    inline uint64_t GetUInt64(const T max) {\n      if (max <= (T) _RAND_MBIG) return (uint64_t) GetUInt(max);  // Don't need extra precision.\n      const double max2 = ((double) max) / (double) _RAND_MBIG;\n      emp_assert(max2 <= (T) _RAND_MBIG, max);  // Precision will be too low past this point...\n\n      return static_cast<uint64_t>(GetDouble() * static_cast<double>(max))\n           + static_cast<uint64_t>(GetDouble() * static_cast<double>(max2) * _RAND_MBIG);\n    }\n\n\n    /**\n     * Generate an uint32_t out of an interval.\n     *\n     * @return The pseudo random number.\n     * @param min The lower bound for the random numbers.\n     * @param max The upper bound for the random numbers (will never be returned).\n     **/\n    template <typename T1, typename T2>\n    inline uint32_t GetUInt(const T1 min, const T2 max) {\n      return GetUInt<uint32_t>((uint32_t) max - (uint32_t) min) + (uint32_t) min;\n    }\n\n    /**\n     * Generate a uint32_t out of a given interval.\n     *\n     * @return The pseudo random number.\n     * @param range The upper and lower bounds for the random numbers [lower, upper)\n     **/\n    template <typename T>\n    inline uint32_t GetUInt(const Range<T> range) {\n      return GetUInt(range.GetLower(), range.GetUpper());\n    }\n\n    /**\n     * Generate an int out of an interval.\n     *\n     * @return The pseudo random number.\n     * @param min The lower bound for the random numbers.\n     * @param max The upper bound for the random numbers (will never be returned).\n     **/\n    inline int GetInt(const int max) { return static_cast<int>(GetUInt((uint32_t) max)); }\n    inline int GetInt(const int min, const int max) { return GetInt(max - min) + min; }\n    inline int GetInt(const Range<int> range) { return GetInt(range.GetLower(), range.GetUpper()); }\n\n\n    // Random Event Generation //////////////////////////////////////////////////\n\n    /// Tests a random value [0,1) against a given probability p, and returns true of false.\n    /// @param p The probability of the result being \"true\".\n    inline bool P(const double p) {\n      emp_assert(p >= 0.0 && p <= 1.0, p);\n      return (Get() < (p * _RAND_MBIG));\n    }\n\n\n    // Statistical functions ////////////////////////////////////////////////////\n\n    // Distributions //\n\n    /**\n     * Generate a random variable drawn from a unit normal distribution.\n     **/\n    inline double GetRandNormal() {\n      // Draw from a Unit Normal Dist\n      // Using Rejection Method and saving of initial exponential random variable\n      double expRV2;\n      while (1) {\n        expRV2 = -log(GetDouble());\n        expRV -= (expRV2-1)*(expRV2-1)/2;\n        if (expRV > 0) break;\n        expRV = -log(GetDouble());\n      }\n      if (P(.5)) return expRV2;\n      return -expRV2;\n    }\n\n    /**\n     * Generate a random variable drawn from a distribution with given\n     * mean and standard deviation.\n     **/\n    inline double GetRandNormal(const double mean, const double std) { return mean + GetRandNormal() * std; }\n\n    /**\n     * Generate a random variable drawn from a Poisson distribution.\n     **/\n    inline uint32_t GetRandPoisson(const double n, double p) {\n      emp_assert(p >= 0.0 && p <= 1.0, p);\n      // Optimizes for speed and calculability using symetry of the distribution\n      if (p > .5) return (uint32_t)n - GetRandPoisson(n * (1 - p));\n      else return GetRandPoisson(n * p);\n    }\n\n    /**\n     * Generate a random variable drawn from a Poisson distribution.\n     *\n     * @param mean The mean of the distribution.\n     **/\n    inline uint32_t GetRandPoisson(const double mean) {\n      // Draw from a Poisson Dist with mean; if cannot calculate, return UINT_MAX.\n      // Uses Rejection Method\n      const double a = exp(-mean);\n      if (a <= 0) return UINT_MAX; // cannot calculate, so return UINT_MAX\n      uint32_t k = 0;\n      double u = GetDouble();\n      while (u >= a) {\n        u *= GetDouble();\n        ++k;\n      }\n      return k;\n    }\n\n    /**\n     * Generate a random variable drawn from a Binomial distribution.\n     *\n     * This function is exact, but slow.\n     * @see Random::GetRandBinomial\n     **/\n    inline uint32_t GetFullRandBinomial(const double n, const double p) { // Exact\n      emp_assert(p >= 0.0 && p <= 1.0, p);\n      // Actually try n Bernoulli events with probability p\n      uint32_t k = 0;\n      for (uint32_t i = 0; i < n; ++i) if (P(p)) k++;\n      return k;\n    }\n\n    /**\n     * Generate a random variable drawn from a Binomial distribution.\n     *\n     * This function is faster than @ref Random::GetFullRandBinomial(), but\n     * uses some approximations.\n     *\n     * @see Random::GetFullRandBinomial\n     **/\n    inline uint32_t GetRandBinomial(const double n, const double p) { // Approx\n      emp_assert(p >= 0.0 && p <= 1.0, p);\n      emp_assert(n >= 0.0, n);\n      // Approximate Binomial if appropriate\n      // if np(1-p) is large, use a Normal approx\n      if (n * p * (1 - p) >= _BINOMIAL_TO_NORMAL) {\n        return static_cast<uint32_t>(GetRandNormal(n * p, n * p * (1 - p)) + 0.5);\n      }\n      // elseif n is large, use a Poisson approx\n      if (n >= _BINOMIAL_TO_POISSON) {\n        uint32_t k = GetRandPoisson(n, p);\n        if (k < UINT_MAX) return k; // if approx worked\n      }\n      // otherwise, actually generate the randBinomial\n      return GetFullRandBinomial(n, p);\n    }\n  };\n\n\n  /// This is an adaptor to make Random behave like a proper STL random number generator.\n  struct RandomStdAdaptor {\n    typedef int argument_type;\n    typedef int result_type;\n\n    RandomStdAdaptor(Random& rng) : _rng(rng) { }\n    int operator()(int n) { return _rng.GetInt(n); }\n\n    Random& _rng;\n  };\n\n\n  /// Draw a sample (with replacement) from an input range, copying to the output range.\n  template <typename ForwardIterator, typename OutputIterator, typename RNG>\n  void sample_with_replacement(ForwardIterator first, ForwardIterator last, OutputIterator ofirst, OutputIterator olast, RNG rng) {\n    std::size_t range = std::distance(first, last);\n    while(ofirst != olast) {\n      *ofirst = *(first+rng(range));\n      ++ofirst;\n    }\n  }\n\n\n} // END emp namespace\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2017\n *\n *  @file  InstLib.h\n *  @brief This file maintains information about instructions availabel in virtual hardware.\n */\n\n#ifndef EMP_INST_LIB_H\n#define EMP_INST_LIB_H\n\n#include <map>\n#include <string>\n#include <unordered_set>\n\n#include \"../base/array.h\"\n#include \"../base/Ptr.h\"\n#include \"../base/vector.h\"\n#include \"../tools/map_utils.h\"\n#include \"../tools/string_utils.h\"\n\nnamespace emp {\n\n  /// ScopeType is used for scopes that we need to do something special at the end.\n  /// Eg: LOOP needs to go back to beginning of loop; FUNCTION needs to return to call.\n  enum class ScopeType { NONE=0, ROOT, BASIC, LOOP, FUNCTION };\n\n  /// @brief InstLib maintains a set of instructions for use in virtual hardware.\n  /// @param HARDWARE_T Type of the virtual hardware class to track instructions.\n  /// @param ARG_T What types of arguments are associated with instructions.\n  /// @param ARG_COUNT Max number of arguments on an instruction.\n  template <typename HARDWARE_T, typename ARG_T=size_t, size_t ARG_COUNT=3>\n  class InstLib {\n  public:\n    using hardware_t = HARDWARE_T;\n    using inst_t = typename hardware_t::inst_t;\n    using genome_t = emp::vector<inst_t>;\n    using arg_t = ARG_T;\n    using fun_t = std::function<void(hardware_t &, const inst_t &)>;\n    using inst_properties_t = std::unordered_set<std::string>;\n\n    struct InstDef {\n      std::string name;             ///< Name of this instruction.\n      fun_t fun_call;               ///< Function to call when executing.\n      size_t num_args;              ///< Number of args needed by function.\n      std::string desc;             ///< Description of function.\n      ScopeType scope_type;         ///< How does this instruction affect scoping?\n      size_t scope_arg;             ///< Which arg indictes new scope (if any).\n      inst_properties_t properties; ///< Are there any generic properties associated with this inst def?\n\n      InstDef(const std::string & _n, fun_t _fun, size_t _args, const std::string & _d,\n              ScopeType _s_type, size_t _s_arg, const inst_properties_t & _properties = inst_properties_t())\n        : name(_n), fun_call(_fun), num_args(_args), desc(_d)\n        , scope_type(_s_type), scope_arg(_s_arg), properties(_properties) { ; }\n      InstDef(const InstDef &) = default;\n    };\n\n  protected:\n    emp::vector<InstDef> inst_lib;           ///< Full definitions for instructions.\n    emp::vector<fun_t> inst_funs;            ///< Map of instruction IDs to their functions.\n    std::map<std::string, size_t> name_map;  ///< How do names link to instructions?\n    std::map<std::string, arg_t> arg_map;    ///< How are different arguments named?\n\n  public:\n    InstLib() : inst_lib(), inst_funs(), name_map(), arg_map() { ; }  ///< Default Constructor\n    InstLib(const InstLib &) = default;                               ///< Copy Constructor\n    InstLib(InstLib &&) = default;                                    ///< Move Constructor\n    ~InstLib() { ; }                                                  ///< Destructor\n\n    InstLib & operator=(const InstLib &) = default;                   ///< Copy Operator\n    InstLib & operator=(InstLib &&) = default;                        ///< Move Operator\n\n    /// Return the name associated with the specified instruction ID.\n    const std::string & GetName(size_t id) const { return inst_lib[id].name; }\n\n    /// Return the function associated with the specified instruction ID.\n    const fun_t & GetFunction(size_t id) const { return inst_lib[id].fun_call; }\n\n    /// Return the number of arguments expected for the specified instruction ID.\n    size_t GetNumArgs(size_t id) const { return inst_lib[id].num_args; }\n\n    /// Return the provided description for the provided instruction ID.\n    const std::string & GetDesc(size_t id) const { return inst_lib[id].desc; }\n\n    /// What type of scope does this instruction state?  ScopeType::NONE is default.\n    ScopeType GetScopeType(size_t id) const { return inst_lib[id].scope_type; }\n\n    /// If this instruction alters scope, identify which argument does so.\n    size_t GetScopeArg(size_t id) const { return inst_lib[id].scope_arg; }\n\n    /// Return the set of properties for the provided instruction ID.\n    const inst_properties_t & GetProperties(size_t id) const { return inst_lib[id].properties; }\n\n    /// Does the given instruction ID have the given property value?\n    bool HasProperty(size_t id, std::string property) const { return inst_lib[id].properties.count(property); }\n\n    /// Get the number of instructions in this set.\n    size_t GetSize() const { return inst_lib.size(); }\n\n    /// Retrieve a unique letter associared with the specified instruction ID.\n    static constexpr char GetSymbol(size_t id) {\n      if (id < 26) return ('a' + id);\n      if (id < 52) return ('A' + (id - 26));\n      if (id < 62) return ('0' + (id - 52));\n      return '+';\n    }\n\n    bool IsInst(const std::string name) const {\n        return Has(name_map, name);\n    }\n\n    /// Return the ID of the instruction that has the specified name.\n    size_t GetID(const std::string & name) const {\n      emp_assert(Has(name_map, name), name);\n      return Find(name_map, name, (size_t) -1);\n    }\n\n    /// Return the ID of the instruction associated with the specified symbol.\n    static constexpr size_t GetID(char symbol) {\n      if (symbol >= 'a' && symbol <= 'z') return (size_t) (symbol - 'a');\n      if (symbol >= 'A' && symbol <= 'Z') return (size_t) (symbol - 'A' + 26);\n      if (symbol >= '0' && symbol <= '9') return (size_t) (symbol - '0' + 52);\n      return (size_t) 62;\n    }\n\n    /// Return the argument value associated with the provided keyword.\n    arg_t GetArg(const std::string & name) {\n      emp_assert(Has(arg_map, name));\n      return arg_map[name];\n    }\n\n    /// @brief Add a new instruction to the set.\n    /// @param name A unique string name for this instruction.\n    /// @param fun_call The function that should be called when this instruction is executed.\n    /// @param num_args How many arguments does this function require? (default=0)\n    /// @param desc A description of how this function operates. (default=\"\")\n    /// @param scope_type Type of scope does this instruction creates. (default=ScopeType::NONE)\n    /// @param scope_arg If instruction changes scope, which argument specified new scope? (defualt=-1)\n    void AddInst(const std::string & name,\n                 const fun_t & fun_call,\n                 size_t num_args=0,\n                 const std::string & desc=\"\",\n                 ScopeType scope_type=ScopeType::NONE,\n                 size_t scope_arg=(size_t) -1,\n                 const inst_properties_t & inst_properties=inst_properties_t())\n    {\n      const size_t id = inst_lib.size();\n      inst_lib.emplace_back(name, fun_call, num_args, desc, scope_type, scope_arg, inst_properties);\n      inst_funs.emplace_back(fun_call);\n      name_map[name] = id;\n    }\n\n    /// Specify a keyword and arg value.\n    void AddArg(const std::string & name, arg_t value) {\n      emp_assert(!Has(arg_map, name));\n      arg_map[name] = value;\n    }\n\n    /// Process a specified instruction in the provided hardware.\n    void ProcessInst(hardware_t & hw, const inst_t & inst) const {\n      inst_funs[inst.id](hw, inst);\n    }\n\n    /// Process a specified instruction on hardware that can be converted to the correct type.\n    template <typename IN_HW>\n    void ProcessInst(emp::Ptr<IN_HW> hw, const inst_t & inst) const {\n      emp_assert( dynamic_cast<hardware_t*>(hw.Raw()) );\n      inst_funs[inst.id](*(hw.template Cast<hardware_t>()), inst);\n    }\n\n\n    /// Write out a full genome to the provided ostream.\n    void WriteGenome(const genome_t & genome, std::ostream & os=std::cout) const {\n      for (const inst_t & inst : genome) {\n        os << inst.id << \" \" << GetName(inst.id);\n        const size_t num_args = GetNumArgs(inst.id);\n        for (size_t i = 0; i < num_args; i++) {\n          os << ' ' << inst.args[i];\n        }\n        os << '\\n';\n      }\n    }\n\n    /// Read the instruction in the provided info and append it to the provided genome.\n    void ReadInst(genome_t & genome, std::string info) const {\n      std::string name = emp::string_pop_word(info);\n      size_t id = GetID(name);\n      genome.emplace_back(id);\n      size_t num_args = GetNumArgs(id);\n      for (size_t i = 0; i < num_args; i++) {\n        std::string arg_name = emp::string_pop_word(info);\n        // @CAO: Should check to make sure arg name is real.\n        if (emp::Has(arg_map, arg_name) == false) {\n          std::cerr << \"Unknown argument '\" << arg_name << \"'.  Ignoring.\" << std::endl;\n        }\n        genome.back().args[i] = arg_map[arg_name];\n      }\n    }\n\n  };\n\n}\n\n#endif\n","// -*- C++ -*-\n//===--------------------------- iosfwd -----------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.TXT for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _LIBCPP_IOSFWD\n#define _LIBCPP_IOSFWD\n\n/*\n    iosfwd synopsis\n\nnamespace std\n{\n\ntemplate<class charT> struct char_traits;\ntemplate<class T>     class allocator;\n\nclass ios_base;\ntemplate <class charT, class traits = char_traits<charT> > class basic_ios;\n\ntemplate <class charT, class traits = char_traits<charT> > class basic_streambuf;\ntemplate <class charT, class traits = char_traits<charT> > class basic_istream;\ntemplate <class charT, class traits = char_traits<charT> > class basic_ostream;\ntemplate <class charT, class traits = char_traits<charT> > class basic_iostream;\n\ntemplate <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\n    class basic_stringbuf;\ntemplate <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\n    class basic_istringstream;\ntemplate <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\n    class basic_ostringstream;\ntemplate <class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >\n    class basic_stringstream;\n\ntemplate <class charT, class traits = char_traits<charT> > class basic_filebuf;\ntemplate <class charT, class traits = char_traits<charT> > class basic_ifstream;\ntemplate <class charT, class traits = char_traits<charT> > class basic_ofstream;\ntemplate <class charT, class traits = char_traits<charT> > class basic_fstream;\n\ntemplate <class charT, class traits = char_traits<charT> > class istreambuf_iterator;\ntemplate <class charT, class traits = char_traits<charT> > class ostreambuf_iterator;\n\ntypedef basic_ios<char>              ios;\ntypedef basic_ios<wchar_t>           wios;\n\ntypedef basic_streambuf<char>        streambuf;\ntypedef basic_istream<char>          istream;\ntypedef basic_ostream<char>          ostream;\ntypedef basic_iostream<char>         iostream;\n\ntypedef basic_stringbuf<char>        stringbuf;\ntypedef basic_istringstream<char>    istringstream;\ntypedef basic_ostringstream<char>    ostringstream;\ntypedef basic_stringstream<char>     stringstream;\n\ntypedef basic_filebuf<char>          filebuf;\ntypedef basic_ifstream<char>         ifstream;\ntypedef basic_ofstream<char>         ofstream;\ntypedef basic_fstream<char>          fstream;\n\ntypedef basic_streambuf<wchar_t>     wstreambuf;\ntypedef basic_istream<wchar_t>       wistream;\ntypedef basic_ostream<wchar_t>       wostream;\ntypedef basic_iostream<wchar_t>      wiostream;\n\ntypedef basic_stringbuf<wchar_t>     wstringbuf;\ntypedef basic_istringstream<wchar_t> wistringstream;\ntypedef basic_ostringstream<wchar_t> wostringstream;\ntypedef basic_stringstream<wchar_t>  wstringstream;\n\ntypedef basic_filebuf<wchar_t>       wfilebuf;\ntypedef basic_ifstream<wchar_t>      wifstream;\ntypedef basic_ofstream<wchar_t>      wofstream;\ntypedef basic_fstream<wchar_t>       wfstream;\n\ntemplate <class state> class fpos;\ntypedef fpos<char_traits<char>::state_type>    streampos;\ntypedef fpos<char_traits<wchar_t>::state_type> wstreampos;\n\n}  // std\n\n*/\n\n#include <__config>\n#include <wchar.h>  // for mbstate_t\n\n#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)\n#pragma GCC system_header\n#endif\n\n_LIBCPP_BEGIN_NAMESPACE_STD\n\nclass _LIBCPP_TYPE_VIS ios_base;\n\ntemplate<class _CharT>  struct _LIBCPP_TEMPLATE_VIS char_traits;\ntemplate<class _Tp>     class _LIBCPP_TEMPLATE_VIS allocator;\n\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_ios;\n\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_streambuf;\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_istream;\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_ostream;\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_iostream;\n\ntemplate <class _CharT, class _Traits = char_traits<_CharT>,\n          class _Allocator = allocator<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_stringbuf;\ntemplate <class _CharT, class _Traits = char_traits<_CharT>,\n          class _Allocator = allocator<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_istringstream;\ntemplate <class _CharT, class _Traits = char_traits<_CharT>,\n          class _Allocator = allocator<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_ostringstream;\ntemplate <class _CharT, class _Traits = char_traits<_CharT>,\n          class _Allocator = allocator<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_stringstream;\n\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_filebuf;\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_ifstream;\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_ofstream;\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_fstream;\n\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS istreambuf_iterator;\ntemplate <class _CharT, class _Traits = char_traits<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS ostreambuf_iterator;\n\ntypedef basic_ios<char>              ios;\ntypedef basic_ios<wchar_t>           wios;\n\ntypedef basic_streambuf<char>        streambuf;\ntypedef basic_istream<char>          istream;\ntypedef basic_ostream<char>          ostream;\ntypedef basic_iostream<char>         iostream;\n\ntypedef basic_stringbuf<char>        stringbuf;\ntypedef basic_istringstream<char>    istringstream;\ntypedef basic_ostringstream<char>    ostringstream;\ntypedef basic_stringstream<char>     stringstream;\n\ntypedef basic_filebuf<char>          filebuf;\ntypedef basic_ifstream<char>         ifstream;\ntypedef basic_ofstream<char>         ofstream;\ntypedef basic_fstream<char>          fstream;\n\ntypedef basic_streambuf<wchar_t>     wstreambuf;\ntypedef basic_istream<wchar_t>       wistream;\ntypedef basic_ostream<wchar_t>       wostream;\ntypedef basic_iostream<wchar_t>      wiostream;\n\ntypedef basic_stringbuf<wchar_t>     wstringbuf;\ntypedef basic_istringstream<wchar_t> wistringstream;\ntypedef basic_ostringstream<wchar_t> wostringstream;\ntypedef basic_stringstream<wchar_t>  wstringstream;\n\ntypedef basic_filebuf<wchar_t>       wfilebuf;\ntypedef basic_ifstream<wchar_t>      wifstream;\ntypedef basic_ofstream<wchar_t>      wofstream;\ntypedef basic_fstream<wchar_t>       wfstream;\n\ntemplate <class _State>             class _LIBCPP_TEMPLATE_VIS fpos;\ntypedef fpos<mbstate_t>    streampos;\ntypedef fpos<mbstate_t>    wstreampos;\n#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS\ntypedef fpos<mbstate_t>    u16streampos;\ntypedef fpos<mbstate_t>    u32streampos;\n#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS\n\n#if defined(_NEWLIB_VERSION)\n// On newlib, off_t is 'long int'\ntypedef long int streamoff;         // for char_traits in <string>\n#else\ntypedef long long streamoff;        // for char_traits in <string>\n#endif\n\ntemplate <class _CharT,             // for <stdexcept>\n          class _Traits = char_traits<_CharT>,\n          class _Allocator = allocator<_CharT> >\n    class _LIBCPP_TEMPLATE_VIS basic_string;\ntypedef basic_string<char, char_traits<char>, allocator<char> > string;\ntypedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstring;\n\n\n// Include other forward declarations here\ntemplate <class _Tp, class _Alloc = allocator<_Tp> >\nclass _LIBCPP_TEMPLATE_VIS vector;\n\n_LIBCPP_END_NAMESPACE_STD\n\n#endif  // _LIBCPP_IOSFWD\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2017\n *\n *  @file  AvidaCPU_InstLib.h\n *  @brief A specialized version of InstLib to handle AvidaCPU Instructions.\n */\n\n#ifndef EMP_AVIDA_CPU_INST_LIB_H\n#define EMP_AVIDA_CPU_INST_LIB_H\n\n#include \"../tools/math.h\"\n\n#include \"InstLib.h\"\n\nnamespace emp {\n\n  /// AvidaCPU_InstLib is a pure-virtual class that defines a series of instructions that\n  /// can be used with AvidaCPU_Base or any of its derived classes.\n\n  template <typename HARDWARE_T, typename ARG_T=size_t, size_t ARG_COUNT=3>\n  struct AvidaCPU_InstLib : public InstLib<HARDWARE_T, ARG_T, ARG_COUNT> {\n    using hardware_t = HARDWARE_T;\n    using arg_t = ARG_T;\n    using this_t = AvidaCPU_InstLib<HARDWARE_T, ARG_T, ARG_COUNT>;\n    using inst_t = typename hardware_t::inst_t;\n\n    static constexpr size_t arg_count = ARG_COUNT;\n\n    // Instructions\n\n    // One-input math\n    static void Inst_Inc(hardware_t & hw, const inst_t & inst) { ++hw.regs[inst.args[0]]; }\n    static void Inst_Dec(hardware_t & hw, const inst_t & inst) { --hw.regs[inst.args[0]]; }\n\n    // Two-input math\n    static void Inst_Not(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[0]] = (hw.regs[inst.args[0]] == 0.0);\n    }\n    static void Inst_SetReg(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[0]] = (double) inst.args[1];\n    }\n    static void Inst_Add(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[2]] = hw.regs[inst.args[0]] + hw.regs[inst.args[1]];\n    }\n    static void Inst_Sub(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[2]] = hw.regs[inst.args[0]] - hw.regs[inst.args[1]];\n    }\n    static void Inst_Mult(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[2]] = hw.regs[inst.args[0]] * hw.regs[inst.args[1]];\n    }\n\n    static void Inst_Div(hardware_t & hw, const inst_t & inst) {\n      const double denom = hw.regs[inst.args[1]];\n      if (denom == 0.0) ++hw.errors;\n      else hw.regs[inst.args[2]] = hw.regs[inst.args[0]] / denom;\n    }\n\n    static void Inst_Mod(hardware_t & hw, const inst_t & inst) {\n      const double base = hw.regs[inst.args[1]];\n      if (base == 0.0) ++hw.errors;\n      else hw.regs[inst.args[2]] = emp::Mod( hw.regs[inst.args[0]], base);\n    }\n\n    // Comparisons\n    static void Inst_TestEqu(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[2]] = (hw.regs[inst.args[0]] == hw.regs[inst.args[1]]);\n    }\n    static void Inst_TestNEqu(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[2]] = (hw.regs[inst.args[0]] != hw.regs[inst.args[1]]);\n    }\n    static void Inst_TestLess(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[2]] = (hw.regs[inst.args[0]] < hw.regs[inst.args[1]]);\n    }\n\n    // Others...\n    static void Inst_If(hardware_t & hw, const inst_t & inst) { // args[0] = test, args[1] = scope\n      if (hw.UpdateScope(inst.args[1]) == false) return;      // If previous scope is unfinished, stop!\n      if (hw.regs[inst.args[0]] == 0.0) hw.BypassScope(inst.args[1]); // If test fails, move to scope end.\n    }\n\n    static void Inst_While(hardware_t & hw, const inst_t & inst) {\n      // UpdateScope returns false if previous scope isn't finished (e.g., while needs to loop)\n      if (hw.UpdateScope(inst.args[1], ScopeType::LOOP) == false) return;\n      if (hw.regs[inst.args[0]] == 0.0) hw.BypassScope(inst.args[1]); // If test fails, move to scope end.\n    }\n\n    static void Inst_Countdown(hardware_t & hw, const inst_t & inst) {  // Same as while, but auto-decriments test each loop.\n      // UpdateScope returns false if previous scope isn't finished (e.g., while needs to loop)\n      if (hw.UpdateScope(inst.args[1], ScopeType::LOOP) == false) return;\n      if (hw.regs[inst.args[0]] == 0.0) hw.BypassScope(inst.args[1]);   // If test fails, move to scope end.\n      else hw.regs[inst.args[0]]--;\n    }\n\n    static void Inst_Break(hardware_t & hw, const inst_t & inst) { hw.BypassScope(inst.args[0]); }\n    static void Inst_Scope(hardware_t & hw, const inst_t & inst) { hw.UpdateScope(inst.args[0]); }\n\n    static void Inst_Define(hardware_t & hw, const inst_t & inst) {\n      if (hw.UpdateScope(inst.args[1]) == false) return; // Update which scope we are in.\n      hw.fun_starts[inst.args[0]] = (int) hw.inst_ptr;     // Record where function should be exectuted.\n      hw.BypassScope(inst.args[1]);                     // Skip over the function definition for now.\n    }\n\n    static void Inst_Call(hardware_t & hw, const inst_t & inst) {\n      // Make sure function exists and is still in place.\n      size_t def_pos = (size_t) hw.fun_starts[inst.args[0]];\n      if (def_pos >= hw.genome.sequence.size()\n          || hw.GetScopeType(hw.genome.sequence[def_pos].id) != ScopeType::FUNCTION) return;\n\n      // Go back into the function's original scope (call is in that scope)\n      size_t fun_scope = hw.genome.sequence[def_pos].args[1];\n      if (hw.UpdateScope(fun_scope, ScopeType::FUNCTION) == false) return;\n      hw.call_stack.push_back(hw.inst_ptr+1);        // Back up the call position\n      hw.inst_ptr = def_pos+1;                       // Jump to the function body (will adavance)\n    }\n\n    static void Inst_Push(hardware_t & hw, const inst_t & inst) {\n      hw.PushStack(inst.args[1], hw.regs[inst.args[0]]);\n    }\n    static void Inst_Pop(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[1]] = hw.PopStack(inst.args[0]);\n    }\n\n    static void Inst_Input(hardware_t & hw, const inst_t & inst) {\n      // Determine the input ID and grab it if it exists; if not, return 0.0\n      int input_id = (int) hw.regs[ inst.args[0] ];\n      hw.regs[inst.args[1]] = Find(hw.inputs, input_id, 0.0);\n    }\n\n    static void Inst_Output(hardware_t & hw, const inst_t & inst) {\n      // Save the date in the target reg to the specified output position.\n      int output_id = (int) hw.regs[ inst.args[1] ];  // Grab ID from register.\n      hw.outputs[output_id] = hw.regs[inst.args[0]];     // Copy target reg to appropriate output.\n    }\n\n    static void Inst_CopyVal(hardware_t & hw, const inst_t & inst) {\n      hw.regs[inst.args[1]] = hw.regs[inst.args[0]];\n    }\n\n    static void Inst_ScopeReg(hardware_t & hw, const inst_t & inst) {\n      hw.reg_stack.emplace_back(hw.CurScope(), inst.args[0], hw.regs[inst.args[0]]);\n    }\n\n    static const this_t & DefaultInstLib() {\n      static this_t inst_lib;\n\n      if (inst_lib.GetSize() == 0) {\n        inst_lib.AddInst(\"Inc\", Inst_Inc, 1, \"Increment value in reg Arg1\");\n        inst_lib.AddInst(\"Dec\", Inst_Dec, 1, \"Decrement value in reg Arg1\");\n        inst_lib.AddInst(\"Not\", Inst_Not, 1, \"Logically toggle value in reg Arg1\");\n        inst_lib.AddInst(\"SetReg\", Inst_SetReg, 2, \"Set reg Arg1 to numerical value Arg2\");\n        inst_lib.AddInst(\"Add\", Inst_Add, 3, \"regs: Arg3 = Arg1 + Arg2\");\n        inst_lib.AddInst(\"Sub\", Inst_Sub, 3, \"regs: Arg3 = Arg1 - Arg2\");\n        inst_lib.AddInst(\"Mult\", Inst_Mult, 3, \"regs: Arg3 = Arg1 * Arg2\");\n        inst_lib.AddInst(\"Div\", Inst_Div, 3, \"regs: Arg3 = Arg1 / Arg2\");\n        inst_lib.AddInst(\"Mod\", Inst_Mod, 3, \"regs: Arg3 = Arg1 % Arg2\");\n        inst_lib.AddInst(\"TestEqu\", Inst_TestEqu, 3, \"regs: Arg3 = (Arg1 == Arg2)\");\n        inst_lib.AddInst(\"TestNEqu\", Inst_TestNEqu, 3, \"regs: Arg3 = (Arg1 != Arg2)\");\n        inst_lib.AddInst(\"TestLess\", Inst_TestLess, 3, \"regs: Arg3 = (Arg1 < Arg2)\");\n        inst_lib.AddInst(\"If\", Inst_If, 2, \"If reg Arg1 != 0, scope -> Arg2; else skip scope\", ScopeType::BASIC, 1);\n        inst_lib.AddInst(\"While\", Inst_While, 2, \"Until reg Arg1 != 0, repeat scope Arg2; else skip\", ScopeType::LOOP, 1);\n        inst_lib.AddInst(\"Countdown\", Inst_Countdown, 2, \"Countdown reg Arg1 to zero; scope to Arg2\", ScopeType::LOOP, 1);\n        inst_lib.AddInst(\"Break\", Inst_Break, 1, \"Break out of scope Arg1\");\n        inst_lib.AddInst(\"Scope\", Inst_Scope, 1, \"Enter scope Arg1\", ScopeType::BASIC, 0);\n        inst_lib.AddInst(\"Define\", Inst_Define, 2, \"Build function Arg1 in scope Arg2\", ScopeType::FUNCTION, 1);\n        inst_lib.AddInst(\"Call\", Inst_Call, 1, \"Call previously defined function Arg1\");\n        inst_lib.AddInst(\"Push\", Inst_Push, 2, \"Push reg Arg1 onto stack Arg2\");\n        inst_lib.AddInst(\"Pop\", Inst_Pop, 2, \"Pop stack Arg1 into reg Arg2\");\n        inst_lib.AddInst(\"Input\", Inst_Input, 2, \"Pull next value from input Arg1 into reg Arg2\");\n        inst_lib.AddInst(\"Output\", Inst_Output, 2, \"Push reg Arg1 into output Arg2\");\n        inst_lib.AddInst(\"CopyVal\", Inst_CopyVal, 2, \"Copy reg Arg1 into reg Arg2\");\n        inst_lib.AddInst(\"ScopeReg\", Inst_ScopeReg, 1, \"Backup reg Arg1; restore at end of scope\");\n\n        for (size_t i = 0; i < hardware_t::CPU_SIZE; i++) {\n          inst_lib.AddArg(to_string((int)i), i);                   // Args can be called by value\n          inst_lib.AddArg(to_string(\"Reg\", 'A'+(char)i), i);  // ...or as a register.\n        }\n      }\n\n      return inst_lib;\n    }\n  };\n\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  events.h\n *  @brief Event handlers that use JQuery.\n *\n *  @todo Events can be further sub-divided and built up (similar to DataNode objects) so that we\n *    save only the information that we're planning to use.  This may be slightly faster (given\n *    how frequently some of these like mouse move might be used), but likely to be more compelx.\n *  @todo An alternative speed-up might be to save the current event somewhere in emp_i on the\n *    Javascript side, and then just request the information that we might need.  This approach\n *    should be easier to implement, but since everything would be copied anyway in such as case,\n *    it might not actually be a speedup.\n */\n\n#ifndef EMP_WEB_EVENTS_H\n#define EMP_WEB_EVENTS_H\n\n#include <utility>\n\n#include \"JSWrap.h\"\n\nnamespace emp {\nnamespace web {\n\n  /// Runs the specified function when the document is finished loading and being set up.\n  template <typename FUN_TYPE> void OnDocumentReady(FUN_TYPE && fun) {\n    // const size_t fun_id = JSWrapOnce(fun);\n    const size_t fun_id = JSWrap(std::forward<FUN_TYPE>(fun), \"\", true);\n    (void) fun_id;\n\n    EM_ASM_ARGS({  $( document ).ready(function() { emp.Callback($0); });  }, fun_id);\n  }\n\n  /// Data common to all web events.\n  struct Event {\n    bool bubbles;           ///< Is this a bubbling event?\n    bool cancelable;        ///< Can the default action be prevented?\n    // bool defaultPrevented;  // Has the default action already been prevented?\n    // int currentTarget;   // Element whose event listeners triggered this event\n    // int eventPhase;      // 0=none, 1=capturing, 2=at target, 3=bubbling\n    // bool isTrusted;\n    // int target;          // Which element triggered this event?\n    // int timeStamp;       // When was event created?\n    // std::string type;    // E.g., \"mousedown\"\n    // int view;            // Which window did event occur in?\n\n    // void preventDefault() { ; }\n    // void stopImmediatePropagation() { ; }   // Prevents other listeners from being called.\n    // void stopPropagation() { ; }\n\n    template <int ARG_ID>\n    void LoadFromArg() {\n      bubbles = EM_ASM_INT({ return emp_i.cb_args[$0].bubbles; }, ARG_ID);\n      cancelable = EM_ASM_INT({ return emp_i.cb_args[$0].cancelable; }, ARG_ID);\n    }\n  };\n\n  /// Mouse-specific information about web events.\n  struct MouseEvent : public Event {\n    // All values reflect the state of devices when the event was triggered.\n    bool altKey;     ///< Was \"ALT\" key was pressed?\n    bool ctrlKey;    ///< Was \"CTRL\" key pressed?\n    bool metaKey;    ///< Was \"META\" key pressed?\n    bool shiftKey;   ///< Was \"SHIFT\" key pressed?\n\n    int button;      ///< Which mouse button was pressed?  -1=none  (0/1/2)\n    int detail;      ///< How many clicks happened in short succession?\n\n    int clientX;     ///< X-mouse postion, relative to current window\n    int clientY;     ///< Y-mouse postion, relative to current window\n    int screenX;     ///< X-mouse position, relative to the screen\n    int screenY;     ///< Y-mouse position, relative to the screen\n    // int buttons;     ///< Which mouse buttons were pressed? Sum: (1/4/2) (Special: 8,16)\n    // int relatedTarget    ///< Element related to the element that triggered the mouse event\n    // int which     ///< Which mouse button was pressed?  0=none  (1/2/3)\n\n    template <int ARG_ID>\n    void LoadFromArg() {\n      Event::LoadFromArg<ARG_ID>();\n\n      altKey = EM_ASM_INT({ return emp_i.cb_args[$0].altKey; }, ARG_ID);\n      ctrlKey = EM_ASM_INT({ return emp_i.cb_args[$0].ctrlKey; }, ARG_ID);\n      metaKey = EM_ASM_INT({ return emp_i.cb_args[$0].metaKey; }, ARG_ID);\n      shiftKey = EM_ASM_INT({ return emp_i.cb_args[$0].shiftKey; }, ARG_ID);\n      button = EM_ASM_INT({ return emp_i.cb_args[$0].button; }, ARG_ID);\n      detail = EM_ASM_INT({ return emp_i.cb_args[$0].detail; }, ARG_ID);\n      clientX = EM_ASM_INT({ return emp_i.cb_args[$0].clientX; }, ARG_ID);\n      clientY = EM_ASM_INT({ return emp_i.cb_args[$0].clientY; }, ARG_ID);\n      screenX = EM_ASM_INT({ return emp_i.cb_args[$0].screenX; }, ARG_ID);\n      screenY = EM_ASM_INT({ return emp_i.cb_args[$0].screenY; }, ARG_ID);\n    }\n  };\n\n\n  /// Keyboard-specific information about web events.\n  struct KeyboardEvent : public Event {\n    // All values reflect the state of devices when the event was triggered.\n    bool altKey;     ///< Was \"ALT\" key was pressed?\n    bool ctrlKey;    ///< Was \"CTRL\" key pressed?\n    bool metaKey;    ///< Was \"META\" key pressed?\n    bool shiftKey;   ///< Was \"SHIFT\" key pressed?\n\n    int charCode;    ///< Unicode character pressed\n    int keyCode;     ///< Which key was pressed on the keyboard (e.g., 'a' and 'A' are the same)\n\n    template <int ARG_ID>\n    void LoadFromArg() {\n      Event::LoadFromArg<ARG_ID>();\n\n      altKey = EM_ASM_INT({ return emp_i.cb_args[$0].altKey; }, ARG_ID);\n      ctrlKey = EM_ASM_INT({ return emp_i.cb_args[$0].ctrlKey; }, ARG_ID);\n      metaKey = EM_ASM_INT({ return emp_i.cb_args[$0].metaKey; }, ARG_ID);\n      shiftKey = EM_ASM_INT({ return emp_i.cb_args[$0].shiftKey; }, ARG_ID);\n      charCode = EM_ASM_INT({ return emp_i.cb_args[$0].charCode; }, ARG_ID);\n      keyCode = EM_ASM_INT({ return emp_i.cb_args[$0].keyCode; }, ARG_ID);\n    }\n  };\n\n\n  /// Mouse-wheel-specific information about web events.\n  struct WheelEvent : public Event {\n    // All values reflect the state of devices when the event was triggered.\n    int deltaX;      ///< Horizontal scroll amount.\n    int deltaY;      ///< Vertical scroll amount.\n    int deltaZ;      ///< Scroll amount of a mouse wheel for the z-axis\n    int deltaMode;   ///< The unit of measurements for delta values (pixels, lines or pages)\n\n    template <int ARG_ID>\n    void LoadFromArg() {\n      Event::LoadFromArg<ARG_ID>();\n\n      deltaX = EM_ASM_INT({ return emp_i.cb_args[$0].deltaX; }, ARG_ID);\n      deltaY = EM_ASM_INT({ return emp_i.cb_args[$0].deltaY; }, ARG_ID);\n      deltaZ = EM_ASM_INT({ return emp_i.cb_args[$0].deltaZ; }, ARG_ID);\n      deltaMode = EM_ASM_INT({ return emp_i.cb_args[$0].deltaMode; }, ARG_ID);\n    }\n  };\n}\n}\n\n#endif\n","/**\n *  @note This file is part of Empirical, https://github.com/devosoft/Empirical\n *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md\n *  @date 2015-2017\n *\n *  @file  color_map.h\n *  @brief Tools to dynamically build (and cache) color maps.\n */\n\n#ifndef EMP_COLOR_MAP_H\n#define EMP_COLOR_MAP_H\n\n#include <iomanip>\n#include <map>\n#include <string>\n#include <tuple>\n\n#include \"../base/vector.h\"\n#include \"../tools/string_utils.h\"\n\nnamespace emp {\n\n  namespace {\n    using dHueMapKey = std::tuple<int, double, double, int, int>;\n    using dHueMap = std::map<dHueMapKey, emp::vector<std::string> >;\n\n    dHueMap hue_maps;\n  }\n\n  /// Generate a string to describe a JS color out of HSL values.\n  std::string ColorHSL(double h, double s, double l) {\n    emp_assert(h >= 0 && h <= 360);\n    emp_assert(s >= 0 && s <= 100);\n    emp_assert(l >= 0 && l <= 100);\n    std::stringstream ss;\n    ss << \"hsl(\" <<  h << ',' << s << \"%,\" <<  l << \"%)\";\n    return ss.str();\n  }\n\n  /// Generate a string to describe a JS color out of RGB values.\n  std::string ColorRGB(int r, int g, int b) {\n    emp_assert(r >= 0 && r < 255);\n    emp_assert(g >= 0 && g < 255);\n    emp_assert(b >= 0 && b < 255);\n    std::stringstream ss;\n    ss << '#' << std::setw(2) << std::setfill('0') << std::hex << r\n       << std::setw(2) << std::setfill('0') << std::hex << g\n       << std::setw(2) << std::setfill('0') << std::hex << b;\n    return ss.str();\n  }\n\n  /// Generate a string to describe a JS color with an alpha channel.\n  std::string ColorRGB(int r, int g, int b, double a) {\n    emp_assert(r >= 0 && r < 255);\n    emp_assert(g >= 0 && g < 255);\n    emp_assert(b >= 0 && b < 255);\n    std::stringstream ss;\n    ss << \"rgba(\" << r << ',' << g << ',' << b << ',' << a << ')';\n    return ss.str();\n  }\n\n  /// Generate a vector of color strings with a specified range of hues, and fixed satuation and\n  /// luminosity,\n  const emp::vector<std::string> &\n  GetHueMap(size_t map_size, double min_h=0.0, double max_h=360.0, int s=100, int l=50) {\n    dHueMapKey map_key = std::make_tuple(map_size, min_h, max_h, s, l);\n\n    // Grab the current map out of the cache.\n    emp::vector<std::string> & cur_map = hue_maps[map_key];\n\n    // If we've already asked for an identical map before, skip map generation!\n    if (cur_map.size() != (std::size_t) map_size) {\n\n      // Otherwise generate this map...\n      cur_map.resize(map_size);\n      double step_size = (max_h - min_h) / (double) map_size;\n      for (size_t i = 0; i < map_size; ++i) {\n        double h = min_h + step_size * i;\n        cur_map[i] = ColorHSL(h, s, l);\n      }\n    }\n\n    return cur_map;\n  }\n\n  /// Generate a vector of color strings providing ranges of all of hue, satuation and luminosity.\n  emp::vector<std::string>\n  GetHSLMap(size_t map_size, double min_h=0.0, double max_h=360.0,\n            int min_s=100, int max_s=100,\n            int min_l=50, int max_l=50) {\n\n    // @CAO: Should cache maps!\n    emp::vector<std::string> cur_map(map_size);\n    double h_step = (max_h - min_h) / (double) map_size;\n    double s_step = (max_s - min_s) / (double) map_size;\n    double l_step = (max_l - min_l) / (double) map_size;\n    for (size_t i = 0; i < map_size; ++i) {\n      double h = min_h + h_step * i;\n      double s = min_s + s_step * i;\n      double l = min_l + l_step * i;\n      if (h > 360) h -= 360;\n      if (s > 100) s -= 100;\n      if (l > 100) l -= 100;\n      cur_map[i] = ColorHSL(h, s, l);\n    }\n\n    return cur_map;\n  }\n\n\n}\n\n\n#endif\n"]}